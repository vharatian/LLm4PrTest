/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 09:01:09 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (byte)6;
      long[] longArray1 = ArrayUtils.add(longArray0, 2048L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 6L}, longArray0);
      assertArrayEquals(new long[] {0L, 6L, 2048L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = 'M';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'', 'M'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)6);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)6}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = 'S';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'', 'S'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(characterArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)84;
      shortArray0[1] = (short)3108;
      shortArray0[2] = (short) (-364);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1756;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1756);
      assertArrayEquals(new short[] {(short)84, (short)3108, (short) (-364), (short)0, (short)1756}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      double[] doubleArray2 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1603.2407F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertArrayEquals(new float[] {1603.2407F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1588);
      shortArray0[1] = (short)108;
      ArrayUtils.swap(shortArray0, 2, (int) (short)108, (int) (short)108);
      assertArrayEquals(new short[] {(short) (-1588), (short)108}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character(',');
      assertNotNull(character0);
      assertEquals(',', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('p');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('p', (char)character1);
      
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '*');
      assertArrayEquals(new char[] {',', 'p', ','}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray0);
      
      Character[] characterArray1 = ArrayUtils.toObject(charArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertArrayEquals(new char[] {',', 'p', ','}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray1.length);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap((long[]) null, 1336, (int) character0, (-1063));
      assertFalse(character0.equals((Object)character1));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1063);
      doubleArray0[1] = (double) (char)character0;
      ArrayUtils.swap(doubleArray0, 2, 2, 1103);
      assertArrayEquals(new double[] {(-1063.0), 44.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      floatArray0[1] = 1650.901F;
      floatArray0[2] = 1702.5199F;
      floatArray0[3] = (float) (char)character0;
      floatArray0[4] = (float) (char)character0;
      floatArray0[5] = (float) (char)character0;
      floatArray0[6] = (float) 2;
      floatArray0[7] = 1808.8931F;
      ArrayUtils.swap(floatArray0, 1103, 1, 0);
      assertArrayEquals(new float[] {2.0F, 1650.901F, 1702.5199F, 44.0F, 44.0F, 44.0F, 2.0F, 1808.8931F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 44.0F, 49, 1068.9818110207664);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertArrayEquals(new double[] {(-1063.0), 44.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5681.569292680981;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (-1330.1566);
      doubleArray0[3] = (-3075.174559299704);
      doubleArray0[4] = (-414.827323);
      doubleArray0[5] = (-1134.4657822172228);
      doubleArray0[6] = 42.43086279029616;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-414.827323), (-454), 100.0);
      assertArrayEquals(new double[] {5681.569292680981, 1.5, (-1330.1566), (-3075.174559299704), (-414.827323), (-1134.4657822172228), 42.43086279029616}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(4, int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = 'e';
      charArray0[2] = '>';
      charArray0[3] = '+';
      charArray0[4] = '&';
      charArray0[5] = 'd';
      charArray0[6] = ']';
      charArray0[7] = '<';
      charArray0[8] = 'X';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'd');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'d', '3', 'e', '>', '+', '&', 'd', ']', '<', 'X'}, charArray1);
      assertArrayEquals(new char[] {'3', 'e', '>', '+', '&', 'd', ']', '<', 'X'}, charArray0);
      assertEquals(10, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 8192;
      intArray0[1] = 52;
      intArray0[2] = 52;
      intArray0[3] = (-1764);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {8192, 52, 52, (-1764)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new int[] {8192, 52, 52, (-1764)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '?';
      charArray0[1] = '9';
      charArray0[2] = 'f';
      charArray0[3] = '1';
      charArray0[4] = '[';
      charArray0[5] = 'J';
      charArray0[6] = '\\';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'?', '9', 'f', '1', '[', 'J', '\\'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(7, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1.0));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(2683.688);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(2683.688F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(0.7);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.7F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-854.567));
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((-854.567F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float(0.7);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals(0.7F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((double) (-1764));
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((-1764.0F), (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1872.6378F));
      assertArrayEquals(new float[] {0.0F, (-1.0F), 2683.688F, 0.7F, (-854.567F), 0.7F, (-1764.0F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short)3462;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)3462}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)3462;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "hWm}Kk[;N6c[3.?S`");
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Object[] objectArray1 = new Object[8];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (short)3462;
      objectArray1[1] = (Object) "hWm}Kk[;N6c[3.?S`";
      objectArray1[2] = (Object) (short)3462;
      objectArray1[3] = (Object) "hWm}Kk[;N6c[3.?S`";
      objectArray1[4] = (Object) (short)3462;
      objectArray1[5] = (Object) "hWm}Kk[;N6c[3.?S`";
      objectArray1[6] = (Object) (short)3462;
      objectArray1[7] = (Object) (short)3462;
      int int0 = ArrayUtils.indexOf(objectArray1, objectArray1[7], (int) (short)7);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(8, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'f', 1);
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)2, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)1);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte)1, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)2);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertEquals((byte)2, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte0);
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)1);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertEquals((byte)1, (byte)byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte(byte0);
      assertNotNull(byte8);
      assertTrue(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte4));
      assertTrue(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte2));
      assertTrue(byte8.equals((Object)byte1));
      assertEquals((byte)2, (byte)byte8);
      
      byteArray0[7] = byte8;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)1, (byte)2, (byte)2, (byte)1, (byte)2}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      Character[] characterArray0 = new Character[20];
      ArrayUtils.shift((Object[]) characterArray0, (-1522), 115, 22);
      assertEquals(20, characterArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)111;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)80, (byte) (-91), (byte)57, (byte) (-124), (byte)10, (byte)111}, byteArray0);
      assertArrayEquals(new byte[] {(byte)80, (byte) (-91), (byte)57, (byte) (-124), (byte)10, (byte)111}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 115);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2407);
      shortArray0[1] = (short)3898;
      shortArray0[2] = (short) (-1054);
      shortArray0[3] = (short) (-1012);
      shortArray0[4] = (short)96;
      shortArray0[5] = (short) (-1577);
      shortArray0[6] = (short) (-1059);
      shortArray0[7] = (short)3;
      ArrayUtils.swap(shortArray0, (-4238), (int) (short)3, (-2214));
      assertArrayEquals(new short[] {(short) (-2407), (short)3898, (short) (-1054), (short) (-1012), (short)96, (short) (-1577), (short) (-1059), (short)3}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2805.70480533;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = (-964.0);
      doubleArray0[3] = 100.0;
      doubleArray0[4] = Double.NaN;
      int int0 = ArrayUtils.indexOf(doubleArray0, 100.0, 1169.8441853723);
      assertArrayEquals(new double[] {2805.70480533, 3.0, (-964.0), 100.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, int0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, 1, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray2));
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)89;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)3, (int) (byte) (-117));
      assertArrayEquals(new byte[] {(byte)3, (byte) (-117), (byte)110, (byte)89}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)3;
      doubleArray0[1] = (double) (byte) (-117);
      doubleArray0[2] = 100.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0), (double) 0);
      assertArrayEquals(new double[] {3.0, (-117.0), 100.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-117);
      shortArray0[1] = (short) (byte)89;
      shortArray0[2] = (short) (byte)3;
      shortArray0[3] = (short) (byte)3;
      shortArray0[4] = (short) (byte)110;
      shortArray0[5] = (short) (byte) (-117);
      shortArray0[6] = (short) (byte) (-117);
      shortArray0[7] = (short) (byte)3;
      int[] intArray0 = new int[0];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short) (-117), (short)89, (short)3, (short)3, (short)110, (short) (-117), (short) (-117), (short)3}, shortArray1);
      assertArrayEquals(new short[] {(short) (-117), (short)89, (short)3, (short)3, (short)110, (short) (-117), (short) (-117), (short)3}, shortArray0);
      assertEquals(0, intArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = Integer.getInteger("4%FgDp'", (int) (short)89);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(89, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short)110);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(110, (int)integer1);
      
      integerArray0[1] = integer1;
      MutableInt mutableInt0 = new MutableInt((-628));
      assertEquals((-628.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-628", mutableInt0.toString());
      assertEquals((-628.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-628), (int)mutableInt0.toInteger());
      assertEquals((-628L), mutableInt0.longValue());
      assertEquals((-628), (int)mutableInt0.getValue());
      assertEquals((byte) (-116), mutableInt0.byteValue());
      assertEquals((short) (-628), mutableInt0.shortValue());
      assertEquals((-628), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Integer integer2 = mutableInt0.toInteger();
      assertEquals((-628.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-628", mutableInt0.toString());
      assertEquals((-628.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-628), (int)mutableInt0.toInteger());
      assertEquals((-628L), mutableInt0.longValue());
      assertEquals((-628), (int)mutableInt0.getValue());
      assertEquals((byte) (-116), mutableInt0.byteValue());
      assertEquals((short) (-628), mutableInt0.shortValue());
      assertEquals((-628), mutableInt0.intValue());
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-628), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      Byte byte0 = new Byte((byte) (-8));
      assertNotNull(byte0);
      assertEquals((byte) (-8), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-8));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-8), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-8));
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-8), (byte)byte2);
      
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, byte2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte byte3 = ArrayUtils.get(byteArray0, 1675);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray0.length);
      assertNull(byte3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      String string0 = ArrayUtils.toString((Object) null, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-8);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, byteArray2, byteArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1785.821520229644), 899.538);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2145820221;
      intArray0[1] = (-1686);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2145820221, (-1686)}, intArray0);
      assertArrayEquals(new int[] {2145820221, (-1686)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)6;
      byteArray1[1] = (byte)6;
      byteArray1[2] = (byte)6;
      byteArray1[3] = (byte)6;
      byteArray1[4] = (byte)6;
      byteArray1[5] = (byte)6;
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)6;
      byteArray2[1] = (byte)6;
      byteArray2[2] = (byte)6;
      byteArray2[3] = (byte)6;
      byteArray2[4] = (byte) (-56);
      byteArray2[5] = (byte)6;
      byteArray2[6] = (byte)6;
      byteArray2[7] = (byte)6;
      byteArray2[8] = (byte)6;
      byte[] byteArray3 = ArrayUtils.insert((int) (byte)6, byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6}, byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)6, (byte)6, (byte) (-56), (byte)6, (byte)6, (byte)6, (byte)6}, byteArray2);
      assertEquals(6, byteArray1.length);
      assertEquals(15, byteArray3.length);
      assertEquals(9, byteArray2.length);
      assertNotNull(byteArray3);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Short short0 = new Short((byte)6);
      assertNotNull(short0);
      assertEquals((short)6, (short)short0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-56);
      longArray0[1] = (long) (byte)6;
      longArray0[2] = (long) (byte)6;
      ArrayUtils.shift(longArray0, 7, (-447), (int) (byte)6);
      assertArrayEquals(new long[] {(-56L), 6L, 6L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-32));
      assertNotNull(byte0);
      assertEquals((byte) (-32), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-32));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-32), (byte)byte1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-32);
      floatArray0[1] = (float) (byte) (-32);
      floatArray0[2] = (float) (byte) (-32);
      floatArray0[4] = (float) (byte) (-32);
      floatArray0[5] = (float) (byte) (-32);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-32.0F), 6);
      assertArrayEquals(new float[] {(-32.0F), (-32.0F), (-32.0F), 0.0F, (-32.0F), (-32.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, int0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-32.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-32.0F), (-32.0F), (-32.0F), 0.0F, (-32.0F), (-32.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-32.0F), (-32.0F), 0.0F, (-32.0F), (-32.0F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)722;
      shortArray0[1] = (short) (-9295);
      shortArray0[2] = (short) (-4757);
      shortArray0[3] = (short)35;
      shortArray0[4] = (short)2880;
      shortArray0[5] = (short)4037;
      shortArray0[6] = (short)1448;
      shortArray0[7] = (short)3244;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)722, (short) (-9295), (short) (-4757), (short)35, (short)2880, (short)4037, (short)1448, (short)3244}, shortArray0);
      assertArrayEquals(new short[] {(short)722, (short) (-9295), (short) (-4757), (short)35, (short)2880, (short)4037, (short)1448, (short)3244}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (int) (short) (-9295), (int) (short)722, 115);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)13037;
      shortArray0[1] = (short)820;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(11, shortArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)13037;
      doubleArray0[1] = (double) (short)820;
      doubleArray0[2] = 1278.8409;
      doubleArray0[3] = (double) (short)13037;
      doubleArray0[4] = (double) (short)13037;
      doubleArray0[5] = (double) (short)13037;
      doubleArray0[6] = (double) (short)0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {13037.0, 820.0, 1278.8409, 13037.0, 13037.0, 13037.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)13037;
      longArray0[1] = (long) (short)820;
      longArray0[2] = (long) (short)820;
      longArray0[3] = (long) (short)820;
      longArray0[4] = (long) (short)820;
      long[] longArray1 = ArrayUtils.remove(longArray0, 1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {13037L, 820L, 820L, 820L}, longArray1);
      assertArrayEquals(new long[] {13037L, 820L, 820L, 820L, 820L}, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((byte)80);
      assertNotNull(mockRandom0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 7, 0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)80;
      shortArray0[1] = (short) (byte)80;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short)80, (short)963);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 80, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.removeAll(longArray1, intArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(5, intArray0.length);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0, "");
      assertEquals(1, longArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-17);
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte) (-1), (byte) (-93), (byte) (-17)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-93), (byte) (-17)}, byteArray1);
      assertEquals(5, intArray0.length);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)61;
      Byte[] byteArray2 = new Byte[8];
      Byte byte0 = new Byte((byte) (-128));
      assertNotNull(byte0);
      assertEquals((byte) (-128), (byte)byte0);
      
      byteArray2[0] = byte0;
      byteArray2[1] = (Byte) (byte) (-93);
      byteArray2[2] = (Byte) (byte)61;
      byteArray2[3] = (Byte) (byte) (-1);
      byteArray2[4] = (Byte) (byte) (-1);
      byteArray2[5] = (Byte) (byte)61;
      byteArray2[6] = (Byte) (byte) (-1);
      byteArray2[7] = (Byte) (byte) (-17);
      Byte byte1 = ArrayUtils.get(byteArray2, 1074);
      assertEquals(8, byteArray2.length);
      assertNull(byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[1] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(2, objectArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      Character character0 = new Character('O');
      assertNotNull(character0);
      assertEquals('O', (char)character0);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      Character character1 = Character.valueOf('B');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('B', (char)character1);
      
      characterArray0[6] = character1;
      characterArray0[7] = character0;
      Character character2 = Character.valueOf('O');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('O', (char)character2);
      
      characterArray0[8] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'O', 'O', 'O', 'O', 'O', 'O', 'B', 'O', 'O'}, charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.shift(charArray0, (int) character0);
      assertArrayEquals(new char[] {'O', 'O', 'O', 'O', 'B', 'O', 'O', 'O', 'O'}, charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      assertTrue(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character1));
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (char)character0;
      floatArray0[1] = (float) 'O';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {79.0F, 79.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift((Object[]) floatArray1, (-322), 142, (-322));
      assertArrayEquals(new float[] {79.0F, 79.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'O', 'O', 'O', 'O', 'O', 'O', 'B', 'O', 'O'}, charArray1);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-88.694F);
      floatArray0[1] = Float.NaN;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, Float.NaN);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-88.694F), Float.NaN}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-88.694F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)13;
      doubleArray0[1] = (double) (byte)13;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {13.0, 13.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {13.0, 13.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {13.0, 13.0, 13.0, 13.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 13.0;
      objectArray0[1] = (Object) 13.0;
      ArrayUtils.shift(objectArray0, (-312), 9, (-1697));
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 115);
      assertArrayEquals(new int[] {115}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 115;
      longArray0[1] = (long) 115;
      longArray0[2] = (long) 115;
      longArray0[3] = (long) 115;
      longArray0[4] = (long) 115;
      longArray0[5] = (long) 115;
      longArray0[6] = 2605L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {115L, 115L, 115L, 115L, 115L, 115L, 2605L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      Short short0 = new Short((byte) (-43));
      assertNotNull(short0);
      assertEquals((short) (-43), (short)short0);
      
      long[] longArray0 = new long[8];
      ArrayUtils.shift(longArray0, (int) (byte) (-43), (int) (byte)6, (int) (byte)6);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (byte) (-43);
      longArray1[1] = (long) (byte) (-43);
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-43L), (-43L)}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray2);
      assertEquals(8, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(8, longArray2.length);
      assertNotNull(longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)97);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)6);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)6}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray2 = ArrayUtils.remove(byteArray0, 0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)6;
      intArray0[3] = (int) (byte)6;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 6, 6, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-411);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (short) (-411);
      MockRandom mockRandom0 = new MockRandom((short) (-411));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte)6;
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) (byte)122);
      assertArrayEquals(new double[] {122.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)122;
      longArray0[3] = (long) (byte)122;
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = (long) (byte) (-1);
      ArrayUtils.swap(longArray0, (int) (byte)6, (-295), (int) (byte)83);
      assertArrayEquals(new long[] {(-1L), 0L, 122L, 122L, (-1L), (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short) (-3727);
      shortArray0[2] = (short)1072;
      shortArray0[3] = (short) (-40);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)30231, 1666);
      assertArrayEquals(new short[] {(short)3, (short) (-3727), (short)1072, (short) (-40)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)1072;
      doubleArray0[1] = (double) (short) (-3727);
      doubleArray0[2] = 9.0;
      doubleArray0[3] = (double) (short) (-3727);
      doubleArray0[4] = (-1891.0);
      doubleArray0[5] = (double) (short) (-3727);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 9.0, 0, (double) (short) (-40));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {1072.0, (-3727.0), 9.0, (-3727.0), (-1891.0), (-3727.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = 'H';
      charArray0[2] = '+';
      charArray0[3] = 'H';
      charArray0[4] = '2';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'w');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'-', 'H', '+', 'H', '2'}, charArray1);
      assertArrayEquals(new char[] {'-', 'H', '+', 'H', '2'}, charArray0);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 3532.4058F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 142.4F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1061.5452F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {3532.4058F, 0.0F, 142.4F, 0.0F, 1061.5452F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-302);
      shortArray0[1] = (short)127;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-302), (short)127, (short)2, (short) (-1)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, 74);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-302), (short)127, (short)2, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-302), (short)127, (short)2, (short) (-1)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.shift(booleanArray0, 53, 1114111, 2);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 6);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'y', 6);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'*'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'*'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-411);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (short) (-411);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1920.6499F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1920.6499F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = new float[9];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-1.0F);
      floatArray2[1] = (-1920.6499F);
      floatArray2[2] = (float) (short) (-411);
      floatArray2[3] = (-1920.6499F);
      floatArray2[4] = (float) (short) (-411);
      floatArray2[5] = (float) (short) (-411);
      floatArray2[6] = (float) (short) (-411);
      floatArray2[7] = (float) (short) (-411);
      floatArray2[8] = (-1920.6499F);
      int int0 = ArrayUtils.indexOf(floatArray2, (-1.0F), (int) (short) (-411));
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1920.6499F), (-411.0F), (-1920.6499F), (-411.0F), (-411.0F), (-411.0F), (-411.0F), (-1920.6499F)}, floatArray2, 0.01F);
      assertEquals(9, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)13;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)13;
      floatArray0[1] = (float) (byte)13;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1495.5F, (-134));
      assertArrayEquals(new float[] {13.0F, 13.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(floatArray0, Float.NaN, (-3483));
      assertArrayEquals(new float[] {13.0F, 13.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)13;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)13, (byte)101, (byte)13, (byte)13, (byte)13}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      Byte byte0 = new Byte((byte)97);
      assertNotNull(byte0);
      assertEquals((byte)97, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      
      Integer integer0 = new Integer((byte)97);
      assertNotNull(integer0);
      assertEquals(97, (int)integer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (-2646), (int) (byte)0, (-2994));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-411);
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) (short) (-411);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertArrayEquals(new long[] {0L, (-411L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, (-411L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)35;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)107);
      assertArrayEquals(new byte[] {(byte)82, (byte)1, (byte) (-84), (byte) (-1), (byte)35}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean1);
      
      Byte[] byteArray1 = new Byte[6];
      byteArray1[0] = (Byte) (byte)35;
      byteArray1[1] = (Byte) (byte) (-1);
      byteArray1[2] = (Byte) (byte)35;
      byteArray1[3] = (Byte) (byte)1;
      byteArray1[4] = (Byte) (byte)35;
      byteArray1[5] = (Byte) (byte)82;
      Byte[] byteArray2 = ArrayUtils.remove(byteArray1, (int) 1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertEquals(5, byteArray2.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      Short short0 = new Short((short)63);
      assertNotNull(short0);
      assertEquals((short)63, (short)short0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ArrayUtils.swap(byteArray0, (int) (byte)1, (-2145758760), (-3370));
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, 1072);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Character character0 = new Character('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'K', 'K', 'K'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.shift(charArray0, (int) character0);
      assertArrayEquals(new char[] {'K', 'K', 'K'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1.0F);
      boolean boolean1 = ArrayUtils.contains(doubleArray2, 1865.3574, (double) character0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = (char) character0;
      charArray1[1] = (char) character0;
      charArray1[2] = (char) character0;
      char[] charArray2 = ArrayUtils.add(charArray1, 1, (char) character0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'K', 'K', 'K'}, charArray1);
      assertArrayEquals(new char[] {'K', 'K', 'K', 'K'}, charArray2);
      assertEquals(3, charArray1.length);
      assertEquals(4, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)0;
      Object object0 = ArrayUtils.get(objectArray0, 4224);
      assertEquals(4, objectArray0.length);
      assertNull(object0);
      
      objectArray0[2] = null;
      objectArray0[3] = objectArray0[0];
      Object object1 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals(4, objectArray0.length);
      assertNotNull(object1);
      assertEquals((short)0, object1);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object1, (int) (short)0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)40;
      doubleArray0[1] = (double) (byte) (-1);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {40.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(128, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'X'}, charArray1);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)40;
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte)40;
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)40, (short) (-1), (short) (-1), (short) (-1), (short)40, (short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences((double[]) null, 480.0);
      assertNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-113);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-113);
      ArrayUtils.swap(byteArray0, (int) (byte) (-113), 7, (int) (byte) (-78));
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-113), (byte) (-113), (byte)0, (byte) (-78), (byte) (-113), (byte) (-113)}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1385);
      Byte byte0 = new Byte((byte)54);
      assertNotNull(byte0);
      assertEquals((byte)54, (byte)byte0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) byte0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, objectArray0.length);
      assertNotNull(bitSet0);
      
      Byte byte1 = new Byte((byte)54);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)54, (byte)byte1);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) byte1);
      assertEquals(1, objectArray0.length);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1385);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 407.00087616, (-1.0));
      assertArrayEquals(new double[] {(-1385.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, (char[]) null);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.contains(longArray0, 315L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)6);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[0];
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)6;
      shortArray0[1] = (short) (byte)6;
      shortArray0[2] = (short) (byte)6;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) (short)6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      float[] floatArray0 = new float[3];
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) 0.0F;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)457;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)5, 3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)5, (short)457}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ArrayUtils.sort((Byte[]) null, (Comparator<? super Byte>) comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)127;
      byteArray0[8] = (byte)12;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)11);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte)90, (byte)1, (byte) (-7), (byte) (-91), (byte)38, (byte)64, (byte)127, (byte)12}, byteArray0);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-81), (byte)90, (byte)1, (byte) (-7), (byte) (-91), (byte)38, (byte)64, (byte)127, (byte)12}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte)38);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {38.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)127);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals("{7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new byte[] {(byte) (-81), (byte)90, (byte)1, (byte) (-7), (byte) (-91), (byte)38, (byte)64, (byte)127, (byte)12}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(bitSet0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Byte[] byteArray2 = new Byte[2];
      byteArray2[0] = (Byte) (byte) (-7);
      byteArray2[1] = (Byte) (byte) (-81);
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-81)}, byteArray3);
      assertEquals(2, byteArray3.length);
      assertEquals(2, byteArray2.length);
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byte[] byteArray4 = ArrayUtils.addAll(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-81), (byte)90, (byte)1, (byte) (-7), (byte) (-91), (byte)38, (byte)64, (byte)127, (byte)12}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-81)}, byteArray3);
      assertEquals(9, byteArray0.length);
      assertEquals(2, byteArray3.length);
      assertEquals(11, byteArray4.length);
      assertEquals(2, byteArray2.length);
      assertNotNull(byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Long";
      stringArray0[1] = "V[`49?\"~bnSg`O#v";
      stringArray0[2] = "^* B,";
      stringArray0[3] = "z<e";
      stringArray0[4] = ";cF8<\"G2F]~B{jVP";
      stringArray0[5] = "java.lang.Byte";
      stringArray0[6] = "off";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 2546L;
      longArray0[2] = 1L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-1L), 2546L, 1L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1L);
      ArrayUtils.swap(objectArray0, 0, (-48), 107);
      assertEquals(1, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(objectArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)50);
      assertNotNull(byte0);
      assertEquals((byte)50, (byte)byte0);
      
      Byte byte1 = new Byte((byte)80);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)80, (byte)byte1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2557.79666476044;
      doubleArray0[2] = (double) (byte)80;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 80.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 2557.79666476044, 80.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {80.0, 1.0, 2557.79666476044, 80.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2557.79666476044;
      doubleArray2[1] = 1.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1.0, 2557.79666476044, 80.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2557.79666476044, 1.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      byte byte0 = (byte)125;
      Byte byte1 = new Byte((byte)125);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)125, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)125);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)125, (byte)byte2);
      
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte[] byteArray2 = new Byte[0];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Byte[] byteArray3 = new Byte[3];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      byteArray3[0] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)125, (byte)byte3);
      
      byteArray3[1] = byte3;
      byteArray3[2] = byte2;
      Byte[] byteArray4 = ArrayUtils.addAll(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(3, byteArray3.length);
      assertEquals(3, byteArray4.length);
      assertNotNull(byteArray4);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = byte0;
      byteArray5[1] = byte0;
      byteArray5[2] = byte0;
      ArrayUtils.shift(byteArray5, (int) (byte)125, (int) (byte)125, 119);
      assertArrayEquals(new byte[] {(byte)125, (byte)125, (byte)125}, byteArray5);
      assertEquals(3, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2217);
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-116);
      Byte byte1 = new Byte((byte) (-116));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-116), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = Byte.valueOf(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-116), (byte)byte2);
      
      byteArray0[1] = byte2;
      byteArray0[2] = (Byte) byte0;
      Byte byte3 = new Byte((byte)115);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)115, (byte)byte3);
      
      byteArray0[3] = byte3;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2217), 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer((byte)115);
      assertNotNull(integer0);
      assertEquals(115, (int)integer0);
      
      ArrayUtils.reverse(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2217), 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      Byte[] byteArray1 = new Byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = byte2;
      byteArray1[1] = byte2;
      byteArray1[2] = byte2;
      byteArray1[3] = byte1;
      byteArray1[4] = byte3;
      byteArray1[5] = byte1;
      Byte byte4 = new Byte((byte)38);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte)38, (byte)byte4);
      
      byteArray1[6] = byte4;
      byteArray1[7] = byte3;
      byteArray1[8] = byte3;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(2, byteArray2.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      Byte[] byteArray1 = new Byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte byte0 = new Byte((byte)78);
      assertNotNull(byte0);
      assertEquals((byte)78, (byte)byte0);
      
      byteArray1[0] = byte0;
      Byte byte1 = new Byte((byte)95);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)95, (byte)byte1);
      
      byteArray1[1] = byte1;
      Byte byte2 = new Byte((byte)19);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)19, (byte)byte2);
      
      byteArray1[2] = byte2;
      Byte byte3 = new Byte((byte)19);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)19, (byte)byte3);
      
      byteArray1[3] = byte3;
      Byte byte4 = new Byte((byte) (-77));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte) (-77), (byte)byte4);
      
      byteArray1[4] = byte4;
      Byte byte5 = new Byte((byte)9);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte)9, (byte)byte5);
      
      byteArray1[5] = byte5;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short) (-29);
      ArrayUtils.shift(intArray0, (-2147125045));
      assertArrayEquals(new int[] {(-29), 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-29);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-29.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-29.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)243;
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)243);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)243, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)243, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.shift(booleanArray0, (-2960), (int) (short)243, (int) (short) (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 3108);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray2, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, (-3632));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('}');
      assertNotNull(character0);
      assertEquals('}', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('+');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('+', (char)character1);
      
      characterArray0[1] = character1;
      char char0 = '!';
      Character character2 = Character.valueOf('!');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('!', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character(char0);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertEquals('!', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('T');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char0));
      assertEquals('T', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character(char0);
      assertNotNull(character5);
      assertTrue(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertEquals('!', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf((char) character1);
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertTrue(character6.equals((Object)character1));
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character5));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character4));
      assertFalse(character1.equals((Object)character3));
      assertFalse(character1.equals((Object)character2));
      assertEquals('+', (char)character6);
      
      characterArray0[6] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'a');
      assertArrayEquals(new char[] {'}', '+', '!', '!', 'T', '!', '+'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 2041.6132F);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, intArray0.length);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) character1;
      objectArray0[1] = (Object) character5;
      objectArray0[2] = (Object) character4;
      objectArray0[3] = (Object) character0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[3], intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      Short short0 = new Short((short) (-3586));
      assertNotNull(short0);
      assertEquals((short) (-3586), (short)short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-1659), (int) (short) (-3586));
      assertNull(charArray0);
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray1, (short) (-3586));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-3586)}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)8);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      Character[] characterArray0 = new Character[0];
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)23;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), 3839);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {(byte)10, (byte)61, (byte) (-53), (byte)88, (byte)23}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(bitSet0);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {(byte)10, (byte)61, (byte) (-53), (byte)88, (byte)23}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNull(object0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) null);
      assertNotSame(intArray0, intArray1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(bitSet1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockRandom0;
      int[] intArray0 = new int[5];
      intArray0[0] = (-2211);
      intArray0[1] = 2146312080;
      intArray0[2] = 3;
      intArray0[3] = (-98);
      intArray0[4] = 2146180841;
      ArrayUtils.shift(intArray0, (-2211), 2146180841, 2146312080);
      assertArrayEquals(new int[] {(-2211), 2146312080, 3, (-98), 2146180841}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte)101, (byte)70, (byte)44, (byte) (-40), (byte)2, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)2;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)70;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 11);
      assertEquals(3, objectArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Object[] objectArray0 = new Object[1];
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)76);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)76, (byte)byte2);
      
      byteArray0[1] = byte2;
      try { 
        Byte.decode(")K*eeSof=?i");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \")K*eeSof=?i\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 0L);
      assertNull(longArray0);
      
      ArrayUtils.reverse((Object[]) null);
      Byte[] byteArray0 = new Byte[10];
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Byte byte0 = new Byte((byte) (-60));
      assertNotNull(byte0);
      assertEquals((byte) (-60), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-60));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-60), (byte)byte1);
      
      Byte[] byteArray2 = ArrayUtils.add(byteArray0, byte1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(11, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      Byte[] byteArray3 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(10, byteArray3.length);
      assertNotNull(byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray1, (-1832));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1832, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)14;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[3] = (-1.0);
      doubleArray0[5] = (double) (-175);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-175);
      intArray0[2] = (-175);
      intArray0[4] = (int) (byte)14;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)14;
      intArray0[7] = (-175);
      ArrayUtils.shift(intArray0, (-175), 4, (-1932735283));
      assertArrayEquals(new int[] {0, 0, (-175), (-175), 14, 0, 14, (-175)}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      Short short0 = new Short((short)1863);
      assertNotNull(short0);
      assertEquals((short)1863, (short)short0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)1863;
      longArray0[1] = (long) (short)1863;
      longArray0[2] = 2123L;
      longArray0[3] = (long) (short)1863;
      longArray0[4] = (long) (short)1863;
      longArray0[5] = (long) (short)1863;
      longArray0[6] = (long) (short)1863;
      longArray0[7] = (-983L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2295L);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {1863L, 1863L, 2123L, 1863L, 1863L, 1863L, 1863L, (-983L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(bitSet0);
      
      Character[] characterArray0 = new Character[6];
      char char0 = '(';
      Character character0 = Character.valueOf('(');
      assertNotNull(character0);
      assertEquals('(', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('(');
      assertNotNull(character1);
      assertEquals('(', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertEquals('(', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('(');
      assertNotNull(character3);
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertEquals('(', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf(char0);
      assertNotNull(character4);
      assertTrue(character4.equals((Object)character3));
      assertEquals('(', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character(char0);
      assertNotNull(character5);
      assertTrue(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)char0));
      assertTrue(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character0));
      assertEquals('(', (char)character5);
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'(', '(', '(', '(', '(', '('}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(charArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, '(');
      assertArrayEquals(new char[] {'(', '(', '(', '(', '(', '('}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-29);
      ArrayUtils.shift(shortArray0, (int) (short)14, (int) (short) (-29), (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short) (-29), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short) (-29));
      assertNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-1365));
      assertNull(shortArray2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-29);
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-29)}, intArray0);
      assertArrayEquals(new int[] {(-29)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[2] = true;
      booleanArray0[2] = true;
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      shortArray0[4] = (short) (byte)1;
      shortArray0[5] = (short) (byte)1;
      shortArray0[6] = (short) (byte)1;
      ArrayUtils.shift(shortArray0, (int) (short)1, (int) (short)1, Integer.MAX_VALUE);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-75);
      floatArray0[1] = (float) (short)1;
      floatArray0[2] = (float) (short)1;
      floatArray0[3] = (float) (short)1;
      floatArray0[4] = (float) (short)1;
      floatArray0[5] = (float) (short)1;
      floatArray0[6] = (float) (-411);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-75.0F), 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, (-411.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[8] = (Object) mockRandom0;
      objectArray0[3] = (Object) mockRandom0;
      objectArray0[4] = (Object) mockRandom0;
      objectArray0[5] = (Object) mockRandom0;
      objectArray0[6] = (Object) mockRandom0;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[2]);
      assertEquals(9, objectArray0.length);
      assertNull(object0);
      
      objectArray0[7] = null;
      objectArray0[8] = (Object) mockRandom0;
      ArrayUtils.swap(objectArray0, (-2146702309), 4, 1339);
      assertEquals(9, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 1.0F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 837L;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) 837L;
      floatArray0[2] = (float) 837L;
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) 837L);
      assertArrayEquals(new float[] {(-1.0F), 837.0F, 837.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0, (int) (byte)1);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-141));
      assertArrayEquals(new int[] {(-141)}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, Double.NaN);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-141), floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, (-141));
      assertEquals(2, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -141, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1729.4;
      doubleArray0[1] = (double) (byte)126;
      doubleArray0[2] = (-980.79606);
      doubleArray0[3] = (double) (byte)126;
      doubleArray0[4] = (double) (byte)126;
      doubleArray0[5] = (double) (byte)126;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1729.4);
      assertArrayEquals(new double[] {1729.4, 126.0, (-980.79606), 126.0, 126.0, 126.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(5, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) (-980.79606);
      objectArray0[2] = (Object) 126.0;
      objectArray0[3] = (Object) 126.0;
      objectArray0[4] = (Object) 126.0;
      Byte byte0 = new Byte((byte)126);
      assertNotNull(byte0);
      assertEquals((byte)126, (byte)byte0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) byte0);
      assertEquals(5, objectArray0.length);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.getLength((Object) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      ArrayUtils.swap(doubleArray0, (int) (byte)126, (int) (byte)126, (int) (byte)126);
      assertArrayEquals(new double[] {1729.4, 126.0, (-980.79606), 126.0, 126.0, 126.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (-1L);
      longArray0[4] = (long) 0;
      ArrayUtils.swap(longArray0, (int) (byte)126, (int) (byte)126, 0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)1;
      Float float0 = new Float((float) (byte)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) (byte)1;
      byteArray1[1] = (Byte) (byte)1;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = ArrayUtils.insert((int) (byte)1, byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray2);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)1, (byte)1}, byteArray3);
      assertEquals(4, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertEquals(6, byteArray3.length);
      assertNotNull(byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byte[] byteArray4 = ArrayUtils.removeElement(byteArray2, (byte)1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray2);
      assertArrayEquals(new byte[] {(byte)1}, byteArray4);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertEquals(1, byteArray4.length);
      assertNotNull(byteArray4);
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 0.0;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 65536;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) 65536;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {65536L, 2147483647L, 65536L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) 65536);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 65536;
      intArray0[1] = 65536;
      intArray0[2] = Integer.MAX_VALUE;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 79;
      intArray1[1] = 65536;
      intArray1[2] = Integer.MAX_VALUE;
      intArray1[3] = Integer.MAX_VALUE;
      intArray1[4] = 65536;
      intArray1[5] = 65536;
      intArray1[6] = 65536;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {65536, 65536, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {79, 65536, Integer.MAX_VALUE, Integer.MAX_VALUE, 65536, 65536, 65536}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      char[] charArray1 = ArrayUtils.add(charArray0, 'B');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'E'}, charArray0);
      assertArrayEquals(new char[] {'E', 'B'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 647;
      doubleArray0[1] = 3.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 647.0, (int) (byte) (-1), 1.5);
      assertArrayEquals(new double[] {647.0, 3.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'E';
      objectArray0[1] = (Object) 'E';
      objectArray0[2] = (Object) 'E';
      objectArray0[3] = (Object) 647.0;
      ArrayUtils.shift(objectArray0, (int) (byte) (-1), 939, (-1));
      assertEquals(4, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'E', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2424;
      doubleArray0[1] = (double) 2424;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 70;
      ArrayUtils.shift(doubleArray0, 2, 2, 2);
      assertArrayEquals(new double[] {2424.0, 2424.0, (-1.0), 70.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.hashCode(object0);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.shift(booleanArray0, 2424, 2, 3664);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 785.4F;
      floatArray0[3] = 330.7F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 0.0F, 330.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 0.0F, 330.7F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)111;
      Byte byte1 = new Byte((byte)111);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)111, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)111);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)111, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray2 = ArrayUtils.insert(2, floatArray0, floatArray1);
      assertSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 0.0F, 330.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 0.0F, 330.7F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, (-1.0F), 785.4F, 0.0F, 330.7F, 0.0F, 330.7F}, floatArray2, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(8, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      Byte[] byteArray2 = new Byte[7];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = byte2;
      byteArray2[1] = byte1;
      byteArray2[2] = byte1;
      byteArray2[3] = byte2;
      byteArray2[4] = byte1;
      byteArray2[6] = byte1;
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2, class0);
      assertNotSame(byteArray3, byteArray0);
      assertSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray3);
      assertEquals(7, byteArray3.length);
      assertEquals(7, byteArray2.length);
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = byte0;
      byteArray4[1] = byte0;
      byteArray4[2] = byte0;
      byte[] byteArray5 = ArrayUtils.removeElements(byteArray4, byteArray4);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray5, byteArray4);
      assertArrayEquals(new byte[] {(byte)111, (byte)111, (byte)111}, byteArray4);
      assertArrayEquals(new byte[] {}, byteArray5);
      assertEquals(3, byteArray4.length);
      assertEquals(0, byteArray5.length);
      assertNotNull(byteArray5);
      assertFalse(byteArray5.equals((Object)byteArray4));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte0;
      intArray0[3] = 3699;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {111, 111, 111, 3699}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertNotNull(integerArray0);
      
      Byte[] byteArray6 = ArrayUtils.clone(byteArray1);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertEquals(3, byteArray6.length);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray6);
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertTrue(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      
      float[] floatArray3 = new float[0];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      float[] floatArray4 = ArrayUtils.insert(1073741824, floatArray3, floatArray3);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray4);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray4, floatArray1);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray2);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {}, floatArray4, 0.01F);
      assertEquals(0, floatArray3.length);
      assertEquals(0, floatArray4.length);
      assertNotNull(floatArray4);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray2));
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)64;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {64.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {64.0, (-1.0), 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MockRandom mockRandom0 = new MockRandom((byte)64);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(507L);
      assertNotNull(longStream0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      mockRandom0.setSeed((byte)64);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 3);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {64.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-56);
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)0;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1), (byte) (-56)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-56)}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1815L);
      floatArray0[1] = (-1013.294F);
      floatArray0[2] = (float) 88;
      ArrayUtils.shift(floatArray0, 88);
      assertArrayEquals(new float[] {(-1815.0F), (-1013.294F), 88.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Double double0 = new Double((-1649.482));
      assertNotNull(double0);
      assertEquals((-1649.482), (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.sort(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Byte byte0 = new Byte((byte)9);
      assertNotNull(byte0);
      assertEquals((byte)9, (byte)byte0);
      
      Byte[] byteArray2 = ArrayUtils.add(byteArray1, byte0);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      Byte[] byteArray0 = ArrayUtils.insert(7, (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)41;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 41}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Character character0 = new Character('r');
      assertNotNull(character0);
      assertEquals('r', (char)character0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)81;
      shortArray0[1] = (short)90;
      shortArray0[2] = (short)115;
      shortArray0[3] = (short)115;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-2980);
      shortArray0[6] = (short) (-570);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-4430), (int) (short)2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)81, (short)90, (short)115, (short)115, (short)2, (short) (-2980), (short) (-570)}, shortArray0);
      assertArrayEquals(new short[] {(short)81, (short)90}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      ArrayUtils.shift(doubleArray0, 0, 128, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.147483647E9, (-1.0), 2.147483647E9}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-320.0F);
      floatArray0[1] = 126.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-320.0F), 126.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      Byte byte0 = new Byte((byte) (-117));
      assertNotNull(byte0);
      assertEquals((byte) (-117), (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "[]");
      assertNotNull(string0);
      assertEquals("-117", string0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = (long) (byte) (-117);
      longArray0[2] = (long) (byte) (-117);
      ArrayUtils.shift(longArray0, (int) (byte) (-117), 5, 2844);
      assertArrayEquals(new long[] {1L, (-117L), (-117L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      int int0 = ArrayUtils.indexOf((char[]) null, '|', 1);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-117);
      shortArray0[1] = (short) (byte) (-117);
      shortArray0[2] = (short)75;
      shortArray0[3] = (short) (byte) (-117);
      shortArray0[4] = (short) (byte) (-117);
      shortArray0[5] = (short) (byte) (-117);
      shortArray0[6] = (short) (byte) (-117);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-117), (short) (-117), (short)75, (short) (-117), (short) (-117), (short) (-117), (short) (-117)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-117), (short) (-117), (short)75, (short) (-117), (short) (-117), (short) (-117), (short) (-117)}, shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      char[] charArray0 = new char[10];
      charArray0[0] = ':';
      charArray0[1] = ':';
      char[] charArray1 = ArrayUtils.add(charArray0, '.');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':', ':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(10, charArray0.length);
      assertEquals(11, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[2] = true;
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, '!');
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      Byte[] byteArray1 = new Byte[8];
      byteArray1[0] = byte0;
      byteArray1[1] = (Byte) (byte)0;
      byteArray1[2] = byte0;
      byteArray1[3] = (Byte) (byte)0;
      byteArray1[4] = byteArray1[1];
      byteArray1[5] = (Byte) (byte)0;
      byteArray1[6] = (Byte) (byte)0;
      byteArray1[7] = (Byte) (byte)0;
      Byte[] byteArray2 = ArrayUtils.insert((int) 0, byteArray1, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertEquals(16, byteArray2.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long((long) byteArray1[7]);
      assertEquals(8, byteArray1.length);
      assertNotNull(long0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(0L, (long)long0);
      
      longArray0[1] = long0;
      Long long1 = new Long((byte)0);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[2] = long1;
      Long long2 = new Long((-577L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-577L), (long)long2);
      
      longArray0[3] = long2;
      longArray0[4] = longArray0[1];
      Long long3 = new Long((-1156L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertEquals((-1156L), (long)long3);
      
      longArray0[5] = long3;
      try { 
        Long.valueOf("N^0]hiq<#%=xDPc#9t");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"N^0]hiq<#%=xDPc#9t\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3705.168426951284);
      doubleArray0[1] = Double.NaN;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, Double.NaN, 2, 1328.8);
      assertArrayEquals(new double[] {(-3705.168426951284), Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte) (-11));
      assertNotNull(byte0);
      assertEquals((byte) (-11), (byte)byte0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3419;
      shortArray0[1] = (short) (byte) (-11);
      shortArray0[2] = (short) (byte) (-11);
      shortArray0[3] = (short) (byte) (-11);
      shortArray0[4] = (short) (byte) (-11);
      shortArray0[5] = (short) (byte) (-11);
      shortArray0[6] = (short) (byte) (-11);
      shortArray0[7] = (short) (byte) (-11);
      shortArray0[8] = (short) (byte) (-11);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-11), (int) (short) (-11));
      assertEquals(9, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 2, 3, 4, 5, 6, 7, 8}", bitSet0.toString());
      assertArrayEquals(new short[] {(short)3419, (short) (-11), (short) (-11), (short) (-11), (short) (-11), (short) (-11), (short) (-11), (short) (-11), (short) (-11)}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        bitSet0.get((int) (short)3419, (-1305));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex < 0: -1305
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (-528));
      assertEquals(0, objectArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-30));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-30), (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)78);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte)78, (byte)byte4);
      
      byteArray0[3] = byte4;
      int[] intArray0 = new int[0];
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short) (-1200));
      assertNotNull(short0);
      assertEquals((short) (-1200), (short)short0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-1200);
      doubleArray0[3] = (double) (short) (-1200);
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      charArray0[5] = 'E';
      char[] charArray1 = ArrayUtils.add(charArray0, 'E');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'E', 'E', 'E', 'E', 'E', 'E'}, charArray0);
      assertArrayEquals(new char[] {'E', 'E', 'E', 'E', 'E', 'E', 'E'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.1, 647, 1.5);
      assertArrayEquals(new double[] {(-1200.0), 0.0, 0.0, (-1200.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, int0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'E';
      objectArray0[1] = (Object) 'E';
      ArrayUtils.shift(objectArray0, (int) (short) (-1200), 647, 939);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      Object[] objectArray0 = new Object[7];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (byte) (-1), (int) (byte) (-1), (double) (byte) (-1));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-29);
      int[] intArray0 = new int[8];
      intArray0[0] = 2719;
      intArray0[1] = (int) (short) (-29);
      intArray0[2] = 6;
      intArray0[3] = (int) (short)33;
      intArray0[4] = (int) (short)33;
      intArray0[5] = (int) (short) (-29);
      intArray0[6] = 9;
      intArray0[7] = (int) (short) (-29);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1315), 991);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2719, (-29), 6, 33, 33, (-29), 9, (-29)}, intArray0);
      assertArrayEquals(new int[] {2719, (-29), 6, 33, 33, (-29), 9, (-29)}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2719, (-29), 6, 33, 33, (-29), 9, (-29)}, intArray0);
      assertArrayEquals(new int[] {2719, (-29), 6, 33, 33, (-29), 9, (-29)}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertEquals(8, integerArray0.length);
      assertNotNull(integerArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-29);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short) (-29), 505);
      assertArrayEquals(new long[] {(-29L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 9;
      floatArray0[1] = (float) 2719;
      floatArray0[2] = (float) (-29);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 1431);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1431, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (int) (short) (-48));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 3221.24138052;
      doubleArray0[3] = 3221.24138052;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (-1);
      ArrayUtils.shift(doubleArray0, 0, Integer.MAX_VALUE, (-1));
      assertArrayEquals(new double[] {(-1.0), 3221.24138052, 3221.24138052, 2.147483647E9, (-1.0), 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 88;
      floatArray0[2] = (float) 88;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      ArrayUtils.shift(floatArray0, 88);
      assertArrayEquals(new float[] {88.0F, 1.0F, 1.0F, 1.0F, 88.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      Double double0 = new Double(727.5488450972);
      assertNotNull(double0);
      assertEquals(727.5488450972, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.add((double[]) null, 0, (double) 0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)20;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-128), (byte) (-110), (byte) (-92), (byte)84, (byte)9, (byte)20}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray1 = ArrayUtils.add(charArray0, '\'');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'', '\u0000', '\''}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Byte[] byteArray2 = new Byte[4];
      byteArray2[0] = (Byte) (byte) (-7);
      byteArray2[1] = (Byte) (byte)9;
      byteArray2[2] = (Byte) (byte)9;
      byteArray2[3] = (Byte) (byte) (-7);
      Byte byte0 = ArrayUtils.get(byteArray2, 1824);
      assertEquals(4, byteArray2.length);
      assertNull(byte0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      Byte byte0 = new Byte((byte)37);
      assertNotNull(byte0);
      assertEquals((byte)37, (byte)byte0);
      
      Byte byte1 = new Byte((byte)80);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)80, (byte)byte1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)80;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)80;
      intArray0[1] = 2;
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {80, 2}, intArray0);
      assertArrayEquals(new int[] {80, 2, 80, 2}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.subarray(intArray1, (int) (byte)80, (-124));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {80, 2}, intArray0);
      assertArrayEquals(new int[] {80, 2, 80, 2}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'O';
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, 2224, (-1127), (-1127));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      char[] charArray1 = ArrayUtils.add((char[]) null, ')');
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {')'}, charArray1);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 82, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, ':', 2);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)126;
      floatArray0[1] = (float) (byte)126;
      floatArray0[2] = (float) (byte)126;
      floatArray0[3] = (float) (byte)126;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 126.0F);
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new float[] {126.0F, 126.0F, 126.0F, 126.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(bitSet0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, 126.0F);
      assertArrayEquals(new float[] {126.0F, 126.0F, 126.0F, 126.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)126;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-910));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)126}, shortArray0);
      assertArrayEquals(new short[] {(short) (-910), (short)126}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)126;
      doubleArray0[1] = (double) 126.0F;
      doubleArray0[2] = 1787.93;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)126, 404.555100875281);
      assertArrayEquals(new double[] {126.0, 126.0, 1787.93}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
      
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      Byte byte2 = new Byte((byte) (-50));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-50), (byte)byte2);
      
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, byte2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) (byte) (-50);
      doubleArray0[2] = (double) byte0;
      doubleArray0[3] = 100.0;
      doubleArray0[4] = 1248.2;
      doubleArray0[5] = (double) byte0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1248.2, 1390);
      assertArrayEquals(new double[] {(-1.0), (-50.0), (-1.0), 100.0, 1248.2, (-1.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) 4;
      floatArray0[2] = (float) 1390;
      floatArray0[3] = (float) 1390;
      floatArray0[4] = (float) byte0;
      floatArray0[5] = (float) 1390;
      floatArray0[6] = (float) (byte) (-50);
      floatArray0[7] = (float) byte0;
      floatArray0[8] = (float) byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) byte0, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 71;
      floatArray0[1] = (float) 71;
      floatArray0[2] = (float) 71;
      floatArray0[3] = (float) 71;
      floatArray0[5] = (float) 71;
      floatArray0[6] = (float) 71;
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertEquals((byte)1, object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) 71.0F;
      objectArray0[2] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) byte1;
      objectArray0[6] = (Object) false;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, (int) (byte)72);
      assertEquals(7, objectArray0.length);
      assertTrue(byte0.equals((Object)object0));
      assertTrue(byte0.equals((Object)byte1));
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = 'm';
      charArray0[2] = 'Z';
      ArrayUtils.shift(charArray0, 1, (int) (byte)80, (int) (byte)80);
      assertArrayEquals(new char[] {'Z', 'm', 'Z'}, charArray0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[2];
      byteArray0[0] = (byte)10;
      floatArray0[1] = (float) (byte)10;
      int int0 = ArrayUtils.indexOf(floatArray0, (-53.4165F), (-3448));
      assertArrayEquals(new float[] {0.0F, 10.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1018;
      shortArray0[1] = (short) (byte)10;
      shortArray0[2] = (short) (byte)10;
      shortArray0[3] = (short) (byte)10;
      shortArray0[4] = (short) (byte)10;
      shortArray0[5] = (short) (byte)10;
      shortArray0[6] = (short) (byte)80;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte)80, (-2144330220));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertArrayEquals(new short[] {(short)1018, (short)10, (short)10, (short)10, (short)10, (short)10, (short)80}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-387);
      shortArray0[1] = (short) (-6904);
      shortArray0[2] = (short)769;
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-6904);
      shortArray1[1] = (short) (-387);
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short) (-387), (short) (-6904), (short)769}, shortArray0);
      assertArrayEquals(new short[] {(short) (-6904), (short) (-387)}, shortArray1);
      assertArrayEquals(new short[] {(short)769}, shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertNotNull(shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2747.4679);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2747.4679), (-1073741824));
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new double[] {(-2747.4679), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[4];
      int[] intArray0 = new int[6];
      intArray0[0] = (-1073741824);
      intArray0[1] = (-1073741824);
      intArray0[2] = (-1073741824);
      intArray0[3] = (-1073741824);
      intArray0[4] = (-1073741824);
      intArray0[5] = (-1073741824);
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, (-1073741824));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(6, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet1.toString());
      assertEquals(6, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertArrayEquals(new int[] {(-1073741824), (-1073741824), (-1073741824), (-1073741824), (-1073741824), (-1073741824)}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      bitSet0.or(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(bitSet0, bitSet1);
      assertEquals(6, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet1.toString());
      assertEquals(6, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.cardinality());
      assertArrayEquals(new double[] {(-2747.4679), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {(-1073741824), (-1073741824), (-1073741824), (-1073741824), (-1073741824), (-1073741824)}, intArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(6, intArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet0.equals((Object)bitSet1));
      
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = (Object) (-2747.4679);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[3], (-2108));
      assertEquals(4, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      float[] floatArray0 = new float[3];
      Object[] objectArray0 = new Object[5];
      floatArray0[0] = 0.0F;
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) 0.0F;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[3], (-7));
      assertEquals(5, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 566.4602831141126;
      doubleArray0[1] = 566.4602831141126;
      doubleArray0[2] = 3048.987;
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1624L;
      longArray0[1] = 1970L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1624L, 1970L}, longArray0);
      assertArrayEquals(new long[] {1624L, 1970L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[3] = (-1815L);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1815L)}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1815L), 0L, 0L, 0L, (-1815L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1815L);
      floatArray0[1] = (float) (-1815L);
      floatArray0[2] = (float) (-1815L);
      floatArray0[3] = (float) (-1815L);
      int int0 = ArrayUtils.indexOf(floatArray0, (-1815.0F));
      assertArrayEquals(new float[] {(-1815.0F), (-1815.0F), (-1815.0F), (-1815.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1815.0F);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (short)2;
      doubleArray0[3] = (double) (-1815L);
      doubleArray0[4] = (double) (-1815.0F);
      doubleArray0[5] = (double) (short)2;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)2, 0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1815.0), 0.0, 2.0, (-1815.0), (-1815.0), 2.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-676);
      shortArray0[1] = (short) (-1181);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-2897);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-737);
      ArrayUtils.shift(shortArray0, (-3407), 0, 127);
      assertArrayEquals(new short[] {(short) (-676), (short) (-1181), (short) (-1), (short) (-2897), (short) (-1), (short) (-737)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 820;
      Float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-119));
      assertNull(byteArray0);
      
      float[] floatArray2 = new float[0];
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)69);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-676), (short) (-1181), (short) (-1), (short) (-2897), (short) (-1), (short) (-737)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-676), (short) (-1181), (short) (-1), (short) (-2897), (short) (-1), (short) (-737)}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2553.65141098;
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (short)69;
      doubleArray0[4] = (double) (-3407);
      doubleArray0[5] = (double) (short) (-2897);
      doubleArray0[6] = (double) (short) (-1181);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short) (-737), (-311));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {2553.65141098, (-1.0), 0.0, 69.0, (-3407.0), (-2897.0), (-1181.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 566.4602831141126;
      char[] charArray0 = new char[2];
      doubleArray0[4] = (double) '%';
      charArray0[1] = '%';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = false;
      booleanArray1[7] = false;
      boolean[] booleanArray2 = ArrayUtils.insert(0, booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(10, booleanArray2.length);
      assertEquals(2, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '%';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray1, (-1666), '%');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1666, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Short[] shortArray0 = new Short[8];
      short short0 = (short) (-2340);
      Short short1 = new Short((short) (-2340));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-2340), (short)short1);
      
      shortArray0[0] = short1;
      short short2 = (short)51;
      Short short3 = new Short((short)51);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertEquals((short)51, (short)short3);
      
      shortArray0[1] = short3;
      Short short4 = new Short(short2);
      assertNotNull(short4);
      assertFalse(short2 == short0);
      assertTrue(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertEquals((short)51, (short)short4);
      
      shortArray0[2] = short4;
      Short short5 = new Short(short2);
      assertNotNull(short5);
      assertFalse(short2 == short0);
      assertTrue(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertEquals((short)51, (short)short5);
      
      shortArray0[3] = short5;
      Short short6 = new Short(short2);
      assertNotNull(short6);
      assertFalse(short2 == short0);
      assertTrue(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short0));
      assertTrue(short6.equals((Object)short3));
      assertTrue(short6.equals((Object)short4));
      assertTrue(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertEquals((short)51, (short)short6);
      
      shortArray0[4] = short6;
      try { 
        Short.valueOf("|qN!sZWu]N`'U||65");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"|qN!sZWu]N`'U||65\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(355, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences((char[]) null, 'y');
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      int[] intArray0 = new int[2];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short) (-48);
      int[] intArray2 = ArrayUtils.subarray(intArray1, 0, (int) (short) (-48));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {(-48)}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-30));
      assertArrayEquals(new byte[] {(byte) (-30)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'V';
      charArray0[2] = '~';
      charArray0[3] = 'F';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'P', 'V', '~', 'F'}, charArray0);
      assertArrayEquals(new char[] {'P', 'V', '~', 'F', 'P', 'V', '~', 'F'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'P', 'V', '~', 'F'}, charArray0);
      assertArrayEquals(new char[] {'P', 'V', '~', 'F', 'P', 'V', '~', 'F'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertEquals(16, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray3 = ArrayUtils.removeElements(intArray2, intArray1);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertArrayEquals(new int[] {(-48)}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray3);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray3.length);
      assertNotNull(intArray3);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      int[] intArray0 = new int[2];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short) (-48);
      int[] intArray2 = ArrayUtils.subarray(intArray1, 0, (int) (short) (-48));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {(-48)}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-30));
      assertArrayEquals(new byte[] {(byte) (-30)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'V';
      charArray0[2] = '~';
      charArray0[3] = 'F';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'P', 'V', '~', 'F'}, charArray0);
      assertArrayEquals(new char[] {'P', 'V', '~', 'F', 'P', 'V', '~', 'F'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'P', 'V', '~', 'F'}, charArray0);
      assertArrayEquals(new char[] {'P', 'V', '~', 'F', 'P', 'V', '~', 'F'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertEquals(16, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray3 = ArrayUtils.removeElements(intArray2, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {(-48)}, intArray1);
      assertArrayEquals(new int[] {}, intArray3);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray3.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray3);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      byte byte0 = (byte) (-1);
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      
      byte byte2 = (byte)38;
      Byte byte3 = new Byte((byte)38);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)38, (byte)byte3);
      
      Byte byte4 = new Byte((byte)38);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertEquals((byte)38, (byte)byte4);
      
      Byte byte5 = new Byte((byte)73);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertEquals((byte)73, (byte)byte5);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte4;
      byteArray0[1] = byte4;
      byteArray0[2] = byte1;
      byteArray0[3] = byte4;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, (int)  (-1));
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte) (-1), (byte)38}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byte0 == byte2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) byte0, (int) (byte)73, (double) byte2);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertFalse(byte0 == byte2);
      assertFalse(byte2 == byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      charArray0[1] = 'T';
      charArray0[2] = 'J';
      charArray0[3] = 'W';
      ArrayUtils.shift(charArray0, (int) byte0, (int) byte2, 1068);
      assertArrayEquals(new char[] {'w', 'T', 'J', 'W'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(byte0 == byte2);
      assertFalse(byte2 == byte0);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 1078L;
      doubleArray0[2] = (double) 1078L;
      doubleArray0[3] = (double) (-2456);
      ArrayUtils.swap(doubleArray0, (-2456), (-2143593278), Integer.MAX_VALUE);
      assertArrayEquals(new double[] {(-1.0), 1078.0, 1078.0, (-2456.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1078L;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-2143593278));
      assertArrayEquals(new float[] {1078.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-1.0), (-1.0));
      assertArrayEquals(new double[] {(-1.0), 1078.0, 1078.0, (-2456.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-2456));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2456, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short) (-458);
      shortArray0[2] = (short) (-987);
      shortArray0[3] = (short) (-458);
      ArrayUtils.shift(shortArray0, (-75), (int) (short) (-1), (-411));
      assertArrayEquals(new short[] {(short)9, (short) (-458), (short) (-987), (short) (-458)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)9;
      floatArray0[1] = 2885.875F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {9.0F, 2885.875F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[6];
      longArray0[1] = (long) (short) (-458);
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Byte byte0 = new Byte((byte)114);
      assertNotNull(byte0);
      assertEquals((byte)114, (byte)byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray1, (Object) byte0, (int) (short)9);
      assertArrayEquals(new float[] {9.0F, 2885.875F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2424;
      intArray0[1] = 70;
      intArray0[2] = 2424;
      intArray0[3] = 0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 70;
      intArray0[3] = 2424;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) 2424;
      doubleArray0[6] = (double) 2424;
      ArrayUtils.shift(doubleArray0, (-1), 0, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {70.0, 0.0, 0.0, 0.0, 0.0, 2424.0, 2424.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0, (-1255));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, objectArray0.length);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-1255), (double) (-1255));
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[4];
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (-1255));
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((Object[]) shortArray0);
      assertEquals(4, shortArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      byte byte0 = (byte)73;
      Byte byte1 = new Byte((byte)73);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)73, (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-86));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-86), (byte)byte2);
      
      byte byte3 = (byte) (-17);
      Byte byte4 = new Byte((byte) (-17));
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte) (-17), (byte)byte4);
      
      Byte byte5 = new Byte((byte) (-86));
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertEquals((byte) (-86), (byte)byte5);
      
      Byte byte6 = new Byte((byte)38);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertEquals((byte)38, (byte)byte6);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte6;
      byteArray0[1] = byte2;
      byteArray0[2] = byte4;
      byteArray0[3] = byte1;
      byteArray0[4] = byte4;
      byteArray0[5] = byte2;
      byteArray0[6] = byte2;
      byte byte7 = (byte)84;
      Byte byte8 = new Byte((byte)84);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte2));
      assertEquals((byte)84, (byte)byte8);
      
      byteArray0[7] = byte8;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 6);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)64);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-86), (byte) (-17), (byte)73, (byte) (-17), (byte) (-86), (byte) (-86), (byte)84}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) byte3;
      doubleArray0[1] = (double) (byte) (-86);
      doubleArray0[2] = (double) byte3;
      doubleArray0[3] = (double) (byte)64;
      doubleArray0[4] = (double) (byte) (-86);
      doubleArray0[5] = (double) byte0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) byte7, (int) (byte)64, (-86.0));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-17.0), (-86.0), (-17.0), 64.0, (-86.0), 73.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertFalse(byte7 == byte3);
      assertFalse(byte7 == byte0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'L';
      charArray0[2] = '4';
      charArray0[3] = 'q';
      charArray0[4] = 'C';
      charArray0[5] = 'x';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'H', 'L', '4', 'q', 'C', 'x'}, charArray0);
      assertArrayEquals(new char[] {'H', 'L', '4', 'q', 'C', 'x'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 1375.122F);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 97;
      ArrayUtils.shift(intArray0, (-2147138171), 15, (-1696));
      assertArrayEquals(new int[] {97}, intArray0);
      assertEquals(1, intArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {97}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[5];
      intArray0[2] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[16];
      objectArray0[4] = (Object) (short)0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.subarray(charArray0, (int) (short)0, (int) (short)0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, objectArray0[4], (-1177));
      assertEquals(16, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      Boolean[] booleanArray1 = new Boolean[7];
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray1[0] = boolean2;
      Boolean boolean3 = new Boolean("");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      booleanArray1[1] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4);
      
      booleanArray1[2] = boolean4;
      Boolean boolean5 = new Boolean(true);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5);
      
      booleanArray1[3] = boolean5;
      Boolean boolean6 = new Boolean("");
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6);
      
      booleanArray1[4] = boolean6;
      Boolean boolean7 = Boolean.valueOf("]x6o=O\"GUHRbrpwo?\"U");
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7);
      
      booleanArray1[5] = boolean7;
      Boolean boolean8 = Boolean.TRUE;
      assertNotNull(boolean8);
      assertFalse(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean5));
      assertTrue(boolean8);
      
      booleanArray1[6] = boolean8;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, (boolean) boolean4);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false, true}, booleanArray2));
      assertEquals(7, booleanArray2.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray2);
      assertFalse(boolean4.equals((Object)boolean7));
      assertFalse(boolean4.equals((Object)boolean6));
      assertTrue(boolean4.equals((Object)boolean5));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-3769.1F);
      floatArray0[1] = (-313.63345F);
      floatArray0[2] = 1583.9229F;
      floatArray0[3] = (float) 5;
      floatArray0[4] = 1.0F;
      ArrayUtils.swap(floatArray0, 5, 1073741871, 3);
      assertArrayEquals(new float[] {(-3769.1F), (-313.63345F), 1583.9229F, 5.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 775;
      intArray0[4] = 0;
      intArray0[5] = 43;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 775, 0, 43, 0, 0}, intArray0);
      assertEquals(16, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = ArrayUtils.insert(0, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 43;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2526L));
      assertArrayEquals(new long[] {0L, 0L, 43L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-799.0325));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-799.0325)}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 51;
      intArray0[1] = 53;
      intArray0[2] = 2649;
      intArray0[3] = 53;
      intArray0[4] = 2;
      intArray0[5] = 1;
      intArray0[6] = 2897;
      intArray0[7] = 3224;
      intArray0[8] = 93;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 51, 507);
      assertArrayEquals(new int[] {51, 53, 2649, 53, 2, 1, 2897, 3224, 93}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short) (-48), 1072);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Character character0 = new Character('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'K';
      ArrayUtils.reverse((double[]) null);
      long[] longArray0 = new long[6];
      longArray0[0] = (-6334L);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) '&';
      longArray0[4] = (long) 300;
      longArray0[5] = (long) 300;
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-6334L), 0L, 0L, 38L, 300L, 300L}, longArray0);
      assertEquals(12, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.swap(doubleArray1, 1239, (-1270), (int) (short) (-48));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-29);
      shortArray0[1] = (short) (-29);
      shortArray0[2] = (short) (byte)1;
      ArrayUtils.shift(shortArray0, (int) (short) (-29), (int) (short) (-29), 116);
      assertArrayEquals(new short[] {(short) (-29), (short) (-29), (short)1}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(147.0);
      assertNotNull(double0);
      assertEquals(147.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((short) (-29));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-29.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((short) (-29));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((-29.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(147.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(147.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-29);
      shortArray1[1] = (short) (byte)1;
      ArrayUtils.shift(shortArray1, (int) (short)1, (-942), 1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-29), (short)1}, shortArray1);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ']');
      assertArrayEquals(new char[] {']'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short) (-29);
      floatArray0[1] = 1913.5469F;
      floatArray0[2] = (float) (byte)1;
      floatArray0[3] = (float) (byte)1;
      floatArray0[4] = (float) 116;
      floatArray0[5] = (float) (short)1;
      floatArray0[6] = (float) (short) (-29);
      floatArray0[7] = (float) (-942);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 116);
      assertArrayEquals(new float[] {(-29.0F), 1913.5469F, 1.0F, 1.0F, 116.0F, 1.0F, (-29.0F), (-942.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ']';
      char[] charArray2 = ArrayUtils.removeElement(charArray1, '[');
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertArrayEquals(new char[] {']'}, charArray2);
      assertArrayEquals(new char[] {']'}, charArray1);
      assertEquals(1, charArray2.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[3] = (-1815L);
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = 'i';
      charArray0[2] = 'Z';
      charArray0[3] = 'p';
      ArrayUtils.shift(charArray0, 84, 84, (-1519));
      assertArrayEquals(new char[] {'6', 'i', 'Z', 'p'}, charArray0);
      assertEquals(4, charArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '6';
      floatArray0[1] = (float) '6';
      floatArray0[2] = (float) 'Z';
      longArray0[2] = (long) 84;
      floatArray0[4] = (-768.748F);
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'i');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'6', 'i', 'Z', 'p'}, charArray0);
      assertArrayEquals(new char[] {'6', 'Z', 'p'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(floatArray0, (-2653), 3224, (-2653));
      assertArrayEquals(new float[] {0.0F, 0.0F, 54.0F, 54.0F, 90.0F, 0.0F, (-768.748F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)3959);
      assertArrayEquals(new short[] {(short)3959, (short)3959, (short)3959, (short)3959}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Short short0 = new Short((short) (-1056));
      assertNotNull(short0);
      assertEquals((short) (-1056), (short)short0);
      
      Short short1 = new Short((short) (-1056));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-1056), (short)short1);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Byte[]) null, (int) 0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)6);
      assertNull(byteArray0);
      
      Byte byte0 = new Byte((byte)6);
      assertNotNull(byte0);
      assertEquals((byte)6, (byte)byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) byte0, (int) (byte)6);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (byte)6);
      assertNull(shortArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray0, (double) (short)0);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(10, booleanArray0, (boolean[]) null);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0, (-1255));
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, objectArray0.length);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-1255), (double) (-1255));
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[4];
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 986L);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((Object[]) shortArray0);
      assertEquals(4, shortArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift((double[]) null, (-1), 48, (-1680));
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = '\'';
      charArray0[2] = ',';
      charArray0[3] = '%';
      ArrayUtils.swap(charArray0, (-1680), (-1), (-1));
      assertArrayEquals(new char[] {'<', '\'', ',', '%'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[3] = (-1815L);
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = 'i';
      charArray0[2] = 'Z';
      charArray0[3] = 'p';
      ArrayUtils.shift(charArray0, 84, 84, (-1519));
      assertArrayEquals(new char[] {'6', 'i', 'Z', 'p'}, charArray0);
      assertEquals(4, charArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '6';
      floatArray0[1] = (float) '6';
      floatArray0[2] = (float) 'Z';
      floatArray0[3] = (float) 84;
      floatArray0[4] = (-768.748F);
      floatArray0[5] = (float) (-1519);
      floatArray0[6] = (float) 'p';
      floatArray0[7] = (-768.748F);
      floatArray0[8] = (float) 'p';
      int int0 = ArrayUtils.indexOf(floatArray0, 112.0F, (-2144330220));
      assertArrayEquals(new float[] {54.0F, 54.0F, 90.0F, 84.0F, (-768.748F), (-1519.0F), 112.0F, (-768.748F), 112.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(6, int0);
      
      short[] shortArray0 = new short[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, 2);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short)9, 650, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)9;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 650;
      floatArray0[3] = (float) (short)0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {9.0F, 0.0F, 650.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.add(floatArray0, (float) 650);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {9.0F, 0.0F, 650.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {9.0F, 0.0F, 650.0F, 0.0F, 650.0F}, floatArray2, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {9.0F, 0.0F, 650.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {9.0F, 0.0F, 650.0F, 0.0F, 650.0F}, floatArray2, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray3 = new float[6];
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (float) (short) (-1);
      floatArray3[1] = (float) (short) (-1);
      floatArray3[2] = (float) (short)9;
      floatArray3[3] = (float) (short) (-1);
      floatArray3[4] = (float) 650;
      floatArray3[5] = (float) (short) (-1);
      float[] floatArray4 = ArrayUtils.removeElements(floatArray2, floatArray3);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray2);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray4);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray4);
      assertNotSame(floatArray3, floatArray2);
      assertArrayEquals(new float[] {9.0F, 0.0F, 650.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 650.0F}, floatArray4, 0.01F);
      assertArrayEquals(new float[] {9.0F, 0.0F, 650.0F, 0.0F, 650.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 9.0F, (-1.0F), 650.0F, (-1.0F)}, floatArray3, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray4.length);
      assertEquals(5, floatArray2.length);
      assertEquals(6, floatArray3.length);
      assertNotNull(floatArray4);
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray3));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte) (-70);
      floatArray1[1] = (float) (byte) (-70);
      floatArray1[2] = (float) (byte) (-70);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-70.0F), (-70.0F), (-70.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
      Object[] objectArray0 = new Object[3];
      Byte byte0 = new Byte((byte)68);
      assertNotNull(byte0);
      assertEquals((byte)68, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)68, object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (-3414));
      assertEquals(3, objectArray0.length);
      assertNull(object1);
      
      objectArray0[1] = null;
      Object object2 = new Object();
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = ArrayUtils.get(objectArray0, 2);
      assertSame(object3, object2);
      assertEquals(3, objectArray0.length);
      assertNotNull(object3);
      
      ArrayUtils.shift(objectArray0, (-3414));
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      Float[] floatArray0 = new Float[15];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[1]);
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (short)39);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-2899), 1540.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2899, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      boolean boolean0 = ArrayUtils.contains((double[]) null, 1.0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '=';
      intArray0[1] = (int) '=';
      intArray0[2] = (int) '=';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1752);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {61, 61, 61}, intArray0);
      assertArrayEquals(new int[] {1752, 61, 61, 61}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) '=';
      objectArray0[1] = (Object) 61;
      objectArray0[2] = (Object) '=';
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 61;
      objectArray0[5] = (Object) 61;
      objectArray0[6] = object0;
      objectArray0[7] = (Object) 61;
      objectArray0[8] = (Object) byte0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[8], 2144096824);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(9, objectArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1752;
      longArray0[1] = (long) '=';
      longArray0[2] = (long) (byte)21;
      longArray0[3] = (long) 2144096824;
      ArrayUtils.shift(longArray0, 786, 6560, 61);
      assertArrayEquals(new long[] {1752L, 61L, 21L, 2144096824L}, longArray0);
      assertEquals(4, longArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom(46);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "java.lang.Byte";
      stringArray0[1] = "";
      stringArray0[2] = "nn}.G^C";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(3, stringArray1.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      Long long0 = new Long((-832L));
      assertNotNull(long0);
      assertEquals((-832L), (long)long0);
      
      Long long1 = new Long((-2655L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-2655L), (long)long1);
      
      Long long2 = new Long(878L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(878L, (long)long2);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long2;
      longArray0[1] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer0 = Integer.valueOf((int) (byte)37);
      assertNotNull(integer0);
      assertEquals(37, (int)integer0);
      
      Integer integer1 = new Integer((byte) (-84));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-84), (int)integer1);
      
      Integer integer2 = new Integer((-2400));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-2400), (int)integer2);
      
      ArrayUtils.shift(byteArray0, 1, 6, (int) (byte) (-84));
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      short[] shortArray0 = new short[5];
      Byte byte0 = new Byte((byte) (-83));
      assertNotNull(byte0);
      assertEquals((byte) (-83), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-83));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-83), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-83));
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-83), (byte)byte2);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short)617);
      assertNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray0, (short)10);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray2.length);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)10;
      longArray0[1] = (long) (short)617;
      longArray0[2] = (long) (short)617;
      longArray0[3] = (long) (short)10;
      longArray0[4] = (long) (short)617;
      longArray0[5] = (long) (byte) (-83);
      longArray0[6] = (long) (short)10;
      longArray0[7] = (long) (short)10;
      boolean boolean0 = ArrayUtils.contains(longArray0, 10L);
      assertArrayEquals(new long[] {10L, 617L, 617L, 10L, 617L, (-83L), 10L, 10L}, longArray0);
      assertEquals(8, longArray0.length);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)6, (-1049));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = 'T';
      charArray0[2] = 'L';
      charArray0[3] = '3';
      charArray0[4] = '%';
      charArray0[5] = '?';
      charArray0[6] = 'y';
      char[] charArray1 = ArrayUtils.add(charArray0, ')');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'V', 'T', 'L', '3', '%', '?', 'y'}, charArray0);
      assertArrayEquals(new char[] {'V', 'T', 'L', '3', '%', '?', 'y', ')'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(charArray0, 0, 617, 960);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'y', 'V', 'T', 'L', '3', '%', '?'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, 1114123);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      char[] charArray0 = new char[0];
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2950.41000805), 1446, (double) 1446);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 1446);
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray1);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((int[]) null, (-113), (-2078));
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = 'x';
      charArray0[2] = 'Q';
      charArray0[3] = '\\';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte)21);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)object0));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)21, (byte)byte1);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (byte)21);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)21;
      floatArray0[3] = (float) (byte)21;
      floatArray0[4] = (float) (byte)21;
      floatArray0[5] = (float) (short) (-2486);
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {21.0F, 0.0F, 0.0F, 21.0F, 21.0F, (-2486.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {21.0F, 0.0F, 0.0F, 21.0F, 21.0F, (-2486.0F)}, floatArray1, 0.01F);
      assertEquals(0, intArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Short short0 = new Short((short) (-1056));
      assertNotNull(short0);
      assertEquals((short) (-1056), (short)short0);
      
      Short short1 = new Short((short) (-1056));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-1056), (short)short1);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Byte[]) null, (int) 0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)6);
      assertNull(byteArray0);
      
      Byte byte0 = new Byte((byte)6);
      assertNotNull(byte0);
      assertEquals((byte)6, (byte)byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) byte0, (int) (byte)6);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((byte[]) null, (-1154), (-1051), (-1));
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = null;
      objectArray0[4] = (Object) byte0;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short) (-458);
      longArray0[1] = 2561L;
      longArray0[2] = (long) (short) (-458);
      longArray0[3] = (long) (short) (-458);
      longArray0[4] = (long) (short) (-1);
      longArray0[5] = (long) (short) (-458);
      longArray0[6] = (long) (byte)0;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      assertEquals(303, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(384, bitSet0.length());
      assertEquals(384, bitSet0.size());
      assertArrayEquals(new long[] {(-458L), 2561L, (-458L), (-458L), (-1L), (-458L), 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertNotNull(bitSet0);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(303, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(384, bitSet0.length());
      assertEquals(384, bitSet0.size());
      assertArrayEquals(new long[] {(-458L), 2561L, (-458L), (-458L), (-1L), (-458L), 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      objectArray0[5] = null;
      objectArray0[6] = (Object) byte0;
      int int0 = ArrayUtils.indexOf(objectArray0, object0, (int) (short) (-458));
      assertEquals(303, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(384, bitSet0.length());
      assertEquals(384, bitSet0.size());
      assertArrayEquals(new long[] {(-458L), 2561L, (-458L), (-458L), (-1L), (-458L), 0L}, longArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(7, longArray0.length);
      assertEquals(0, int0);
      
      ArrayUtils.swap(objectArray0, (int) (short) (-1), 1992);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)20;
      byteArray0[8] = (byte)1;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)20);
      assertArrayEquals(new byte[] {(byte)20, (byte)20, (byte)4, (byte)1, (byte)1, (byte)20, (byte)20, (byte)20, (byte)1}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, int0);
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      Character character0 = new Character('>');
      assertNotNull(character0);
      assertEquals('>', (char)character0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-117), (int) (byte)1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byte byte0 = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byte byte1 = (byte)27;
      byteArray0[2] = (byte)27;
      byte byte2 = (byte) (-116);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)76;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)76);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-70), (byte)27, (byte) (-116), (byte)48, (byte)76}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte) (-116);
      longArray0[2] = (long) (byte)48;
      longArray0[3] = (long) (byte)76;
      longArray0[4] = (long) (byte) (-116);
      longArray0[5] = (long) (byte) (-70);
      longArray0[6] = (long) (byte) (-70);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 2211);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2211, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (-250), (-250), (-250));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (-250));
      assertEquals(3, objectArray0.length);
      assertNull(object1);
      
      objectArray0[1] = null;
      objectArray0[2] = null;
      Byte byte0 = new Byte((byte) (-121));
      assertNotNull(byte0);
      assertEquals((byte) (-121), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-121));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-121), (byte)byte1);
      
      byte[] byteArray1 = ArrayUtils.insert((int) (byte) (-121), byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte) (-121);
      longArray0[1] = (long) (-250);
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 2756L;
      longArray1[1] = (long) (byte) (-121);
      longArray1[2] = (-1418L);
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2756L, (-121L), (-1418L)}, longArray1);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-250);
      intArray0[1] = (-250);
      intArray0[2] = (-2456);
      intArray0[3] = (int) (byte) (-121);
      intArray0[4] = (-250);
      intArray0[5] = (int) (byte) (-121);
      intArray0[6] = (int) (byte) (-121);
      intArray0[7] = (int) (byte) (-121);
      intArray0[8] = (int) (byte) (-121);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-250), (-250), (-2456), (-121), (-250), (-121), (-121), (-121), (-121)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.swap(objectArray0, (-121), (-121), (-121));
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte1;
      byteArray0[1] = byte2;
      byteArray0[2] = byte1;
      byteArray0[3] = byte2;
      byteArray0[4] = byte1;
      byteArray0[5] = byte2;
      byteArray0[6] = byte1;
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) byte0;
      floatArray0[4] = (float) byte0;
      floatArray0[5] = (float) byte0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) byte0, (int) byte0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray0, (-379), (int) byte0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte2));
      assertEquals("0", string0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '>');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = (long) 0;
      longArray0[2] = 1L;
      longArray0[3] = (long) 0;
      longArray0[4] = 1L;
      longArray0[5] = 1L;
      longArray0[6] = 870L;
      longArray0[7] = 870L;
      longArray0[8] = 72L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertArrayEquals(new long[] {(-1L), 0L, 1L, 0L, 1L, 1L, 870L, 870L, 72L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(1, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '5', 0);
      assertArrayEquals(new char[] {'j', 'j', 'j'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (-1.0);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[1] = (-256);
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2231.22);
      doubleArray0[1] = (double) (-256);
      doubleArray0[2] = (-2231.22);
      doubleArray0[3] = (double) 'b';
      doubleArray0[4] = (double) 'b';
      int int1 = 1529;
      int int2 = 0;
      ArrayUtils.swap(doubleArray0, (-256), 1529, 0);
      assertArrayEquals(new double[] {(-2231.22), (-256.0), (-2231.22), 98.0, 98.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -256, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-3769.1F);
      floatArray0[3] = (-313.63345F);
      long[] longArray0 = new long[6];
      longArray0[0] = 2090L;
      longArray0[1] = 2090L;
      longArray0[2] = 2090L;
      longArray0[3] = 2090L;
      longArray0[4] = 2090L;
      longArray0[5] = 2090L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {2090L, 2090L, 2090L, 2090L, 2090L, 2090L}, longArray0);
      assertEquals(6, longArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1928);
      shortArray0[1] = (short)9;
      short[] shortArray1 = ArrayUtils.insert(2, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1928), (short)9}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1928), (short)9, (short) (-1928), (short)9}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      byte byte0 = (byte)100;
      Byte byte1 = new Byte((byte)100);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)100, (byte)byte1);
      
      Byte byte2 = new Byte((byte)100);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)100, (byte)byte2);
      
      byte byte3 = (byte)73;
      Byte byte4 = new Byte((byte)73);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte)73, (byte)byte4);
      
      Byte[] byteArray0 = new Byte[9];
      byteArray0[0] = byte4;
      byteArray0[1] = byte1;
      byteArray0[2] = byte4;
      byteArray0[3] = byte2;
      Byte byte5 = new Byte((byte) (-74));
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertEquals((byte) (-74), (byte)byte5);
      
      byteArray0[4] = byte5;
      byteArray0[5] = byte4;
      byteArray0[6] = byte4;
      byteArray0[7] = byte4;
      byteArray0[8] = byte2;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, (int) byte3);
      assertEquals(9, byteArray0.length);
      assertFalse(byte3 == byte0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-49));
      assertArrayEquals(new byte[] {(byte)73, (byte)100, (byte)73, (byte)100, (byte) (-74), (byte)73, (byte)73, (byte)73, (byte)100}, byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) byte3;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, (-1), (double) byte0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new double[] {73.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertFalse(byte0 == byte3);
      
      Byte[] byteArray2 = ArrayUtils.removeElement(byteArray0, (Object) byte3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertEquals(8, byteArray2.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray2);
      assertFalse(byte3 == byte0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {73.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {73.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {73.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {73.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = 'k';
      charArray0[4] = '.';
      charArray0[5] = '.';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'k');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'.', '.', '.', 'k', '.', '.'}, charArray0);
      assertArrayEquals(new char[] {'.', '.', '.', '.', '.'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)11;
      shortArray0[1] = (short) (byte)11;
      shortArray0[2] = (short) (byte)11;
      shortArray0[3] = (short) (byte)11;
      shortArray0[4] = (short) (byte)11;
      shortArray0[5] = (short) (byte)11;
      shortArray0[6] = (short) (byte)11;
      shortArray0[7] = (short) (byte)11;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)11);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)11, (short)11, (short)11, (short)11, (short)11, (short)11, (short)11, (short)11}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, int0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, (-250));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-2851);
      doubleArray0[2] = 313.38;
      doubleArray0[3] = (double) (-2851);
      doubleArray0[4] = (double) (-2851);
      doubleArray0[5] = (double) (-2851);
      doubleArray0[6] = 4388.81090582;
      ArrayUtils.swap(doubleArray0, 1, (-2456), (-1));
      assertArrayEquals(new double[] {1.0, (-2851.0), 313.38, (-2851.0), (-2851.0), (-2851.0), 4388.81090582}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) (-2851);
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) (-2851);
      floatArray0[6] = (float) (-1);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertArrayEquals(new float[] {1.0F, (-1.0F), 1.0F, (-2851.0F), 1.0F, (-2851.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-845);
      shortArray0[1] = (short) (-845);
      shortArray0[2] = (short) (-845);
      shortArray0[3] = (short) (-845);
      shortArray0[4] = (short) (-845);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-845));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-845), (short) (-845), (short) (-845), (short) (-845), (short) (-845)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-845), (short) (-845), (short) (-845), (short) (-845), (short) (-845), (short) (-845)}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, (-2851), (int) (short) (-845), 1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2230.2);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2230.2), (-1.0));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {0.0, (-2230.2)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2230.2);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[0] = 1;
      intArray0[2] = 2;
      int int0 = ArrayUtils.indexOf(intArray0, 2);
      assertArrayEquals(new int[] {1, 0, 2}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, int0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)1;
      Float float0 = new Float((float) (byte)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte)1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)1;
      ArrayUtils.shift((Object[]) byteArray1, (-84), (int) (byte)1, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(floatArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, floatArray0.length);
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = Double.NaN;
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-3043), 1367);
      assertNull(intArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = 'C';
      charArray0[2] = '?';
      charArray0[3] = 'D';
      charArray0[4] = '4';
      charArray0[5] = '5';
      charArray0[6] = '+';
      charArray0[7] = 'z';
      charArray0[8] = 'F';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'r', 'C', '?', 'D', '4', '5', '+', 'z', 'F'}, charArray1);
      assertArrayEquals(new char[] {'r', 'C', '?', 'D', '4', '5', '+', 'z', 'F'}, charArray0);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotNull(charArray1);
      
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) (byte)1;
      byteArray1[1] = (Byte) (byte)1;
      Byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray1, (Byte) byte0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      Byte byte1 = new Byte((byte) (-99));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)object0));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-99), (byte)byte1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-106);
      doubleArray0[1] = (-2186.192117355);
      doubleArray0[2] = (double) (byte) (-106);
      doubleArray0[3] = (double) (byte)21;
      doubleArray0[4] = (double) (byte) (-99);
      doubleArray0[5] = (-2186.192117355);
      doubleArray0[6] = (double) (byte) (-99);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 104.363116);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {(-106.0), (-2186.192117355), (-106.0), 21.0, (-99.0), (-2186.192117355), (-99.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      
      bitSet0.clear();
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {(-106.0), (-2186.192117355), (-106.0), 21.0, (-99.0), (-2186.192117355), (-99.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      bitSet0.set(135);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{135}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(192, bitSet0.size());
      assertEquals(136, bitSet0.length());
      assertArrayEquals(new double[] {(-106.0), (-2186.192117355), (-106.0), 21.0, (-99.0), (-2186.192117355), (-99.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{135}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(192, bitSet0.size());
      assertEquals(136, bitSet0.length());
      assertArrayEquals(new double[] {(-106.0), (-2186.192117355), (-106.0), 21.0, (-99.0), (-2186.192117355), (-99.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNull(object1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 1305.404F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 507;
      intArray0[1] = 0;
      intArray0[2] = 507;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 36;
      ArrayUtils.shift(intArray0, 0, 0, 65536);
      assertArrayEquals(new int[] {507, 0, 507, 0, 0, 0, 0, 0, 36}, intArray0);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1310;
      doubleArray0[1] = (double) 0;
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Byte byte0 = new Byte((byte)41);
      assertNotNull(byte0);
      assertEquals((byte)41, (byte)byte0);
      
      Byte byte1 = new Byte((byte)41);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)41, (byte)byte1);
      
      Byte byte2 = new Byte((byte)114);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)114, (byte)byte2);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (byte)114);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (byte) (-56));
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      int int0 = 1;
      int int1 = 1;
      int int2 = (-2851);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-2851);
      double double0 = 313.38;
      doubleArray0[2] = 313.38;
      doubleArray0[3] = (double) (-2851);
      doubleArray0[4] = (double) (-2851);
      doubleArray0[5] = (double) (-2851);
      doubleArray0[6] = 4388.81090582;
      int int3 = (-2456);
      int int4 = (-1);
      ArrayUtils.swap(doubleArray0, 1, (-2456), (-1));
      assertArrayEquals(new double[] {1.0, (-2851.0), 313.38, (-2851.0), (-2851.0), (-2851.0), 4388.81090582}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-2851);
      intArray0[2] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2851, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)1}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Short short0 = new Short((byte) (-49));
      assertNotNull(short0);
      assertEquals((short) (-49), (short)short0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-49);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-49L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (byte)1, (long) (byte) (-49));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-49L)}, longArray0);
      assertArrayEquals(new long[] {(-49L), (-49L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-10), (-1065));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)1}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      int[] intArray0 = new int[6];
      intArray0[0] = (-2145345125);
      intArray0[1] = (-2145345125);
      intArray0[2] = (-1);
      intArray0[3] = 9;
      intArray0[4] = 1;
      intArray0[5] = (-2146989280);
      ArrayUtils.reverse(intArray0, (-1), 0);
      assertArrayEquals(new int[] {(-2145345125), (-2145345125), (-1), 9, 1, (-2146989280)}, intArray0);
      assertEquals(6, intArray0.length);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-2627), 0);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) 160, 713);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (-1));
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      Byte byte0 = new Byte((byte)22);
      assertNotNull(byte0);
      assertEquals((byte)22, (byte)byte0);
      
      Byte byte1 = new Byte((byte)37);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)37, (byte)byte1);
      
      Byte byte2 = new Byte((byte)22);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)22, (byte)byte2);
      
      Byte byte3 = new Byte((byte)80);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)80, (byte)byte3);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2, 3, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)80;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-117), (int) (byte)22);
      assertArrayEquals(new short[] {(short)80}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Short short0 = new Short((short) (-117));
      assertNotNull(short0);
      assertEquals((short) (-117), (short)short0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{1}", bitSet1.toString());
      assertEquals(2, bitSet1.length());
      assertEquals(1, bitSet1.cardinality());
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      Comparator<Byte> comparator1 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte[] byteArray2 = ArrayUtils.sort(byteArray0, (Comparator<? super Byte>) comparator1);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray0, byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      byte byte0 = (byte)56;
      Byte byte1 = new Byte((byte)56);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)56, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte2 = new Byte((byte)56);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)56, (byte)byte2);
      
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, (Byte) null);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) byte0);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, (int) (short)36);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) (byte)56;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) (byte)56;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) byte0;
      shortArray0[8] = (short) byte0;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)56);
      assertArrayEquals(new short[] {(short)56, (short)56, (short)56, (short)56, (short)56, (short)56, (short)0, (short)56, (short)56}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 1915L);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray2 = new byte[0];
      int[] intArray0 = new int[0];
      byte[] byteArray3 = ArrayUtils.removeAll(byteArray2, intArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, byteArray3.length);
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2718);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2718, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(69);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertEquals(69, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-75));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-75), (int)integer3);
      
      integerArray0[3] = integer3;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 2718, 69, (-75)}, intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(4, integerArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 566.4602831141126;
      doubleArray0[1] = 566.4602831141126;
      doubleArray0[2] = 3048.987;
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 566.4602831141126;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, (int) 0, (Object) byte0);
      assertEquals(7, objectArray0.length);
      assertNotNull(object0);
      assertEquals(566.4602831141126, object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 0;
      Object object1 = ArrayUtils.get(objectArray0, (-70), object0);
      assertEquals(7, objectArray0.length);
      assertNotNull(object1);
      assertEquals(566.4602831141126, object1);
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) 3048.987;
      objectArray0[5] = (Object) 0;
      objectArray0[6] = (Object) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '566.4602831141126', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      long[] longArray0 = new long[7];
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '.';
      Object[] objectArray0 = new Object[2];
      Byte byte0 = new Byte((byte)6);
      assertNotNull(byte0);
      assertEquals((byte)6, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)6, object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertEquals((byte)6, object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = (Object) '.';
      ArrayUtils.swap(objectArray0, 2, 4);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, (int) (byte)11);
      assertEquals(2, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)11;
      intArray0[1] = (int) '.';
      intArray0[2] = (int) '.';
      intArray0[3] = (int) '.';
      intArray0[4] = 120;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 46, (int) (byte)6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.addAll((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2424;
      intArray0[1] = 70;
      intArray0[2] = 2424;
      intArray0[3] = 0;
      intArray0[4] = 70;
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 70;
      intArray0[3] = 2424;
      doubleArray0[3] = (double) 70;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 2424;
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-521));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[2] = 0.0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2303.0F);
      floatArray0[1] = 121.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-2303.0F), 121.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-2303.0F), (-41), (double) (-2303.0F));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-82));
      assertNull(byteArray0);
      
      ArrayUtils.shift(doubleArray0, (int) (byte) (-82), 104, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '.';
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '.';
      intArray0[1] = (int) 'k';
      intArray0[2] = (int) '.';
      intArray0[3] = (int) '.';
      intArray0[4] = (int) '.';
      intArray0[5] = (int) (byte)11;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 3098);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {46, 107, 46, 46, 46, 11}, intArray0);
      assertArrayEquals(new int[] {3098, 46, 107, 46, 46, 46, 11}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '.';
      floatArray0[1] = (float) 46;
      floatArray0[2] = (float) (byte)11;
      floatArray0[3] = (float) 46;
      floatArray0[4] = (-426.4F);
      floatArray0[5] = (float) 46;
      floatArray0[6] = (float) '.';
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {46.0F, 46.0F, 11.0F, 46.0F, (-426.4F), 46.0F, 46.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 46;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 46.0F;
      doubleArray0[3] = (double) 3098;
      doubleArray0[4] = (double) (-426.4F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3098.0, 13);
      assertArrayEquals(new double[] {46.0, 1.0, 46.0, 3098.0, (-426.3999938964844)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, int0);
      
      Byte[] byteArray1 = new Byte[2];
      Byte byte0 = new Byte((byte)11);
      assertNotNull(byte0);
      assertEquals((byte)11, (byte)byte0);
      
      byteArray1[0] = byte0;
      byte byte1 = (byte) (-34);
      Byte byte2 = new Byte((byte) (-34));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-34), (byte)byte2);
      
      byteArray1[1] = byte2;
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object0);
      assertFalse(object0.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte2));
      assertEquals((byte) (-34), object0);
      
      Byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, object0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertEquals(1, byteArray2.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray2);
      assertFalse(object0.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte2));
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, (byte[]) null);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 0L);
      assertNull(longArray0);
      
      ArrayUtils.reverse((Object[]) null);
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)56;
      byteArray1[0] = (byte) (-6);
      byteArray1[2] = (byte) (-64);
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)56;
      byteArray2[1] = (byte)15;
      byteArray2[2] = (byte) (-64);
      byteArray2[3] = (byte) (-6);
      byteArray2[4] = (byte) (-64);
      byteArray2[5] = (byte)56;
      byteArray2[6] = (byte) (-6);
      byteArray2[7] = (byte) (-64);
      byteArray2[8] = (byte) (-6);
      byte[] byteArray3 = ArrayUtils.removeElements(byteArray1, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray3);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)0, (byte) (-64)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)56, (byte)15, (byte) (-64), (byte) (-6), (byte) (-64), (byte)56, (byte) (-6), (byte) (-64), (byte) (-6)}, byteArray2);
      assertEquals(1, byteArray3.length);
      assertEquals(3, byteArray1.length);
      assertEquals(9, byteArray2.length);
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Byte byte0 = new Byte((byte) (-64));
      assertNotNull(byte0);
      assertEquals((byte) (-64), (byte)byte0);
      
      byte[] byteArray4 = new byte[7];
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      
      byteArray4[0] = (byte) (-6);
      byteArray4[1] = (byte)15;
      byteArray4[2] = (byte)56;
      byteArray4[3] = (byte) (-6);
      byteArray4[4] = (byte)56;
      byteArray4[5] = (byte)56;
      byteArray4[6] = (byte)15;
      ArrayUtils.shift(byteArray4, (int) (byte)56);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)15, (byte)56, (byte) (-6), (byte)56, (byte)56, (byte)15}, byteArray4);
      assertEquals(7, byteArray4.length);
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)7);
      assertNotNull(byte0);
      assertEquals((byte)7, (byte)byte0);
      
      byteArray0[0] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-68), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -68, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 71;
      floatArray0[1] = (float) 71;
      floatArray0[2] = (float) 71;
      floatArray0[3] = (float) 71;
      floatArray0[4] = (float) 71;
      floatArray0[5] = (float) 71;
      floatArray0[6] = (float) 71;
      ArrayUtils.shift(floatArray0, (-5341));
      assertArrayEquals(new float[] {71.0F, 71.0F, 71.0F, 71.0F, 71.0F, 71.0F, 71.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long(1132L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1132L, (long)long1);
      
      Long long2 = Long.getLong(".Kct^RkLvgPf* !");
      assertNull(long2);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = null;
      longArray0[1] = null;
      longArray0[2] = null;
      longArray0[3] = long1;
      longArray0[4] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1156L));
      assertArrayEquals(new long[] {(-1156L), (-1156L), (-1156L), 1132L, 1132L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = new Byte((byte) (-2));
      assertNotNull(byte0);
      assertEquals((byte) (-2), (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)3);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)3, (byte)byte1);
      
      byteArray0[1] = byte1;
      byte byte2 = (byte)20;
      Byte byte3 = new Byte((byte)20);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)20, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)1);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)1);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertEquals((byte)1, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-33));
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertEquals((byte) (-33), (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)119);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertEquals((byte)119, (byte)byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte(byte2);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte4));
      assertTrue(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte0));
      assertEquals((byte)20, (byte)byte8);
      
      byteArray0[7] = byte8;
      Byte byte9 = ArrayUtils.get(byteArray0, (-427));
      assertEquals(8, byteArray0.length);
      assertNull(byte9);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1780.149F);
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) (byte)126;
      floatArray0[3] = (-1780.149F);
      floatArray0[4] = (float) 3;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 3.0F, 54);
      assertArrayEquals(new float[] {(-1780.149F), 3.0F, 126.0F, (-1780.149F), 3.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(4, int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)126;
      shortArray0[1] = (short) (-692);
      shortArray0[2] = (short) (-97);
      shortArray0[3] = (short) (byte)126;
      shortArray0[4] = (short) (-692);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1);
      assertArrayEquals(new short[] {(short)126, (short) (-692), (short) (-97), (short)126, (short) (-692)}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-97);
      intArray0[1] = (int) (short) (-692);
      intArray0[2] = 2;
      intArray0[3] = (int) (short) (-692);
      intArray0[4] = (int) (short) (-97);
      intArray0[5] = (-688);
      intArray0[6] = 3;
      intArray0[7] = 3;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-97), (-692), 2, (-692), (-97), (-688), 3, 3}, intArray1);
      assertArrayEquals(new int[] {(-97), (-692), 2, (-692), (-97), (-688), 3, 3}, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1780.149F), 3.0F, 126.0F, (-1780.149F), 3.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte) (-4));
      assertNotNull(byte0);
      assertEquals((byte) (-4), (byte)byte0);
      
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte)3);
      assertNotNull(byte0);
      assertEquals((byte)3, (byte)byte0);
      
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = 'y';
      charArray0[2] = 'c';
      charArray0[3] = 'Q';
      charArray0[4] = 'c';
      charArray0[5] = 'A';
      charArray0[6] = 'W';
      charArray0[7] = 'J';
      char[] charArray1 = ArrayUtils.remove(charArray0, 2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'0', 'y', 'c', 'Q', 'c', 'A', 'W', 'J'}, charArray0);
      assertArrayEquals(new char[] {'0', 'y', 'Q', 'c', 'A', 'W', 'J'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) '0';
      longArray0[1] = (long) 'c';
      longArray0[2] = (long) 'A';
      longArray0[3] = (long) 'A';
      longArray0[4] = 4443L;
      longArray0[5] = (long) 'J';
      longArray0[6] = (long) '0';
      longArray0[7] = (long) 'J';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {48L, 99L, 65L, 65L, 4443L, 74L, 48L, 74L}, longArray0);
      assertEquals(16, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      Float float0 = new Float((float) (byte)1);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ':';
      charArray0[1] = ':';
      char[] charArray1 = ArrayUtils.add(charArray0, '.');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray0);
      assertArrayEquals(new char[] {':', ':', '.'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {':', ':'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(characterArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray1, '$');
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray0);
      assertArrayEquals(new char[] {':', ':', '.'}, charArray1);
      assertArrayEquals(new char[] {':', ':', '.'}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((int) (byte)1, longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = new Byte((byte) (-78));
      assertNotNull(byte0);
      assertEquals((byte) (-78), (byte)byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-84);
      Byte byte2 = new Byte((byte) (-84));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-84), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-84));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-84), (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte1);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertEquals((byte) (-84), (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = Byte.valueOf((byte)84);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertEquals((byte)84, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = Byte.valueOf((byte)84);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertEquals((byte)84, (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)12);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertEquals((byte)12, (byte)byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte)71);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte0));
      assertEquals((byte)71, (byte)byte8);
      
      byteArray0[7] = byte8;
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (Byte[]) null);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = 'k';
      charArray0[4] = '.';
      charArray0[5] = '.';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'k');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'.', '.', '.', 'k', '.', '.'}, charArray0);
      assertArrayEquals(new char[] {'.', '.', '.', '.', '.'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'k';
      doubleArray0[1] = (double) '.';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)11, 1403, 22.47398242035148);
      assertArrayEquals(new double[] {107.0, 46.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 733.38865812137;
      doubleArray0[3] = (-537.27737141392);
      doubleArray0[4] = (-1.0);
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 733.38865812137, (-537.27737141392), (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-757);
      shortArray0[2] = (short) (-1633);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-757), (short) (-1633)}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)17, (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-294.278);
      doubleArray0[1] = (-1188.351);
      doubleArray0[2] = 0.0;
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      MockRandom mockRandom0 = new MockRandom(2);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(2);
      assertEquals(0, int0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      mockRandom0.setSeed(2);
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(16, (int)integer0);
      
      Integer integer1 = new Integer(322);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(322, (int)integer1);
      
      Integer integer2 = new Integer((byte) (-84));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-84), (int)integer2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-84);
      ArrayUtils.shift(byteArray0, 51, (int) (byte) (-7), 0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-84)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ArrayUtils.reverse((short[]) null, 363, (int) (byte) (-84));
      short[] shortArray1 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      intArray0[2] = 1;
      intArray0[3] = 9;
      intArray0[4] = 2626;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), 9);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, (-1), 1, 9, 2626}, intArray0);
      assertArrayEquals(new int[] {1, (-1), 1, 9, 2626}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Character character0 = new Character('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      Character[] characterArray0 = new Character[2];
      Character character1 = Character.valueOf('K');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('K', (char)character1);
      
      characterArray0[0] = character1;
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'K', 'K'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.shift(charArray0, (-1999));
      assertArrayEquals(new char[] {'K', 'K'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.shift((double[]) null, 2626, (-1999), 90);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(0, objectArray0.length);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-2132L);
      longArray0[1] = (-1362L);
      longArray0[2] = (long) 1408;
      longArray0[3] = 58L;
      longArray0[4] = (-16L);
      longArray0[5] = (long) 1408;
      longArray0[6] = 58L;
      ArrayUtils.swap(longArray0, 1408, 1040, 0);
      assertArrayEquals(new long[] {(-2132L), (-1362L), 1408L, 58L, (-16L), 1408L, 58L}, longArray0);
      assertEquals(7, longArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1908, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1908, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1287;
      longArray0[2] = (long) 1287;
      longArray0[3] = (long) 1287;
      longArray0[4] = (long) 1287;
      longArray0[5] = (long) 1287;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)147;
      Byte byte0 = new Byte((byte)103);
      assertNotNull(byte0);
      assertEquals((byte)103, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)103, object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 147;
      Byte byte1 = new Byte((byte) (-27));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)object0));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-27), (byte)byte1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object1);
      assertFalse(byte1.equals((Object)object0));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(object1.equals((Object)byte0));
      assertFalse(object1.equals((Object)object0));
      assertEquals((byte) (-27), object1);
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) 1287L;
      longArray0[0] = 1287L;
      objectArray0[4] = (Object) 1287L;
      objectArray0[5] = (Object) 1287L;
      objectArray0[6] = (Object) byte0;
      objectArray0[7] = (Object) 1287L;
      boolean boolean0 = ArrayUtils.isSameType(1287L, object0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)object1));
      assertFalse(object0.equals((Object)byte1));
      assertFalse(object0.equals((Object)object1));
      assertFalse(boolean0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte byte2 = new Byte((byte) (-67));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)object0));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)object1));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-67), (byte)byte2);
      
      Byte byte3 = ArrayUtils.get(byteArray0, (int) 103, byte2);
      assertEquals(0, byteArray0.length);
      assertNotNull(byte3);
      assertFalse(byte2.equals((Object)object0));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)object1));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte3.equals((Object)object0));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)object1));
      assertEquals((byte) (-67), (byte)byte3);
      
      Byte byte4 = new Byte((byte) (-27));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)object1));
      assertFalse(byte4.equals((Object)object0));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte) (-27), (byte)byte4);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) byte3, (Object) byte4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      Byte byte0 = new Byte((byte)116);
      assertNotNull(byte0);
      assertEquals((byte)116, (byte)byte0);
      
      Byte byte1 = new Byte((byte)4);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)4, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[1] = byteArray0[0];
      byteArray0[2] = byte0;
      byteArray0[3] = byte1;
      Byte[] byteArray1 = ArrayUtils.insert((int) 4, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      org.evosuite.runtime.Random.setNextRandom(1972);
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      Float float0 = new Float((float) (byte)1);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      Byte byte2 = new Byte((byte)1);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ':';
      charArray0[1] = ':';
      char[] charArray1 = ArrayUtils.add(charArray0, '.');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray0);
      assertArrayEquals(new char[] {':', ':', '.'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {':', ':'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(characterArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
      
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, '!');
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertArrayEquals(new char[] {':', ':'}, charArray2);
      assertArrayEquals(new char[] {':', ':'}, charArray0);
      assertEquals(2, charArray2.length);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)1;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) booleanArray1, (Object[]) characterArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertArrayEquals(new char[] {':', ':'}, charArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(boolean2);
      
      Byte[] byteArray1 = new Byte[8];
      byteArray1[0] = byte2;
      byteArray1[1] = (Byte) (byte)1;
      byteArray1[2] = byte2;
      byteArray1[3] = byte1;
      byteArray1[4] = byte1;
      byteArray1[5] = byte1;
      byteArray1[6] = byte1;
      byteArray1[7] = byte1;
      Byte[] byteArray2 = ArrayUtils.insert((int) 1, byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(16, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Long[] longArray0 = new Long[7];
      Long long0 = Long.getLong("N^0]hiq<#%=xDPc#9t", (-1478L));
      assertNotNull(long0);
      assertEquals((-1478L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(byte0);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((byte)1);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(1L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-577L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertEquals((-577L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((long) longArray0[3]);
      assertEquals(7, longArray0.length);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long3));
      assertEquals((-577L), (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((-1156L));
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertEquals((-1156L), (long)long5);
      
      longArray0[5] = long5;
      Long long6 = Long.getLong("N^0]hiq<#%=xDPc#9t");
      assertNull(long6);
      
      longArray0[6] = null;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) byte0);
      assertArrayEquals(new long[] {(-1478L), 1L, 1L, (-577L), (-577L), (-1156L), 1L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      Byte byte0 = new Byte((byte)22);
      assertNotNull(byte0);
      assertEquals((byte)22, (byte)byte0);
      
      Byte byte1 = new Byte((byte)37);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)37, (byte)byte1);
      
      Byte byte2 = new Byte((byte)22);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)22, (byte)byte2);
      
      Byte byte3 = new Byte((byte)80);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)80, (byte)byte3);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)37, (int) (byte)80, 2224);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 82;
      char[] charArray0 = ArrayUtils.add((char[]) null, 'N');
      assertArrayEquals(new char[] {'N'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 27;
      doubleArray0[1] = (double) 27;
      doubleArray0[2] = (double) (byte)80;
      doubleArray0[3] = (double) 82;
      doubleArray0[4] = (double) 'N';
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2147208046, 2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {27.0, 27.0, 80.0, 82.0, 78.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      Long long0 = new Long(2257L);
      assertNotNull(long0);
      assertEquals(2257L, (long)long0);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {2257L, 2257L, 2257L, 2257L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertArrayEquals(new int[] {1, 1, 1}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals("{1, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.contains(longArray1, 664L);
      assertArrayEquals(new long[] {2257L, 2257L, 2257L, 2257L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (long)longArray0[2];
      doubleArray0[1] = (double) (long)longArray0[2];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) longArray0[2]);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2257.0, 2257.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(4, longArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short) (-1200));
      assertNotNull(short0);
      assertEquals((short) (-1200), (short)short0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-1200);
      doubleArray0[3] = (double) (short) (-1200);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1200.0), 0.0, 0.0, (-1200.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      charArray0[5] = 'E';
      char[] charArray1 = ArrayUtils.add(charArray0, 'E');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'E', 'E', 'E', 'E', 'E', 'E'}, charArray0);
      assertArrayEquals(new char[] {'E', 'E', 'E', 'E', 'E', 'E', 'E'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(charArray0, (-714), 56, (-7));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'E', 'E', 'E', 'E', 'E', 'E'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-7);
      intArray0[1] = (int) (short) (-1200);
      intArray0[2] = (int) 'E';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 69, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)14;
      shortArray0[2] = (short)14;
      shortArray0[3] = (short) (-987);
      shortArray0[4] = (short)9;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-458);
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      Byte[] byteArray0 = new Byte[0];
      ArrayUtils.swap(shortArray0, 1941, (int) (short)14, 955);
      assertArrayEquals(new short[] {(short)121, (short)14, (short)14, (short) (-987), (short)9, (short) (-1), (short) (-458), (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.insert((-1540), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      int int0 = ArrayUtils.indexOf((short[]) null, (short)1822);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-1);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, Integer.MAX_VALUE);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), Integer.MAX_VALUE, (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (float) (-1540), (int) (short)1822);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-6725), 2119951806);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)3108);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)40;
      Short short0 = new Short((byte)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Short[] shortArray0 = new Short[4];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[3]);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (short)shortArray0[1];
      doubleArray0[4] = (double) (byte)40;
      doubleArray0[5] = (double) (short)shortArray0[3];
      doubleArray0[6] = (double) (short)shortArray0[3];
      doubleArray0[7] = (double) (short)shortArray0[3];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, 0.0, 40.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, 0.0, 40.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'A';
      charArray0[2] = 'E';
      charArray0[3] = '[';
      charArray0[4] = '+';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '+');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'i', 'A', 'E', '[', '+'}, charArray0);
      assertArrayEquals(new char[] {'i', 'A', 'E', '['}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift((Object[]) shortArray0, 1, (int) shortArray0[3], (int) (short) (-1));
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (byte)21);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, ';');
      assertNull(charArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'F';
      floatArray0[1] = (float) (byte)21;
      floatArray0[2] = (float) ';';
      floatArray0[3] = (float) ';';
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) ';';
      floatArray0[6] = (float) (byte)21;
      floatArray0[7] = (float) ';';
      floatArray0[8] = (float) (-1);
      ArrayUtils.shift(floatArray0, (-1), 1, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {70.0F, 21.0F, 59.0F, 59.0F, (-1.0F), 59.0F, 21.0F, 59.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)98;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)98, 6025);
      assertArrayEquals(new byte[] {(byte)21, (byte)98, (byte)98, (byte)98, (byte)21, (byte)21, (byte)98}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((byte)80);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)80;
      ArrayUtils.shift(floatArray0, (-1), (int) (byte)80, (-1));
      assertArrayEquals(new float[] {80.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(2736.447323294);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(2736.447323294, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 1.0, 2736.447323294}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      Float[] floatArray0 = new Float[15];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Character character0 = new Character('-');
      assertNotNull(character0);
      assertEquals('-', (char)character0);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'-', '-', '-', '-', '-', '-', '-'}, charArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.shift(charArray0, (int) character0);
      assertArrayEquals(new char[] {'-', '-', '-', '-', '-', '-', '-'}, charArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray1 = ArrayUtils.add(charArray0, (char) character0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'-', '-', '-', '-', '-', '-', '-', '-'}, charArray1);
      assertArrayEquals(new char[] {'-', '-', '-', '-', '-', '-', '-'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(charArray0, (int) character0, (int) character0, (-2701));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'-', '-', '-', '-', '-', '-', '-'}, charArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)28;
      ArrayUtils.shift(byteArray0, (int) (byte)13, Integer.MAX_VALUE, (int) (byte) (-107));
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)28, (byte) (-107), (byte)28}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ArrayUtils.swap((Object[]) characterArray0, 826, (-5237), (-2104));
      assertEquals(7, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 566.4602831141126;
      int[] intArray0 = new int[1];
      intArray0[0] = (-431);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-431));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-431)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = '6';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '6', 13);
      assertArrayEquals(new char[] {'@', '6'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byte byte0 = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      byte byte1 = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-105);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1749), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1749, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      Byte[] byteArray0 = ArrayUtils.insert(Integer.MAX_VALUE, (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      Long long0 = new Long(294L);
      assertNotNull(long0);
      assertEquals(294L, (long)long0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty((short[]) null);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      MockRandom mockRandom0 = new MockRandom(914L);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(Integer.MAX_VALUE);
      assertEquals(0, int0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      mockRandom0.setSeed((-731L));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-1114.30275);
      doubleArray0[2] = 541.0;
      doubleArray0[3] = (double) (-731L);
      doubleArray0[4] = 1220.6155757798;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) (-731L);
      doubleArray0[8] = (double) 294L;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 546.867, 0);
      assertArrayEquals(new double[] {1.5, (-1114.30275), 541.0, (-731.0), 1220.6155757798, 2.147483647E9, (-1.0), (-731.0), 294.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-294.278);
      doubleArray0[1] = (-1188.4);
      doubleArray0[2] = 0.0;
      Long long0 = new Long((-1802L));
      assertNotNull(long0);
      assertEquals((-1802L), (long)long0);
      
      Long long1 = new Long(1556L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1556L, (long)long1);
      
      Long long2 = new Long((-1105L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-1105L), (long)long2);
      
      Long long3 = new Long((-3768L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertEquals((-3768L), (long)long3);
      
      Long long4 = new Long(3137L);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertEquals(3137L, (long)long4);
      
      Long[] longArray0 = null;
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)14;
      shortArray0[2] = (short)14;
      shortArray0[3] = (short) (-987);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)147;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)147;
      doubleArray0[1] = (double) (short)121;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short) (-987);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) (short)147;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (short)0);
      assertArrayEquals(new double[] {147.0, 121.0, 0.0, (-987.0), 0.0, 1.0, 147.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (short)121);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {121}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)14, (short)14, (short) (-987), (short)0, (short) (-1), (short)0, (short)147}, shortArray0);
      assertArrayEquals(new short[] {(short)14, (short)14, (short) (-987), (short) (-1), (short)147}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.swap((long[]) null, (int) (short)147, 2370, 2);
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray1, 1136);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1136, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-2119227284));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      ArrayUtils.swap((long[]) null, (-2119227284), (-2119227284), 2);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 64);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {64L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[1];
      intArray0[0] = 64;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 1078L, 2626);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      Character[] characterArray0 = new Character[1];
      char char0 = '';
      Character character0 = Character.valueOf('');
      assertNotNull(character0);
      assertEquals('', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertArrayEquals(new char[] {''}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) characterArray0, (Object[]) booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertEquals(1, characterArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Byte[] byteArray1 = new Byte[6];
      byteArray1[0] = (Byte) (byte) (-92);
      byteArray1[1] = (Byte) (byte) (-92);
      byteArray1[2] = (Byte) (byte) (-92);
      byteArray1[3] = (Byte) (byte) (-92);
      byteArray1[4] = (Byte) (byte) (-92);
      byteArray1[5] = (Byte) (byte) (-92);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1151), byteArray1, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1151, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      Byte byte0 = new Byte((byte)123);
      assertNotNull(byte0);
      assertEquals((byte)123, (byte)byte0);
      
      Byte byte1 = new Byte((byte)123);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)123, (byte)byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertEquals((byte)123, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((char[]) null, 2145402940, (int) (byte)123);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)123;
      int int0 = 2981;
      ArrayUtils.swap(byteArray0, (int) (byte)123, 43, 2981);
      assertArrayEquals(new byte[] {(byte)123, (byte)123, (byte)123, (byte)123}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Byte byte2 = new Byte((byte)123);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)object0));
      assertEquals((byte)123, (byte)byte2);
      
      byte byte3 = (byte)7;
      Byte byte4 = new Byte((byte)7);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)object0));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte)7, (byte)byte4);
      
      Byte byte5 = new Byte((byte)123);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)object0));
      assertTrue(byte5.equals((Object)byte2));
      assertEquals((byte)123, (byte)byte5);
      
      Byte byte6 = ArrayUtils.get((Byte[]) null, (-1), byte5);
      assertNotNull(byte6);
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)object0));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)object0));
      assertFalse(byte6.equals((Object)byte4));
      assertEquals((byte)123, (byte)byte6);
      
      int int1 = ArrayUtils.hashCode((Object) byte4);
      assertFalse(byte4.equals((Object)byte5));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)object0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte6));
      assertFalse(int1 == int0);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ArrayUtils.sort((Byte[]) null, (Comparator<? super Byte>) comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean1 = ArrayUtils.isArrayIndexValid((Byte[]) null, (-323));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray2 = ArrayUtils.insert(0, intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertEquals(15, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      float[] floatArray0 = null;
      int int0 = 37;
      int int1 = (-4323);
      ArrayUtils.swap((float[]) null, 37, 2, (-4323));
      Byte byte0 = new Byte((byte)93);
      assertNotNull(byte0);
      assertEquals((byte)93, (byte)byte0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-93.745834F));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.swap(floatArray1, (-1905), 120, 6);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-197));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'F');
      assertNull(charArray0);
      
      ArrayUtils.shift((float[]) null, 2361, (int) 'F', 0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)98;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)98, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)98}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = 2;
      intArray0[2] = (-1);
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), 2, (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), 2, (-1), 2, (-1), (-1)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[3] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Byte byte0 = ArrayUtils.get((Byte[]) null, 675);
      assertNull(byte0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) characterArray0, (Object) null);
      assertEquals(0, characterArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      byte byte0 = (byte)21;
      Byte byte1 = new Byte((byte)21);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)21, (byte)byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte byte2 = (byte)95;
      Byte byte3 = new Byte((byte)95);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)object0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)95, (byte)byte3);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-250), 2361);
      assertNull(floatArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) (-197);
      longArray0[2] = (long) (-197);
      longArray0[3] = (long) (-250);
      longArray0[4] = (long) (-250);
      longArray0[5] = (long) (-197);
      ArrayUtils.shift(longArray0, (-3472), Integer.MAX_VALUE, (-552));
      assertArrayEquals(new long[] {2147483647L, (-197L), (-197L), (-250L), (-250L), (-197L)}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1, 6);
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short) (-1807);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-1807), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1807);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (short) (-1807);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1807));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-1807), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1807.0), 1.0, (-1807.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1807.0), 1.0, (-1807.0), 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (int) (short) (-1807);
      intArray0[2] = 0;
      intArray0[3] = (int) (short) (-1807);
      intArray0[4] = 0;
      intArray0[5] = (int) (short) (-1807);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1807), 0, (-1807), 0, (-1807)}, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-327), 6);
      assertArrayEquals(new int[] {0, (-1807), 0, (-1807), 0, (-1807)}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      Byte byte0 = ArrayUtils.get((Byte[]) null, (-1017));
      assertNull(byte0);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (-1017));
      assertArrayEquals(new float[] {(-1017.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)8}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)8;
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '9';
      charArray0[2] = 'F';
      charArray0[3] = '=';
      charArray0[4] = 'o';
      charArray0[5] = 'g';
      charArray0[6] = '[';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'0', '9', 'F', '=', 'o', 'g', '['}, charArray1);
      assertArrayEquals(new char[] {'0', '9', 'F', '=', 'o', 'g', '['}, charArray0);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)8;
      shortArray0[1] = (short) (byte)8;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)1;
      shortArray0[5] = (short) (byte)8;
      shortArray0[6] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)8, (short)8, (short)0, (short)0, (short)1, (short)8, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)8, (short)8, (short)0, (short)0, (short)1, (short)8, (short)1}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) 8L);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 72L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertArrayEquals(new long[] {72L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(1, int0);
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1811.49386354);
      doubleArray0[1] = (-878.3311477);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 50.0;
      doubleArray0[4] = 0.1;
      doubleArray0[5] = (-7435.534180795986);
      doubleArray0[6] = (-1656.773298293421);
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = 1123.179253056933;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {(-1811.49386354), (-878.3311477), (-1.0), 50.0, 0.1, (-7435.534180795986), (-1656.773298293421), Double.NaN, 1123.179253056933}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      ArrayUtils.swap(intArray0, (-1), (-1), (-1));
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1811.49386354), (-878.3311477), (-1.0), 50.0, 0.1, (-7435.534180795986), (-1656.773298293421), Double.NaN, 1123.179253056933}, doubleArray0, 0.01);
      assertEquals(18, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, 4.6, (-1811.49386354));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1811.49386354), (-878.3311477), (-1.0), 50.0, 0.1, (-7435.534180795986), (-1656.773298293421), Double.NaN, 1123.179253056933}, doubleArray0, 0.01);
      assertEquals(18, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-22);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-22)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-22)}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (int) (short) (-48);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short) (-48), 1072);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Character character0 = new Character('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'K';
      ArrayUtils.shift(charArray0, 1072);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.reverse((double[]) null);
      char[] charArray1 = ArrayUtils.add(charArray0, '&');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(charArray1, 0, 1072, 90);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-107);
      ArrayUtils.shift(byteArray0, (int) (byte) (-107), (int) (byte)13, (-48));
      assertArrayEquals(new byte[] {(byte)2, (byte)28, (byte)2, (byte) (-107)}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-141));
      assertArrayEquals(new int[] {(-141)}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-0.8539262334186093), (-141), Double.NaN);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(doubleArray0, 0, 0, 1431);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-141);
      longArray0[4] = 449L;
      longArray0[5] = (long) 1431;
      longArray0[6] = (long) (-141);
      longArray0[7] = (long) 1431;
      longArray0[8] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (long) (-1));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-141L), 449L, 1431L, (-141L), 1431L, (-1L)}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean3 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean3);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)6;
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (byte) (-33));
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-59);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (byte)89;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (byte) (-59);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 2200.423866697);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2200.423866697, (-59.0), (-1.0), 89.0, (-1.0), (-59.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-59.0), (-1.0), 89.0, (-1.0), (-59.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-33);
      floatArray0[1] = (float) (byte)89;
      floatArray0[2] = (float) (byte) (-59);
      floatArray0[3] = (float) (byte)6;
      floatArray0[4] = (float) (byte)89;
      floatArray0[5] = (float) (byte)89;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 4839, (int) (byte)6);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-33.0F), 89.0F, (-59.0F), 6.0F, 89.0F, 89.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-2259), (-2259));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2259, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-68), (-2066));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      char char0 = '+';
      Character character0 = Character.valueOf('+');
      assertNotNull(character0);
      assertEquals('+', (char)character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = char0;
      charArray0[2] = char0;
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, char0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'+', '+', '+'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-2145951918);
      longArray0[1] = (long) '+';
      longArray0[3] = (long) '+';
      longArray0[4] = (long) '+';
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) '+';
      longArray1[1] = (long) '+';
      longArray1[2] = (long) Integer.MAX_VALUE;
      longArray1[3] = 1L;
      longArray1[4] = (long) char0;
      longArray1[5] = 721L;
      longArray1[6] = (long) (-2145951918);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(321, longArray0, longArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 321, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 70;
      int int1 = 205;
      int int2 = (-596);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-596), 5);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int3 = (-2851);
      ArrayUtils.swap((double[]) null, 70, 1, 1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (int) (short) (-48);
      intArray0[3] = 1072;
      intArray0[4] = 1072;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1072;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 68);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, (-48), 1072, 1072, 0, 0, 1072}, intArray0);
      assertArrayEquals(new int[] {0, 0, (-48), 1072, 1072, 0, 0, 1072}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 68);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-48);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-33), (int) (short) (-33));
      assertArrayEquals(new short[] {(short) (-48)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray0, "Array and element cannot both be null");
      assertEquals(2, stringArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      Byte byte0 = new Byte((byte)14);
      assertNotNull(byte0);
      assertEquals((byte)14, (byte)byte0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[20];
      longArray0[0] = (long) (byte)14;
      longArray0[1] = 2090L;
      longArray0[2] = (long) (byte)14;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(20, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      Byte[] byteArray0 = ArrayUtils.insert(Integer.MAX_VALUE, (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      Long long0 = new Long((-1839L));
      assertNotNull(long0);
      assertEquals((-1839L), (long)long0);
      
      Long long1 = new Long(294L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(294L, (long)long1);
      
      Long long2 = new Long((-1L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-1L), (long)long2);
      
      Long long3 = new Long(3366L);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertEquals(3366L, (long)long3);
      
      Long long4 = new Long(268L);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertEquals(268L, (long)long4);
      
      Long long5 = new Long(294L);
      assertNotNull(long5);
      assertTrue(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertEquals(294L, (long)long5);
      
      Long long6 = new Long(2257L);
      assertNotNull(long6);
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long3));
      assertEquals(2257L, (long)long6);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long1;
      longArray0[1] = long6;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {294L, 2257L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = Integer.MAX_VALUE;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 294L;
      doubleArray0[2] = (double) 268L;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) Integer.MAX_VALUE);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.147483647E9, 294.0, 268.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483647E9, 294.0, 268.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 't', (-141));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      Long long0 = new Long(769L);
      assertNotNull(long0);
      assertEquals(769L, (long)long0);
      
      Long long1 = new Long(769L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(769L, (long)long1);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long0;
      longArray0[1] = long1;
      longArray0[2] = long0;
      longArray0[3] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = new long[1];
      longArray2[0] = 0L;
      ArrayUtils.shift(longArray2, (int) (byte) (-84));
      assertArrayEquals(new long[] {0L}, longArray2);
      assertEquals(1, longArray2.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (byte) (-84);
      shortArray0[2] = (short)90;
      shortArray0[3] = (short) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short)1, (short) (-84), (short)90, (short) (-1)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(3, int0);
      
      boolean boolean1 = ArrayUtils.contains(longArray2, 207L);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertEquals(1, longArray2.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) long0;
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      long[] longArray1 = new long[0];
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 0L);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) longArray0);
      assertSame(longArray0, objectArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      
      Object[] objectArray1 = new Object[8];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) long1;
      objectArray1[1] = (Object) long0;
      objectArray1[2] = (Object) 0.0F;
      objectArray1[3] = (Object) 0.0F;
      objectArray1[4] = (Object) long1;
      objectArray1[5] = (Object) boolean0;
      objectArray1[6] = (Object) "";
      objectArray1[7] = (Object) boolean0;
      boolean boolean1 = ArrayUtils.isEmpty(objectArray1);
      assertEquals(8, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      short[] shortArray0 = new short[5];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2561, (int) (short)386);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[0] = long0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (long)longArray0[0];
      doubleArray0[1] = (-1155.09889305);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.3291112780570984;
      doubleArray0[4] = (double) (short)386;
      doubleArray0[5] = 1.5;
      doubleArray0[6] = (-365.21);
      doubleArray0[7] = (double) (short)2561;
      doubleArray0[8] = (double) (short)2561;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {(-1155.09889305), (-1.0), 0.3291112780570984, 386.0, 1.5, (-365.21), 2561.0, 2561.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (double) (short)2561;
      doubleArray1[3] = 0.3291112780570984;
      doubleArray1[4] = (-1155.09889305);
      doubleArray1[5] = (double) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1.0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 5}", bitSet0.toString());
      assertArrayEquals(new double[] {(-1.0), (-1.0), 2561.0, 0.3291112780570984, (-1155.09889305), (-1.0)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      assertNotNull(bitSet0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-62);
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-62), (int) (byte) (-62));
      assertNotSame(bitSet1, bitSet0);
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.cardinality());
      assertEquals(3, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-62), (byte) (-62)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ArrayUtils.shift(byteArray0, (-1312), (int) (byte) (-28), (-1312));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)90);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      short[] shortArray0 = new short[4];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, int0);
      
      Byte byte0 = new Byte((byte) (-7));
      assertNotNull(byte0);
      assertEquals((byte) (-7), (byte)byte0);
      
      Character character0 = new Character('>');
      assertNotNull(character0);
      assertEquals('>', (char)character0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (long) (byte)1;
      longArray0[2] = (long) (short) (-458);
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)1;
      longArray0[5] = (long) (byte)1;
      longArray0[6] = (long) (byte)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1), 3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) (byte)1;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) (-458L);
      floatArray0[4] = (float) (short) (-458);
      floatArray0[5] = (float) (short) (-1);
      floatArray0[6] = (float) 1L;
      floatArray0[7] = 1254.63F;
      floatArray0[8] = (float) (byte) (-7);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)1, 37);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1.0F, 1.0F, (-458.0F), (-458.0F), (-1.0F), 1.0F, 1254.63F, (-7.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, (-458.0F), (-458.0F), (-1.0F), 1.0F, 1254.63F, (-7.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3861);
      ArrayUtils.shift(doubleArray0, 507);
      assertArrayEquals(new double[] {(-3861.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      MockRandom mockRandom0 = new MockRandom((-45L));
      assertNotNull(mockRandom0);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-3861);
      Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-3861.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Short short0 = new Short((short)1410);
      assertNotNull(short0);
      assertEquals((short)1410, (short)short0);
      
      Short short1 = new Short((short)84);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)84, (short)short1);
      
      Short[] shortArray0 = new Short[1];
      Short short2 = new Short((short)84);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)84, (short)short2);
      
      shortArray0[0] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)84}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Byte[]) null, 13);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)6);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 507, (-796), 1791.89095647413);
      assertArrayEquals(new double[] {(-3861.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) floatArray2, (Object) null, 507);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-3861.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertTrue(int1 == int0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.lastIndexOf(shortArray1, (short)84, 1557);
      assertArrayEquals(new short[] {(short)84}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)112);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-504.99756132), (int) (byte)112, (-504.99756132));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 688.48F;
      floatArray0[1] = (float) (byte)112;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {112.0F, 688.48F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)19;
      Byte byte1 = new Byte((byte)19);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)19, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-93);
      Byte byte3 = new Byte((byte) (-93));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-93), (byte)byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte2);
      assertNotNull(byte4);
      assertFalse(byte2 == byte0);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertEquals((byte) (-93), (byte)byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte2);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte2 == byte0);
      assertEquals((byte) (-93), (byte)byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)99);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertEquals((byte)99, (byte)byte6);
      
      byteArray0[4] = byte6;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((int)byte2, Integer.MIN_VALUE, (int)byte2, (int)byte0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertEquals(5, byteArray0.length);
      assertFalse(byte0 == byte2);
      assertFalse(byte2 == byte0);
      assertFalse(boolean0);
      
      ArrayUtils.swap((double[]) null, (int) (byte) (-93), (-1713), (int) (byte) (-93));
      byte[] byteArray1 = ArrayUtils.addFirst((byte[]) null, byte0);
      assertArrayEquals(new byte[] {(byte)19}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byte0 == byte2);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-68), (-2066));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[0];
      Character character0 = Character.valueOf('+');
      assertNotNull(character0);
      assertEquals('+', (char)character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) Integer.MAX_VALUE);
      assertArrayEquals(new double[] {2.147483647E9}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) 16;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 121.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '^');
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)122;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-532));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -532, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (-94);
      intArray0[2] = (int) (short)9;
      intArray0[3] = (int) (short) (-1);
      intArray0[4] = (int) (short) (-1);
      intArray0[5] = (int) (short) (-987);
      intArray0[6] = (int) (short) (-987);
      intArray0[7] = (int) (short) (-987);
      intArray0[8] = (int) (short)9;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-987), 2343);
      assertArrayEquals(new int[] {(-1), (-94), 9, (-1), (-1), (-987), (-987), (-987), 9}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(7, int0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray0);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2424;
      intArray0[1] = 2424;
      intArray0[2] = 2424;
      intArray0[3] = 0;
      intArray0[4] = 2424;
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[12];
      ArrayUtils.shift((char[]) null, 2424);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(12, doubleArray0.length);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, '$');
      assertArrayEquals(new char[] {'$'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) 2424);
      assertNotNull(float0);
      assertEquals(2424.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {2424.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      Byte byte0 = new Byte((byte)90);
      assertNotNull(byte0);
      assertEquals((byte)90, (byte)byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object1);
      assertEquals((byte)90, object1);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, object1, 65536);
      assertEquals((-1), int0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {2424.0F}, floatArray2, 0.01F);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-94));
      assertNotNull(byte0);
      assertEquals((byte) (-94), (byte)byte0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-94);
      doubleArray0[1] = (double) (byte) (-94);
      doubleArray0[2] = (double) (byte) (-94);
      doubleArray0[3] = (double) (byte) (-94);
      float[] floatArray0 = ArrayUtils.insert((-865), (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 'J';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'W', 2146338323);
      assertArrayEquals(new char[] {'W', 'J'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "7L?");
      assertNull(stringArray0);
      
      ArrayUtils.shift((byte[]) null, (-896));
      Byte byte1 = new Byte((byte) (-94));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-94), (byte)byte1);
      
      Byte[] byteArray0 = ArrayUtils.addFirst((Byte[]) null, byte1);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      assertTrue(byte1.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 111;
      floatArray0[1] = 79.0F;
      floatArray0[2] = (float) 111;
      floatArray0[3] = (float) (-197);
      floatArray0[4] = (float) 1556;
      floatArray0[5] = (float) 1556;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1556, 111);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {111.0F, 79.0F, 111.0F, (-197.0F), 1556.0F, 1556.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1556;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) 1556;
      longArray0[3] = (long) (-197);
      longArray0[4] = (long) Integer.MAX_VALUE;
      longArray0[5] = (long) (-197);
      longArray0[6] = (-40L);
      longArray0[7] = (long) (-197);
      longArray0[8] = (long) 1556;
      ArrayUtils.shift(longArray0, 111, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new long[] {1556L, 2147483647L, 1556L, (-197L), 2147483647L, (-197L), (-40L), (-197L), 1556L}, longArray0);
      assertEquals(9, longArray0.length);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)35);
      assertNotNull(byte0);
      assertEquals((byte)35, (byte)byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-89);
      Byte byte2 = new Byte((byte) (-89));
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-89), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      int[] intArray0 = new int[9];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (int) byte1;
      intArray0[2] = 111;
      intArray0[3] = (-140);
      intArray0[4] = (-197);
      intArray0[5] = (int) (byte) (-89);
      intArray0[6] = (int) (byte)35;
      intArray0[7] = (int) byte1;
      intArray0[8] = (int) (byte)35;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 32;
      intArray0[1] = 1402;
      intArray0[2] = 3148;
      intArray0[3] = (-1);
      intArray0[4] = 160;
      intArray0[5] = (-2145345125);
      intArray0[6] = 9;
      intArray0[7] = (-2146989280);
      ArrayUtils.reverse(intArray0, (-2145345125), 0);
      assertArrayEquals(new int[] {32, 1402, 3148, (-1), 160, (-2145345125), 9, (-2146989280)}, intArray0);
      assertEquals(8, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 9;
      longArray0[1] = (long) 9;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2325), 3148);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {9L, 9L}, longArray0);
      assertArrayEquals(new long[] {9L, 9L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[15];
      floatArray0[0] = (float) 1402;
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F, (-2145345125));
      assertEquals(15, floatArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (int) (short)0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 2;
      longArray0[1] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.insert(2, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), 0L, (-1L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      boolean[] booleanArray0 = new boolean[2];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.insert(2, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {2L, (-1L), 2L, (-1L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) false;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1015);
      floatArray0[1] = 1402.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-19.0F), 2557);
      assertArrayEquals(new float[] {(-1015.0F), 1402.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-916);
      shortArray0[1] = (short) (-916);
      shortArray0[2] = (short) (-916);
      shortArray0[3] = (short) (-916);
      shortArray0[4] = (short)11;
      shortArray0[5] = (short)11;
      shortArray0[6] = (short) (-2183);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-916));
      assertArrayEquals(new short[] {(short) (-916), (short) (-916), (short) (-916), (short) (-916), (short)11, (short)11, (short) (-2183)}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = ',';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'Y';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'s', ',', 'R', 'R', 'Y'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-916), (short) (-916), (short) (-916), (short) (-916), (short)11, (short)11, (short) (-2183)}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      short[] shortArray0 = new short[5];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = longArray0[0];
      Long long0 = new Long((-2655L));
      assertNotNull(long0);
      assertEquals((-2655L), (long)long0);
      
      longArray0[2] = long0;
      Long long1 = new Long((short)2561);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(2561L, (long)long1);
      
      longArray0[3] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[17];
      Integer integer0 = new Integer((-2400));
      assertNotNull(integer0);
      assertEquals((-2400), (int)integer0);
      
      ArrayUtils.shift(byteArray0, (-2400), 1, (int) (byte)0);
      assertEquals(17, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('C');
      assertNotNull(character0);
      assertEquals('C', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'C'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-416), (int) character0, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 70, 205);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 205;
      doubleArray0[1] = (double) 205;
      doubleArray0[2] = (double) 5;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (-2231.22);
      ArrayUtils.swap(doubleArray0, (-2851), 5, (-2851));
      assertArrayEquals(new double[] {205.0, 205.0, 5.0, 0.0, 0.0, (-2231.22), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new double[] {205.0, 205.0, 5.0, 0.0, 0.0, (-2231.22), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {205.0, 205.0, 5.0, 0.0, 0.0, (-2231.22), 0.0}, doubleArray1, 0.01);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = '5';
      charArray0[2] = '6';
      charArray0[3] = '@';
      charArray0[4] = 'a';
      charArray0[5] = 'q';
      charArray0[6] = '8';
      charArray0[7] = 'Y';
      charArray0[8] = '';
      int int0 = ArrayUtils.indexOf(charArray0, '');
      assertArrayEquals(new char[] {',', '5', '6', '@', 'a', 'q', '8', 'Y', ''}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 1891);
      Double double0 = new Double(1891);
      assertNotNull(double0);
      assertEquals(1891.0, (double)double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1891;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1891}, intArray0);
      assertArrayEquals(new int[] {1891}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2377.75260549665));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom((-265L));
      assertNotNull(mockRandom0);
      
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byte byte2 = (byte)3;
      Byte byte3 = new Byte((byte)3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)3, (byte)byte3);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte3;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte3;
      byteArray0[4] = byte1;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) byte2, 205);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte2 == byte0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) byte2;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)0, (int) byte0);
      assertArrayEquals(new float[] {3.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(int1 == int0);
      assertFalse(byte0 == byte2);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)3;
      shortArray0[1] = (short) (byte)3;
      shortArray0[2] = (short) (byte)3;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) byte2;
      shortArray0[5] = (short) byte2;
      shortArray0[6] = (short) (byte)3;
      shortArray0[7] = (short) byte0;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {(short)3, (short)3, (short)3, (short)0, (short)3, (short)3, (short)3, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 205;
      intArray0[1] = (int) (short)3;
      intArray0[2] = (int) (byte)3;
      intArray0[3] = (int) byte2;
      intArray0[4] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertArrayEquals(new int[] {205, 3, 3, 3, 0}, intArray1);
      assertArrayEquals(new int[] {205, 3, 3, 3, 0}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      Integer integer0 = new Integer(1847);
      assertNotNull(integer0);
      assertEquals(1847, (int)integer0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 0, 0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean[] booleanArray3 = ArrayUtils.addAll(booleanArray1, booleanArray2);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray3.length);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-1));
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      char[] charArray1 = ArrayUtils.add(charArray0, ':');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) byte0;
      longArray0[1] = (-1L);
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1375L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, 2L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, 2L, (-1L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray0);
      assertSame(byteArray0, objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, byteArray0.length);
      assertNotNull(objectArray0);
      
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertArrayEquals(new char[] {':', ':', ':'}, charArray2);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray1);
      assertEquals(3, charArray2.length);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) ':';
      intArray0[2] = (int) byte0;
      intArray0[3] = (int) ':';
      intArray0[4] = (int) ':';
      intArray0[5] = 5;
      intArray0[6] = (int) (byte) (-1);
      ArrayUtils.shift(intArray0, 5, (-1335), 4423);
      assertArrayEquals(new int[] {(-1), 58, (-1), 58, 58, 5, (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, true, true, true}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray2.length);
      assertEquals(9, booleanArray0.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)1}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Short short0 = new Short((byte) (-49));
      assertNotNull(short0);
      assertEquals((short) (-49), (short)short0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-487L);
      longArray0[1] = (long) (short)121;
      longArray0[2] = (long) (byte)40;
      longArray0[3] = (long) (byte)40;
      longArray0[4] = 197L;
      longArray0[5] = (long) (byte) (-1);
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-487L), 121L, 40L, 40L, 197L, (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray1 = new boolean[5];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      booleanArray1[4] = true;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray1));
      assertEquals(0, booleanArray2.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 40L;
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) (-487L);
      floatArray0[4] = (float) 121L;
      floatArray0[5] = (float) (short) (-987);
      floatArray0[6] = (float) (-1L);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)40, (int) (byte)40);
      assertArrayEquals(new float[] {40.0F, 3.0F, (-1.0F), (-487.0F), 121.0F, (-987.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-2066), (-94));
      assertEquals((-1), int0);
      
      Short short0 = new Short((short) (-1726));
      assertNotNull(short0);
      assertEquals((short) (-1726), (short)short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-2066);
      floatArray0[2] = (float) (-94);
      floatArray0[3] = (float) (-2066);
      floatArray0[4] = (float) (short) (-1726);
      floatArray0[5] = (float) (-2066);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-2066.0F), (-94.0F), (-2066.0F), (-1726.0F), (-2066.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.getLength((Object) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-125));
      assertNotNull(byte0);
      assertEquals((byte) (-125), (byte)byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-125));
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-125), (byte)byte2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '4';
      char[] charArray1 = ArrayUtils.add(charArray0, 'O');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertArrayEquals(new char[] {'4', '4', 'O'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.reverse((byte[]) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byte1;
      objectArray0[1] = (Object) byte0;
      Object object0 = ArrayUtils.get(objectArray0, (int)  (-125));
      assertEquals(2, objectArray0.length);
      assertNull(object0);
      
      ArrayUtils.shift(objectArray0, (-4273));
      assertEquals(2, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(charArray1, '4');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertArrayEquals(new char[] {'4', '4', 'O'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, 2964L);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)14;
      intArray0[1] = (int) '4';
      intArray0[2] = 82;
      intArray0[3] = (int) '4';
      intArray0[4] = (int) '4';
      intArray0[5] = (int) '4';
      int int0 = ArrayUtils.indexOf(intArray0, 14, (-4273));
      assertArrayEquals(new int[] {14, 52, 82, 52, 52, 52}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '9');
      assertArrayEquals(new char[] {'9'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2230.22);
      doubleArray0[1] = (-2230.22);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2230.22), (-1.0));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-2230.22), (-2230.22)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2230.22);
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[0];
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      longArray0[7] = (long) 1;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.swap(objectArray0, (-48), 1, 1);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      Byte byte1 = new Byte((byte)48);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)object0));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)48, (byte)byte1);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte1);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      assertFalse(byte1.equals((Object)object0));
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byte1.equals((Object)object0));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char char0 = 'v';
      Character character0 = Character.valueOf('v');
      assertNotNull(character0);
      assertEquals('v', (char)character0);
      
      Character character1 = Character.valueOf('d');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertEquals('d', (char)character1);
      
      Character character2 = Character.valueOf('v');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertEquals('v', (char)character2);
      
      Character character3 = new Character('g');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertEquals('g', (char)character3);
      
      Character character4 = new Character(':');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertEquals(':', (char)character4);
      
      Character character5 = new Character('1');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)char0));
      assertEquals('1', (char)character5);
      
      Character character6 = Character.valueOf('v');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character3));
      assertEquals('v', (char)character6);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character0;
      characterArray0[1] = character6;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character5;
      characterArray0[5] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '5');
      assertArrayEquals(new char[] {'v', 'v', 'v', 'v', '1', 'd'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(charArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'C');
      assertArrayEquals(new char[] {'v', 'v', 'v', 'v', '1', 'd'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) char0);
      assertArrayEquals(new float[] {118.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      Byte byte1 = new Byte((byte)99);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)object0));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)99, (byte)byte1);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte1);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      assertFalse(byte1.equals((Object)object0));
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byte1.equals((Object)object0));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Character[] characterArray0 = new Character[8];
      char char0 = 'd';
      Character character0 = Character.valueOf('d');
      assertNotNull(character0);
      assertEquals('d', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('d', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('d');
      assertNotNull(character2);
      assertEquals('d', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('U');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertEquals('U', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(':');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character0));
      assertEquals(':', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('O');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character2));
      assertEquals('O', (char)character5);
      
      characterArray0[5] = character5;
      characterArray0[6] = (Character) char0;
      Character character6 = Character.valueOf('!');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character4));
      assertEquals('!', (char)character6);
      
      characterArray0[7] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'q');
      assertArrayEquals(new char[] {'d', 'd', 'd', 'U', ':', 'O', 'd', '!'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      assertNotNull(charArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, (char) character4);
      assertArrayEquals(new char[] {'d', 'd', 'd', 'U', ':', 'O', 'd', '!'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character6));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character5));
      assertFalse(character4.equals((Object)character0));
      assertEquals(4, int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'q';
      floatArray0[1] = (float) (char)character3;
      floatArray0[2] = (float) 'q';
      floatArray0[3] = (float) (byte)99;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) char0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {113.0F, 85.0F, 113.0F, 99.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {100.0F, 113.0F, 85.0F, 113.0F, 99.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null, (Random) mockRandom1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short) (-458);
      shortArray0[2] = (short) (-1);
      ArrayUtils.shift(shortArray0, (-75), 650, (int) (short)9);
      assertArrayEquals(new short[] {(short)9, (short) (-458), (short) (-1)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)9;
      floatArray0[1] = (float) (short) (-458);
      floatArray0[2] = (float) 650;
      floatArray0[3] = (float) (short) (-458);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {9.0F, (-458.0F), 650.0F, (-458.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.add(floatArray0, (-631.16705F));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {9.0F, (-458.0F), 650.0F, (-458.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {9.0F, (-458.0F), 650.0F, (-458.0F), (-631.16705F)}, floatArray2, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {9.0F, (-458.0F), 650.0F, (-458.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {9.0F, (-458.0F), 650.0F, (-458.0F), (-631.16705F)}, floatArray2, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte1);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[1] = (long) (byte)0;
      longArray0[2] = 2090L;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (byte)14;
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (long) (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 2090L, 0L, 0L, 14L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)14;
      shortArray0[2] = (short) (byte)0;
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 2544.37359059858, (int) (short)0, 2857.39);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '4';
      charArray0[2] = '4';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'-', '4', '4'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '4';
      objectArray0[1] = (Object) '4';
      objectArray0[2] = (Object) '-';
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      long[] longArray1 = ArrayUtils.subarray((long[]) null, 1, 1);
      assertNull(longArray1);
      
      Character character0 = Character.valueOf('/');
      assertNotNull(character0);
      assertEquals('/', (char)character0);
      
      Character character1 = Character.valueOf('/');
      assertNotNull(character1);
      assertEquals('/', (char)character1);
      
      Character character2 = new Character('+');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('+', (char)character2);
      
      Character character3 = new Character('r');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertEquals('r', (char)character3);
      
      Character character4 = Character.valueOf('/');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertEquals('/', (char)character4);
      
      Character character5 = Character.valueOf('h');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertEquals('h', (char)character5);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) long0;
      doubleArray0[3] = (double) 'h';
      doubleArray0[4] = (double) long0;
      doubleArray0[5] = (double) long0;
      doubleArray0[6] = (double) 'h';
      doubleArray0[7] = (double) '+';
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 104.0, 0.0, 0.0, 104.0, 43.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 104.0, 0.0, 0.0, 104.0, 43.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 986L;
      longArray0[1] = 1L;
      longArray0[2] = 4443L;
      longArray0[3] = 197L;
      longArray0[4] = 72L;
      longArray0[5] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, 870L);
      assertArrayEquals(new long[] {986L, 1L, 4443L, 197L, 72L, (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-1));
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'j', (int) (byte) (-1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.swap(booleanArray0, (-2257), (-1), (-1429));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)438;
      ArrayUtils.shift(shortArray0, (-2145881199), (int) (short)438, 2559);
      assertArrayEquals(new short[] {(short)438, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)438;
      intArray0[1] = (int) (short)438;
      intArray0[2] = (int) (short)438;
      intArray0[3] = (int) (short)438;
      intArray0[4] = 2559;
      intArray0[5] = 2559;
      intArray0[6] = (int) (short)438;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-431));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {438, 438, 438, 438, 2559, 2559, 438}, intArray0);
      assertArrayEquals(new int[] {438, 438, 438, 438, 2559, 2559, 438}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = '@';
      charArray0[1] = 'O';
      charArray0[2] = '6';
      charArray0[3] = 'N';
      charArray0[4] = 'd';
      charArray0[5] = 'd';
      int int0 = ArrayUtils.lastIndexOf(intArray1, 715, 438);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {438, 438, 438, 438, 2559, 2559, 438}, intArray0);
      assertArrayEquals(new int[] {438, 438, 438, 438, 2559, 2559, 438}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)25;
      Byte byte1 = new Byte((byte)25);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)25, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-101);
      Byte byte3 = new Byte((byte) (-101));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-101), (byte)byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertFalse(byte0 == byte2);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertEquals((byte)25, (byte)byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)118);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertEquals((byte)118, (byte)byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte0);
      assertNotNull(byte6);
      assertFalse(byte0 == byte2);
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertEquals((byte)25, (byte)byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)71);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte2));
      assertEquals((byte)71, (byte)byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte)25);
      assertNotNull(byte8);
      assertTrue(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte2));
      assertTrue(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte5));
      assertEquals((byte)25, (byte)byte8);
      
      byteArray0[6] = byte8;
      Byte byte9 = new Byte((byte)105);
      assertNotNull(byte9);
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte8));
      assertEquals((byte)105, (byte)byte9);
      
      byteArray0[7] = byte9;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, (int) byte2);
      assertEquals(8, byteArray0.length);
      assertFalse(byte2 == byte0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-95));
      assertArrayEquals(new byte[] {(byte)25, (byte) (-101), (byte)25, (byte)118, (byte)25, (byte)71, (byte)25, (byte)105}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-95), 3148, 2189.93347386);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)25, (byte) (-101), (byte)25, (byte)118, (byte)25, (byte)71, (byte)25, (byte)105}, byteArray1);
      assertArrayEquals(new byte[] {(byte)25, (byte) (-101), (byte)25, (byte)118, (byte)25, (byte)71, (byte)25, (byte)105}, byteArray2);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertNotNull(byteArray2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)25;
      intArray0[1] = (int) (byte) (-95);
      intArray0[2] = (int) byte0;
      intArray0[3] = 3148;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 3148);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {25, (-95), 25, 3148}, intArray0);
      assertArrayEquals(new int[] {25, (-95), 25}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = '';
      charArray0[2] = '5';
      charArray0[3] = '.';
      charArray0[4] = 'n';
      charArray0[5] = 'k';
      charArray0[6] = '\"';
      charArray0[7] = '2';
      charArray0[8] = '*';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'x';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'v', '', '5', '.', 'n', 'k', '\"', '2', '*'}, charArray0);
      assertArrayEquals(new char[] {'x'}, charArray1);
      assertArrayEquals(new char[] {'v', '', '5', '.', 'n', 'k', '\"', '2', '*'}, charArray2);
      assertEquals(9, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(9, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'P';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'P'}, charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-758), (-758));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.swap((float[]) null, 1, 6);
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short) (-1807);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-1807), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1807);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (short) (-1807);
      doubleArray0[3] = (double) 0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-2377.75260549665));
      assertArrayEquals(new double[] {(-1807.0), 1.0, (-1807.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1807.0), 1.0, (-1807.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1807.0);
      objectArray0[1] = (Object) (-1807.0);
      ArrayUtils.reverse(objectArray0, 2223, 2223);
      assertEquals(2, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, true, true, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'U';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'s', 'U'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'s', 'U'}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(2, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertSame(object1, object2);
      assertSame(object2, object1);
      assertNotNull(object2);
      
      Byte[] byteArray0 = new Byte[0];
      Byte byte1 = ArrayUtils.get(byteArray0, (-2768));
      assertEquals(0, byteArray0.length);
      assertNull(byte1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(object2, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, 1072);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Character character0 = new Character('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'K', 'K', 'K'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.shift(charArray0, (int) character0);
      assertArrayEquals(new char[] {'K', 'K', 'K'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      
      ArrayUtils.reverse((double[]) null);
      char[] charArray1 = ArrayUtils.add(charArray0, 'E');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'K', 'K', 'K'}, charArray0);
      assertArrayEquals(new char[] {'K', 'K', 'K', 'E'}, charArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(charArray0, (-7), 0, 0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'K', 'K', 'K'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 32;
      intArray0[1] = 1402;
      intArray0[2] = 3148;
      intArray0[3] = (-1);
      intArray0[4] = 160;
      intArray0[5] = (-2145345125);
      intArray0[6] = 9;
      intArray0[7] = (-2146989280);
      ArrayUtils.reverse(intArray0, (-2145345125), 0);
      assertArrayEquals(new int[] {32, 1402, 3148, (-1), 160, (-2145345125), 9, (-2146989280)}, intArray0);
      assertEquals(8, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 9;
      longArray0[1] = (long) 9;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2325), 3148);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {9L, 9L}, longArray0);
      assertArrayEquals(new long[] {9L, 9L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[15];
      floatArray0[0] = (float) 1402;
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F, (-2145345125));
      assertEquals(15, floatArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.indexOf(longArray1, 9L, 0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {9L, 9L}, longArray0);
      assertArrayEquals(new long[] {9L, 9L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(int1 == int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2424;
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, Float.NaN);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 70);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '~';
      charArray0[3] = '#';
      charArray0[4] = 'i';
      charArray0[5] = '#';
      charArray0[6] = '#';
      charArray0[7] = '#';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '#');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'#', '#', '~', '#', 'i', '#', '#', '#'}, charArray0);
      assertArrayEquals(new char[] {'#', '~', '#', 'i', '#', '#', '#'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)31);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)31, (byte)31}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)1);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      
      int int1 = ArrayUtils.indexOf(intArray0, (int) (byte)31, 2424);
      assertArrayEquals(new int[] {2424, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Byte byte0 = new Byte((byte)4);
      assertNotNull(byte0);
      assertEquals((byte)4, (byte)byte0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = object1;
      objectArray0[3] = object1;
      objectArray0[4] = object0;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-517));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '`');
      assertNull(charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (byte)4;
      floatArray0[3] = (float) (byte)4;
      floatArray0[4] = (float) 58;
      floatArray0[5] = (float) '`';
      floatArray0[6] = (float) 0;
      ArrayUtils.shift(floatArray0, 2, 1193, 1);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 4.0F, 4.0F, 58.0F, 96.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1193;
      doubleArray0[3] = (double) 4.0F;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 2.0, 1.0);
      assertArrayEquals(new double[] {2.0, 0.0, 1193.0, 4.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      short[] shortArray0 = new short[5];
      int int0 = new Short((short)386);
      assertEquals((short)386, int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long[] longArray0 = new Long[8];
      Long long0 = new Long((short)386);
      assertNotNull(long0);
      assertEquals(386L, (long)long0);
      
      longArray0[0] = long0;
      longArray0[0] = longArray0[0];
      Long long1 = new Long((-2655L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-2655L), (long)long1);
      
      longArray0[2] = long1;
      Long long2 = new Long((short)2561);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(2561L, (long)long2);
      
      longArray0[3] = long1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (long)longArray0[0];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (short)386;
      doubleArray0[3] = (double) (long)longArray0[0];
      doubleArray0[4] = (double) (long)longArray0[0];
      ArrayUtils.shift(doubleArray0, 45, (-2094), (-2094));
      assertArrayEquals(new double[] {386.0, 0.0, 386.0, 386.0, 386.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)9;
      Byte byte1 = new Byte((byte)9);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)9, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)87);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)87, (byte)byte2);
      
      Byte byte3 = ArrayUtils.get(byteArray0, 4291, byte2);
      assertEquals(1, byteArray0.length);
      assertNotNull(byte3);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)87, (byte)byte3);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte3);
      assertEquals(1, byteArray0.length);
      assertNotNull(object0);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte1));
      assertEquals((byte)87, object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, byte0);
      assertEquals(1, byteArray0.length);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      char[] charArray1 = Character.toChars(273);
      assertArrayEquals(new char[] {'\u0111'}, charArray1);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      
      Byte[] byteArray1 = ArrayUtils.insert(1443, (Byte[]) null, (Byte[]) null);
      assertNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1840700269, 1840700269);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'', '', '\u0000'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2141451390;
      floatArray0[1] = (float) '';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.14145139E9F, 127.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray0, 9, 2141451390);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {2.14145139E9F, 127.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string0 = ArrayUtils.toString(object1);
      assertNotSame(object1, object0);
      assertNotNull(string0);
      assertFalse(object1.equals((Object)object0));
      
      char[] charArray2 = ArrayUtils.removeElement(charArray1, '');
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'', '', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'', '\u0000'}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(2, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-313.63345F);
      floatArray0[4] = (-1523.412F);
      floatArray0[5] = (-91.0F);
      ArrayUtils.swap(floatArray0, 5, (-250), 3839);
      assertArrayEquals(new float[] {(-91.0F), 1.0F, (-1.0F), (-313.63345F), (-1523.412F), 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-250);
      intArray0[1] = 3839;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3839);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {(-250), 3839}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1523.412F);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2230.22);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2230.22), (-1.0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0, (-2230.22)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2230.22);
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {1}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1;
      char[] charArray0 = ArrayUtils.add((char[]) null, '=');
      assertArrayEquals(new char[] {'='}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.reverse((byte[]) null);
      Object object0 = ArrayUtils.get(objectArray0, 1);
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(1, objectArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '=';
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 1L;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 0;
      int int0 = ArrayUtils.indexOf(floatArray0, (-69.5F), 1);
      assertArrayEquals(new float[] {61.0F, 1.0F, 1.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, 48, 'f');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0, (-1255));
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, objectArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = null;
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-1255), (double) (-1255));
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[4];
      try { 
        Short.valueOf((String) null, 386);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'r';
      charArray0[0] = 'm';
      Boolean[] booleanArray1 = new Boolean[6];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray2));
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      ArrayUtils.shift((char[]) null, (-1));
      ArrayUtils.reverse((double[]) null);
      char[] charArray1 = ArrayUtils.add((char[]) null, 'l');
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray1);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(charArray0, (-1), (-1), 925);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'m', 'r', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'l';
      intArray0[1] = 925;
      intArray0[2] = (int) 'r';
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {108, 925, 114}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (-1));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) stringArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = (double) (byte) (-1);
      doubleArray0[7] = (double) (byte) (-1);
      doubleArray0[8] = (double) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 98, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      Float[] floatArray0 = new Float[15];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[1]);
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)53;
      shortArray0[4] = (short) (-1797);
      shortArray0[3] = (short)1008;
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)1008;
      longArray0[1] = (long) (short)53;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (short)53, (int) (short) (-1797));
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new long[] {1008L, 53L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)1008;
      intArray0[1] = (int) (short)1008;
      intArray0[2] = (-3469);
      intArray0[3] = (int) (short)1008;
      intArray0[4] = (int) (short) (-1797);
      boolean boolean3 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {1008, 1008, (-3469), 1008, (-1797)}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean3);
      
      boolean boolean4 = ArrayUtils.isEmpty((Object[]) floatArray0);
      assertEquals(15, floatArray0.length);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-745);
      shortArray0[2] = (short) (-745);
      shortArray0[3] = (short) (-987);
      shortArray0[4] = (short)9;
      shortArray0[5] = (short) (-4);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-4);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-4L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1353.1274F, 3);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 'A';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 't');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'W', 'A'}, charArray1);
      assertArrayEquals(new char[] {'W', 'A'}, charArray0);
      assertEquals(2, charArray1.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      short[] shortArray0 = new short[5];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2561, (int) (short)386);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short)386);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(386L, (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long((-2655L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-2655L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((short)2561);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertEquals(2561L, (long)long3);
      
      longArray0[3] = long2;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-84)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((byte) (-84));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-84), (int)integer0);
      
      Integer integer1 = new Integer((byte) (-84));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-84), (int)integer1);
      
      Integer integer2 = new Integer((-2400));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-2400), (int)integer2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '1';
      charArray0[2] = '$';
      charArray0[3] = 'g';
      charArray0[4] = '<';
      charArray0[5] = 'L';
      charArray0[6] = 'C';
      charArray0[7] = '(';
      charArray0[8] = 'k';
      ArrayUtils.reverse(charArray0, (-2400), (int) (short)2561);
      assertArrayEquals(new char[] {'k', '(', 'C', 'L', '<', 'g', '$', '1', '>'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)112);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-504.99756132), (int) (byte)112, (-504.99756132));
      assertEquals((-1), int0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((double[]) null, (-1771.8099457022), (double) 688.48F);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)112;
      shortArray0[1] = (short)48;
      shortArray0[2] = (short)48;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)112, (short)48, (short)48}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Integer integer0 = new Integer((short)48);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(48, (int)integer0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 0.3291112780570984);
      assertNull(doubleArray0);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-675L));
      assertNull(longArray0);
      
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, (int) 48, (int) 112);
      assertNull(byteArray0);
      
      Double[] doubleArray1 = new Double[2];
      Double double0 = new Double(119.0);
      assertNotNull(double0);
      assertEquals(119.0, (double)double0, 0.01);
      
      doubleArray1[0] = double0;
      Double double1 = new Double((-2309.559976843326));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2309.559976843326), (double)double1, 0.01);
      
      doubleArray1[1] = double1;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertArrayEquals(new double[] {119.0, (-2309.559976843326)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray2);
      
      ArrayUtils.swap((int[]) null, 127, 685, 1972);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 0.1, 1, 0.1);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.3291112780570984;
      doubleArray0[3] = (-2186.192117355);
      doubleArray0[4] = (double) (byte)1;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 4, (-412));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-412);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (-3811.3276F);
      floatArray0[3] = (float) 1;
      ArrayUtils.reverse(floatArray0, (-575), (-575));
      assertArrayEquals(new float[] {(-412.0F), 0.0F, (-3811.3276F), 1.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      Integer integer0 = new Integer(1116);
      assertNotNull(integer0);
      assertEquals(1116, (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = 1116;
      intArray0[5] = (-3489);
      intArray0[6] = (int) integerArray0[0];
      intArray0[7] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1116, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1);
      ArrayUtils.swap(floatArray0, (int) (short) (-1), (int) (short) (-1), (int) (short) (-1));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ArrayUtils.shift(byteArray0, (int) (byte)80);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean3 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean3);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-51);
      ArrayUtils.shift(byteArray0, (-600));
      assertArrayEquals(new byte[] {(byte) (-33), (byte)6, (byte)89, (byte) (-1), (byte) (-51)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-33);
      longArray0[1] = 1L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-33L), 1L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)95);
      assertNotNull(byte0);
      assertEquals((byte)95, (byte)byte0);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)95);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte)95;
      boolean boolean1 = ArrayUtils.isSorted(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)95, (byte)0}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      
      Byte[] byteArray2 = ArrayUtils.insert(57, (Byte[]) null, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNull(byteArray2);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 256;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {256}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 256;
      doubleArray0[1] = (double) 256;
      doubleArray0[2] = (double) 256;
      doubleArray0[3] = (double) 256;
      doubleArray0[4] = (double) 256;
      doubleArray0[5] = (-806.4);
      doubleArray0[6] = (double) 256;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {256}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      Byte[] byteArray0 = ArrayUtils.clone((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      Boolean[] booleanArray1 = new Boolean[3];
      booleanArray1[0] = boolean0;
      booleanArray1[1] = boolean2;
      booleanArray1[2] = boolean0;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray2));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)21;
      longArray0[1] = (long) (byte)21;
      longArray0[2] = (long) (byte)21;
      longArray0[3] = (long) (byte)21;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-605L), (int) (byte)21);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {21L, 21L, 21L, 21L}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-3469);
      intArray0[1] = (-3469);
      intArray0[2] = 5081;
      intArray0[3] = (-3469);
      intArray0[4] = (-4808);
      boolean boolean3 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-3469), (-3469), 5081, (-3469), (-4808)}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean3);
      
      boolean boolean4 = ArrayUtils.isEmpty((Object[]) booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, object1);
      assertEquals(3, booleanArray1.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (byte)21);
      assertArrayEquals(new short[] {(short)21}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Byte byte1 = new Byte((byte)118);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)118, (byte)byte1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) stringArray0, (Object) byte1, 438);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      Float[] floatArray0 = new Float[15];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[1]);
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)53;
      short short0 = (short) (-1797);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 1, (int) (short)53, (int) (short)53);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int int0 = 82;
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'5'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      int int1 = 642;
      ArrayUtils.swap((short[]) null, (-2130843324), 642);
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)53;
      intArray0[1] = 82;
      intArray0[2] = (int) (short) (-1797);
      ArrayUtils.shift(intArray0, 120);
      assertArrayEquals(new int[] {53, 82, (-1797)}, intArray0);
      assertEquals(3, intArray0.length);
      
      char char0 = 'J';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'J');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'5'}, charArray1);
      assertArrayEquals(new char[] {'5'}, charArray0);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 82, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      Byte byte0 = new Byte((byte)22);
      assertNotNull(byte0);
      assertEquals((byte)22, (byte)byte0);
      
      Byte byte1 = new Byte((byte)37);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)37, (byte)byte1);
      
      Byte byte2 = new Byte((byte)22);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)22, (byte)byte2);
      
      Byte byte3 = new Byte((byte)80);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)80, (byte)byte3);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("vizso::7\u0006mvh,v");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      Boolean[] booleanArray1 = new Boolean[6];
      booleanArray1[0] = boolean1;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = boolean1;
      booleanArray1[4] = boolean0;
      booleanArray1[5] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true}, booleanArray2));
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (byte)80, Integer.MAX_VALUE);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)37;
      intArray0[1] = (int) (short)1008;
      intArray0[2] = (-3469);
      boolean boolean3 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {37, 1008, (-3469)}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean3);
      
      boolean boolean4 = ArrayUtils.isEmpty((Object[]) booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short)1008;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {37, 1008, (-3469)}, intArray0);
      assertArrayEquals(new int[] {1008}, intArray1);
      assertArrayEquals(new int[] {37, (-3469)}, intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(2, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      Byte byte4 = new Byte((byte) (-122));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte) (-122), (byte)byte4);
      
      String string0 = ArrayUtils.toString((Object) byte4, "gL/*.4T)z>");
      assertNotNull(string0);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals("-122", string0);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2230.22);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2230.22), (-1.0));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {0.0, (-2230.22)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2230.22);
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {1}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L}, longArray1);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L}, longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1496;
      shortArray0[1] = (short)3921;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-1509);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)4125;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)1240, (int) (short)2);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new short[] {(short)1496, (short)3921, (short)2, (short) (-1509), (short) (-1), (short)4125}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-799.0325));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-799.0325)}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 49);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      ArrayUtils.shift(charArray0, (-1886), 4790, 49);
      assertArrayEquals(new char[] {';'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '4';
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '4';
      intArray0[1] = (int) '-';
      intArray0[2] = (int) '4';
      intArray0[3] = (-2602);
      intArray0[4] = 1435;
      intArray0[5] = (-896);
      intArray0[6] = (int) '-';
      intArray0[7] = (int) '-';
      intArray0[8] = (int) '-';
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-896), 5);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {52, 45, 52, (-2602), 1435, (-896), 45, 45, 45}, intArray0);
      assertArrayEquals(new int[] {52, 45, 52, (-2602), 1435}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)47);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)47}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1106L);
      longArray0[1] = 1L;
      longArray0[2] = (long) '-';
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1359L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1106L), 1L, 45L}, longArray0);
      assertArrayEquals(new long[] {(-1359L), (-1106L), 1L, 45L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(charArray0, (-854), 45, 83);
      assertArrayEquals(new char[] {'4', '\u0000', '-'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[4] = (int) (short) (-887);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-887)}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 3104L;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = 58L;
      longArray0[4] = (long) (short) (-887);
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) (-887);
      longArray0[3] = (-16L);
      ArrayUtils.swap(longArray0, (int) (short)0, (int) (short)0, 1408);
      assertArrayEquals(new long[] {3104L, 0L, 0L, (-16L), (-887L), 0L, 0L, (-887L), 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      char[] charArray2 = ArrayUtils.insert(1408, charArray1, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray2.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1156L);
      longArray0[1] = 1829L;
      longArray0[2] = (-2106L);
      longArray0[3] = 0L;
      longArray0[4] = 793L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-494L), 2143);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {(-1156L), 1829L, (-2106L), 0L, 793L}, longArray0);
      assertEquals(5, longArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 1.0;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-1762.9027582670853), (-8), (double) 793L);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      BitSet bitSet2 = ArrayUtils.indexesOf(longArray0, 2L);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertEquals(0, bitSet2.length());
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertArrayEquals(new long[] {(-1156L), 1829L, (-2106L), 0L, 793L}, longArray0);
      assertEquals(5, longArray0.length);
      assertNotNull(bitSet2);
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'l';
      charArray0[2] = 'v';
      charArray0[3] = 'C';
      BitSet bitSet3 = ArrayUtils.indexesOf(charArray0, 'l');
      assertNotSame(bitSet3, bitSet0);
      assertNotSame(bitSet3, bitSet2);
      assertNotSame(bitSet3, bitSet1);
      assertFalse(bitSet3.isEmpty());
      assertEquals(2, bitSet3.length());
      assertEquals(64, bitSet3.size());
      assertEquals("{1}", bitSet3.toString());
      assertEquals(1, bitSet3.cardinality());
      assertArrayEquals(new char[] {'M', 'l', 'v', 'C'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(bitSet3);
      assertFalse(bitSet3.equals((Object)bitSet0));
      assertFalse(bitSet3.equals((Object)bitSet2));
      assertFalse(bitSet3.equals((Object)bitSet1));
      
      Byte[] byteArray0 = new Byte[7];
      Byte byte0 = Byte.valueOf((byte) (-6));
      assertNotNull(byte0);
      assertEquals((byte) (-6), (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)72);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)72, (byte)byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-1));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte) (-94));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-94), (byte)byte3);
      
      byteArray0[3] = byte3;
      byte byte4 = (byte)4;
      Byte byte5 = new Byte((byte)4);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertEquals((byte)4, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte4);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertEquals((byte)4, (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)47);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      assertEquals((byte)47, (byte)byte7);
      
      byteArray0[6] = byte7;
      Byte[] byteArray1 = ArrayUtils.sort(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      Float float0 = new Float((float) (byte)1);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1600.0554F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 5);
      assertEquals(12, booleanArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '~';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '#');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'~'}, charArray0);
      assertArrayEquals(new char[] {'~'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-458);
      shortArray0[3] = (short) (-458);
      shortArray0[4] = (short) (-458);
      shortArray0[5] = (short)9;
      shortArray0[6] = (short)9;
      shortArray0[7] = (short) (-458);
      ArrayUtils.shift(shortArray0, (-216), 583, (int) (short)9);
      assertArrayEquals(new short[] {(short) (-458), (short) (-1), (short) (-1), (short) (-458), (short) (-458), (short) (-458), (short)9, (short)9}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)9;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (float) (short)9;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {9.0F, Float.NaN, 9.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)80;
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)80;
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)16;
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte)80;
      byteArray1[5] = (byte) (-113);
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)16, (byte)16, (byte)16, (byte)80, (byte) (-113), (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(9, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      Byte[] byteArray3 = new Byte[7];
      byteArray3[0] = (Byte) (byte)16;
      byteArray3[1] = (Byte) (byte)16;
      byteArray3[2] = (Byte) byte0;
      byteArray3[3] = (Byte) (byte)80;
      byteArray3[4] = (Byte) (byte)16;
      byteArray3[5] = (Byte) (byte)16;
      byteArray3[6] = (Byte) (byte)0;
      Byte[] byteArray4 = ArrayUtils.clone(byteArray3);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray3, byteArray4);
      assertEquals(7, byteArray4.length);
      assertEquals(7, byteArray3.length);
      assertNotNull(byteArray4);
      assertFalse(byteArray4.equals((Object)byteArray3));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)80;
      floatArray0[1] = (float) (byte)16;
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) (-1483);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.insert((-1483), floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {80.0F, 16.0F, 16.0F, (-1483.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {80.0F, 16.0F, 16.0F, (-1483.0F)}, floatArray2, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(4, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      short[] shortArray0 = new short[4];
      float[] floatArray0 = ArrayUtils.insert((-2110), (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = 'J';
      charArray0[2] = 'z';
      charArray0[3] = ':';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '-', 583);
      assertArrayEquals(new char[] {'=', 'J', 'z', ':'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) null, "xJ~e6anJ");
      assertNull(stringArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      ArrayUtils.shift(byteArray0, 687);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-117));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(13, byteArray0.length);
      assertNotNull(bitSet0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      Byte byte0 = new Byte((byte) (-117));
      assertNotNull(byte0);
      assertEquals((byte) (-117), (byte)byte0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      Comparator<Map.Entry<Byte, Byte>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      // Undeclared exception!
      try { 
        ArrayUtils.sort(abstractMap_SimpleImmutableEntryArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) (byte)40);
      assertNotNull(float0);
      assertEquals(40.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-412.0F));
      assertArrayEquals(new float[] {40.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[5] = '>';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '>', (-1896));
      assertEquals("{5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertArrayEquals(new char[] {'`', '`', '`', '`', '`', '>'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, (float) (byte)40);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {40.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      short short0 = (short)0;
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[2] = (int) (short)0;
      Short short1 = new Short((short)17310);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)17310, (short)short1);
      
      Short short2 = new Short((short) (-3072));
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short) (-3072), (short)short2);
      
      Short[] shortArray0 = new Short[6];
      Short short3 = new Short((short)0);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short)0, (short)short3);
      
      shortArray0[0] = short3;
      shortArray0[1] = short2;
      shortArray0[2] = short2;
      shortArray0[3] = short1;
      shortArray0[4] = short2;
      Short short4 = new Short((short)0);
      assertNotNull(short4);
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short0));
      assertEquals((short)0, (short)short4);
      
      shortArray0[5] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-3072), (short) (-3072), (short)17310, (short) (-3072), (short)0}, shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Byte[]) null, (-2145626650));
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)6);
      assertNull(byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (double) (short) (-3072), Integer.MAX_VALUE, (double) short0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(bitSet0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, (-2145626650), (int) (byte) (-1));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      Byte[] byteArray1 = ArrayUtils.insert(52, byteArray0, (Byte[]) null);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[2] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.subarray(charArray0, (int) (short)0, (int) (short)0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      Byte[] byteArray0 = ArrayUtils.insert((-777), (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray3 = ArrayUtils.removeAllOccurences(charArray0, 'F');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray3);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray3.length);
      assertNotNull(charArray3);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 32;
      intArray0[1] = 1402;
      intArray0[2] = 3148;
      intArray0[3] = (-1);
      intArray0[4] = 160;
      intArray0[5] = (-2145345125);
      intArray0[6] = 9;
      intArray0[7] = (-2146989280);
      ArrayUtils.reverse(intArray0, (-2145345125), Integer.MAX_VALUE);
      assertArrayEquals(new int[] {(-2146989280), 9, (-2145345125), 160, (-1), 3148, 1402, 32}, intArray0);
      assertEquals(8, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 9;
      longArray0[1] = (long) 1402;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2325), 3148);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {9L, 1402L}, longArray0);
      assertArrayEquals(new long[] {9L, 1402L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[15];
      floatArray0[0] = (float) 9;
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F, (-2145345125));
      assertEquals(15, floatArray0.length);
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[4];
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)80;
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)80;
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)16;
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte)80;
      byteArray1[5] = (byte) (-113);
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)16, (byte)16, (byte)16, (byte)80, (byte) (-113), (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(9, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      Byte[] byteArray3 = new Byte[7];
      byteArray3[0] = (Byte) (byte)16;
      byteArray3[1] = (Byte) (byte)16;
      byteArray3[2] = (Byte) byte0;
      byteArray3[3] = (Byte) (byte)80;
      byteArray3[4] = (Byte) (byte)16;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (byte) (-113));
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[1] = '.';
      charArray0[2] = '`';
      charArray0[3] = 'I';
      charArray0[4] = 'R';
      charArray0[5] = 'p';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'0', '.', '`', 'I', 'R', 'p'}, charArray0);
      assertArrayEquals(new char[] {'0', '.', '`', 'I', 'R', 'p'}, charArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertEquals(0, intArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '`';
      doubleArray0[1] = (double) (byte)80;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-1), 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)21;
      shortArray0[1] = (short) (byte)21;
      shortArray0[2] = (short) (byte)21;
      shortArray0[3] = (short) (byte)21;
      shortArray0[4] = (short) (byte)21;
      shortArray0[5] = (short) (byte)21;
      shortArray0[6] = (short) (byte)21;
      shortArray0[7] = (short) (byte)21;
      int[] intArray0 = ArrayUtils.insert(Integer.MAX_VALUE, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false}, booleanArray0));
      assertEquals(12, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-4979));
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.insert((-4979), (int[]) null, (int[]) null);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)14;
      shortArray0[2] = (short)14;
      shortArray0[3] = (short) (-987);
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (int) (short)14, (int) (short)121);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.subarray((float[]) null, (-3524), 2146521608);
      assertNull(floatArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '>');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 1.0F;
      float[] floatArray1 = ArrayUtils.subarray((float[]) null, 111, 111);
      assertNull(floatArray1);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)21;
      shortArray0[1] = (short) (byte)21;
      shortArray0[2] = (short) (byte)21;
      shortArray0[3] = (short) (byte)21;
      shortArray0[4] = (short) (byte)21;
      shortArray0[5] = (short) (byte)21;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)21;
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = (int) (short)21;
      intArray0[4] = (int) (short)21;
      intArray0[5] = 940;
      intArray0[6] = (int) (short)21;
      intArray0[7] = (int) (short)21;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 14, (int) (short)21);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {21, 5, 5, 21, 21, 940, 21, 21}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) 21;
      doubleArray0[3] = (double) (short)21;
      doubleArray0[4] = (double) 21;
      ArrayUtils.swap(doubleArray0, (int) (short)21, 50, 1);
      assertArrayEquals(new double[] {5.0, (-1.0), 21.0, 21.0, 21.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2230.22);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2230.22), (-1.0));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {0.0, (-2230.22)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2230.22);
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[0];
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = 355L;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      longArray0[8] = (long) 1;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {1L, 1L, 1L, 355L, 1L, 1L, 1L, 1L, 1L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.swap(objectArray0, (-48), 0, 0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short)9, 650, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)9;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 650;
      floatArray0[3] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 650);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {9.0F, 0.0F, 650.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {9.0F, 0.0F, 650.0F, 0.0F, 650.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {9.0F, 0.0F, 650.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {9.0F, 0.0F, 650.0F, 0.0F, 650.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2, 2, 311.38);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      ArrayUtils.shift((char[]) null, (-1011));
      ArrayUtils.reverse((double[]) null);
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      charArray0[6] = 'l';
      char[] charArray1 = ArrayUtils.add(charArray0, 'l');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l'}, charArray1);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l', 'l', 'l', 'l'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(7, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift((char[]) null, 2, 0, 925);
      ArrayUtils.shift((byte[]) null, 925, (-597), (-469));
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      char[] charArray2 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-2233.304803324242));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1011), 0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[2] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-311.38));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-311.38F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-311.38F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) floatArray0[0], (int) (short)0, (double) (short)0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, floatArray0.length);
      assertEquals(0, int0);
      
      ArrayUtils.shift(booleanArray0, 0, 0, (-2348));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)79;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)2240;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)743, 14);
      assertArrayEquals(new short[] {(short)79, (short)0, (short)0, (short)2240, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1202));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)1;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte)1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte1);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[1] = (long) (byte)0;
      longArray0[2] = 2090L;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (byte)14;
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (long) (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 2090L, 0L, 0L, 14L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)14;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)8;
      short[] shortArray1 = ArrayUtils.insert((int) (byte)0, shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)14, (short)0, (short)8, (short)0, (short)14, (short)0, (short)8}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)14, (short)0, (short)8}, shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) (byte)40);
      assertNotNull(float0);
      assertEquals(40.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-412.0F));
      assertArrayEquals(new float[] {40.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[5] = '>';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '`');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'`', '`', '`', '`', '`', '>'}, charArray0);
      assertArrayEquals(new char[] {'`', '`', '`', '`', '>'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(floatArray1, 2144517510, (int) (byte) (-1), (-2145626122));
      assertArrayEquals(new float[] {40.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)98, 0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)80;
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)16;
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte)80;
      byteArray1[5] = (byte) (-113);
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)80, (byte)16, (byte)16, (byte)16, (byte)80, (byte) (-113), (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(9, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      Byte[] byteArray3 = new Byte[7];
      byteArray3[0] = (Byte) (byte)16;
      byteArray3[1] = (Byte) (byte)16;
      byteArray3[2] = (Byte) (byte)16;
      byteArray3[3] = (Byte) (byte)80;
      byteArray3[4] = (Byte) (byte)16;
      byteArray3[5] = (Byte) (byte)16;
      byteArray3[6] = (Byte) (byte)80;
      Byte[] byteArray4 = ArrayUtils.clone(byteArray3);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray3, byteArray4);
      assertEquals(7, byteArray4.length);
      assertEquals(7, byteArray3.length);
      assertNotNull(byteArray4);
      assertFalse(byteArray4.equals((Object)byteArray3));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)80;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 80.0F);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertArrayEquals(new float[] {80.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)16;
      longArray0[1] = (long) (byte)16;
      longArray0[2] = (long) (byte)16;
      longArray0[3] = (long) (byte)80;
      longArray0[4] = (long) (byte)16;
      longArray0[5] = (long) (byte)16;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {16L, 16L, 16L, 80L, 16L, 16L}, longArray0);
      assertEquals(6, longArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      Double double0 = new Double((byte) (-70));
      assertNotNull(double0);
      assertEquals((-70.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      Double double1 = new Double((byte) (-70));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-70.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '$', (int) (byte) (-70));
      assertArrayEquals(new char[] {'z', 'z', 'z'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray0, (String) null);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-70);
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte)14, (byte) (-70), (byte)14}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)624);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)624}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 2085.0F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)7);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)7}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 2546L;
      longArray0[2] = 1L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 2546L, 1L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0L;
      ArrayUtils.swap(objectArray0, 0, (-48), 107);
      assertEquals(1, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(objectArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      int[] intArray0 = new int[0];
      Object[] objectArray0 = new Object[3];
      Object object0 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) (short) (-48);
      objectArray0[2] = (Object) (short) (-48);
      ArrayUtils.swap(objectArray0, 0, (int) (short) (-48));
      assertEquals(3, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, (-412));
      assertEquals(3, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-48), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -48, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) long0;
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      ArrayUtils.reverse(floatArray0, (-575), 97);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Integer integer0 = new Integer((-155));
      assertNotNull(integer0);
      assertEquals((-155), (int)integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-155), (-155), (-155)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertNotNull(intArray0);
      
      Byte byte0 = new Byte((byte) (-27));
      assertNotNull(byte0);
      assertEquals((byte) (-27), (byte)byte0);
      
      int int0 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) byte0, 1);
      assertEquals(6, booleanArray0.length);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-575));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)83;
      Byte byte1 = new Byte((byte)83);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)83, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)83, (byte)byte2);
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)62;
      Byte byte4 = new Byte((byte)62);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte)62, (byte)byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte0);
      assertNotNull(byte5);
      assertFalse(byte0 == byte3);
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte)83, (byte)byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte0);
      assertNotNull(byte6);
      assertFalse(byte0 == byte3);
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte5));
      assertEquals((byte)83, (byte)byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = Byte.valueOf((byte)59);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertEquals((byte)59, (byte)byte7);
      
      byteArray0[5] = byte7;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = byte0;
      byteArray1[1] = byte3;
      byteArray1[2] = byte0;
      byteArray1[3] = (byte)94;
      int[] intArray0 = new int[0];
      byte[] byteArray2 = ArrayUtils.removeAll(byteArray1, intArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)83, (byte)62, (byte)83, (byte)94}, byteArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte)83, (byte)62, (byte)83, (byte)94}, byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(4, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-19), 52, (int) (byte) (-1));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      ArrayUtils.swap((short[]) null, Integer.MAX_VALUE, 82);
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 52;
      intArray0[3] = Integer.MAX_VALUE;
      ArrayUtils.shift(intArray0, 69);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, 0, (-1), Integer.MAX_VALUE, 52}, intArray0);
      assertEquals(6, intArray0.length);
      
      Byte byte1 = new Byte((byte) (-1));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte0;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(byte1.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.insert(1, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)438;
      ArrayUtils.shift(shortArray0, (-2145881199), (int) (short)438, 2559);
      assertArrayEquals(new short[] {(short)438, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)438;
      intArray0[1] = (int) (short)438;
      intArray0[2] = (int) (short)438;
      intArray0[3] = (int) (short)438;
      intArray0[4] = 2559;
      intArray0[5] = 2559;
      intArray0[6] = (int) (short)438;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-431));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {438, 438, 438, 438, 2559, 2559, 438}, intArray0);
      assertArrayEquals(new int[] {438, 438, 438, 438, 2559, 2559, 438}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = '@';
      charArray0[1] = 'O';
      charArray0[2] = '6';
      charArray0[3] = 'N';
      charArray0[4] = 'd';
      charArray0[5] = 'd';
      charArray0[6] = '6';
      charArray0[7] = 'Q';
      charArray0[8] = 'd';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'd', 5);
      assertArrayEquals(new char[] {'@', 'O', '6', 'N', 'd', 'd', '6', 'Q', 'd'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(5, int0);
      
      byte[] byteArray0 = ArrayUtils.insert((-2214), (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      Byte byte0 = new Byte((byte)22);
      assertNotNull(byte0);
      assertEquals((byte)22, (byte)byte0);
      
      Byte byte1 = new Byte((byte)37);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)37, (byte)byte1);
      
      Byte byte2 = new Byte((byte)22);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)22, (byte)byte2);
      
      Byte byte3 = new Byte((byte)80);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)80, (byte)byte3);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)37, (int) (byte)80, 2224);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 82;
      intArray0[2] = (int) (byte)37;
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = '~';
      charArray0[2] = '5';
      charArray0[3] = '~';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'5', '~', '5', '~'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.swap((short[]) null, (int) (byte)22, (-2130843324));
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.shift(intArray0, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {37, Integer.MAX_VALUE, 82}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)22;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1), 37);
      assertArrayEquals(new byte[] {(byte)22}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte) (-1);
      ArrayUtils.shift(doubleArray0, (-2146918812));
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, (float) (byte) (-1));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      
      short[] shortArray0 = ArrayUtils.insert((int) (short)2465, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte) (-1);
      floatArray1[1] = (float) (-1538);
      floatArray1[2] = (float) (-1538);
      float[] floatArray2 = ArrayUtils.remove(floatArray1, 1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1538.0F), (-1538.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1538.0F)}, floatArray2, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 58.0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short) (byte) (-1);
      short[] shortArray2 = ArrayUtils.addAll(shortArray1, (short[]) null);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, 1016L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(12, doubleArray0.length);
      
      ArrayUtils.swap(doubleArray0, 0, 1471, 322);
      assertEquals(12, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-256);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-256);
      doubleArray0[1] = (double) (-256);
      doubleArray0[2] = (double) (-256);
      doubleArray0[3] = 74.0;
      doubleArray0[4] = (double) (-256);
      doubleArray0[5] = (-2893.2);
      doubleArray0[6] = (double) 0;
      ArrayUtils.swap(doubleArray0, 0, 801);
      assertArrayEquals(new double[] {(-256.0), (-256.0), (-256.0), 74.0, (-256.0), (-2893.2), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 801;
      floatArray0[2] = (float) (-256);
      floatArray0[3] = (float) (-256);
      floatArray0[4] = (float) (-256);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 801;
      floatArray0[7] = (float) (-256);
      floatArray0[8] = (float) (-256);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 801.0F, (-256.0F), (-256.0F), (-256.0F), 0.0F, 801.0F, (-256.0F), (-256.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 801, 2024);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(floatArray0, (-1361), (-1361));
      assertArrayEquals(new float[] {0.0F, 801.0F, (-256.0F), (-256.0F), (-256.0F), 0.0F, 801.0F, (-256.0F), (-256.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-256.0), (-256.0), (-256.0), 74.0, (-256.0), (-2893.2), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'R';
      charArray0[2] = '!';
      charArray0[3] = 'U';
      charArray0[4] = '{';
      charArray0[6] = ')';
      boolean boolean0 = ArrayUtils.contains(charArray0, '{');
      assertArrayEquals(new char[] {'{', 'R', '!', 'U', '{', '\u0000', ')'}, charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[0];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '~';
      longArray0[1] = (long) 'R';
      longArray0[1] = (long) '{';
      ArrayUtils.shift(longArray0, 1, 0, (-1273));
      assertArrayEquals(new long[] {126L, 123L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) (-1.0);
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(2, objectArray0.length);
      assertFalse(boolean0);
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertEquals(2, objectArray0.length);
      assertNotNull(object0);
      assertEquals((-1.0), object0);
      
      ArrayUtils.swap(doubleArray0, (int) (byte) (-1), (int) (byte) (-1), (int) (byte) (-1));
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (byte)77;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-119);
      ArrayUtils.swap(doubleArray0, (-119), (int) (byte)0);
      assertArrayEquals(new double[] {(-119.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-301), 2106);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)77, (byte) (-1), (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)77, (byte) (-1), (byte)0, (byte) (-1)}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(floatArray0, 122, 1);
      assertArrayEquals(new float[] {0.0F, 77.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-119.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) 122;
      longArray0[2] = (long) (byte)77;
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (-301);
      boolean boolean2 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-1L), 122L, 77L, (-1L), (-301L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float float1 = new Float(854.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(854.0F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float1;
      floatArray0[1] = float0;
      floatArray0[2] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 854.0F);
      assertArrayEquals(new float[] {854.0F, (-1.0F), 854.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 1193);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '`');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(floatArray1, 1, 58, 2144517510);
      assertArrayEquals(new float[] {854.0F, (-1.0F), 854.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)121;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-435.22387023486);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 119.0, 74.0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {(-435.22387023486)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)121, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Integer integer0 = new Integer((-965));
      assertNotNull(integer0);
      assertEquals((-965), (int)integer0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.3291112780570984);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-435.22387023486)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-435.22387023486)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)48;
      longArray0[1] = (-675L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 48L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {48L, (-675L)}, longArray0);
      assertArrayEquals(new long[] {(-675L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      Double[] doubleArray2 = new Double[1];
      doubleArray2[0] = (Double) (-435.22387023486);
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {(-435.22387023486)}, doubleArray3, 0.01);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      ArrayUtils.shift((float[]) null, (-217), (-301), (-468));
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-1371), (-1371), (-1371));
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 7;
      boolean boolean0 = ArrayUtils.contains(intArray0, 7);
      assertArrayEquals(new int[] {7}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      Short short0 = new Short((short) (-458));
      assertNotNull(short0);
      assertEquals((short) (-458), (short)short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-458));
      assertNull(shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2280);
      intArray0[1] = 1287;
      intArray0[2] = (-2280);
      intArray0[3] = (-256);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-256));
      assertArrayEquals(new int[] {(-2280), 1287, (-2280), (-256)}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean0);
      
      byte byte0 = (byte) (-75);
      Byte byte1 = new Byte((byte) (-75));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-75), (byte)byte1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      Byte byte2 = new Byte((byte)97);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)97, (byte)byte2);
      
      byteArray0[3] = byte2;
      byteArray0[4] = byte1;
      Byte byte3 = ArrayUtils.get(byteArray0, (-85));
      assertEquals(5, byteArray0.length);
      assertNull(byte3);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[10];
      charArray0[0] = '#';
      charArray0[1] = 'A';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '#');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'#', 'A', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'A', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(10, charArray0.length);
      assertEquals(9, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)2;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 3586, (-62));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, (int) (byte)2, (-1220));
      assertNotSame(floatArray1, floatArray0);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      String string0 = ArrayUtils.toString(object1);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '#';
      char[] charArray2 = ArrayUtils.removeElement(charArray0, '>');
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'#', 'A', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      assertArrayEquals(new char[] {'#', 'A', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(10, charArray2.length);
      assertEquals(10, charArray0.length);
      assertNotNull(charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {35.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float[] floatArray3 = new Float[1];
      floatArray3[0] = (Float) 2.0F;
      Float[] floatArray4 = ArrayUtils.nullToEmpty(floatArray3);
      assertSame(floatArray3, floatArray4);
      assertSame(floatArray4, floatArray3);
      assertEquals(1, floatArray3.length);
      assertEquals(1, floatArray4.length);
      assertNotNull(floatArray4);
      
      Byte[] byteArray2 = new Byte[1];
      byteArray2[0] = byte0;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted(byteArray2, comparator0);
      assertEquals(1, byteArray2.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'', '', '\u0000'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-19448));
      assertNotNull(short0);
      assertEquals((short) (-19448), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short) (-19448)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray2 = ArrayUtils.removeElement(charArray1, '>');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'', '', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'', '', '\u0000'}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '';
      intArray0[1] = (int) '';
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 127);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {127, 127}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)27;
      Byte byte1 = new Byte((byte)27);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)27, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)27, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)27);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)27, (byte)byte3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      char[] charArray1 = ArrayUtils.add(charArray0, ':');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(characterArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[4];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = byte0;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray1, byteArray1);
      assertArrayEquals(new byte[] {(byte)27}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertTrue(boolean0);
      
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, '!');
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray2);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray1);
      assertEquals(2, charArray2.length);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) characterArray0, (Object[]) byteArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(2, characterArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) 27, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 27, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null, "Array and element cannot both b[ null");
      assertNotNull(string0);
      assertEquals("Array and element cannot both b[ null", string0);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)19);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals(7, floatArray0.length);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(0.0);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(3985.4788F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(3985.4788F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) 3985.4788F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals(3985.4788F, (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float(100.0);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals(100.0F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((float) floatArray0[5]);
      assertEquals(7, floatArray0.length);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals(100.0F, (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.swap((float[]) null, 1, 6);
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short) (-1818);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-1818), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[4];
      shortArray0[2] = (short) (-1818);
      doubleArray0[2] = (double) (short) (-1818);
      doubleArray0[3] = (double) 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-1818);
      longArray0[1] = (long) (short) (-1818);
      longArray0[2] = (long) (short) (-1818);
      longArray0[3] = (long) (short) (-1818);
      longArray0[4] = (long) 0;
      ArrayUtils.shift(longArray0, (-3840), 65, 54);
      assertArrayEquals(new long[] {(-1818L), (-1818L), (-1818L), 0L, (-1818L)}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-2294));
      assertNull(intArray0);
      
      ArrayUtils.reverse((int[]) null);
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1529;
      shortArray0[1] = (short)438;
      shortArray0[2] = (short)1529;
      shortArray0[3] = (short)1529;
      shortArray0[4] = (short)438;
      shortArray0[5] = (short)438;
      shortArray0[6] = (short)1529;
      shortArray0[7] = (short)1529;
      ArrayUtils.shift(shortArray0, (-30), 3461, (int) (short)1529);
      assertArrayEquals(new short[] {(short)1529, (short)1529, (short)438, (short)1529, (short)1529, (short)438, (short)438, (short)1529}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1195);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (double) (short)438);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      ArrayUtils.shift((double[]) null, (-106));
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      MockRandom mockRandom0 = new MockRandom((-106));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      ArrayUtils.swap((short[]) null, 18688, (-2972));
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (-2143353870);
      intArray0[3] = 0;
      ArrayUtils.shift(intArray0, 871);
      assertArrayEquals(new int[] {2, (-2143353870), 0, 2}, intArray0);
      assertEquals(4, intArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-2225), 5243);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-17);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)2);
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-30), (byte) (-17)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)112);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-504.99756132), (int) (byte)112, (-504.99756132));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 688.48F;
      floatArray0[1] = (float) (byte)112;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {112.0F, 688.48F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)19;
      Byte byte1 = new Byte((byte)19);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)19, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-93);
      Byte byte3 = new Byte((byte) (-93));
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-93), (byte)byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte2);
      assertNotNull(byte4);
      assertFalse(byte2 == byte0);
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertEquals((byte) (-93), (byte)byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte2);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte2 == byte0);
      assertEquals((byte) (-93), (byte)byte5);
      
      byteArray0[3] = byte5;
      byte byte6 = (byte)99;
      Byte byte7 = new Byte((byte)99);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte3));
      assertEquals((byte)99, (byte)byte7);
      
      byteArray0[4] = byte7;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((int)byte6).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertEquals(5, byteArray0.length);
      assertFalse(byte6 == byte0);
      assertFalse(byte6 == byte2);
      assertFalse(byte2 == byte6);
      assertFalse(byte2 == byte0);
      assertFalse(boolean0);
      
      ArrayUtils.swap((double[]) null, (int) (byte) (-93), (-1713), (int) (byte) (-93));
      byte[] byteArray1 = ArrayUtils.addFirst((byte[]) null, byte0);
      assertArrayEquals(new byte[] {(byte)19}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte6);
      
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, byte2, (int) byte2);
      assertTrue(int1 == int0);
      assertFalse(byte2 == byte6);
      assertFalse(byte2 == byte0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-18));
      assertNotNull(byte0);
      assertEquals((byte) (-18), (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)47);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)47, (byte)byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-44));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-44), (byte)byte2);
      
      byteArray0[2] = byte2;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2470);
      intArray0[1] = 2147201899;
      intArray0[2] = 1623;
      intArray0[3] = (-1037);
      intArray0[4] = 2;
      int int0 = ArrayUtils.indexOf(intArray0, 2, (-2470));
      assertArrayEquals(new int[] {(-2470), 2147201899, 1623, (-1037), 2}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(4, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147201899, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.insert((-1540), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (-1145), Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = 'W';
      charArray0[5] = '5';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'~', '5', '5', '5', 'W', '5'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.swap((short[]) null, (-1540), (-604));
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '~';
      ArrayUtils.shift(intArray0, 52);
      assertArrayEquals(new int[] {126}, intArray0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {126}, intArray0);
      assertArrayEquals(new int[] {(-1), 126}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '5';
      longArray0[1] = (long) '5';
      longArray0[2] = (long) '~';
      longArray0[3] = (long) (-1);
      longArray0[4] = 18L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {53L, 53L, 126L, (-1L), 18L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)19);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      Float[] floatArray1 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray1);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)1410);
      assertNotNull(short0);
      assertEquals((short)1410, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)1410);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)1410, (short)short1);
      
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)1410, (short)1410}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Byte[] byteArray1 = new Byte[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray1, (-988));
      assertEquals(0, byteArray1.length);
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)0);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) shortArray0[1], 1388, (double) shortArray0[0]);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      
      byte[] byteArray3 = new byte[8];
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)23;
      byteArray3[6] = (byte)0;
      byteArray3[7] = (byte)0;
      byte[] byteArray4 = ArrayUtils.nullToEmpty(byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertSame(byteArray3, byteArray4);
      assertNotSame(byteArray4, byteArray0);
      assertSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)23, (byte)0, (byte)0}, byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)23, (byte)0, (byte)0}, byteArray4);
      assertEquals(8, byteArray3.length);
      assertEquals(8, byteArray4.length);
      assertNotNull(byteArray4);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[4] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.subarray(charArray0, (int) (short)0, (int) (short)0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 3104L;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = 58L;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) 0;
      longArray0[8] = (-16L);
      ArrayUtils.swap(longArray0, (int) (short)0, (int) (short)0, 1408);
      assertArrayEquals(new long[] {3104L, 0L, 0L, 58L, 0L, 0L, 0L, 0L, (-16L)}, longArray0);
      assertEquals(9, longArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)55;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)15, (byte)9, (byte)58, (byte)60, (byte)112, (byte)78, (byte)2, (byte)13, (byte)55}, byteArray0);
      assertEquals(18, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2127599540;
      int int0 = (-311);
      intArray0[1] = (-311);
      ArrayUtils.reverse(intArray0, (-84), (-311));
      assertArrayEquals(new int[] {2127599540, (-311)}, intArray0);
      assertEquals(2, intArray0.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-789.6489604070639));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-789.6489604070639), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-311));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-311.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(2127599540);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(2.12759954E9, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(3.0);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals(3.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      try { 
        Double.valueOf("Rfq%hN");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)5;
      shortArray0[0] = (short)5;
      shortArray0[1] = (short)1;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)5, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)5, (short)1}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte byte0 = (byte) (-42);
      Byte byte1 = new Byte((byte) (-42));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-42), (byte)byte1);
      
      int int0 = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, 0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      int int1 = bitSet0.previousSetBit((short)5);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)64;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)64);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)64, (byte)2, (byte)64}, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)2, (byte)64}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)64;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) (byte)64;
      doubleArray0[3] = (double) (byte)64;
      doubleArray0[4] = (double) (byte)64;
      doubleArray0[5] = (double) (byte)64;
      doubleArray0[6] = (double) (byte)64;
      doubleArray0[7] = (double) (byte)64;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {64.0, 2.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2147483647L, 1210);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {2L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)64;
      intArray0[1] = (int) (byte)64;
      intArray0[2] = (int) (byte)64;
      ArrayUtils.swap(intArray0, (-1), (-1), (int) (byte)64);
      assertArrayEquals(new int[] {64, 64, 64}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      char[] charArray1 = ArrayUtils.add(charArray0, 'l');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':', 'l'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2851);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = 3422.1909898964277;
      int int0 = (-1);
      int int1 = (-911);
      ArrayUtils.swap(doubleArray0, (-1), (-911), (-2851));
      assertArrayEquals(new double[] {(-2851.0), (-1.0), (-1.0), 3422.1909898964277}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-2851);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 0, (-31), 1928);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)112);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-504.99756132), (int) (byte)112, (-504.99756132));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 688.48F;
      floatArray0[1] = (float) (byte)112;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {112.0F, 688.48F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)19;
      Byte byte1 = new Byte((byte)19);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)19, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-93);
      Byte byte3 = new Byte((byte) (-93));
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-93), (byte)byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte2);
      assertNotNull(byte4);
      assertFalse(byte2 == byte0);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte) (-93), (byte)byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte2);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte2 == byte0);
      assertEquals((byte) (-93), (byte)byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)99);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertEquals((byte)99, (byte)byte6);
      
      byteArray0[4] = byte6;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.swap((double[]) null, (int) (byte) (-93), (-1713), (int) (byte) (-93));
      byte[] byteArray1 = ArrayUtils.addFirst((byte[]) null, byte0);
      assertArrayEquals(new byte[] {(byte)19}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byte0 == byte2);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArrayUtils.shift(byteArray0, (-1732));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      Float float0 = new Float(2014.837F);
      assertNotNull(float0);
      assertEquals(2014.837F, (float)float0, 0.01F);
      
      Float float1 = new Float((-615.4092F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-615.4092F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float0;
      Float float2 = new Float((-1134.0));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1134.0F), (float)float2, 0.01F);
      
      floatArray0[1] = float2;
      floatArray0[2] = float0;
      floatArray0[3] = float1;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[5]);
      assertArrayEquals(new float[] {2014.837F, (-1134.0F), 2014.837F, (-615.4092F), 2014.837F, 2014.837F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-1307));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '#');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(floatArray1, 1, 1, (int) (short)53);
      assertArrayEquals(new float[] {2014.837F, (-1134.0F), 2014.837F, (-615.4092F), 2014.837F, 2014.837F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray1.length);
      assertEquals(5, integerArray0.length);
      assertNotNull(integerArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 525.8815F;
      floatArray0[1] = (-2343.85F);
      floatArray0[2] = 2184.0F;
      floatArray0[3] = (-413.1F);
      ArrayUtils.shift(floatArray0, 2, 2, 2);
      assertArrayEquals(new float[] {525.8815F, (-2343.85F), 2184.0F, (-413.1F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) false;
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(5, objectArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((short) (-916));
      Short short0 = new Short((short)1119);
      assertNotNull(short0);
      assertEquals((short)1119, (short)short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-294.278);
      doubleArray0[1] = (-1218.713247788964);
      ArrayUtils.swap(doubleArray0, 2402, 961);
      assertArrayEquals(new double[] {(-294.278), (-1218.713247788964), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      Boolean boolean0 = new Boolean(":'|Ld^tL[|~:");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-674);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 5251, (int) (short) (-674));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-674)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-1218.713247788964);
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertEquals(7, objectArray0.length);
      assertNotNull(object0);
      assertTrue(object0.equals((Object)boolean0));
      assertFalse(object0.equals((Object)boolean1));
      assertEquals(false, object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) (-1218.713247788964);
      ArrayUtils.shift(objectArray0, 6, 127, 17);
      assertEquals(7, objectArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 2402);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2402, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-25037);
      shortArray0[1] = (short) (-2725);
      shortArray0[2] = (short) (-1415);
      shortArray0[3] = (short) (-3597);
      shortArray0[4] = (short) (-712);
      shortArray0[5] = (short)506;
      shortArray0[6] = (short) (-1970);
      shortArray0[7] = (short) (-940);
      ArrayUtils.swap(shortArray0, (int) (short) (-940), (int) (short) (-25037), 2901);
      assertArrayEquals(new short[] {(short) (-25037), (short) (-2725), (short) (-1415), (short) (-3597), (short) (-712), (short)506, (short) (-1970), (short) (-940)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 2619.3425F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = Integer.valueOf((-540));
      assertNotNull(integer0);
      assertEquals((-540), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1501);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1501, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((short) (-1970));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1970), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((short) (-1415));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-1415), (int)integer3);
      
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-540), 1501, (-1970), (-1415)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertNotNull(intArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-540), 1501, (-1970), (-1415)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(4, integerArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertArrayEquals(new char[] {'g'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.3291112780570984;
      doubleArray0[3] = (-2186.192117355);
      doubleArray0[4] = (double) (byte)1;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.3291112780570984, (-2186.192117355), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      ArrayUtils.reverse((boolean[]) null, (-748), (-748));
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1155.09889305));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {Double.NaN, 0.3291112780570984, (-2186.192117355), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-748), (-4549.291));
      assertArrayEquals(new double[] {Double.NaN, 0.3291112780570984, (-2186.192117355), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)1, (byte)22);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)22, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-268);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-268), (short) (-268)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-268)}, shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[2] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = '.';
      char[] charArray1 = ArrayUtils.insert((int) (short)0, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'.', '.'}, charArray0);
      assertArrayEquals(new char[] {'.', '.', '.', '.'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1107.7;
      doubleArray0[1] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {1107.7, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-43);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-43)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-43)}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shift((short[]) null, (-1152), (-674), (int) (byte) (-63));
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (byte) (-63);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (byte) (-43);
      floatArray0[4] = (-233.0F);
      floatArray0[5] = (float) (byte) (-63);
      floatArray0[6] = (float) (byte) (-63);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1, (-63.0F));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, (-63.0F), (-63.0F), (-1.0F), (-43.0F), (-233.0F), (-63.0F), (-63.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-63.0F), (-1.0F), (-43.0F), (-233.0F), (-63.0F), (-63.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '\\');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'\\'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'\\'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '\\';
      doubleArray0[1] = (double) '\\';
      doubleArray0[2] = (double) '\\';
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-778), (-2927));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {92.0, 92.0, 92.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '\\';
      intArray0[1] = (int) '\\';
      intArray0[2] = (-778);
      intArray0[3] = (-2927);
      intArray0[4] = (-2927);
      intArray0[5] = (int) '\\';
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {92, 92, (-778), (-2927), (-2927), 92}, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-19), 52, (int) (byte) (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray1);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-2906L), (int) (byte) (-1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      ArrayUtils.swap((Object[]) null, (-198), (-151), (-198));
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = 'i';
      charArray0[2] = 'N';
      charArray0[3] = '=';
      charArray0[4] = '/';
      char[] charArray1 = ArrayUtils.add(charArray0, '=');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'=', 'i', 'N', '=', '/', '='}, charArray1);
      assertArrayEquals(new char[] {'=', 'i', 'N', '=', '/'}, charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(5, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 52;
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) 'i';
      doubleArray0[3] = (double) '/';
      doubleArray0[4] = (double) '/';
      doubleArray0[5] = (double) '=';
      doubleArray0[6] = (double) (-2906L);
      doubleArray0[7] = (double) (-151);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-198), 27);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {52.0, (-1.0), 105.0, 47.0, 47.0, 61.0, (-2906.0), (-151.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {52.0, (-1.0), 105.0, 47.0, 47.0, 61.0, (-2906.0), (-151.0)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-238L));
      assertNull(longArray0);
      
      ArrayUtils.reverse((Object[]) null);
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 24;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 24;
      doubleArray0[1] = (double) 2;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {2.0, 24.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'E';
      char[] charArray1 = ArrayUtils.add(charArray0, '\"');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l', 'E', '\"'}, charArray1);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l', 'E'}, charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(5, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = new char[1];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'l';
      ArrayUtils.shift(charArray2, 925, 925, 925);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'l'}, charArray2);
      assertEquals(1, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      ArrayUtils.shift((byte[]) null, (-631), 2, 24);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {2.0, 24.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean boolean3 = new Boolean("[_Y/09]`7^d$Y3bvC|I");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean4 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean4);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-674);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-674);
      shortArray0[3] = (short) (-674);
      shortArray0[4] = (short) (-674);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-674), (int) (short) (-674));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-674), (short) (-1), (short) (-674), (short) (-674), (short) (-674)}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.shift((Object[]) null, (int) (short) (-1), 17, (int) (short) (-674));
      boolean boolean5 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-674);
      longArray0[1] = (-767L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (short) (-674));
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new long[] {(-674L), (-767L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(bitSet0);
      
      Long[] longArray1 = new Long[6];
      longArray1[0] = (Long) (-674L);
      longArray1[1] = (Long) (-674L);
      longArray1[2] = (Long) (-767L);
      longArray1[3] = (Long) (-767L);
      longArray1[4] = (Long) (-674L);
      Long long0 = new Long((short) (-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray1[5] = long0;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-581L));
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {(-674L), (-674L), (-767L), (-767L), (-674L), (-1L)}, longArray2);
      assertEquals(6, longArray2.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, (-768), Integer.MAX_VALUE, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      byte byte0 = (byte)31;
      Byte byte1 = new Byte((byte)31);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)31, (byte)byte1);
      
      MockRandom mockRandom0 = new MockRandom(35L);
      assertNotNull(mockRandom0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-3169), (int) byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 870;
      doubleArray0[1] = (-783.3);
      doubleArray0[2] = (double) 870;
      doubleArray0[3] = 3130.61124;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 9);
      assertArrayEquals(new double[] {870.0, (-783.3), 870.0, 3130.61124}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      Byte byte0 = new Byte((byte) (-31));
      assertNotNull(byte0);
      assertEquals((byte) (-31), (byte)byte0);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      byteArray0[2] = byte1;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      byteArray0[7] = byte0;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2, 2145402940);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Byte[] byteArray0 = new Byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 9;
      intArray0[1] = (-1);
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = '4';
      charArray0[4] = 'O';
      charArray0[5] = 'O';
      charArray0[6] = '4';
      char[] charArray1 = ArrayUtils.add(charArray0, 'O');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'O', 'O', 'O', '4', 'O', 'O', '4'}, charArray0);
      assertArrayEquals(new char[] {'O', 'O', 'O', '4', 'O', 'O', '4', 'O'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.reverse((byte[]) null);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      charArray0[2] = '4';
      objectArray0[2] = (Object) 'O';
      objectArray0[0] = (Object) '4';
      objectArray0[4] = (Object) 9;
      Object object1 = ArrayUtils.get(objectArray0, 9);
      assertEquals(5, objectArray0.length);
      assertNull(object1);
      
      ArrayUtils.shift(objectArray0, (-2130));
      assertEquals(5, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(5, objectArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(5, objectArray0.length);
      assertEquals(3, int0);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'O', 'O', '4', '4', 'O', 'O', '4'}, charArray0);
      assertArrayEquals(new char[] {'O', 'O', 'O', '4', 'O', 'O', '4', 'O'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      ArrayUtils.swap((Object[]) null, 99, 0, 0);
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (-2294.4666F));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-1797);
      longArray0[1] = (long) (short) (-1797);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2849L, 2142564465);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new long[] {(-1797L), (-1797L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty((Object[]) booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      ArrayUtils.swap((Object[]) booleanArray1, 2391, 2391, (-2143353870));
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 'Z');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'Z'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.indexOf(charArray1, '<');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'Z'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (int) (short) (-48);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short) (-48), 1072);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Character character0 = new Character('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'K';
      ArrayUtils.shift(charArray0, 1072);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.reverse((double[]) null);
      char[] charArray1 = ArrayUtils.add(charArray0, '&');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(charArray1, 0, 1072, 90);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2143353870);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-2143353870);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 748.5749;
      doubleArray0[6] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {(-2.14335387E9), 0.0, (-2.14335387E9), 0.0, 0.0, 748.5749, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      Short short0 = new Short((short)3262);
      assertNotNull(short0);
      assertEquals((short)3262, (short)short0);
      
      Short short1 = new Short((short)3262);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)3262, (short)short1);
      
      Short short2 = new Short((short)3262);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)3262, (short)short2);
      
      Short short3 = new Short((short)1129);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short)1129, (short)short3);
      
      Short short4 = new Short((short)114);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertEquals((short)114, (short)short4);
      
      Short short5 = new Short((short)1129);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertEquals((short)1129, (short)short5);
      
      Short short6 = new Short((short)1129);
      assertNotNull(short6);
      assertTrue(short6.equals((Object)short3));
      assertTrue(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short1));
      assertEquals((short)1129, (short)short6);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short) (-88));
      assertNotNull(short0);
      assertEquals((short) (-88), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)4);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)4, (short)short1);
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) stringArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((byte) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals(7, shortArray0.length);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-1), (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((byte) (-1));
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short) (-1), (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)1129);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short)1129, (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)54);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertEquals((short)54, (short)short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short)54);
      assertNotNull(short5);
      assertTrue(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertEquals((short)54, (short)short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)555);
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short2));
      assertEquals((short)555, (short)short6);
      
      shortArray0[6] = short6;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.3291112780570984;
      doubleArray0[3] = (-2186.192117355);
      doubleArray0[4] = (double) (byte)1;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.3291112780570984, (-2186.192117355), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1155.09889305));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {Double.NaN, 0.3291112780570984, (-2186.192117355), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-748), (-4549.291));
      assertArrayEquals(new double[] {Double.NaN, 0.3291112780570984, (-2186.192117355), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte)0, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (byte)1, (short) (byte)1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Character[] characterArray0 = new Character[1];
      char char0 = 'o';
      Character character0 = Character.valueOf('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertArrayEquals(new char[] {'o'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.insert((-1540), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)624, 321);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      charArray0[1] = '8';
      charArray0[2] = ',';
      int int1 = ArrayUtils.indexOf(charArray0, '8', (-1570));
      assertArrayEquals(new char[] {'B', '8', ','}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      ArrayUtils.swap(charArray0, 1991, 2084, 3447);
      assertArrayEquals(new char[] {'B', '8', ','}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      char[] charArray1 = ArrayUtils.add(charArray0, ':');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) byte0;
      longArray0[1] = (-1L);
      longArray0[2] = (long) byte0;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.swap(booleanArray0, 6, (int) byte0, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (-12191);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) byte0, 0);
      assertArrayEquals(new short[] {(short)0, (short) (-12191), (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1287;
      longArray0[1] = (long) 1287;
      longArray0[2] = (long) 1287;
      longArray0[3] = (long) 1287;
      longArray0[4] = (long) 1287;
      longArray0[5] = (long) 1287;
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)147;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 350);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {147}, intArray0);
      assertArrayEquals(new int[] {350, 147}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1287L;
      floatArray0[1] = (float) 350;
      ArrayUtils.reverse((byte[]) null);
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1));
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      Byte[] byteArray1 = ArrayUtils.insert((int) 40, (Byte[]) null, (Byte[]) null);
      assertNull(byteArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)40;
      doubleArray0[1] = (double) (byte)40;
      doubleArray0[2] = (double) (byte)40;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) (byte)40;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-730.81209), (int) (byte)40, (-730.81209));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {40.0, 40.0, 40.0, 1.0, 40.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-154), (-154), (-154));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-56));
      assertNotNull(byte0);
      assertEquals((byte) (-56), (byte)byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-56));
      assertArrayEquals(new byte[] {(byte) (-56)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {2.147483647E9}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      MockRandom mockRandom0 = new MockRandom(Integer.MAX_VALUE);
      assertNotNull(mockRandom0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      Short short0 = new Short((short)2981);
      assertNotNull(short0);
      assertEquals((short)2981, (short)short0);
      
      Short short1 = new Short((short) (-2297));
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-2297), (short)short1);
      
      Short[] shortArray1 = new Short[4];
      shortArray1[0] = short0;
      Short short2 = new Short((short)51);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)51, (short)short2);
      
      shortArray1[1] = short2;
      shortArray1[2] = short1;
      shortArray1[3] = short0;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)2981, (short)51, (short) (-2297), (short)2981}, shortArray2);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Byte[]) null, (-2145925240));
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-5));
      assertNull(byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1296.7874180641531, 7, (double) (short)2981);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {2.147483647E9}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)88);
      assertArrayEquals(new byte[] {(byte)88, (byte)88}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)88;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-920), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -920, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 50;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 50;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 50;
      doubleArray0[6] = (double) 50;
      doubleArray0[7] = (double) 50;
      doubleArray0[8] = (double) 0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Byte byte0 = new Byte((byte)29);
      assertNotNull(byte0);
      assertEquals((byte)29, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-86));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-86), (byte)byte1);
      
      byte byte2 = (byte)3;
      Byte byte3 = new Byte((byte)3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)3, (byte)byte3);
      
      Byte byte4 = new Byte((byte) (-86));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte) (-86), (byte)byte4);
      
      Byte[] byteArray0 = new Byte[9];
      byteArray0[0] = byte0;
      byteArray0[1] = byte3;
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)79);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertEquals((byte)79, (byte)byte5);
      
      byteArray0[3] = byte5;
      byteArray0[4] = byte3;
      byteArray0[5] = (Byte) byte2;
      byteArray0[6] = byte3;
      byteArray0[7] = byte4;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 64);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)3);
      assertArrayEquals(new byte[] {(byte)29, (byte)3, (byte) (-86), (byte)79, (byte)3, (byte)3, (byte)3, (byte) (-86), (byte)3}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 50.0, (-2143435794), (-1855.4266066800565));
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), 50.0, 1.0, 50.0, 50.0, 50.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(bitSet0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 131);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Byte byte0 = new Byte((byte)42);
      assertNotNull(byte0);
      assertEquals((byte)42, (byte)byte0);
      
      Byte byte1 = new Byte((byte)42);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)42, (byte)byte1);
      
      Byte byte2 = new Byte((byte)91);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)91, (byte)byte2);
      
      Byte byte3 = new Byte((byte)91);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)91, (byte)byte3);
      
      Byte byte4 = new Byte((byte) (-85));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte) (-85), (byte)byte4);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte3;
      byteArray0[1] = byte4;
      byteArray0[2] = byte0;
      byteArray0[3] = byte3;
      byteArray0[4] = byte1;
      byteArray0[5] = byte2;
      byteArray0[6] = byte0;
      byteArray0[7] = byte3;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 26);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      char[] charArray1 = ArrayUtils.add(charArray0, ':');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) byte0;
      longArray0[1] = (-1L);
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1375L));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, (-1L), 0L, 2L, (-1L)}, longArray1);
      assertArrayEquals(new long[] {0L, (-1L), 0L, 2L, (-1L)}, longArray0);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray0);
      assertSame(byteArray0, objectArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(objectArray0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) byte0, (-882));
      assertSame(byteArray0, objectArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 32;
      intArray0[1] = 1402;
      intArray0[2] = 3148;
      intArray0[3] = (-1);
      intArray0[4] = 160;
      intArray0[5] = (-2145345125);
      intArray0[6] = 9;
      intArray0[7] = (-2146989280);
      ArrayUtils.reverse(intArray0, (-2145345125), 0);
      assertArrayEquals(new int[] {32, 1402, 3148, (-1), 160, (-2145345125), 9, (-2146989280)}, intArray0);
      assertEquals(8, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 9;
      longArray0[1] = (long) 9;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2325), 3148);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {9L, 9L}, longArray0);
      assertArrayEquals(new long[] {9L, 9L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1402;
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F, (-2145345125));
      assertArrayEquals(new float[] {1402.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 20);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2917);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-633);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)232;
      shortArray0[5] = (short) (-863);
      shortArray0[6] = (short)46;
      shortArray0[7] = (short)1;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2917), (short)1, (short) (-633), (short)0, (short)232, (short) (-863), (short)46, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 59;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {59.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)7, (int) (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)7, (byte) (-1), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('w');
      assertNotNull(character0);
      assertEquals('w', (char)character0);
      
      characterArray0[1] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertNotNull(characterArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte)7;
      shortArray0[3] = (short) (byte) (-1);
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)2475);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)7, (short) (-1)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2230.22);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2230.22), (-1.0));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0, (-2230.22)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2230.22);
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(1, objectArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-53);
      ArrayUtils.shift(byteArray0, (int) (byte)75);
      assertArrayEquals(new byte[] {(byte)75, (byte)126, (byte) (-118), (byte) (-73), (byte) (-53)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 128;
      intArray0[2] = 2;
      intArray0[3] = 162;
      intArray0[4] = 0;
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)87;
      Byte byte1 = new Byte((byte)87);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)87, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)87, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)48);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)48, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)87);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertEquals((byte)87, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-1));
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte) (-1), (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 162);
      assertArrayEquals(new int[] {0, 128, 2, 162, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(3, int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)48;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) byte0, (-2988));
      assertArrayEquals(new short[] {(short)48}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)87, (byte)87, (byte)48, (byte)87, (byte) (-1)}, byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)80;
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) long0;
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.shift((char[]) null, 1);
      ArrayUtils.reverse((double[]) null);
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '>');
      assertNull(charArray0);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, 1114111);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 1114111);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1114111, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-119);
      doubleArray0[1] = (double) (-119);
      doubleArray0[2] = (double) 59;
      ArrayUtils.swap(doubleArray0, 59, (-101));
      assertArrayEquals(new double[] {(-119.0), (-119.0), 59.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-119.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-119.0), (-119.0), 59.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-119.0), (-119.0), (-119.0), 59.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      int[] intArray0 = new int[9];
      intArray0[1] = 65;
      intArray0[2] = (-1347);
      intArray0[3] = 59;
      intArray0[4] = (-119);
      intArray0[5] = 2666;
      intArray0[6] = (-1347);
      intArray0[7] = (-1347);
      intArray0[8] = 2666;
      ArrayUtils.reverse(intArray0, 59, (-1347));
      assertArrayEquals(new int[] {0, 65, (-1347), 59, (-119), 2666, (-1347), (-1347), 2666}, intArray0);
      assertEquals(9, intArray0.length);
      
      boolean[] booleanArray1 = new boolean[9];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = false;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      booleanArray1[7] = true;
      booleanArray1[8] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray1, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, true, true, false}, booleanArray1));
      assertEquals(9, booleanArray1.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 12.0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      ArrayUtils.shift((byte[]) null, 2877, 2877, 2877);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      char char0 = 'Y';
      charArray0[0] = 'Y';
      charArray0[1] = 'r';
      charArray0[0] = 'm';
      Boolean boolean1 = new Boolean("CU/7vs+{b");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[6];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray2));
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      int int0 = 2493;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(2493, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-117);
      floatArray0[1] = (float) 'm';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-731));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -731, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      Byte byte0 = new Byte((byte)11);
      assertNotNull(byte0);
      assertEquals((byte)11, (byte)byte0);
      
      Byte byte1 = new Byte((byte)11);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)11, (byte)byte1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '.');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[1] = (long) (-164);
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (int) (byte)5, 2);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1155.09889305);
      doubleArray0[1] = (-709.0699893945447);
      doubleArray0[2] = (-110.692881194533);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 7685.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.1;
      doubleArray0[7] = 2190.510204928919;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1155.09889305), (-709.0699893945447), (-110.692881194533), 0.0, 7685.0, 1.0, 0.1, 2190.510204928919}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 55.0F;
      floatArray0[1] = 255.91F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {55.0F, 255.91F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = 3379L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {3379L}, longArray1);
      assertArrayEquals(new long[] {3379L}, longArray0);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(doubleArray1, 129, 129, 129);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1155.09889305), (-709.0699893945447), (-110.692881194533), 0.0, 7685.0, 1.0, 0.1, 2190.510204928919}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 55.0F;
      objectArray0[1] = (Object) (-1155.09889305);
      objectArray0[2] = (Object) 2190.510204928919;
      objectArray0[3] = (Object) 255.91F;
      objectArray0[4] = (Object) 3379L;
      ArrayUtils.shift(objectArray0, 1, 1, 1);
      assertEquals(5, objectArray0.length);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.1;
      doubleArray2[1] = (double) 255.91F;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2965, doubleArray1, doubleArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2965, Length: 16
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      ArrayUtils.shift((Object[]) shortArray0, (-312), 17, (-1));
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-1665));
      assertNull(shortArray0);
      
      ArrayUtils.shift((short[]) null, (int) (short) (-1665), 1034, (int) (short) (-1665));
      short[] shortArray1 = ArrayUtils.subarray((short[]) null, 20, 4332);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-94));
      assertNotNull(byte0);
      assertEquals((byte) (-94), (byte)byte0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-94);
      doubleArray0[1] = (double) (byte) (-94);
      doubleArray0[2] = (double) (byte) (-94);
      doubleArray0[3] = (double) (byte) (-94);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1097.1901730628858));
      assertArrayEquals(new double[] {(-94.0), (-94.0), (-94.0), (-94.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 52, (int) (short) (-674));
      assertNull(shortArray0);
      
      ArrayUtils.shift((Object[]) byteArray0, (-1429), 3, 5);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)39;
      byteArray1[2] = (byte)39;
      byteArray1[3] = (byte)55;
      byteArray1[4] = (byte) (-94);
      byteArray1[5] = (byte)98;
      byteArray1[6] = (byte)55;
      boolean boolean2 = ArrayUtils.isEmpty(byteArray1);
      assertArrayEquals(new byte[] {(byte)98, (byte)39, (byte)39, (byte)55, (byte) (-94), (byte)98, (byte)55}, byteArray1);
      assertEquals(7, byteArray1.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)98;
      intArray0[1] = (int) (byte)39;
      intArray0[2] = (int) (byte)98;
      intArray0[3] = (int) (byte)98;
      intArray0[4] = (int) (byte)55;
      intArray0[5] = (int) (short) (-674);
      intArray0[6] = (int) (byte)55;
      intArray0[7] = (int) (byte)39;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 2812, (-4719));
      assertArrayEquals(new int[] {98, 39, 98, 98, 55, (-674), 55, 39}, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 115);
      assertArrayEquals(new int[] {115}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-45), (int) (byte) (-45));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = '0';
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 224.73;
      doubleArray0[1] = (double) '0';
      doubleArray0[2] = (double) '';
      doubleArray0[3] = (double) '';
      doubleArray0[4] = (double) 'H';
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {48.0, 127.0, 127.0, 72.0, 224.73}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 224.73);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertArrayEquals(new double[] {48.0, 127.0, 127.0, 72.0, 224.73}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)83;
      Byte byte1 = new Byte((byte)83);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)83, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)83, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)11);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)11, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertEquals((byte)83, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-46));
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte) (-46), (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte0);
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte2));
      assertEquals((byte)83, (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte) (-46));
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertEquals((byte) (-46), (byte)byte7);
      
      byteArray0[6] = byte7;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (Byte) byte0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = new byte[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray2, (byte) (-62), (int) (byte) (-46));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      int[] intArray0 = new int[7];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertNotNull(integerArray0);
      
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertEquals(7, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-104));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (int) (short) (-48);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short) (-48), 1072);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-48));
      assertNotNull(double0);
      assertEquals((-48.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)105);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)105}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-48);
      integerArray0[1] = (Integer) (-48);
      Integer integer0 = new Integer(1507);
      assertNotNull(integer0);
      assertEquals(1507, (int)integer0);
      
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) (-48);
      integerArray0[4] = (Integer) (-48);
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(6, integerArray0.length);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-48), (int)integer1);
      
      integerArray0[5] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(6, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertNotNull(integerArray1);
      
      Byte[] byteArray2 = new Byte[6];
      Byte byte0 = new Byte((byte)105);
      assertNotNull(byte0);
      assertEquals((byte)105, (byte)byte0);
      
      byteArray2[0] = byte0;
      try { 
        Byte.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ArrayUtils.shift(byteArray0, 1685);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      Double double0 = new Double(187.6359474012);
      assertNotNull(double0);
      assertEquals(187.6359474012, (double)double0, 0.01);
      
      Double double1 = new Double((-836.0));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-836.0), (double)double1, 0.01);
      
      Double double2 = new Double(187.6359474012);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(187.6359474012, (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double1;
      doubleArray0[1] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)42;
      Byte byte1 = new Byte((byte)42);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)42, (byte)byte1);
      
      byteArray0[0] = byte1;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'I', (int) (byte)42);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)42;
      intArray0[1] = (int) byte0;
      intArray0[2] = 0;
      intArray0[3] = 2145482265;
      intArray0[4] = (int) 'I';
      intArray0[5] = (int) (byte)42;
      intArray0[6] = 2145482265;
      ArrayUtils.swap(intArray0, 0, 0, 31);
      assertArrayEquals(new int[] {42, 42, 0, 2145482265, 73, 42, 2145482265}, intArray0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2145482265, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2145482265, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1072;
      intArray0[1] = 1072;
      intArray0[2] = 0;
      intArray0[3] = (-332);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, (-332));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1072, 1072, 0, (-332)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Double double0 = new Double((-3334.86963061609));
      assertNotNull(double0);
      assertEquals((-3334.86963061609), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 2865.011129);
      assertArrayEquals(new double[] {(-3334.86963061609), (-3334.86963061609), (-3334.86963061609), (-3334.86963061609)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-434);
      shortArray0[1] = (short) (-434);
      shortArray0[2] = (short) (-434);
      shortArray0[3] = (short) (-434);
      shortArray0[4] = (short) (-434);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-434), 2132108334);
      assertArrayEquals(new short[] {(short) (-434), (short) (-434), (short) (-434), (short) (-434), (short) (-434)}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(4, int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0, "Array and element cannot both be null");
      assertEquals(1, longArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.shift((long[]) null, (-332), 2289, 0);
      int[] intArray2 = ArrayUtils.clone(intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {1072, 1072, 0, (-332)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)2;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)25, (int) (short) (-434));
      assertArrayEquals(new byte[] {(byte) (-51), (byte)3, (byte)19, (byte)82, (byte)25, (byte) (-16), (byte)2}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (-303));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = 'D';
      float[] floatArray0 = new float[7];
      floatArray0[0] = 688.48F;
      floatArray0[1] = (float) '!';
      floatArray0[2] = 688.48F;
      floatArray0[3] = (float) 'D';
      floatArray0[4] = (float) 'D';
      floatArray0[5] = (float) '!';
      floatArray0[6] = (-476.3F);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-476.3F), 33.0F, 68.0F, 68.0F, 688.48F, 33.0F, 688.48F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)75;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)75}, byteArray1);
      assertArrayEquals(new byte[] {(byte)75}, byteArray0);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)75;
      intArray0[1] = (int) '~';
      intArray0[2] = (int) 'D';
      intArray0[3] = (int) '!';
      intArray0[4] = (int) (byte)75;
      intArray0[5] = 781;
      intArray0[6] = (int) '!';
      intArray0[7] = (-1);
      intArray0[8] = (int) '~';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 4868, (-1102));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {75, 126, 68, 33, 75, 781, 33, (-1), 126}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short) (-745);
      shortArray0[2] = (short) (-745);
      shortArray0[3] = (short) (-987);
      shortArray0[4] = (short)9;
      shortArray0[5] = (short) (-4);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-4);
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-4L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)84;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, 108);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)0, (byte) (-107), (byte)5, (byte)0, (byte)84}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)3108);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1782L;
      ArrayUtils.swap(longArray0, (int) (short)3108, (-1), (-960));
      assertArrayEquals(new long[] {1782L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 9;
      intArray0[1] = (-1);
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = '4';
      charArray0[4] = 'O';
      charArray0[5] = 'O';
      charArray0[6] = '4';
      char[] charArray1 = ArrayUtils.add(charArray0, 'O');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'O', 'O', 'O', '4', 'O', 'O', '4'}, charArray0);
      assertArrayEquals(new char[] {'O', 'O', 'O', '4', 'O', 'O', '4', 'O'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.reverse((byte[]) null);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) '4';
      objectArray0[2] = (Object) 'O';
      objectArray0[3] = (Object) 'O';
      objectArray0[4] = (Object) 9;
      int int0 = ArrayUtils.lastIndexOf(charArray0, '4');
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'O', 'O', 'O', '4', 'O', 'O', '4'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(6, int0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-3154));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {9, (-1)}, intArray0);
      assertArrayEquals(new int[] {9, (-1)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[2] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)0;
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      boolean boolean1 = ArrayUtils.contains(charArray0, '@');
      assertArrayEquals(new char[] {'{'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 441);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, int0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      ArrayUtils.shift(longArray0, (-4042), (-4042), 2);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte) (-8));
      assertNotNull(byte0);
      assertEquals((byte) (-8), (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)16);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)16, (byte)byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)9);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)9, (byte)byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)7);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)7, (byte)byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte) (-23));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte) (-23), (byte)byte4);
      
      byteArray0[4] = byte4;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, byte0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte3));
      assertFalse(byte0.equals((Object)byte4));
      assertFalse(byte0.equals((Object)byte2));
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-68);
      Byte byte2 = new Byte((byte) (-68));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-68), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte3);
      
      ArrayUtils.reverse((double[]) null, (int) (byte)0, (int) byte1);
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte) (-1);
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte) (-1)}, byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-68);
      longArray0[1] = 1554L;
      longArray0[2] = (long) byte1;
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) byte1;
      longArray0[5] = (long) (byte) (-68);
      longArray0[6] = (-3248L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-68L), 1554L, (-68L), (-1L), (-68L), (-68L), (-3248L)}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.reverse(longArray1, (-310), 48);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-68L), 1554L, (-68L), (-1L), (-68L), (-68L), (-3248L)}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-3248L);
      floatArray0[1] = (float) byte1;
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) (-68L);
      floatArray0[4] = (float) byte1;
      floatArray0[5] = (float) (byte) (-68);
      floatArray0[6] = (float) 48;
      floatArray0[7] = (float) (byte) (-1);
      floatArray0[8] = (float) (byte) (-1);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (-68L));
      assertArrayEquals(new float[] {(-3248.0F), (-68.0F), (-1.0F), (-68.0F), (-68.0F), (-68.0F), 48.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      Byte byte1 = new Byte((byte)94);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)94, (byte)byte1);
      
      Byte byte2 = new Byte((byte)32);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)32, (byte)byte2);
      
      Byte byte3 = new Byte((byte)1);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)1, (byte)byte3);
      
      Byte byte4 = new Byte((byte)1);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte4);
      
      Byte byte5 = new Byte((byte) (-1));
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertEquals((byte) (-1), (byte)byte5);
      
      Byte byte6 = new Byte((byte)1);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte4));
      assertEquals((byte)1, (byte)byte6);
      
      Byte byte7 = new Byte((byte)1);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertEquals((byte)1, (byte)byte7);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 3614.4, (-2480.6249));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)32;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)32;
      intArray0[3] = (int) (byte)32;
      intArray0[4] = 77;
      intArray0[5] = (int) (byte)32;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)1, (-2374));
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new int[] {32, 1, 32, 32, 77, 32}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'', '', '\u0000'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1726));
      assertNotNull(short0);
      assertEquals((short) (-1726), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short) (-1726)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.swap((long[]) null, (-1282), 1);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '';
      intArray0[1] = 48;
      intArray0[2] = (-2508);
      intArray0[3] = (int) (short) (-1726);
      intArray0[4] = (int) '';
      intArray0[5] = (int) '';
      intArray0[6] = 1;
      intArray0[7] = 48;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2508);
      intArray1[1] = (-2508);
      intArray1[2] = (int) (short)shortArray0[0];
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-2508), (-2508), (-1726)}, intArray1);
      assertArrayEquals(new int[] {127, 48, 127, 127, 1, 48}, intArray2);
      assertArrayEquals(new int[] {127, 48, (-2508), (-1726), 127, 127, 1, 48}, intArray0);
      assertEquals(3, intArray1.length);
      assertEquals(6, intArray2.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-13);
      intArray0[1] = 55;
      intArray0[2] = 68;
      intArray0[3] = (-31);
      intArray0[4] = (-102);
      intArray0[5] = 2;
      intArray0[6] = Integer.MAX_VALUE;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 55;
      intArray1[1] = (-13);
      intArray1[2] = Integer.MAX_VALUE;
      intArray1[3] = 68;
      intArray1[4] = (-102);
      intArray1[5] = (-13);
      intArray1[6] = (-13);
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-31), 2}, intArray2);
      assertArrayEquals(new int[] {(-13), 55, 68, (-31), (-102), 2, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {55, (-13), Integer.MAX_VALUE, 68, (-102), (-13), (-13)}, intArray1);
      assertEquals(2, intArray2.length);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.3291112780570984;
      doubleArray0[3] = (-2186.192117355);
      doubleArray0[4] = (double) (byte)1;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.3291112780570984, (-2186.192117355), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 139.0);
      assertArrayEquals(new double[] {Double.NaN, 0.3291112780570984, (-2186.192117355), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = (int) (byte)1;
      intArray0[5] = 535;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 321);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {321, 1, 1, 1, 1, 1, 535}, intArray1);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 535}, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = '\"';
      charArray0[2] = 'm';
      charArray0[3] = '{';
      charArray0[4] = 'v';
      ArrayUtils.swap(charArray0, (-2144317901), 2, 535);
      assertArrayEquals(new char[] {'m', '{', 'v', '\"', 'Y'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2424;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2424, 2424);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Byte byte0 = new Byte((byte)50);
      assertNotNull(byte0);
      assertEquals((byte)50, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-15));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-15), (byte)byte1);
      
      Byte byte2 = new Byte((byte)3);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)3, (byte)byte2);
      
      byte byte3 = (byte)1;
      Byte byte4 = new Byte((byte)1);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte)1, (byte)byte4);
      
      byte byte5 = (byte)15;
      Byte byte6 = new Byte((byte)15);
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertEquals((byte)15, (byte)byte6);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte6;
      byteArray0[1] = byte4;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 65);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)50;
      floatArray0[1] = (float) byte5;
      floatArray0[2] = (float) (byte)1;
      floatArray0[3] = (-13.0F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) byte3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {50.0F, 15.0F, 1.0F, (-13.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {50.0F, 15.0F, 1.0F, (-13.0F), 1.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(byte3 == byte5);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 27;
      intArray0[1] = 13;
      intArray0[2] = 0;
      intArray0[3] = 1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.swap((byte[]) null, 13, (-964));
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) 13;
      objectArray0[2] = (Object) 13;
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-964);
      doubleArray0[1] = (double) 'V';
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 'V';
      doubleArray0[4] = (double) 27;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) '+';
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1330.10140399);
      assertArrayEquals(new double[] {(-964.0), 86.0, 1.0, 86.0, 27.0, 0.0, 43.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1779);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {27, 13, 0, 1}, intArray0);
      assertArrayEquals(new int[] {1779, 27, 13, 0, 1}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean1 = ArrayUtils.isNotEmpty((float[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 0, (-1));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean3 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean3);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 634L;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      boolean boolean4 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 634L, (-1L), 0L, (-1L), (-1L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0, (int) (byte) (-1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, objectArray0.length);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'g', (int) (byte) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      short short0 = (short) (-48);
      int int0 = (-106);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-106);
      int int1 = (-117);
      ArrayUtils.shift(doubleArray0, (-117));
      assertArrayEquals(new double[] {(-106.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      MockRandom mockRandom0 = new MockRandom(6L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1310L);
      long long0 = 2057L;
      longArray0[1] = 2057L;
      longArray0[2] = 548L;
      int int0 = (-627);
      ArrayUtils.swap(longArray0, (-627), (-627), (-627));
      assertArrayEquals(new long[] {(-1310L), 2057L, 548L}, longArray0);
      assertEquals(3, longArray0.length);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)127;
      Byte byte1 = new Byte((byte)127);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)127, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)127);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)127, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)127, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertEquals((byte)127, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      assertEquals((byte)127, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte5));
      assertTrue(byte2.equals((Object)byte4));
      assertTrue(byte2.equals((Object)byte3));
      assertTrue(byte2.equals((Object)byte0));
      
      boolean[] booleanArray0 = new boolean[0];
      int int1 = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-883);
      shortArray0[2] = (short)2934;
      shortArray0[3] = (short) (-1);
      short[] shortArray1 = ArrayUtils.insert(2, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-883), (short)2934, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-883), (short)0, (short) (-883), (short)2934, (short) (-1), (short)2934, (short) (-1)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-883);
      floatArray0[1] = (float) (short)2934;
      floatArray0[2] = (float) (short) (-883);
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)2934;
      floatArray0[6] = (float) (short) (-883);
      float[] floatArray1 = ArrayUtils.remove(floatArray0, (int) (short)0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-883.0F), 2934.0F, (-883.0F), 0.0F, 0.0F, 2934.0F, (-883.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2934.0F, (-883.0F), 0.0F, 0.0F, 2934.0F, (-883.0F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = (long) (short)2934;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short) (-883);
      longArray0[5] = (-1807L);
      longArray0[6] = (long) (short) (-1);
      longArray0[7] = (long) (short) (-883);
      ArrayUtils.swap(longArray0, (int) (short) (-883), 2402, 75);
      assertArrayEquals(new long[] {0L, (-1L), 2934L, 0L, (-883L), (-1807L), (-1L), (-883L)}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      Byte byte0 = new Byte((byte)52);
      assertNotNull(byte0);
      assertEquals((byte)52, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)52, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)52;
      shortArray0[2] = (short) (byte)52;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte)52, 106);
      assertArrayEquals(new short[] {(short)52, (short)0, (short)52}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = '8';
      charArray0[2] = ',';
      int int1 = new Integer('8');
      assertFalse(int1 == int0);
      assertEquals(56, int1);
      
      ArrayUtils.shift(booleanArray0, (-1568), 56, 56);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.swap(charArray0, 65536, 1704, (-1568));
      assertArrayEquals(new char[] {',', '8', ','}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      ArrayUtils.shift((Object[]) floatArray0, (-731), (-3453), (-3453));
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean("");
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4);
      
      boolean[] booleanArray1 = new boolean[7];
      booleanArray1[0] = boolean0;
      booleanArray1[1] = boolean0;
      booleanArray1[2] = true;
      booleanArray1[3] = boolean0;
      booleanArray1[4] = false;
      booleanArray1[5] = boolean0;
      booleanArray1[6] = boolean0;
      boolean boolean5 = ArrayUtils.isNotEmpty(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true}, booleanArray1));
      assertEquals(7, booleanArray1.length);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-674);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-674), (int) (short) (-674));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-674)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short) (-674), (int) (short) (-674), 17);
      assertEquals(8, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)39;
      boolean boolean6 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)55, (byte)98, (byte)39}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      byte byte0 = (byte) (-70);
      Double double0 = new Double((byte) (-70));
      assertNotNull(double0);
      assertEquals((-70.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      Double double1 = new Double((byte) (-70));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-70.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      Double double2 = new Double((double) doubleArray0[3]);
      assertEquals(9, doubleArray0.length);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((-70.0), (double)double2, 0.01);
      
      doubleArray0[5] = doubleArray0[4];
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = (Byte) (byte) (-70);
      byteArray0[1] = (Byte) (byte) (-70);
      byteArray0[2] = (Byte) (byte) (-70);
      byteArray0[3] = (Byte) (byte) (-70);
      byteArray0[4] = (Byte) (byte) (-70);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'I', (int) byte0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) (byte) (-70);
      intArray0[2] = (int) 'I';
      intArray0[3] = (int) byte0;
      ArrayUtils.swap(intArray0, 0, (int) byte0, 2145482265);
      assertArrayEquals(new int[] {(-70), (-70), 73, (-70)}, intArray0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(189, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 189, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-124);
      intArray1[2] = (-124);
      intArray1[3] = (-2217);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, (-124), (-124), (-2217)}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-814L);
      longArray0[1] = (-1550L);
      longArray0[2] = 0L;
      longArray0[3] = (-749L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1797L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-814L), (-1550L), 0L, (-749L)}, longArray0);
      assertArrayEquals(new long[] {(-1797L), (-814L), (-1550L), 0L, (-749L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 69;
      intArray0[2] = 59;
      intArray0[3] = 7;
      intArray0[4] = 1;
      intArray0[5] = (-3380);
      intArray0[6] = 188;
      intArray0[7] = 4;
      intArray0[8] = 256;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 4;
      intArray1[1] = 4;
      intArray1[2] = 256;
      intArray1[3] = 4;
      intArray1[4] = 1;
      intArray1[5] = 7;
      intArray1[6] = 69;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {4, 4, 256, 4, 1, 7, 69}, intArray1);
      assertArrayEquals(new int[] {1, 69, 59, 7, 1, (-3380), 188, 4, 256}, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      float[] floatArray0 = new float[3];
      int[] intArray0 = new int[1];
      intArray0[0] = (-62);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-62)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = ArrayUtils.indexOf((long[]) null, 75L, (-667));
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray1, 930, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 930, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      Byte[] byteArray0 = new Byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-48), (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-48), (short)0, (short)0, (short)0, (short) (-48), (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2986.15F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1434.051F;
      floatArray0[3] = (-285.66F);
      floatArray0[4] = (-2478.7402F);
      floatArray0[5] = 3716.929F;
      floatArray0[6] = (-883.0F);
      floatArray0[7] = (-1544.2094F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-2986.15F), 0.0F, 1434.051F, (-285.66F), (-2478.7402F), 3716.929F, (-883.0F), (-1544.2094F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      ArrayUtils.hashCode((Object) byte0);
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) floatArray1, (Object) byte0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {(-2986.15F), 0.0F, 1434.051F, (-285.66F), (-2478.7402F), 3716.929F, (-883.0F), (-1544.2094F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      shortArray0[4] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte) (-1);
      ArrayUtils.shift(doubleArray0, (-2146918812));
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, (float) (byte) (-1));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      
      short[] shortArray0 = ArrayUtils.insert((int) (short)2465, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte) (-1);
      floatArray1[1] = (float) (-1538);
      floatArray1[2] = (float) (-1538);
      float[] floatArray2 = ArrayUtils.remove(floatArray1, 1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1538.0F), (-1538.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1538.0F)}, floatArray2, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 58.0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short) (byte) (-1);
      short[] shortArray2 = ArrayUtils.addAll(shortArray1, (short[]) null);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, (-2163));
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1, 6);
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short) (-1807);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-1807), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1807);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (short) (-1807);
      doubleArray0[3] = (double) 0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-2377.75260549665));
      assertArrayEquals(new double[] {(-1807.0), 1.0, (-1807.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1807.0), 1.0, (-1807.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte) (-66));
      assertNotNull(byte0);
      assertEquals((byte) (-66), (byte)byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, 37, byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 37, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      Byte byte0 = new Byte((byte)97);
      assertNotNull(byte0);
      assertEquals((byte)97, (byte)byte0);
      
      Byte byte1 = new Byte((byte)97);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)97, (byte)byte1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, (int) 97, byte1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)25792;
      shortArray0[1] = (short) (-348);
      ArrayUtils.reverse(shortArray0, 965, (int) (short)25792);
      assertArrayEquals(new short[] {(short)0, (short) (-348)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-348);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-348.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-348.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(4466, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-117));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(13, byteArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((int) (byte) (-117), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2465;
      shortArray0[1] = (short)3593;
      shortArray0[2] = (short) (-1557);
      short[] shortArray1 = ArrayUtils.insert((-1538), shortArray0, (short[]) null);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2465, (short)3593, (short) (-1557)}, shortArray0);
      assertArrayEquals(new short[] {(short)2465, (short)3593, (short) (-1557)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) (-117);
      floatArray2[1] = (float) (short) (-1557);
      floatArray2[2] = (float) (-117);
      floatArray2[3] = (float) (short)3593;
      float[] floatArray3 = ArrayUtils.remove(floatArray2, 1);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-117.0F), (-117.0F), 3593.0F}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {(-117.0F), (-1557.0F), (-117.0F), 3593.0F}, floatArray2, 0.01F);
      assertEquals(3, floatArray3.length);
      assertEquals(4, floatArray2.length);
      assertNotNull(floatArray3);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      int int0 = (-1017);
      Byte byte0 = ArrayUtils.get((Byte[]) null, (-1017));
      assertNull(byte0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1017);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1017, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (-256);
      doubleArray0[3] = (double) (short) (-458);
      Short short0 = new Short((short) (-458));
      assertNotNull(short0);
      assertEquals((short) (-458), (short)short0);
      
      Short[] shortArray0 = null;
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null, (short) (-458));
      assertNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2280));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      
      Byte[] byteArray0 = new Byte[10];
      Byte byte0 = new Byte((byte) (-8));
      assertNotNull(byte0);
      assertEquals((byte) (-8), (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = ArrayUtils.get(byteArray0, (-1017));
      assertEquals(10, byteArray0.length);
      assertNull(byte1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-2139L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.swap(longArray1, (-73), (-73), 1148);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      float[] floatArray0 = new float[4];
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1568;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      ArrayUtils.swap(longArray0, (-1430), 0);
      assertArrayEquals(new long[] {1568L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1430);
      intArray0[1] = 1568;
      intArray0[2] = 1568;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1430);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1430), 1568, 1568, 0, 0, (-1430)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 15, (-667));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {1568L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)54;
      shortArray0[2] = (short)54;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)54);
      assertArrayEquals(new short[] {(short)54, (short)0, (short)54}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 785.4F;
      floatArray0[3] = 330.7F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 0.0F, 330.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 0.0F, 330.7F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)111;
      Byte byte1 = new Byte((byte)111);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)111, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)111);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)111, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = byte0;
      byteArray2[1] = byte0;
      byteArray2[2] = byte0;
      byte[] byteArray3 = ArrayUtils.subarray(byteArray2, (int) byte0, (-8));
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertArrayEquals(new byte[] {(byte)111, (byte)111, (byte)111}, byteArray2);
      assertEquals(0, byteArray3.length);
      assertEquals(3, byteArray2.length);
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      Character character0 = Character.valueOf('W');
      assertNotNull(character0);
      assertEquals('W', (char)character0);
      
      Character character1 = Character.valueOf('W');
      assertNotNull(character1);
      assertEquals('W', (char)character1);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertNotNull(characterArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)111;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) (-69);
      shortArray0[3] = (short) (byte)111;
      shortArray0[4] = (short)2475;
      shortArray0[5] = (short) byte0;
      shortArray0[6] = (short) (byte)7;
      shortArray0[7] = (short) byte0;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) byte0);
      assertArrayEquals(new short[] {(short)111, (short)111, (short) (-69), (short)111, (short)2475, (short)111, (short)7, (short)111}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2625.0138;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-387), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -387, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1802);
      assertArrayEquals(new short[] {(short)1802}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      Byte byte0 = new Byte((byte) (-98));
      assertNotNull(byte0);
      assertEquals((byte) (-98), (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) shortArray0, (Object) byte0, (int) (byte) (-98));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'w';
      doubleArray0[1] = (double) 'w';
      doubleArray0[3] = (double) 59;
      doubleArray0[4] = (double) 59;
      doubleArray0[5] = (double) 'w';
      doubleArray0[6] = (double) 59;
      doubleArray0[7] = (double) 59;
      ArrayUtils.swap(doubleArray0, 59, (-119));
      assertArrayEquals(new double[] {119.0, 119.0, 0.0, 59.0, 59.0, 119.0, 59.0, 59.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 59;
      floatArray0[1] = (float) 59;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {59.0F, 59.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)64;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)7, (int) (byte) (-1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)64, (byte)7, (byte) (-1), (byte)64}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(floatArray0, 1, (int) (byte)64);
      assertArrayEquals(new float[] {59.0F, 59.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((byte)7);
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {7}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      Byte byte0 = new Byte((byte)67);
      assertNotNull(byte0);
      assertEquals((byte)67, (byte)byte0);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) byte0, (-1017));
      assertEquals(1, integerArray0.length);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (byte) (-1));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {59.0F, 59.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = ArrayUtils.insert((-2110), (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'z';
      charArray0[5] = 'J';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ':', 583);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J', 'z', 'J'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) null, (String) null);
      assertNull(stringArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-89);
      ArrayUtils.shift(byteArray0, (int) (byte) (-89));
      assertArrayEquals(new byte[] {(byte) (-89), (byte)14}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)14;
      shortArray0[1] = (short) (byte) (-89);
      shortArray0[2] = (short) (byte) (-89);
      shortArray0[3] = (short) (byte) (-89);
      shortArray0[4] = (short) (byte)14;
      shortArray0[5] = (short) (byte) (-89);
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)14, (short) (-89), (short) (-89), (short) (-89), (short)14, (short) (-89)}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1, 6);
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short) (-1807);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = 2794.2680563;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      ArrayUtils.shift(doubleArray0, 4645);
      assertArrayEquals(new double[] {1.0, 6.0, 6.0, 6.0, 2794.2680563, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 1285.8157F);
      assertArrayEquals(new float[] {1285.8157F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      
      Byte byte0 = new Byte((byte)82);
      assertNotNull(byte0);
      assertEquals((byte)82, (byte)byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.shift(doubleArray1, (int) (short) (-1807), 4645, 70);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)100;
      ArrayUtils.shift(byteArray0, 1);
      assertArrayEquals(new byte[] {(byte)100, (byte)82, (byte) (-89), (byte) (-89), (byte)82}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-630);
      shortArray0[1] = (short) (-1430);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) (-630));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1970.6145F);
      floatArray0[1] = (float) (short) (-630);
      float[] floatArray1 = ArrayUtils.insert((int) (short)0, floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1970.6145F), (-630.0F), (-1970.6145F), (-630.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1970.6145F), (-630.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'J', (int) (short) (-1430));
      assertArrayEquals(new char[] {'J', 'J'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) null, "");
      assertNull(stringArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-89);
      ArrayUtils.shift(byteArray0, (int) (byte) (-89));
      assertArrayEquals(new byte[] {(byte) (-89), (byte)80, (byte)14}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = '{';
      charArray0[2] = '~';
      charArray0[3] = '{';
      charArray0[4] = '#';
      charArray0[5] = '{';
      charArray0[6] = '#';
      charArray0[7] = '#';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '~');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'#', '{', '~', '{', '#', '{', '#', '#'}, charArray0);
      assertArrayEquals(new char[] {'#', '{', '{', '#', '{', '#', '#'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(floatArray0, (-1), (-2653), 65);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 96, 96);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      assertNotNull(integerArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0, 96);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)80;
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)16;
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte)80;
      byteArray1[5] = (byte) (-113);
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-88);
      ArrayUtils.shift(floatArray0, 1525);
      assertArrayEquals(new float[] {(-88.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertNotNull(class0);
      
      Class<Byte> class1 = Byte.TYPE;
      assertSame(class1, class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("byte", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      assertNotNull(classArray1);
      
      Integer[] integerArray1 = new Integer[4];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      integerArray1[0] = integer0;
      Integer integer1 = new Integer((byte) (-88));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-88), (int)integer1);
      
      integerArray1[1] = integer1;
      Integer integer2 = new Integer(2146756457);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(2146756457, (int)integer2);
      
      integerArray1[2] = integer2;
      Integer integer3 = new Integer(36);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(36, (int)integer3);
      
      integerArray1[3] = integer3;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray1, (-2145338376));
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, (-88), 2146756457, 36}, intArray1);
      assertEquals(4, integerArray1.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertArrayEquals(new char[] {'.', '.'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 121;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {121}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 111);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {121}, intArray0);
      assertArrayEquals(new int[] {111, 121}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 0.1);
      assertArrayEquals(new double[] {0.1}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 111;
      longArray0[1] = (long) 121;
      longArray0[2] = (long) 121;
      longArray0[3] = (long) 111;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {111L, 121L, 121L, 111L}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 'm';
      charArray0[2] = 'X';
      charArray0[3] = 's';
      charArray0[4] = 'P';
      charArray0[5] = '\'';
      charArray0[6] = '{';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1870, 1276);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'L', 'm', 'X', 's', 'P', '\'', '{'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(7, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray1, 121, 'P');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 121, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)71;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-93));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)11, (byte)65, (byte)47, (byte) (-99), (byte) (-93), (byte)79, (byte)71}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(5, int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (-13.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (byte) (-99));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {0.0F, 0.0F, (-13.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-113);
      byteArray0[8] = (byte)10;
      ArrayUtils.swap(byteArray0, (int) (byte)10, 781, (-2049870753));
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)10, (byte)10, (byte)10, (byte) (-113), (byte)0, (byte)0, (byte)10}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '+';
      charArray0[2] = 'g';
      charArray0[3] = 'P';
      ArrayUtils.reverse(charArray0, (int) (byte)0, 2141);
      assertArrayEquals(new char[] {'P', 'g', '+', '2'}, charArray0);
      assertEquals(4, charArray0.length);
      
      ArrayUtils.swap(byteArray0, (-431), (int) (byte)0, (int) (byte)10);
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)10, (byte)10, (byte)10, (byte) (-113), (byte)0, (byte)0, (byte)10}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 9;
      intArray0[1] = (-1);
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = '4';
      charArray0[4] = 'O';
      charArray0[5] = 'O';
      charArray0[6] = '4';
      char[] charArray1 = ArrayUtils.add(charArray0, 'O');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'O', 'O', 'O', '4', 'O', 'O', '4'}, charArray0);
      assertArrayEquals(new char[] {'O', 'O', 'O', '4', 'O', 'O', '4', 'O'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.reverse((byte[]) null);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) '4';
      objectArray0[2] = (Object) 'O';
      objectArray0[3] = (Object) 'O';
      objectArray0[4] = (Object) 9;
      Object object1 = ArrayUtils.get(objectArray0, 9);
      assertEquals(5, objectArray0.length);
      assertNull(object1);
      
      ArrayUtils.shift(objectArray0, (-2130));
      assertEquals(5, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(5, objectArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(5, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-420.31519362), 1709, (-1.0));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Byte byte0 = new Byte((byte)111);
      assertNotNull(byte0);
      assertEquals((byte)111, (byte)byte0);
      
      ArrayUtils.hashCode((Object) byte0);
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'@'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) '@';
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) '@';
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 7);
      assertEquals(13, objectArray0.length);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (byte)40;
      doubleArray0[2] = (double) (byte)40;
      doubleArray0[3] = (double) (byte)40;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, 40.0, 40.0, 40.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray1, (Object) null, (int) (byte)40);
      assertArrayEquals(new double[] {0.0, 40.0, 40.0, 40.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)14;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.reverse(intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      Byte[] byteArray0 = null;
      int int0 = 13;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = 2146716684;
      ArrayUtils.swap((byte[]) null, 43, 2146716684);
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-883);
      shortArray0[2] = (short)2934;
      shortArray0[3] = (short) (-1);
      short[] shortArray1 = ArrayUtils.insert(2, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-883), (short)2934, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-883), (short)0, (short) (-883), (short)2934, (short) (-1), (short)2934, (short) (-1)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-883);
      floatArray0[1] = (float) (short)2934;
      floatArray0[2] = (float) (short) (-883);
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)2934;
      floatArray0[6] = (float) (short) (-883);
      float[] floatArray1 = ArrayUtils.remove(floatArray0, (int) (short)0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-883.0F), 2934.0F, (-883.0F), 0.0F, 0.0F, 2934.0F, (-883.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2934.0F, (-883.0F), 0.0F, 0.0F, 2934.0F, (-883.0F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(2, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short) (-883));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-883.0F), 2934.0F, (-883.0F), 0.0F, 0.0F, 2934.0F, (-883.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(6, int0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '{');
      assertNull(charArray0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.indexOf(charArray0, '\u0000', 432);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(charArray0, (-477), 0, 2973);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = new Boolean(false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[6];
      Byte byte0 = new Byte((byte)13);
      assertNotNull(byte0);
      assertEquals((byte)13, (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (-1));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 785.4F;
      floatArray0[3] = 330.7F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 0.0F, 330.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 0.0F, 330.7F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)111;
      Byte byte1 = new Byte((byte)111);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)111, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)111, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray2 = ArrayUtils.insert(2, floatArray0, floatArray1);
      assertSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 0.0F, 330.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 0.0F, 330.7F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, (-1.0F), 785.4F, 0.0F, 330.7F, 0.0F, 330.7F}, floatArray2, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(8, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      Byte[] byteArray2 = new Byte[7];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = byte2;
      byteArray2[1] = byte1;
      byteArray2[2] = byte1;
      int[] intArray0 = new int[4];
      intArray0[0] = (-2846);
      intArray0[1] = 2;
      intArray0[2] = (int) byte0;
      intArray0[3] = 4506;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 4506, 8);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {(-2846), 2, 111, 4506}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      int int0 = ArrayUtils.indexOf(charArray0, ',', (-2084));
      assertArrayEquals(new char[] {',', ',', ','}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      
      ArrayUtils.swap(charArray0, (-2084), (-7), 0);
      assertArrayEquals(new char[] {',', ',', ','}, charArray0);
      assertEquals(3, charArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-271.8832144267018);
      doubleArray0[1] = (double) ',';
      doubleArray0[2] = (double) ',';
      doubleArray0[3] = (double) 432;
      doubleArray0[4] = (double) (-7);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) ',';
      doubleArray0[7] = (double) 128;
      doubleArray0[8] = (double) 0;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 128.0);
      assertArrayEquals(new double[] {(-271.8832144267018), 44.0, 44.0, 432.0, (-7.0), Double.NaN, 44.0, 128.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) (-7.0);
      doubleArray1[1] = (Double) 44.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) 432.0;
      doubleArray1[4] = (Double) 128.0;
      doubleArray1[5] = (Double) 44.0;
      doubleArray1[6] = (Double) Double.NaN;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 3203.6592F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) ',';
      floatArray0[4] = (float) ',';
      ArrayUtils.swap(floatArray0, (-7), 432, (-2084));
      assertArrayEquals(new float[] {3203.6592F, 0.0F, 0.0F, 44.0F, 44.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      int int0 = ArrayUtils.indexOf(charArray0, ',', 432);
      assertArrayEquals(new char[] {','}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(charArray0, (-477), (int) ',', 2973);
      assertArrayEquals(new char[] {','}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1231.78770058363);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      Float float0 = new Float((double) 115);
      assertNotNull(float0);
      assertEquals(115.0F, (float)float0, 0.01F);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1100), (-1100));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-94));
      assertNotNull(byte0);
      assertEquals((byte) (-94), (byte)byte0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-94);
      floatArray0[1] = (float) (byte) (-94);
      floatArray0[2] = (float) (byte) (-94);
      floatArray0[3] = (float) (byte) (-94);
      ArrayUtils.reverse(floatArray0, (int) (byte) (-94), (int) (byte) (-94));
      assertArrayEquals(new float[] {(-94.0F), (-94.0F), (-94.0F), (-94.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-94);
      shortArray0[1] = (short)5596;
      shortArray0[2] = (short) (byte) (-94);
      shortArray0[3] = (short) (byte) (-94);
      shortArray0[4] = (short) (byte) (-94);
      ArrayUtils.reverse(shortArray0, 0, 64);
      assertArrayEquals(new short[] {(short) (-94), (short) (-94), (short) (-94), (short)5596, (short) (-94)}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, Integer.MAX_VALUE);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte) (-16);
      byteArray0[7] = (byte) (-53);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-19));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)87, (byte)84, (byte)8, (byte) (-19), (byte) (-16), (byte)0, (byte) (-53)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-53), (byte)87, (byte)84, (byte)8, (byte) (-19), (byte) (-16), (byte)0, (byte) (-53)}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 2);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      short[] shortArray0 = new short[4];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 1);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      assertNotNull(classArray1);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-3026);
      shortArray0[1] = (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)139, 10);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new short[] {(short) (-3026), (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      byte byte0 = (byte) (-88);
      Byte byte1 = new Byte((byte) (-88));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-88), (byte)byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertEquals((byte) (-88), object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertEquals("-88", string0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, (int) (byte) (-88));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, (int) (byte) (-88), (double) (byte) (-88));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -88, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1718);
      intArray0[1] = 2263;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-1718), 2263}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[18];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      ArrayUtils.swap(shortArray0, (int) (short)2, (-1718), (int) (short)2);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) 2263;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.0, 2263.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2263.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (int) (byte)21);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      long long0 = 0L;
      Long long1 = Long.valueOf(0L);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long1;
      longArray0[1] = long1;
      longArray0[2] = long1;
      longArray0[3] = long1;
      longArray0[4] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotNull(longArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) long0;
      doubleArray0[2] = (double) long0;
      doubleArray0[3] = (double) long0;
      doubleArray0[4] = (double) (byte)2;
      doubleArray0[5] = (double) long0;
      doubleArray0[6] = (double) (byte)21;
      doubleArray0[7] = (double) (byte)2;
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 13;
      intArray0[1] = 1675;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[2] = 46;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("Ri*P2q.");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean2 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean2);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1;
      longArray0[1] = 53L;
      longArray0[2] = (long) 1;
      longArray0[3] = (-1628L);
      longArray0[4] = (long) 46;
      boolean boolean3 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertArrayEquals(new long[] {1L, 53L, 1L, (-1628L), 46L}, longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((-435.22387023486));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-435.22387023486), (double)double1, 0.01);
      
      Double double2 = new Double(620.4665115658273);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(620.4665115658273, (double)double2, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 620.4665115658273;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2147208046;
      doubleArray0[3] = (-435.22387023486);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 620.4665115658273;
      doubleArray0[7] = 620.4665115658273;
      doubleArray0[8] = (double) 27;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, 2147208046);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {620.4665115658273, 2.0, 2.147208046E9, (-435.22387023486), 0.0, 0.0, 620.4665115658273, 620.4665115658273, 27.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.147208046E9, (-435.22387023486), 0.0, 0.0, 620.4665115658273, 620.4665115658273, 27.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = 1L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-1L), 1L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)75);
      assertNotNull(byte0);
      assertEquals((byte)75, (byte)byte0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) (-2106);
      doubleArray0[2] = (double) (byte)75;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1072, 438);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-2106.0), 75.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 50;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 50;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 50;
      doubleArray0[6] = (double) 50;
      doubleArray0[7] = (double) 50;
      doubleArray0[8] = (double) 0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 50);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), 50.0, 1.0, 50.0, 50.0, 50.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 50.0, 1.0, 50.0, 50.0, 50.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Byte byte0 = new Byte((byte)29);
      assertNotNull(byte0);
      assertEquals((byte)29, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-86));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-86), (byte)byte1);
      
      Byte byte2 = new Byte((byte)3);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)3, (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-86));
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte) (-86), (byte)byte3);
      
      Byte[] byteArray0 = new Byte[9];
      byteArray0[0] = byte0;
      byteArray0[1] = byte2;
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)79);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte)79, (byte)byte4);
      
      byteArray0[3] = byte4;
      byteArray0[4] = byte2;
      byteArray0[5] = byte3;
      byteArray0[6] = byte2;
      byteArray0[7] = byte3;
      byteArray0[8] = byte3;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte1);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, (int) (byte)0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)14;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)14;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {14.0, 0.0, 0.0, 14.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)3454);
      assertFalse(boolean0);
      
      ArrayUtils.swap((short[]) null, (int) (short)3454, (-51), (-7514));
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-294.278);
      doubleArray0[1] = (-1188.351);
      doubleArray0[2] = 0.0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 2;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.0F, Float.NaN, 2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.shift(booleanArray0, 100);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-294.278), (-1188.351), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-294.278), (-1188.351), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 41.43086279029616, 41.43086279029616);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)18);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)18, (byte)byte1);
      
      byteArray0[1] = byte1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(649, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 649, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte byte0 = new Byte((byte)123);
      assertNotNull(byte0);
      assertEquals((byte)123, (byte)byte0);
      
      Byte byte1 = new Byte((byte)123);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)123, (byte)byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertEquals((byte)123, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = false;
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '>');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)123;
      intArray0[1] = (int) (byte)123;
      intArray0[2] = (int) (byte)123;
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {123, 123, 123}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-2143353870));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '{';
      Character[] characterArray0 = new Character[3];
      Character character0 = Character.valueOf('/');
      assertNotNull(character0);
      assertEquals('/', (char)character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = (Character) '#';
      characterArray0[2] = (Character) '{';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertNotNull(characterArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, (int) characterArray0[2]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 123, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-1), (-1));
      assertNull(doubleArray0);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)29);
      assertNotNull(byte0);
      assertEquals((byte)29, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-86));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-86), (byte)byte1);
      
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      Byte byte3 = new Byte((byte) (-1));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte2);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte) (-1), (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-68), (-2066));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)2;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-16));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-19), (byte)87, (byte) (-67), (byte) (-53), (byte)111, (byte)126, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)2, (byte) (-19), (byte)87, (byte) (-67), (byte) (-53), (byte)111, (byte)126, (byte)2}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)10;
      ArrayUtils.swap(byteArray0, (int) (byte)10, 781, (-2049870753));
      assertArrayEquals(new byte[] {(byte)80, (byte)10, (byte)10, (byte)10, (byte)80, (byte) (-113), (byte)80, (byte)10, (byte)10}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '+';
      charArray0[2] = 'g';
      charArray0[3] = 'P';
      ArrayUtils.reverse(charArray0, (int) (byte)10, 2141);
      assertArrayEquals(new char[] {'2', '+', 'g', 'P'}, charArray0);
      assertEquals(4, charArray0.length);
      
      ArrayUtils.swap(byteArray0, (-431), (int) (byte)80, (int) (byte)10);
      assertArrayEquals(new byte[] {(byte)80, (byte)10, (byte)10, (byte)10, (byte)80, (byte) (-113), (byte)80, (byte)10, (byte)10}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[3] = (long) (short) (-4);
      longArray0[5] = 127L;
      longArray0[6] = (long) (short)9;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-4L), 0L, 127L, 9L}, longArray0);
      assertEquals(7, longArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean[] booleanArray2 = new Boolean[2];
      booleanArray2[0] = boolean1;
      booleanArray2[1] = boolean1;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray3));
      assertEquals(2, booleanArray2.length);
      assertEquals(2, booleanArray3.length);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)116;
      shortArray0[1] = (short) (-4);
      shortArray0[2] = (short)9;
      shortArray0[3] = (short) (-4);
      shortArray0[4] = (short) (-4);
      shortArray0[5] = (short) (-4);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)116, 3991);
      assertArrayEquals(new short[] {(short)116, (short) (-4), (short)9, (short) (-4), (short) (-4), (short) (-4)}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 1.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[2] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-311.38));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-311.38F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-311.38F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertNotNull(floatArray1);
      
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) floatArray0[0], (int) (short)0, (double) (short)0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, floatArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Byte[]) null, (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-99));
      assertNotNull(byte0);
      assertEquals((byte) (-99), (byte)byte0);
      
      Byte[] byteArray0 = ArrayUtils.addFirst((Byte[]) null, byte0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-537.27737141392);
      doubleArray0[4] = 0.0;
      ArrayUtils.shift(doubleArray0, 12);
      assertArrayEquals(new double[] {(-537.27737141392), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 12);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {12.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 12;
      intArray0[2] = 12;
      doubleArray0[0] = (double) 12;
      byte byte0 = (byte) (-43);
      Byte byte1 = new Byte((byte) (-43));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-43), (byte)byte1);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte2 = (byte) (-65);
      Byte byte3 = new Byte((byte) (-65));
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-65), (byte)byte3);
      
      byteArray0[0] = byte3;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 82);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) byte0;
      ArrayUtils.shift(longArray0, (-2120971503), 82, (int) (byte) (-43));
      assertArrayEquals(new long[] {(-43L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, 90, (int) byte2, (int) byte0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(byte0 == byte2);
      assertFalse(byte2 == byte0);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte) (-111));
      assertNotNull(byte0);
      assertEquals((byte) (-111), (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-113));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-113), (byte)byte1);
      
      byteArray0[1] = byte1;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray0, (Comparator<Byte>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 9;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {9, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) (-1);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 2);
      assertArrayEquals(new double[] {9.0, 9.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
      
      int int1 = ArrayUtils.indexOf(intArray1, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {9, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)13;
      shortArray0[1] = (short)13;
      shortArray0[2] = (short)13;
      shortArray0[3] = (short)13;
      shortArray0[4] = (short)13;
      shortArray0[5] = (short)13;
      shortArray0[6] = (short)13;
      ArrayUtils.swap(shortArray0, (-1), 1906, 98);
      assertArrayEquals(new short[] {(short)13, (short)13, (short)13, (short)13, (short)13, (short)13, (short)13}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Byte[] byteArray0 = new Byte[7];
      Byte byte0 = new Byte((byte) (-77));
      assertNotNull(byte0);
      assertEquals((byte) (-77), (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-55));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-55), (byte)byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-1));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)59);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)59, (byte)byte3);
      
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      Byte byte5 = new Byte((byte)1);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertEquals((byte)1, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte4);
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertEquals((byte)1, (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte(byte4);
      assertNotNull(byte7);
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte5));
      assertEquals((byte)1, (byte)byte7);
      
      byteArray0[6] = byte7;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray0, (Comparator<Byte>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) false;
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(5, objectArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((short) (-916));
      Short short0 = new Short((short)1118);
      assertNotNull(short0);
      assertEquals((short)1118, (short)short0);
      
      Byte[] byteArray0 = new Byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'I', Integer.MAX_VALUE);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, objectArray0[1]);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1118;
      shortArray0[1] = (short) (-916);
      char[] charArray1 = ArrayUtils.subarray(charArray0, 69, (int) (short) (-916));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {2.14748365E9F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-916);
      longArray0[1] = (long) Integer.MAX_VALUE;
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (short)1118);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-916L), 2147483647L}, longArray0);
      assertArrayEquals(new long[] {(-916L), 2147483647L, 1118L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)84;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)84);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)84}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)112);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-59);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(11, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-59);
      shortArray0[1] = (short) (byte)112;
      shortArray0[2] = (short) (byte) (-59);
      shortArray0[3] = (short) (byte) (-59);
      shortArray0[4] = (short) (byte)112;
      shortArray0[5] = (short) (byte)112;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte) (-59));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-59), (short)112, (short) (-59), (short) (-59), (short)112, (short)112}, shortArray0);
      assertArrayEquals(new short[] {(short)112, (short) (-59), (short) (-59), (short)112, (short)112}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'O';
      floatArray0[1] = 768.0F;
      floatArray0[2] = (float) (byte)112;
      floatArray0[3] = (float) (byte)112;
      floatArray0[4] = (float) (short)112;
      floatArray0[5] = (float) (short)112;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), (int) (byte)112);
      assertArrayEquals(new float[] {79.0F, 768.0F, 112.0F, 112.0F, 112.0F, 112.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {79.0F, 768.0F, 112.0F, 112.0F, 112.0F, 112.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {79.0F, 768.0F, 112.0F, 112.0F, 112.0F, 112.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(floatArray1);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'O');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', 'O'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (byte) (-125), (int) (byte) (-125));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (int) (short) (-48);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short) (-48), 1072);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-48));
      assertNotNull(double0);
      assertEquals((-48.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertArrayEquals(new double[] {(-48.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences((long[]) null, 18L);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1067);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1067, (short)0, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.contains(charArray0, 'm');
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = (-388.1013);
      doubleArray0[2] = 1.5;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 845, 3.0);
      assertArrayEquals(new double[] {3.0, (-388.1013), 1.5, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 987.28781;
      doubleArray1[2] = (double) 845;
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-1840.7);
      doubleArray1[6] = 3.0;
      doubleArray1[7] = (double) 845;
      doubleArray1[8] = (-388.1013);
      int int1 = ArrayUtils.indexOf(doubleArray1, (-1.0), 1347.87065);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 987.28781, 845.0, (-1.0), 0.0, (-1840.7), 3.0, 845.0, (-388.1013)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      assertFalse(int1 == int0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, int1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)30583;
      shortArray0[1] = (short) (-19);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)693;
      shortArray0[4] = (short)14;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)30583, (short) (-19), (short) (-1), (short)693, (short)14}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-68), (-2066));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      char char0 = '+';
      Character character0 = new Character('+');
      assertNotNull(character0);
      assertTrue(character0.equals((Object)char0));
      assertEquals('+', (char)character0);
      
      Character character1 = Character.valueOf('+');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('+', (char)character1);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) Integer.MAX_VALUE);
      assertArrayEquals(new double[] {2.147483647E9}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) 16;
      ArrayUtils.swap(longArray0, 3062, (int) char0);
      assertArrayEquals(new long[] {2147483647L, 16L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-2053L);
      longArray0[1] = (-1719L);
      longArray0[2] = 1684L;
      longArray0[3] = 1111L;
      longArray0[4] = (-1L);
      ArrayUtils.swap(longArray0, 2, 1949, 0);
      assertArrayEquals(new long[] {(-2053L), (-1719L), 1684L, 1111L, (-1L)}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)386;
      shortArray0[1] = (short) (-891);
      shortArray0[2] = (short) (-3487);
      shortArray0[3] = (short)15;
      shortArray0[4] = (short) (-3409);
      shortArray0[5] = (short)1;
      shortArray0[7] = (short) (-891);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)386;
      longArray0[1] = (long) (short) (-3409);
      longArray0[2] = (long) (short) (-3487);
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.shift((char[]) null, (int) (short) (-3409));
      ArrayUtils.reverse((double[]) null);
      char[] charArray0 = ArrayUtils.add((char[]) null, 'k');
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.swap(longArray0, (int) (short) (-3409), (int) (short)386);
      assertArrayEquals(new long[] {386L, (-3409L), (-3487L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'k';
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)386;
      intArray0[3] = (int) (short) (-891);
      intArray0[4] = (int) (short) (-891);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {107, 1, 386, (-891), (-891)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-68), (-2066));
      assertEquals((-1), int0);
      
      char char0 = '+';
      Character character0 = new Character('+');
      assertNotNull(character0);
      assertTrue(character0.equals((Object)char0));
      assertEquals('+', (char)character0);
      
      Character character1 = Character.valueOf('+');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('+', (char)character1);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) Integer.MAX_VALUE);
      assertArrayEquals(new double[] {2.147483647E9}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) 16;
      ArrayUtils.swap(longArray0, (int) char0, (int) char0);
      assertArrayEquals(new long[] {2147483647L, 16L}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertArrayEquals(new char[] {'+'}, charArray1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, false, Integer.MAX_VALUE);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      float[] floatArray0 = new float[7];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 14;
      intArray0[3] = 2;
      intArray0[4] = (int) (short)2934;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {2, 14, 2, 2934, 2}, intArray0);
      assertEquals(5, intArray0.length);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (-1089));
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean("");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1352L));
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Byte byte0 = new Byte((byte) (-128));
      assertNotNull(byte0);
      assertEquals((byte) (-128), (byte)byte0);
      
      byte byte1 = (byte)5;
      Byte byte2 = new Byte((byte)5);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)5, (byte)byte2);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte2;
      doubleArray0[2] = (double) (byte)byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte2;
      byteArray0[4] = byte2;
      byteArray0[5] = byte2;
      byteArray0[6] = byte2;
      Byte byte3 = new Byte((byte) (-127));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-127), (byte)byte3);
      
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) byte1, byte3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, (-1630));
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) byte1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 519L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1L;
      longArray0[4] = (-286L);
      longArray0[5] = 792L;
      longArray0[6] = (-2511L);
      longArray0[7] = 1076L;
      longArray0[8] = 1091L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {519L, 0L, 0L, 1L, (-286L), 792L, (-2511L), 1076L, 1091L}, longArray0);
      assertArrayEquals(new long[] {519L, 0L, 0L, 1L, (-286L), 792L, (-2511L), 1076L, 1091L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "#\"P}lcVs!qv`";
      stringArray0[1] = "";
      stringArray0[2] = "fV7s/{>";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\'';
      charArray0[1] = 'G';
      charArray0[2] = 'u';
      charArray0[3] = 'V';
      charArray0[4] = 'G';
      charArray0[5] = '4';
      charArray0[6] = '9';
      charArray0[7] = 'E';
      int int0 = ArrayUtils.indexOf(charArray0, 'E', 4);
      assertArrayEquals(new char[] {'\'', 'G', 'u', 'V', 'G', '4', '9', 'E'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.shift((boolean[]) null, (-2146919784), (-2146919784), (-2146919784));
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2561, (int) (short)386);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = '&';
      charArray0[2] = '~';
      charArray0[3] = ')';
      charArray0[4] = '@';
      charArray0[5] = '@';
      boolean boolean0 = ArrayUtils.contains(charArray0, '\'');
      assertArrayEquals(new char[] {'~', '&', '~', ')', '@', '@'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, false, 867);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      int int2 = ArrayUtils.indexOf(charArray0, '~', (int) (short)386);
      assertArrayEquals(new char[] {'~', '&', '~', ')', '@', '@'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      ArrayUtils.shift((boolean[]) null, 1085, (-106), (-2521));
      ArrayUtils.swap(charArray0, (-106), (-1351), 321);
      assertArrayEquals(new char[] {'~', '&', '~', ')', '@', '@'}, charArray0);
      assertEquals(6, charArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2521);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 94, 1514);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-2521L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2561, (int) (short)386);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = '&';
      charArray0[2] = '~';
      charArray0[3] = ')';
      charArray0[5] = '@';
      boolean boolean0 = ArrayUtils.contains(charArray0, '\'');
      assertArrayEquals(new char[] {'~', '&', '~', ')', '\u0000', '@'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, false, 867);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      int int2 = ArrayUtils.indexOf(charArray0, '~', (int) (short)386);
      assertArrayEquals(new char[] {'~', '&', '~', ')', '\u0000', '@'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      ArrayUtils.shift((boolean[]) null, 1085, (-106), (-2521));
      ArrayUtils.swap(charArray0, (-106), (-1351), (int) ')');
      assertArrayEquals(new char[] {'~', '&', '~', ')', '\u0000', '@'}, charArray0);
      assertEquals(6, charArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2521);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 94, 1514);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-2521L)}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-630);
      shortArray0[1] = (short) (-1430);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 6;
      floatArray0[2] = (float) (short) (-630);
      floatArray0[3] = (float) (short) (-630);
      floatArray0[4] = (float) (short) (-630);
      floatArray0[5] = (float) (short) (-1430);
      floatArray0[6] = (float) (short) (-1430);
      floatArray0[7] = (float) (short) (-1430);
      ArrayUtils.swap(floatArray0, (int) (short) (-1430), 3375);
      assertArrayEquals(new float[] {1.0F, 6.0F, (-630.0F), (-630.0F), (-630.0F), (-1430.0F), (-1430.0F), (-1430.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)78);
      assertArrayEquals(new short[] {(short) (-630), (short) (-1430), (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-630.0F);
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) (short) (-1430);
      doubleArray0[3] = (double) (short) (-1430);
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) (-630.0F);
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-630.0), 6.0, (-1430.0), (-1430.0), 1.0, (-630.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-94));
      assertNotNull(byte0);
      assertEquals((byte) (-94), (byte)byte0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-94);
      doubleArray0[1] = (double) (byte) (-94);
      doubleArray0[2] = (double) (byte) (-94);
      doubleArray0[3] = (double) (byte) (-94);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1097.1901730628858));
      assertArrayEquals(new double[] {(-94.0), (-94.0), (-94.0), (-94.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (-1), 815);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-1365));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 1214.0F, 0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)8;
      byteArray0[0] = (byte)8;
      ArrayUtils.reverse(byteArray0, 2093, (int) (byte)8);
      assertArrayEquals(new byte[] {(byte)8}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Double double0 = new Double(2093);
      assertNotNull(double0);
      assertEquals(2093.0, (double)double0, 0.01);
      
      Double double1 = new Double((byte)8);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(8.0, (double)double1, 0.01);
      
      Double double2 = new Double((byte)8);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(8.0, (double)double2, 0.01);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)12);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new byte[] {(byte)8}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) (byte)8;
      byteArray1[1] = (Byte) (byte)8;
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertEquals(2, byteArray1.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      BitSet bitSet2 = ArrayUtils.indexesOf(charArray0, 'I', 2093);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.length());
      assertEquals(0, bitSet2.cardinality());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(bitSet2);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byte0;
      Byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (Object) byte0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertEquals(1, byteArray2.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)12;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) (byte)8;
      ArrayUtils.swap(shortArray0, (-4538), 2093, (int) (short)8);
      assertArrayEquals(new short[] {(short)12, (short)8, (short)8}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-19));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)12, (short)8, (short)8}, shortArray0);
      assertArrayEquals(new short[] {(short)12, (short)8, (short)8}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) false;
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(5, objectArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((short) (-916));
      Short short0 = new Short((short)1119);
      assertNotNull(short0);
      assertEquals((short)1119, (short)short0);
      
      Byte[] byteArray0 = new Byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'I', Integer.MAX_VALUE);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, objectArray0[1]);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1119;
      shortArray0[1] = (short) (-916);
      shortArray0[2] = (short)1119;
      shortArray0[3] = (short)13;
      shortArray0[4] = (short) (-916);
      shortArray0[5] = (short)1119;
      shortArray0[6] = (short) (-916);
      ArrayUtils.swap(shortArray0, (int) (short) (-916), 0, 1267);
      assertArrayEquals(new short[] {(short)1119, (short) (-916), (short)1119, (short)13, (short) (-916), (short)1119, (short) (-916)}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      ArrayUtils.swap((float[]) null, (-6), 6);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-103));
      assertArrayEquals(new byte[] {(byte)62}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)62;
      doubleArray0[1] = (-96.0);
      doubleArray0[2] = (double) (byte)62;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) (byte)62;
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = (double) (byte)62;
      doubleArray0[7] = (double) (byte)62;
      doubleArray0[8] = (double) (byte)62;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 62.0, 1, 4860.402783);
      assertArrayEquals(new double[] {62.0, (-96.0), 62.0, 6.0, 62.0, 6.0, 62.0, 62.0, 62.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, int0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)62);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)62}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte)62);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)62}, byteArray2);
      assertArrayEquals(new byte[] {(byte)62}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (byte)62);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (byte)62);
      assertNull(longArray0);
      
      Byte[] byteArray3 = new Byte[1];
      byteArray3[0] = (Byte) (byte)62;
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray4 = ArrayUtils.nullToEmpty(byteArray3, class0);
      assertSame(byteArray3, byteArray4);
      assertSame(byteArray4, byteArray3);
      assertEquals(1, byteArray3.length);
      assertEquals(1, byteArray4.length);
      assertNotNull(byteArray4);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)14;
      doubleArray0[1] = (double) (byte)0;
      double[] doubleArray1 = null;
      ArrayUtils.reverse((double[]) null);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, '@');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'@'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) '@';
      intArray0[2] = (int) (byte)14;
      intArray0[3] = 181;
      intArray0[4] = (int) (byte)14;
      intArray0[5] = (int) (byte)14;
      intArray0[6] = (int) '@';
      int int0 = 3014;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 14, 3014);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-680.0F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-680.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-680.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Byte[] byteArray0 = ArrayUtils.addAll((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)77;
      floatArray0[1] = (float) (byte)77;
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'V');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'V', 'V'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 609.287438;
      doubleArray0[1] = (double) 'V';
      doubleArray0[2] = (double) 77.0F;
      doubleArray0[3] = (-2186.192117355);
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = 2683.482456276226;
      doubleArray0[6] = (double) (byte)77;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 4601.063744797618);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {609.287438, 86.0, 77.0, (-2186.192117355), 0.0, 2683.482456276226, 77.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4601.063744797618, 609.287438, 86.0, 77.0, (-2186.192117355), 0.0, 2683.482456276226, 77.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte byte0 = (byte)59;
      Byte byte1 = new Byte((byte)59);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)59, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)59, (byte)byte3);
      
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) 'V';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, 'V');
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'V'}, charArray2);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray0, (double) characterArray0[0]);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {609.287438, 86.0, 77.0, (-2186.192117355), 0.0, 2683.482456276226, 77.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {609.287438, 86.0, 77.0, (-2186.192117355), 0.0, 2683.482456276226, 77.0, 86.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, characterArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertEquals((byte) (-1), object0);
      
      Byte[] byteArray0 = new Byte[9];
      byteArray0[0] = (Byte) object0;
      byteArray0[1] = (Byte) object0;
      byteArray0[2] = (Byte) object0;
      byteArray0[3] = (Byte) object0;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = (Byte) object0;
      byteArray0[7] = (Byte) object0;
      byteArray0[8] = (Byte) object0;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)object0));
      assertEquals((byte) (-1), (byte)byte2);
      
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(10, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)object0));
      
      Byte[] byteArray2 = ArrayUtils.addAll(byteArray0, (Byte[]) null);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(9, byteArray2.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf('5');
      assertNotNull(character0);
      assertEquals('5', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('2');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('2', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('i');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('i', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character1);
      assertNotNull(character3);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('2', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('b');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertEquals('b', (char)character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'I');
      assertArrayEquals(new char[] {'5', '2', 'i', '2', 'b'}, charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(18, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2263;
      intArray0[1] = (int) (short) (-48);
      intArray0[3] = 2263;
      intArray0[4] = (int) (short) (-48);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {2263, (-48), 0, 2263, (-48)}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0, 2263);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      int[] intArray0 = new int[2];
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 12, 2146716684);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Double double0 = new Double(1072);
      assertNotNull(double0);
      assertEquals(1072.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) 1072);
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-434), (int) (short) (-434));
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "Array and element cannot both be null");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      Long long0 = new Long((byte)1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      Long long1 = new Long(4443L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(4443L, (long)long1);
      
      Long long2 = new Long((-1L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-1L), (long)long2);
      
      Long[] longArray0 = new Long[9];
      longArray0[0] = long2;
      longArray0[1] = long2;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long2;
      longArray0[5] = long2;
      longArray0[6] = long1;
      longArray0[8] = long2;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((byte)1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      
      Integer integer2 = new Integer(2996);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(2996, (int)integer2);
      
      ArrayUtils.shift(byteArray0, (-2400), (-2400), 5293);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      short[] shortArray0 = new short[5];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2561, (int) (short)386);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short)386);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(386L, (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long((-2655L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-2655L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((short)2561);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals(2561L, (long)long3);
      
      longArray0[3] = long2;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-84)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((byte) (-84));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-84), (int)integer0);
      
      Integer integer1 = new Integer((byte) (-84));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-84), (int)integer1);
      
      Integer integer2 = new Integer((-2400));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertEquals((-2400), (int)integer2);
      
      ArrayUtils.shift(byteArray0, (-2400), 1, (int) (byte) (-84));
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-84)}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, 2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'r';
      charArray0[0] = 'm';
      Boolean boolean1 = new Boolean("CU/7vs+{b");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[6];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray2));
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      ArrayUtils.shift((char[]) null, (-1));
      ArrayUtils.reverse((double[]) null);
      char[] charArray1 = ArrayUtils.add((char[]) null, 'l');
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray1);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(charArray0, (-1), (-1), 925);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'m', 'r', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 925, 2070, 1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean2 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      float[] floatArray0 = new float[19];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(19, floatArray0.length);
      assertEquals(19, floatArray1.length);
      assertNotNull(floatArray1);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 13;
      intArray0[1] = 1675;
      intArray0[2] = 1;
      intArray0[3] = 22;
      intArray0[2] = 46;
      intArray0[5] = (-1078);
      intArray0[6] = (-39);
      int int0 = ArrayUtils.indexOf(intArray0, (-2697), 0);
      assertArrayEquals(new int[] {13, 1675, 46, 22, 0, (-1078), (-39)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 46, (-635));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Byte byte0 = new Byte((byte) (-8));
      assertNotNull(byte0);
      assertEquals((byte) (-8), (byte)byte0);
      
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) byte0);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-8);
      shortArray0[1] = (short)2;
      intArray0[4] = (int) (byte) (-8);
      intArray0[3] = (int) (byte) (-8);
      ArrayUtils.swap(shortArray0, (-2697), (-8), 1747);
      assertArrayEquals(new short[] {(short) (-8), (short)2, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Byte byte1 = new Byte((byte) (-8));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-8), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-8", string0);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-120);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-120));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-120)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2945.0764F);
      ArrayUtils.shift(floatArray0, (-1), (-301), (-1));
      assertArrayEquals(new float[] {(-2945.0764F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.insert((-301), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-301);
      longArray0[1] = 0L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-301L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-111);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)100);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)58, (byte)0, (byte)19, (byte)0, (byte) (-79), (byte)0, (byte) (-111)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)58, (byte)0, (byte)19, (byte)100, (byte)0, (byte) (-79), (byte)0, (byte) (-111)}, byteArray0);
      assertEquals(7, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      Byte byte0 = new Byte((byte) (-53));
      assertNotNull(byte0);
      assertEquals((byte) (-53), (byte)byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-53);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-4746), (-995));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-53), (byte) (-53), (byte) (-53)}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      char[] charArray1 = ArrayUtils.insert((int) (byte) (-53), (char[]) null, charArray0);
      assertArrayEquals(new char[] {'z', 'z', 'z', 'z'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1017), (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift(booleanArray0, 2224, 1, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'5'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.swap((short[]) null, Integer.MAX_VALUE, (-849));
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2224;
      intArray0[1] = 1;
      intArray0[2] = (int) '5';
      intArray0[3] = (-586);
      intArray0[4] = (int) '5';
      intArray0[5] = (-2130843324);
      ArrayUtils.shift(intArray0, 82);
      assertArrayEquals(new int[] {53, (-586), 53, (-2130843324), 2224, 1}, intArray0);
      assertEquals(6, intArray0.length);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte) (-82));
      assertNotNull(byte0);
      assertEquals((byte) (-82), (byte)byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)51;
      Byte byte2 = new Byte((byte)51);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)51, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-49));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-49), (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)51);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertEquals((byte)51, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-31));
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertEquals((byte) (-31), (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte1);
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte4));
      assertEquals((byte)51, (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, Integer.MAX_VALUE, (-1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 870;
      intArray0[2] = 0;
      intArray0[3] = 1;
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 870;
      doubleArray0[2] = (double) 0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0);
      assertArrayEquals(new double[] {0.0, 870.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-31));
      assertNotNull(byte0);
      assertEquals((byte) (-31), (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1), 0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 11, 11);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      long[] longArray0 = new long[6];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2123L);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertNotNull(bitSet0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      Byte byte0 = new Byte((byte) (-4));
      assertNotNull(byte0);
      assertEquals((byte) (-4), (byte)byte0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeAllOccurences(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte0;
      byteArray0[1] = byte1;
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)79);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)79, (byte)byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte)126);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte)126, (byte)byte4);
      
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, byte4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.3291112780570984;
      doubleArray0[3] = (-2186.192117355);
      doubleArray0[4] = (double) (byte)1;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.3291112780570984, (-2186.192117355), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      ArrayUtils.reverse((boolean[]) null, (-748), (-748));
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1155.09889305));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {Double.NaN, 0.3291112780570984, (-2186.192117355), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-748), (-4549.291));
      assertArrayEquals(new double[] {Double.NaN, 0.3291112780570984, (-2186.192117355), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte)0, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (byte)1, (short) (byte)1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.3291112780570984, (-2186.192117355), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, 'E');
      assertArrayEquals(new char[] {'E'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 48;
      intArray0[1] = 13;
      intArray0[2] = 0;
      intArray0[3] = 1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.swap((byte[]) null, 13, (-964));
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 1;
      objectArray0[1] = (Object) 13;
      objectArray0[2] = (Object) 13;
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      ArrayUtils.shift(intArray0, 48);
      assertArrayEquals(new int[] {48, 13, 0, 1}, intArray0);
      assertEquals(4, intArray0.length);
      
      ArrayUtils.swap((boolean[]) null, 0, 48);
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-30));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)121;
      shortArray0[2] = (short)14;
      shortArray0[3] = (short) (-987);
      shortArray0[4] = (short)9;
      shortArray0[5] = (short) (-1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short)121;
      objectArray0[1] = (Object) (short) (-987);
      objectArray0[2] = (Object) (short)14;
      objectArray0[4] = (Object) (short) (-1);
      objectArray0[5] = (Object) true;
      ArrayUtils.reverse(objectArray0, (-551), (-551));
      assertEquals(6, objectArray0.length);
      
      ArrayUtils.shift(shortArray0, 1048, 2223, 147);
      assertArrayEquals(new short[] {(short)121, (short)0, (short)14, (short) (-987), (short)9, (short) (-1), (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (long) (short) (-458);
      longArray0[2] = (long) (short)14;
      longArray0[3] = (long) (short) (-987);
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {(-1L), (-458L), 14L, (-987L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean2 = ArrayUtils.contains(floatArray0, (float) 147);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 1, 1, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2230.22);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2230.22), (-1.0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0, (-2230.22)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2230.22);
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2230.22)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2230.22)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.shift(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray2 = ArrayUtils.remove(doubleArray1, 1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-2230.22)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2230.22)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      Byte[] byteArray0 = ArrayUtils.insert(Integer.MAX_VALUE, (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      Long long0 = new Long((-1839L));
      assertNotNull(long0);
      assertEquals((-1839L), (long)long0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '<', Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1839L);
      floatArray0[1] = (float) (-1839L);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = 43.0F;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) '<';
      floatArray0[6] = (float) '<';
      floatArray0[7] = (float) '<';
      floatArray0[8] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 1353.1274F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1839.0F), (-1839.0F), (-1.0F), 43.0F, (-1.0F), 60.0F, 60.0F, 60.0F, (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1839.0F), (-1839.0F), (-1.0F), 43.0F, (-1.0F), 60.0F, 60.0F, 60.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      char[] charArray0 = new char[5];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'D', (-1044));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-630);
      shortArray0[1] = (short) (-1430);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) (-630));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1970.6145F);
      floatArray0[1] = (float) (short) (-630);
      float[] floatArray1 = ArrayUtils.insert((int) (short)0, floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1970.6145F), (-630.0F), (-1970.6145F), (-630.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1970.6145F), (-630.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = ')';
      int int1 = ArrayUtils.lastIndexOf(charArray0, ')', (int) (short) (-1430));
      assertArrayEquals(new char[] {'J', ')'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) null, "");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)26, (int) (short)26);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[0] = 'K';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(12, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = ArrayUtils.get(objectArray0, (-3341));
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Byte byte0 = new Byte((byte)4);
      assertNotNull(byte0);
      assertEquals((byte)4, (byte)byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, 49, 1L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 49, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[3] = (double) (short) (-458);
      Short short0 = new Short((short) (-458));
      assertNotNull(short0);
      assertEquals((short) (-458), (short)short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-458));
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2280));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      
      Byte[] byteArray0 = new Byte[10];
      byte byte0 = (byte) (-7);
      Byte byte1 = new Byte((byte) (-7));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-7), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = ArrayUtils.get(byteArray0, (-1017));
      assertEquals(10, byteArray0.length);
      assertNull(byte2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) (-256);
      floatArray0[2] = (float) (-1017);
      ArrayUtils.swap(floatArray0, (-1017), 1, (-1017));
      assertArrayEquals(new float[] {(-7.0F), (-256.0F), (-1017.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-2280);
      longArray0[1] = (long) (-1017);
      longArray0[2] = (long) (short) (-458);
      longArray0[3] = (long) 0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-2280L), (-1017L), (-458L), 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(10, byteArray1.length);
      assertEquals(10, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Byte byte1 = new Byte((byte)37);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)37, (byte)byte1);
      
      Byte byte2 = new Byte((byte)21);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)21, (byte)byte2);
      
      Byte byte3 = new Byte((byte)80);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)80, (byte)byte3);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte2;
      Byte byte4 = new Byte((byte) (-68));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte) (-68), (byte)byte4);
      
      byteArray0[1] = byte4;
      Byte byte5 = new Byte((byte)80);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertEquals((byte)80, (byte)byte5);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Byte byte6 = new Byte((byte) (-68));
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte4));
      assertEquals((byte) (-68), (byte)byte6);
      
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte6);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = 's';
      charArray0[2] = 'U';
      charArray0[3] = 'P';
      charArray0[4] = '4';
      charArray0[5] = 'P';
      charArray0[6] = '^';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '1');
      assertArrayEquals(new char[] {')', 's', 'U', 'P', '4', 'P', '^'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) (byte)21, (-1025), (-1390));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Byte[] byteArray2 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-711));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)2;
      short[] shortArray1 = ArrayUtils.insert((int) (short)2, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short) (-48);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short) (-48), 1072);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-48));
      assertNotNull(double0);
      assertEquals((-48.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertArrayEquals(new double[] {(-48.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 547.0539480445531, 0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {(-48.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      Float[] floatArray0 = new Float[25];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-93.745834F));
      assertEquals(25, floatArray0.length);
      assertEquals(25, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2213);
      ArrayUtils.swap(shortArray0, (int) (short) (-2213), 2, (int) (short) (-2213));
      assertArrayEquals(new short[] {(short) (-2213)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      Byte byte0 = new Byte((byte)123);
      assertNotNull(byte0);
      assertEquals((byte)123, (byte)byte0);
      
      Byte byte1 = new Byte((byte)123);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)123, (byte)byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertEquals((byte)123, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)123;
      doubleArray0[1] = (double) (byte)123;
      doubleArray0[2] = (double) (byte)123;
      doubleArray0[3] = 123.0;
      doubleArray0[4] = (double) (byte)123;
      doubleArray0[5] = (double) (byte)123;
      doubleArray0[6] = (double) (byte)123;
      int int0 = ArrayUtils.indexOf(doubleArray0, 987.28781);
      assertArrayEquals(new double[] {123.0, 123.0, 123.0, 123.0, 123.0, 123.0, 123.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) (-1), 2203L);
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 123.0, (-540));
      assertEquals(7, bitSet0.cardinality());
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new double[] {123.0, 123.0, 123.0, 123.0, 123.0, 123.0, 123.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) bitSet0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) long0;
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = ',';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = 'B';
      charArray0[7] = ',';
      int int0 = ArrayUtils.indexOf(charArray0, '|', (-2084));
      assertArrayEquals(new char[] {',', 'B', 'B', ',', 'B', 'B', 'B', ','}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = new boolean[3];
      booleanArray1[0] = true;
      booleanArray1[1] = (boolean) boolean0;
      booleanArray1[2] = (boolean) boolean0;
      ArrayUtils.shift(booleanArray1, 1, 2224, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertEquals(3, booleanArray1.length);
      
      ArrayUtils.swap(charArray0, 65536, 13, (-3089));
      assertArrayEquals(new char[] {',', 'B', 'B', ',', 'B', 'B', 'B', ','}, charArray0);
      assertEquals(8, charArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, 1.0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.addFirst((byte[]) null, (byte)7);
      assertArrayEquals(new byte[] {(byte)7}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, (-1674), (-1674), (-1674));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-68);
      Byte byte3 = new Byte((byte) (-68));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-68), (byte)byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)0);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte4);
      
      byteArray0[2] = byte4;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = byte2;
      byteArray2[1] = byte0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = byte2;
      byteArray2[2] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = byte0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray2, (byte) (-74));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {(byte) (-68), (byte)0, (byte)0, (byte) (-68), (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(7, byteArray2.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-68);
      doubleArray0[1] = (double) byte2;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte) (-74);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.swap(booleanArray0, (-69), (-69));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)8;
      byteArray0[3] = (byte)8;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)8}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)8;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 8L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)1;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '0';
      charArray0[2] = '{';
      charArray0[3] = 'F';
      char char0 = '^';
      charArray0[4] = '^';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'k');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'3', '0', '{', 'F', '^'}, charArray0);
      assertArrayEquals(new char[] {'3', '0', '{', 'F', '^'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short)1, (double) (short)0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) '0';
      objectArray0[1] = (Object) '3';
      Object object0 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertEquals(7, objectArray0.length);
      assertNotNull(object0);
      assertFalse(object0.equals((Object)char0));
      assertEquals('3', object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-1.0), (int) (byte)21, (double) (-296.8F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2376.09758718699;
      doubleArray0[1] = (-2229.22);
      doubleArray0[2] = 1103.7201183824122;
      doubleArray0[3] = 456.23;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-945.0), 201.58435505539163);
      assertArrayEquals(new double[] {2376.09758718699, (-2229.22), 1103.7201183824122, 456.23}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte byte0 = new Byte((byte)123);
      assertNotNull(byte0);
      assertEquals((byte)123, (byte)byte0);
      
      Byte byte1 = new Byte((byte)123);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)123, (byte)byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertEquals((byte)123, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = byte0;
      byteArray1[1] = byte0;
      Byte byte2 = ArrayUtils.get(byteArray1, (-2152));
      assertEquals(2, byteArray1.length);
      assertNull(byte2);
      
      Byte byte3 = new Byte((byte)75);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)object0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)75, (byte)byte3);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte3);
      assertNotNull(object1);
      assertFalse(byte3.equals((Object)object0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(object1.equals((Object)byte1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)byte0));
      assertEquals((byte)75, object1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (Random) mockRandom1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 785.4F;
      floatArray0[3] = 330.7F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 0.0F, 330.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 0.0F, 330.7F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)111;
      Byte byte1 = new Byte((byte)111);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)111, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)111);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)111, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray2 = ArrayUtils.insert(2, floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 0.0F, 330.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 0.0F, 330.7F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, (-1.0F), 785.4F, 0.0F, 330.7F, 0.0F, 330.7F}, floatArray2, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(8, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      Byte[] byteArray2 = new Byte[7];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = byte2;
      byteArray2[1] = byte1;
      byteArray2[2] = byte1;
      byteArray2[3] = byte2;
      byteArray2[4] = byte1;
      byteArray2[5] = byte1;
      byteArray2[6] = byte1;
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2, class0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertSame(byteArray3, byteArray2);
      assertSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(7, byteArray3.length);
      assertEquals(7, byteArray2.length);
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = byte0;
      byteArray4[1] = byte0;
      byteArray4[2] = byte0;
      byte[] byteArray5 = ArrayUtils.removeElements(byteArray4, byteArray4);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray5, byteArray4);
      assertArrayEquals(new byte[] {(byte)111, (byte)111, (byte)111}, byteArray4);
      assertArrayEquals(new byte[] {}, byteArray5);
      assertEquals(3, byteArray4.length);
      assertEquals(0, byteArray5.length);
      assertNotNull(byteArray5);
      assertFalse(byteArray5.equals((Object)byteArray4));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte0;
      intArray0[3] = 3699;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {111, 111, 111, 3699}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertNotNull(integerArray0);
      
      Byte[] byteArray6 = ArrayUtils.clone(byteArray1);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertEquals(3, byteArray6.length);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray6);
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      Byte byte0 = new Byte((byte)95);
      assertNotNull(byte0);
      assertEquals((byte)95, (byte)byte0);
      
      ArrayUtils.shift(booleanArray0, 1, 1, 422);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.shift(booleanArray0, (int) (byte) (-1), 52, (int) (byte) (-1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-48);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (short) (-48);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (short) (-48);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short) (-48), (-48.0));
      assertArrayEquals(new double[] {(-48.0), 0.0, Double.NaN, (-48.0), 0.0, 0.0, (-48.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-48.0);
      objectArray0[1] = (Object) (-48.0);
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) Double.NaN;
      objectArray0[6] = (Object) 0.0;
      objectArray0[7] = (Object) "-0X";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "-0X");
      assertEquals(8, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-48);
      intArray0[1] = (int) (short) (-48);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-48), (-48)}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, (int) (short) (-48), 1, (-504));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      Byte[] byteArray0 = ArrayUtils.insert(Integer.MAX_VALUE, (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      Long long0 = new Long((-1839L));
      assertNotNull(long0);
      assertEquals((-1839L), (long)long0);
      
      Long long1 = new Long(294L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(294L, (long)long1);
      
      Long long2 = new Long((-1L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-1L), (long)long2);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) 294L;
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (byte)40;
      doubleArray0[5] = 13.513702759;
      doubleArray0[6] = (double) 294L;
      doubleArray0[7] = (double) (-1839L);
      doubleArray0[8] = (-3330.669674);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {2.147483647E9, (-1.0), 294.0, (-1.0), 40.0, 13.513702759, 294.0, (-1839.0), (-3330.669674)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {2.147483647E9, (-1.0), 294.0, (-1.0), 40.0, 13.513702759, 294.0, (-1839.0), (-3330.669674)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-3784L));
      assertEquals((-1), int0);
      
      ArrayUtils.shift(shortArray0, (-448), 2, (int) (byte)40);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shift(shortArray0, (-2145881199), (int) (short)416, (int) (short)416);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)77;
      floatArray0[1] = (float) (byte)77;
      floatArray0[2] = 95.40503F;
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, (float[]) null);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {77.0F, 77.0F, 95.40503F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {77.0F, 77.0F, 95.40503F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 95.40503F;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 555.6665403616;
      doubleArray0[3] = (double) (byte)77;
      doubleArray0[4] = (double) 77.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 77.0F, (int) (byte)0, 4860.402783);
      assertArrayEquals(new double[] {95.405029296875, 2.0, 555.6665403616, 77.0, 77.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      ArrayUtils.swap(booleanArray0, 507, (int) (byte)0, 2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      int[] intArray0 = new int[7];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertNotNull(integerArray0);
      
      ArrayUtils.shift(intArray0, 0, 0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2561, (int) (short)386);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short)386);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(386L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-2655L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-2655L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((short)2561);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertEquals(2561L, (long)long3);
      
      longArray0[3] = long3;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)1;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)1}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)386;
      doubleArray0[1] = (double) (short)386;
      doubleArray0[2] = (double) (short)386;
      doubleArray0[3] = (double) (long)longArray0[2];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {386.0, 386.0, 386.0, (-2655.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Integer integer0 = new Integer((byte) (-84));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-84), (int)integer0);
      
      Integer integer1 = new Integer((byte)1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(1, (int)integer1);
      
      Integer integer2 = new Integer((-2400));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-2400), (int)integer2);
      
      Integer integer3 = new Integer((byte) (-84));
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-84), (int)integer3);
      
      Integer integer4 = new Integer((byte)1);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertEquals(1, (int)integer4);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-2400)}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)1, 1203);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2400)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)386;
      shortArray0[1] = (short) (-891);
      shortArray0[2] = (short) (-3487);
      shortArray0[3] = (short)15;
      shortArray0[4] = (short) (-3409);
      shortArray0[5] = (short)1;
      shortArray0[7] = (short) (-891);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)386;
      longArray0[1] = (long) (short) (-3409);
      longArray0[2] = (long) (short) (-3487);
      longArray0[3] = (-1000L);
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.shift((char[]) null, (int) (short) (-3409));
      ArrayUtils.reverse((double[]) null);
      char[] charArray0 = ArrayUtils.add((char[]) null, 'k');
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.swap(booleanArray1, (int) (short)386, (int) (short)386, (-2911));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-1695));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1695, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'O');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 13;
      intArray0[1] = 1675;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[2] = 46;
      intArray0[5] = (-1078);
      intArray0[6] = (-39);
      int int0 = ArrayUtils.indexOf(intArray0, (-2697), 0);
      assertArrayEquals(new int[] {13, 1675, 46, 1, 0, (-1078), (-39)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 46, (-635));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) byte0);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)2;
      intArray0[4] = (int) (byte)0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.swap(shortArray0, (-2697), 1, 1747);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)112);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-95);
      intArray0[1] = (int) 'V';
      intArray0[2] = (-1);
      intArray0[3] = (int) '+';
      intArray0[4] = (int) 'O';
      intArray0[5] = (int) '+';
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-95), 86, (-1), 43, 79, 43}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Byte byte0 = new Byte((byte)80);
      assertNotNull(byte0);
      assertEquals((byte)80, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(438, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 438, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3684.4;
      doubleArray0[1] = 339.12646611;
      doubleArray0[2] = (-1881.088752516286);
      doubleArray0[3] = 867.92511;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 218.028;
      doubleArray0[6] = (-1048.0137445199525);
      doubleArray0[7] = (-388.1013);
      ArrayUtils.shift(doubleArray0, (-1219), (-95), Integer.MAX_VALUE);
      assertArrayEquals(new double[] {3684.4, 339.12646611, (-1881.088752516286), 867.92511, (-1.0), 218.028, (-1048.0137445199525), (-388.1013)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 218.028;
      objectArray0[1] = (Object) 3684.4;
      objectArray0[2] = (Object) 339.12646611;
      ArrayUtils.shift(objectArray0, (-1219));
      assertEquals(3, objectArray0.length);
      
      short[] shortArray0 = new short[3];
      ArrayUtils.shift(shortArray0, (-378), (int) (short) (-2431), (-95));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0, (-378), (-1219));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-308), 3636);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 5, 51, (-19));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      ArrayUtils.swap((short[]) null, Integer.MAX_VALUE, 1311);
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[5];
      intArray0[1] = 52;
      intArray0[2] = 82;
      intArray0[3] = 51;
      intArray0[4] = 1311;
      ArrayUtils.shift(intArray0, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {51, 1311, 0, 52, 82}, intArray0);
      assertEquals(5, intArray0.length);
      
      ArrayUtils.swap(booleanArray0, 82, 5);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      char[] charArray1 = ArrayUtils.add(charArray0, ':');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) byte0;
      longArray0[1] = (-1L);
      longArray0[2] = (long) byte0;
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-1));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-1L));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte)0, (int) byte0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-2143353870));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(1, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '{';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '~');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'#', '{'}, charArray0);
      assertArrayEquals(new char[] {'#', '{'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (-2143353870);
      floatArray0[2] = (float) '#';
      floatArray0[3] = (float) '#';
      ArrayUtils.shift(floatArray0, 1, 0, (-2653));
      assertArrayEquals(new float[] {0.0F, (-2.14335386E9F), 35.0F, 35.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-48);
      intArray0[1] = (int) (short) (-48);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short) (-48), 1072);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-48), (-48)}, intArray0);
      assertArrayEquals(new int[] {(-48), (-48)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-48));
      assertNotNull(double0);
      assertEquals((-48.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertArrayEquals(new double[] {(-48.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-434), (int) (short) (-48));
      assertArrayEquals(new short[] {(short) (-48), (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray0, "Array and element cannot both be null");
      assertEquals(1, doubleArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      Byte byte0 = new Byte((byte)7);
      assertNotNull(byte0);
      assertEquals((byte)7, (byte)byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-240);
      shortArray0[0] = (short) (byte)7;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)7, (int) (byte)1);
      assertArrayEquals(new short[] {(short)7, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)14;
      shortArray0[2] = (short)14;
      shortArray0[3] = (short) (-987);
      shortArray0[4] = (short)9;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-458);
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (int) (short)14, (int) (short)14);
      assertNull(charArray0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.swap(shortArray0, 1941, (int) (short)14, 955);
      assertArrayEquals(new short[] {(short)121, (short)14, (short)14, (short) (-987), (short)9, (short) (-1), (short) (-458), (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)37);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Double double0 = new Double(854);
      assertNotNull(double0);
      assertEquals(854.0, (double)double0, 0.01);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 93, (int) (byte)37);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = 'C';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'c');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'c', 'c', 'c', 'C'}, charArray0);
      assertArrayEquals(new char[] {'C'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'c';
      longArray0[1] = (-62L);
      longArray0[2] = (long) 1;
      long[] longArray1 = ArrayUtils.add(longArray0, 1, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {99L, (-62L), 1L}, longArray0);
      assertArrayEquals(new long[] {99L, (-1L), (-62L), 1L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 99L;
      floatArray0[1] = (float) 'c';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 955, 2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {99.0F, 99.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      Byte byte1 = new Byte((byte)11);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)11, (byte)byte1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '.');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[1] = (long) (-164);
      longArray0[2] = (long) '.';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)5, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, ':');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)43);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((short) (-916));
      assertNotNull(long0);
      assertEquals((-916L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = Long.getLong((String) null);
      assertNull(long1);
      
      longArray0[1] = null;
      Long long2 = new Long((short) (-916));
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long0));
      assertEquals((-916L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(0L);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertEquals(0L, (long)long3);
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertArrayEquals(new long[] {(-916L), (-916L), (-916L), 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((Object[]) longArray0);
      assertEquals(4, longArray0.length);
      
      Short short0 = new Short((short)3);
      assertNotNull(short0);
      assertEquals((short)3, (short)short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)4610);
      assertNull(shortArray0);
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray1, 244L);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertArrayEquals(new long[] {(-916L), (-916L), (-916L), 0L}, longArray2);
      assertArrayEquals(new long[] {(-916L), (-916L), (-916L), 0L}, longArray1);
      assertEquals(4, longArray2.length);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-2066), (-94));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-19));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)111, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-19), (byte)111, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1089));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-630);
      shortArray0[1] = (short) (-1430);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)100);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short) (-630);
      intArray1[1] = (-4037);
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-630), (-4037)}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 101);
      assertArrayEquals(new int[] {101}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)101);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3632), (-3632));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, (-1), (-1017));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short short0 = (short)65;
      Short short1 = new Short((short)65);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)65, (short)short1);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)65}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 89, 89);
      assertNull(charArray0);
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray1, short0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)65}, shortArray1);
      assertArrayEquals(new short[] {(short)65, (short)65}, shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      ArrayUtils.shift(floatArray0, (-3270), (-3270), (-3270));
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'X');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte byte0 = new Byte((byte)123);
      assertNotNull(byte0);
      assertEquals((byte)123, (byte)byte0);
      
      Byte byte1 = new Byte((byte)123);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)123, (byte)byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertEquals((byte)123, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '>');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 409.09;
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte) (-46));
      assertNotNull(byte0);
      assertEquals((byte) (-46), (byte)byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      Byte byte2 = new Byte((byte)1);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)1, (byte)byte2);
      
      byteArray0[1] = byte2;
      byte byte3 = (byte) (-108);
      Byte byte4 = new Byte((byte) (-108));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte) (-108), (byte)byte4);
      
      byteArray0[2] = byte4;
      byteArray0[3] = byte2;
      Byte byte5 = new Byte(byte1);
      assertNotNull(byte5);
      assertFalse(byte1 == byte3);
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertEquals((byte)1, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-101));
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertEquals((byte) (-101), (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = ArrayUtils.get(byteArray0, (int)  (-46));
      assertEquals(6, byteArray0.length);
      assertNull(byte7);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((boolean[]) null, (int) byte3);
      assertFalse(byte3 == byte1);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 1214.0F, 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)8;
      byteArray0[0] = (byte)8;
      ArrayUtils.reverse(byteArray0, 2093, (int) (byte)8);
      assertArrayEquals(new byte[] {(byte)8}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Double double0 = new Double(2093);
      assertNotNull(double0);
      assertEquals(2093.0, (double)double0, 0.01);
      
      Double double1 = new Double((byte)8);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(8.0, (double)double1, 0.01);
      
      Double double2 = new Double((byte)8);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(8.0, (double)double2, 0.01);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)12);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertArrayEquals(new byte[] {(byte)8}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) (byte)8;
      byteArray1[1] = (Byte) (byte)8;
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertEquals(2, byteArray1.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      BitSet bitSet2 = ArrayUtils.indexesOf(charArray0, 'I', 2093);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(bitSet2);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {8L, 8L, 0L}, longArray0);
      assertArrayEquals(new long[] {8L, 8L, 0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isArrayIndexValid(byteArray1, 938);
      assertEquals(2, byteArray1.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      long[] longArray0 = new long[2];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1007;
      intArray0[1] = (-763);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1007, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-27);
      Float float0 = new Float((float) (byte)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte) (-27));
      assertNull(shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-27);
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      Long[] longArray0 = new Long[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Byte[] byteArray0 = ArrayUtils.insert((-9), (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-51);
      byteArray0[0] = (byte) (-51);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte) (-51), (byte) (-51));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -51, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      long[] longArray0 = ArrayUtils.add((long[]) null, 0, (long) 0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-81);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-1522), (byte) (-81));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1522, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 9, (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Character character0 = new Character('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('K');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('K', (char)character1);
      
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      characterArray0[7] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 1886.3023965934426);
      assertArrayEquals(new double[] {1886.3023965934426}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      ArrayUtils.swap((long[]) null, 16, (int) character0);
      assertTrue(character0.equals((Object)character1));
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[2] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.contains(floatArray0, 1936.7484F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Short short0 = new Short((short)45);
      assertNotNull(short0);
      assertEquals((short)45, (short)short0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '#';
      charArray0[1] = '\'';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = '#';
      charArray0[5] = '#';
      charArray0[6] = '#';
      charArray0[7] = '#';
      charArray0[8] = '/';
      ArrayUtils.swap(charArray0, 3, 3, (int) (short)0);
      assertArrayEquals(new char[] {'#', '\'', '#', '#', '#', '#', '#', '#', '/'}, charArray0);
      assertEquals(9, charArray0.length);
      
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (Byte) byte0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) long0;
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.shift((char[]) null, 1);
      ArrayUtils.reverse((double[]) null);
      char[] charArray0 = ArrayUtils.add((char[]) null, '@');
      assertArrayEquals(new char[] {'@'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 71;
      floatArray0[1] = (float) 71;
      floatArray0[2] = (float) 71;
      floatArray0[3] = (float) 71;
      floatArray0[4] = (float) 71;
      floatArray0[5] = (float) 71;
      floatArray0[6] = (float) 71;
      ArrayUtils.shift(floatArray0, (-5341));
      assertArrayEquals(new float[] {71.0F, 71.0F, 71.0F, 71.0F, 71.0F, 71.0F, 71.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Double double0 = new Double(71.0F);
      assertNotNull(double0);
      assertEquals(71.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      int int0 = ArrayUtils.indexOf((short[]) null, (short)1822);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int1 = ArrayUtils.indexOf((short[]) null, (short)1822, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 69, 0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift((short[]) null, (-1));
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-392.81551));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-392.81551), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(3.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(3.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, (-392.81551), 3.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) long0;
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.shift((char[]) null, 1);
      ArrayUtils.reverse((double[]) null);
      char[] charArray0 = ArrayUtils.add((char[]) null, '@');
      assertArrayEquals(new char[] {'@'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray2 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      ArrayUtils.swap(booleanArray2, 2145994408, 2145994408, (-50));
      assertSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-4979), (-4979), 81);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-726);
      shortArray0[1] = (short) (byte)2;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-726), (short)2}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-726);
      intArray0[1] = (int) (byte)2;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-726), 2, 0}, intArray1);
      assertArrayEquals(new int[] {(-726), 2, 0}, intArray0);
      assertEquals(3, intArray1.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (short)36;
      doubleArray0[3] = (double) 0.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, (-1477), 5188.50054);
      assertArrayEquals(new double[] {2.0, 0.0, 36.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray2 = ArrayUtils.removeAllOccurences((int[]) null, (-1321));
      assertNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, 2371, 2371, 2371);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '_');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'w'}, charArray0);
      assertArrayEquals(new char[] {'_', 'w'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "X~^2 aKr");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1), (-1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (int) (short) (-48);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2500, 256);
      assertArrayEquals(new short[] {(short) (-48), (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1965), (int) (short) (-48));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(shortArray0, 69);
      assertArrayEquals(new short[] {(short)0, (short) (-48), (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short)0;
      intArray1[1] = 2807;
      intArray1[2] = (int) (short) (-48);
      intArray1[3] = 256;
      intArray1[4] = 4506;
      intArray1[5] = (int) (short) (-48);
      intArray1[6] = 256;
      intArray1[7] = 256;
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray1, 256, (-2846));
      assertNotSame(intArray1, intArray0);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(8, bitSet1.length());
      assertEquals(3, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{3, 6, 7}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertArrayEquals(new int[] {0, 2807, (-48), 256, 4506, (-48), 256, 256}, intArray1);
      assertEquals(8, intArray1.length);
      assertNotNull(bitSet1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) long0;
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 4, 64);
      assertNull(charArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)0;
      ArrayUtils.shift(shortArray0, 2747);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, (boolean) boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      int int0 = new Short((short)1822);
      assertEquals((short)1822, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int1 = ArrayUtils.indexOf((short[]) null, (short)1822, (short)1822);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 69, 0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift((short[]) null, (-1));
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) 69;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) 69);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{1}", bitSet1.toString());
      assertEquals(2, bitSet1.length());
      assertArrayEquals(new long[] {2147483647L, 69L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      char[] charArray2 = ArrayUtils.addFirst(charArray1, ',');
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {','}, charArray2);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray2.length);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-126));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-126)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      ArrayUtils.swap(charArray0, (-3151), (int) (byte) (-126), 101);
      assertArrayEquals(new char[] {'?'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('X');
      assertNotNull(character0);
      assertEquals('X', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'X');
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.swap(charArray0, (-906), 0, 0);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'R';
      charArray0[2] = '!';
      charArray0[3] = '{';
      charArray0[4] = '@';
      charArray0[5] = '~';
      charArray0[6] = ')';
      boolean boolean0 = ArrayUtils.contains((float[]) null, (-4700.9927F));
      assertFalse(boolean0);
      
      Short short0 = new Short((byte)45);
      assertNotNull(short0);
      assertEquals((short)45, (short)short0);
      
      ArrayUtils.swap(charArray0, (int) (byte) (-8), (int) (byte) (-8), (int) (byte)45);
      assertArrayEquals(new char[] {'{', 'R', '!', '{', '@', '~', ')'}, charArray0);
      assertEquals(7, charArray0.length);
      
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Byte byte0 = new Byte((byte) (-106));
      assertNotNull(byte0);
      assertEquals((byte) (-106), (byte)byte0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '~';
      doubleArray0[1] = (double) '~';
      doubleArray0[2] = (double) '{';
      doubleArray0[3] = (double) '@';
      doubleArray0[4] = (double) '{';
      doubleArray0[5] = (double) 7685;
      doubleArray0[6] = (double) '@';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 7685);
      assertEquals("{5}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {126.0, 126.0, 123.0, 64.0, 123.0, 7685.0, 64.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals("{5}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {126.0, 126.0, 123.0, 64.0, 123.0, 7685.0, 64.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNull(object0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2244.466;
      doubleArray0[1] = 688.7877506246679;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1259.455005264163;
      doubleArray0[4] = (-995.019011294);
      doubleArray0[5] = (-199.948645028498);
      doubleArray0[6] = 0.7;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 69.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {2244.466, 688.7877506246679, 1.0, 1259.455005264163, (-995.019011294), (-199.948645028498), 0.7, (-1.0), 69.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-68);
      Byte byte3 = new Byte((byte) (-68));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-68), (byte)byte3);
      
      Short short0 = new Short((short) (-8659));
      assertNotNull(short0);
      assertEquals((short) (-8659), (short)short0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 26;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte byte4 = (byte)16;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-68);
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = byte0;
      byteArray1[5] = (byte) (-68);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)16;
      byteArray1[8] = (byte)0;
      ArrayUtils.swap(byteArray1, 2581, (-411), (int) (byte)16);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)16, (byte)0, (byte)0, (byte)0, (byte) (-68), (byte)0, (byte)16, (byte)0}, byteArray1);
      assertEquals(9, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)16, (byte)0, (byte)0, (byte)0, (byte) (-68), (byte)0, (byte)16, (byte)0}, byteArray1);
      assertEquals(18, byteArray2.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) 26;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 26L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-863), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -863, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-238L));
      assertNull(longArray0);
      
      ArrayUtils.reverse((Object[]) null);
      byte byte0 = (byte)26;
      Byte byte1 = new Byte((byte)26);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)26, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, (Byte) byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Byte byte2 = new Byte((byte) (-56));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-56), (byte)byte2);
      
      try { 
        Byte.valueOf("null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2747.4679);
      doubleArray0[1] = 409.09;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)48;
      shortArray0[1] = (short)256;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)256);
      assertArrayEquals(new short[] {(short)48, (short)256}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)20;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)20, (byte)0, (byte)20, (byte)0, (byte)54, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (short)256;
      Object object0 = ArrayUtils.get(objectArray0, (int) 0);
      assertEquals(2, objectArray0.length);
      assertNotNull(object0);
      assertEquals((byte)0, object0);
      
      ArrayUtils.shift(objectArray0, (-2999));
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 9;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {9, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = ArrayUtils.indexOf((long[]) null, 1078L, 2626);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)75;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-3), (int) (short)10);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)75}, shortArray0);
      assertArrayEquals(new short[] {(short)75}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray1, (-667), Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -667, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      Integer integer0 = new Integer((-1263));
      assertNotNull(integer0);
      assertEquals((-1263), (int)integer0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)168;
      shortArray0[1] = (short)2;
      ArrayUtils.shift(shortArray0, (int) (short)2, (int) (short)2, (int) (short)2);
      assertArrayEquals(new short[] {(short)168, (short)2, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3684.4;
      doubleArray0[1] = 339.12646611;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2339;
      shortArray0[2] = (short)366;
      shortArray0[3] = (short)98;
      shortArray0[4] = (short)98;
      ArrayUtils.shift(shortArray0, (-93), 4, (-70));
      assertArrayEquals(new short[] {(short)366, (short)98, (short) (-1), (short)2339, (short)98}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = 4;
      ArrayUtils.shift(intArray0, (-482));
      assertArrayEquals(new int[] {(-1), 4, (-1), (-1)}, intArray0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 857.5241076207765;
      doubleArray0[1] = 2216.982372;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-2854.441);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[7] = (-2186.192117355);
      doubleArray0[8] = (-1155.09889305);
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {2216.982372, Double.NaN, (-2854.441), Double.NaN, Double.NaN, 0.0, (-2186.192117355), (-1155.09889305), 857.5241076207765}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      ArrayUtils.reverse((boolean[]) null, 3, (-2147483646));
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN);
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertArrayEquals(new double[] {2216.982372, Double.NaN, (-2854.441), Double.NaN, Double.NaN, 0.0, (-2186.192117355), (-1155.09889305), 857.5241076207765}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2186.192117355), Double.NaN);
      assertArrayEquals(new double[] {2216.982372, Double.NaN, (-2854.441), Double.NaN, Double.NaN, 0.0, (-2186.192117355), (-1155.09889305), 857.5241076207765}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-2854.441);
      objectArray0[1] = (Object) Double.NaN;
      objectArray0[2] = (Object) 2216.982372;
      objectArray0[3] = (Object) Double.NaN;
      objectArray0[4] = (Object) (-2186.192117355);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "-0X");
      assertEquals(5, stringArray0.length);
      assertEquals(5, objectArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2147483646);
      intArray0[1] = (-2147483646);
      intArray0[3] = 3;
      intArray0[4] = 3;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {3, 3, 0, (-2147483646), (-2147483646)}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((boolean[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 0);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-19);
      longArray0[1] = (-4790L);
      longArray0[2] = (-4790L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short) (-19), 2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-19L), (-4790L), (-4790L)}, longArray0);
      assertArrayEquals(new long[] {(-19L), (-4790L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-4790L);
      floatArray0[1] = (float) (-4790L);
      floatArray0[2] = (float) (-4790L);
      floatArray0[3] = (float) (-4790L);
      floatArray0[4] = (float) (-19L);
      floatArray0[5] = (float) (-4790L);
      floatArray0[6] = (float) (-4790L);
      floatArray0[7] = (float) (short) (-19);
      floatArray0[8] = (float) (short) (-19);
      ArrayUtils.shift(floatArray0, 1186, 1186, 3163);
      assertArrayEquals(new float[] {(-4790.0F), (-4790.0F), (-4790.0F), (-4790.0F), (-19.0F), (-4790.0F), (-4790.0F), (-19.0F), (-19.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2747.4679);
      doubleArray0[1] = 409.09;
      doubleArray0[2] = 1624.73446065069;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, (-149));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1686.57;
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = 409.09;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-2747.4679), 409.09, 1624.73446065069, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1686.57, (-1.0), 409.09, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2747.4679), 1624.73446065069}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = 'v';
      charArray0[2] = '\"';
      charArray0[3] = 'v';
      charArray0[4] = '\"';
      charArray0[5] = 'U';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'U', 'v', '\"', 'v', '\"', 'U'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)1802;
      doubleArray0[1] = (double) (short)1802;
      doubleArray0[2] = (double) (short)1802;
      doubleArray0[3] = (double) (short)1802;
      doubleArray0[4] = (double) (short)1802;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (short)1802;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1802.0, 1802.0, 1802.0, 1802.0, 1802.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1802.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1802.0, 1802.0, 1802.0, 1802.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {1L, 0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2424;
      intArray0[1] = 70;
      intArray0[2] = 47;
      intArray0[3] = 0;
      intArray0[4] = 70;
      Byte byte0 = new Byte((byte) (-43));
      assertNotNull(byte0);
      assertEquals((byte) (-43), (byte)byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 47;
      doubleArray0[1] = (double) (byte) (-43);
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'R');
      assertFalse(boolean0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2424, 70, 47, 0, 70, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.reverse(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2424, 70, 47, 0, 70, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      ArrayUtils.swap(intArray0, 2424, (-394), 1690);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {2424, 70, 47, 0, 70, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'R';
      charArray0[2] = '!';
      charArray0[3] = '{';
      charArray0[4] = '@';
      charArray0[5] = '~';
      charArray0[6] = ')';
      boolean boolean0 = ArrayUtils.contains(charArray0, '@');
      assertArrayEquals(new char[] {'{', 'R', '!', '{', '@', '~', ')'}, charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Character character0 = new Character(')');
      assertNotNull(character0);
      assertEquals(')', (char)character0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 'R';
      longArray0[2] = (long) '{';
      ArrayUtils.shift(longArray0, 1, (int) character0, (-1273));
      assertArrayEquals(new long[] {0L, 123L, 82L}, longArray0);
      assertEquals(3, longArray0.length);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) 123L);
      assertNotNull(float0);
      assertEquals(123.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) 123L);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(123.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) character0);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(41.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2133164226), (-1522));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'{', 'R', '!', '{', '@', '~', ')'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 123L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {123L, 0L, 123L, 82L}, longArray1);
      assertArrayEquals(new long[] {0L, 123L, 82L}, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[6] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray1, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false}, booleanArray1));
      assertEquals(7, booleanArray1.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-458);
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (-431);
      intArray0[4] = (-431);
      intArray0[5] = (int) (short) (-1);
      intArray0[6] = (int) (short) (-458);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (short)9);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-458), (-1), (-431), (-431), (-1), (-458)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-458), (-1), (-431), (-431), (-1), (-458)}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'U', (int) (short)9);
      assertArrayEquals(new char[] {'d'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.insert((-458), (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 252;
      intArray0[1] = (-2147483647);
      intArray0[2] = 1387;
      intArray0[3] = 53;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[6] = 2145839431;
      intArray0[7] = 8192;
      intArray0[8] = 1822;
      ArrayUtils.reverse(intArray0, (-447), (-2988));
      assertArrayEquals(new int[] {252, (-2147483647), 1387, 53, 0, (-1), 2145839431, 8192, 1822}, intArray0);
      assertEquals(9, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {252, (-2147483647), 1387, 53, 0, (-1), 2145839431, 8192, 1822}, intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 163);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {252, (-2147483647), 1387, 53, 0, (-1), 2145839431, 8192, 1822}, intArray0);
      assertArrayEquals(new int[] {252, (-2147483647), 1387, 53, 0, (-1), 2145839431, 8192, 1822}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 2144761390);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2144761390, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)77;
      floatArray0[1] = (float) (byte)77;
      floatArray0[2] = 95.40503F;
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, (float[]) null);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {77.0F, 77.0F, 95.40503F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {77.0F, 77.0F, 95.40503F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 95.40503F;
      doubleArray0[1] = (double) 2;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {95.405029296875, 2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      char[] charArray0 = new char[2];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1128);
      intArray0[1] = 2;
      intArray0[2] = (-661);
      intArray0[3] = 114;
      intArray0[4] = 18688;
      intArray0[5] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, (-1128));
      assertArrayEquals(new int[] {(-1128), 2, (-661), 114, 18688, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1128);
      doubleArray0[1] = 1686.57;
      doubleArray0[2] = (double) (-661);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 18688;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 18688;
      doubleArray0[7] = (double) 114;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1128.0), 1686.57, (-661.0), 2.0, 18688.0, 0.0, 18688.0, 114.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = '(';
      charArray0[2] = ']';
      charArray0[3] = 'U';
      charArray0[4] = '<';
      charArray0[5] = '\"';
      charArray0[6] = 'm';
      charArray0[7] = '[';
      charArray0[8] = 'N';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'v', '(', ']', 'U', '<', '\"', 'm', '[', 'N'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      ArrayUtils.swap((int[]) null, (int) (short)380, (int) (short)380, (int) (short)380);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      Float float0 = new Float(155.8319963407373);
      assertNotNull(float0);
      assertEquals(155.832F, (float)float0, 0.01F);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2, 2, 311.38);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      charArray0[1] = 's';
      charArray0[2] = '`';
      charArray0[3] = '$';
      charArray0[4] = '=';
      charArray0[5] = '$';
      charArray0[6] = '$';
      char[] charArray1 = ArrayUtils.add(charArray0, 'r');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'$', 's', '`', '$', '=', '$', '$'}, charArray0);
      assertArrayEquals(new char[] {'$', 's', '`', '$', '=', '$', '$', 'r'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.remove(charArray1, 2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'$', 's', '`', '$', '=', '$', '$'}, charArray0);
      assertArrayEquals(new char[] {'$', 's', '`', '$', '=', '$', '$', 'r'}, charArray1);
      assertArrayEquals(new char[] {'$', 's', '$', '=', '$', '$', 'r'}, charArray2);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertEquals(7, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      ArrayUtils.swap((int[]) null, 1460, 2147483633, 1460);
      int[] intArray1 = new int[3];
      intArray1[0] = (int) '$';
      intArray1[1] = (int) 's';
      intArray1[2] = 2147483633;
      int[] intArray2 = ArrayUtils.insert(2, intArray1, (int[]) null);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {36, 115, 2147483633}, intArray2);
      assertArrayEquals(new int[] {36, 115, 2147483633}, intArray1);
      assertEquals(3, intArray2.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      
      int[] intArray3 = ArrayUtils.addAll((int[]) null, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {36, 115, 2147483633}, intArray2);
      assertArrayEquals(new int[] {36, 115, 2147483633}, intArray3);
      assertArrayEquals(new int[] {36, 115, 2147483633}, intArray1);
      assertEquals(3, intArray2.length);
      assertEquals(3, intArray3.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray3);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      int int0 = ArrayUtils.indexOf((short[]) null, (short)1822);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int1 = ArrayUtils.indexOf((short[]) null, (short)1822, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Short short0 = new Short((short)1822);
      assertNotNull(short0);
      assertEquals((short)1822, (short)short0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      ArrayUtils.swap(charArray0, (int) (short)1822, 0, (-1965));
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 69, 0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift((short[]) null, (-1));
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[2] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.subarray(charArray0, (int) (short)0, (int) (short)0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      ArrayUtils.shift((short[]) null, (-477));
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short)0, (-2846));
      assertEquals(5, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)14;
      shortArray0[2] = (short)14;
      shortArray0[3] = (short) (-987);
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)48);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (short)9);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte)21;
      longArray0[2] = (-1L);
      longArray0[3] = (long) (byte)21;
      longArray0[4] = 0L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 21L, (-1L), 21L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 21L, (-1L), 21L, 0L, 0L, 21L, (-1L), 21L, 0L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 21L, (-1L), 21L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 21L, (-1L), 21L, 0L, 0L, 21L, (-1L), 21L, 0L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)386, (int) (short)386);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shift(shortArray0, 4, (int) (short)386, 4);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)386;
      intArray0[1] = (-1);
      intArray0[2] = (int) (short)386;
      intArray0[3] = (int) (short)386;
      ArrayUtils.shift(intArray0, 386);
      assertArrayEquals(new int[] {386, 386, 386, (-1)}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = '*';
      charArray0[2] = 'H';
      charArray0[3] = '*';
      charArray0[4] = 'G';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'*', 'H', '*', 'G', 'G'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)386, (int) (short)386);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shift(shortArray0, 4, (int) (short)386, 4);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)386;
      intArray0[1] = (-1);
      intArray0[2] = (int) (short)386;
      intArray0[3] = (int) (short)386;
      ArrayUtils.shift(intArray0, 386);
      assertArrayEquals(new int[] {386, 386, 386, (-1)}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[1] = '*';
      charArray0[2] = 'H';
      charArray0[3] = '*';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'*', 'H', '*', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)77;
      floatArray0[1] = (float) (byte)77;
      floatArray0[2] = 95.40503F;
      floatArray0[3] = (float) (byte)18;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, (float[]) null);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {77.0F, 77.0F, 95.40503F, 18.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {77.0F, 77.0F, 95.40503F, 18.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 95.40503F;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 555.6665403616;
      doubleArray0[3] = (double) (byte)77;
      doubleArray0[4] = (double) 77.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 77.0F, (int) (byte)18, 4860.402783);
      assertArrayEquals(new double[] {95.405029296875, 2.0, 555.6665403616, 77.0, 77.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)18;
      longArray0[1] = (long) (byte)18;
      longArray0[2] = (long) 4;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 4;
      longArray0[5] = (long) 4;
      boolean boolean0 = ArrayUtils.contains(longArray0, 2644L);
      assertArrayEquals(new long[] {18L, 18L, 4L, 2L, 4L, 4L}, longArray0);
      assertEquals(6, longArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Byte byte0 = new Byte((byte)123);
      assertNotNull(byte0);
      assertEquals((byte)123, (byte)byte0);
      
      Byte byte1 = new Byte((byte)123);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)123, (byte)byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertEquals((byte)123, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-995), 1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[9];
      charArray0[8] = 'z';
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'z'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) (byte)123;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 2;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 1, (int) (byte)123);
      assertArrayEquals(new long[] {1L, 123L, 1L, 2L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(2, int0);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = (Long) 1L;
      longArray1[1] = (Long) 2L;
      longArray1[2] = (Long) 1L;
      longArray1[3] = (Long) 2L;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1152;
      shortArray0[1] = (short)2726;
      shortArray0[2] = (short) (-43);
      ArrayUtils.shift(shortArray0, (int) (short) (-43), 2073, (int) (short)2726);
      assertArrayEquals(new short[] {(short)2726, (short) (-43), (short)1152}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ArrayUtils.shift(shortArray0, (-2145881199), 321, (-2145881199));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[2] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.reverse((Object[]) stringArray0, 57, 108);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.shift(shortArray0, 0, 1, 48);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-265.4629F);
      floatArray0[1] = (float) 1048;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 108;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 147;
      floatArray0[7] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-265.4629F), 1048.0F, 0.0F, 0.0F, 108.0F, 1.0F, 147.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)0;
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte)0, (int) (byte)1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte)1, (-1948));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)21;
      doubleArray0[1] = (double) (byte)21;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)8;
      doubleArray0[4] = (double) (short) (-62);
      doubleArray0[5] = (double) (byte)1;
      doubleArray0[6] = (double) (byte)8;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) (byte)21;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {21.0, 21.0, 0.0, 8.0, (-62.0), 1.0, 8.0, 0.0, 21.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      int int2 = ArrayUtils.lastIndexOf(longArray0, 0L, (int) (byte)0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      ArrayUtils.swap(shortArray0, (int) (byte)21, (int) (byte)21);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (int) (short) (-48);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short) (-48), 1072);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-48));
      assertNotNull(double0);
      assertEquals((-48.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertArrayEquals(new double[] {(-48.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 110.0F;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {110.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1072;
      intArray2[1] = (int) (short) (-48);
      intArray2[2] = (int) (short) (-48);
      intArray2[3] = (int) (short) (-48);
      intArray2[4] = (int) (short) (-48);
      int int0 = ArrayUtils.indexOf(intArray2, 1072);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {1072, (-48), (-48), (-48), (-48)}, intArray2);
      assertEquals(5, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(0, int0);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-48.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (short) (-48);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (short) (-48);
      floatArray0[4] = (float) (short) (-48);
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) (short) (-48);
      floatArray0[7] = (float) (short) (-48);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-48.0F), 0.0F, (-48.0F), (-48.0F), 1.0F, (-48.0F), (-48.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-48);
      longArray0[1] = (long) (short) (-48);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-48L), (-48L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray1, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {(-48L), (-48L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 1931);
      assertArrayEquals(new int[] {1931}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)2;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 2;
      ArrayUtils.reverse(objectArray0, (-551), 2);
      assertEquals(1, objectArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short) (-458);
      shortArray0[2] = (short) (-987);
      shortArray0[3] = (short)1058;
      ArrayUtils.shift(shortArray0, (-75), (int) (short) (-1), (-411));
      assertArrayEquals(new short[] {(short)9, (short) (-458), (short) (-987), (short)1058}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1048;
      floatArray0[1] = 2885.875F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {1048.0F, 2885.875F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)1058;
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = (long) (short)1058;
      longArray0[3] = (long) (short) (-458);
      longArray0[4] = 0L;
      longArray0[5] = (long) 2223;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {1058L, (-1L), 1058L, (-458L), 0L, 2223L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertArrayEquals(new int[] {2}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray1));
      assertEquals(1, intArray0.length);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Byte byte1 = new Byte((byte)37);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)37, (byte)byte1);
      
      Byte byte2 = new Byte((byte)21);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)21, (byte)byte2);
      
      Byte byte3 = new Byte((byte)80);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)80, (byte)byte3);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)37, (int) (byte)80, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 82;
      intArray0[2] = 1211;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 82, 1211}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 5.88552718);
      assertArrayEquals(new double[] {5.88552718}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {1211, 82, Integer.MAX_VALUE}, intArray0);
      assertEquals(3, intArray0.length);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      double[] doubleArray1 = ArrayUtils.addFirst((double[]) null, 100.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {100.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(321);
      assertNotNull(integer0);
      assertEquals(321, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {321}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (int) (byte)21);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long long0 = 0L;
      Long long1 = Long.valueOf(0L);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long1;
      longArray0[1] = long1;
      longArray0[2] = long1;
      longArray0[3] = long1;
      longArray0[4] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotNull(longArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) long0;
      doubleArray0[2] = (double) long0;
      doubleArray0[3] = (double) long0;
      doubleArray0[4] = (double) (byte)2;
      doubleArray0[5] = (double) long0;
      doubleArray0[6] = (double) (byte)21;
      doubleArray0[7] = (double) (byte)2;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 2.0, 0.0, 21.0, 2.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((byte)2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte)21);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(21, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2603);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(2603, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((byte)2);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertEquals(2, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((byte)2);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer0));
      assertEquals(2, (int)integer5);
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {2, 21, 1, 2603, 2, 2}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Byte byte0 = new Byte((byte)123);
      assertNotNull(byte0);
      assertEquals((byte)123, (byte)byte0);
      
      Byte byte1 = new Byte((byte)123);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)123, (byte)byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertEquals((byte)123, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = false;
      ArrayUtils.shift(booleanArray1, (-35));
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray1));
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray2.length);
      assertEquals(2, booleanArray0.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      boolean boolean1 = new Boolean(true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[1] = 'r';
      charArray0[2] = 'm';
      Boolean boolean1 = new Boolean("");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[6];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray2));
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      ArrayUtils.shift((char[]) null, (-1));
      ArrayUtils.reverse((double[]) null);
      char[] charArray1 = ArrayUtils.add((char[]) null, 'l');
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray1);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(charArray0, (-1), (-1), 925);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', 'r', 'm', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-9);
      boolean boolean2 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte) (-9)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short) (-916);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-916), (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-916), (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(2, int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short)0;
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(5, objectArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((short) (-916));
      Short short0 = new Short((short)1119);
      assertNotNull(short0);
      assertEquals((short)1119, (short)short0);
      
      Short[] shortArray1 = new Short[0];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (-1));
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 1377);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(5, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)119);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 223L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 223L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {223L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte3);
      
      ArrayUtils.reverse((double[]) null, (int) (byte)0, (int) byte0);
      Boolean boolean0 = new Boolean((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.shift((char[]) null, (int) (byte)0);
      ArrayUtils.reverse((double[]) null);
      char[] charArray0 = ArrayUtils.add((char[]) null, 'l');
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.shift((char[]) null, (int) byte0, 0, (int) byte0);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) 115);
      assertNotNull(float0);
      assertEquals(115.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {115.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift((char[]) null, 115, 115, 115);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'w';
      doubleArray0[1] = (double) 'w';
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-35);
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-35), 0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-35), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      Long long0 = Long.valueOf((long) (byte)2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      Long long1 = new Long(0);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long1;
      longArray0[1] = long1;
      longArray0[2] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotNull(longArray1);
      
      Byte[] byteArray2 = new Byte[7];
      byteArray2[0] = (Byte) (byte) (-35);
      byteArray2[1] = (Byte) (byte) (-35);
      byteArray2[2] = (Byte) (byte) (-35);
      byteArray2[3] = (Byte) (byte) (-35);
      byteArray2[4] = (Byte) (byte)2;
      byteArray2[5] = (Byte) (byte)2;
      byteArray2[6] = (Byte) (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray2, (int) byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -35, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-119);
      ArrayUtils.swap(doubleArray0, (int) (byte)21, 0);
      assertArrayEquals(new double[] {(-119.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (-119);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (byte)21;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {1.0F, (-119.0F), 0.0F, 21.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)7, 0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Character character0 = Character.valueOf('|');
      assertNotNull(character0);
      assertEquals('|', (char)character0);
      
      char char0 = 's';
      Character character1 = Character.valueOf('s');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('s', (char)character1);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character1;
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertNotNull(characterArray1);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)5807);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0);
      assertSame(characterArray0, characterArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) char0;
      intArray0[1] = (int) '|';
      intArray0[2] = (int) 's';
      intArray0[3] = (int) char0;
      intArray0[4] = (int) '|';
      intArray0[5] = (int) (byte)7;
      intArray0[6] = (int) (byte)21;
      intArray0[7] = 0;
      intArray0[8] = (int) char0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 82);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new int[] {115, 124, 115, 115, 124, 7, 21, 0, 115}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 50;
      intArray0[1] = 0;
      intArray0[2] = 1941;
      intArray0[3] = 1310;
      intArray0[4] = 0;
      ArrayUtils.shift(intArray0, 4, 507, 36);
      assertArrayEquals(new int[] {50, 0, 1941, 1310, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = '8';
      charArray0[2] = '4';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '8');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'5', '8', '4'}, charArray0);
      assertArrayEquals(new char[] {'5', '4'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) '5';
      longArray0[1] = (long) '5';
      longArray0[2] = (long) 507;
      longArray0[3] = (long) '5';
      longArray0[4] = (long) 50;
      longArray0[5] = (long) (byte) (-1);
      longArray0[6] = (long) '5';
      longArray0[7] = (-1L);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {53L, 53L, 507L, 53L, 50L, (-1L), 53L, (-1L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 785.4F;
      floatArray0[2] = 59.0F;
      floatArray0[3] = 330.7F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 59.0F, 330.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 59.0F, 330.7F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)111;
      Byte byte1 = new Byte((byte)111);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)111, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)111);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)111, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray2 = ArrayUtils.insert(2, floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 59.0F, 330.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 59.0F, 330.7F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, (-1.0F), 785.4F, 59.0F, 330.7F, 59.0F, 330.7F}, floatArray2, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(8, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      Byte[] byteArray2 = new Byte[7];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = byte2;
      byteArray2[1] = byte1;
      byteArray2[2] = byte1;
      byteArray2[3] = byte2;
      byteArray2[4] = byte1;
      byteArray2[5] = byte1;
      byteArray2[6] = byte1;
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2, class0);
      assertNotSame(byteArray3, byteArray0);
      assertSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray3);
      assertEquals(7, byteArray3.length);
      assertEquals(7, byteArray2.length);
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = byte0;
      ArrayUtils.shift((Object[]) byteArray1, (-2169));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertTrue(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) (byte)111;
      longArray0[2] = (long) (byte)111;
      longArray0[3] = (long) byte0;
      longArray0[4] = 1091L;
      longArray0[5] = (long) byte0;
      longArray0[6] = (long) (-2169);
      longArray0[7] = (long) 580;
      longArray0[8] = (long) byte0;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {111L, 111L, 111L, 1091L, 111L, (-2169L), 580L, 111L, 111L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (int) (short) (-48);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short) (-48), 1072);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Character character0 = new Character('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'K';
      ArrayUtils.reverse((double[]) null);
      int int0 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) null, 1);
      assertEquals(0, characterArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((Object[]) characterArray0, 1072, 295);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-29L));
      assertNotNull(long0);
      assertEquals((-29L), (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-531);
      shortArray0[1] = (short)3866;
      shortArray0[2] = (short)1;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-531), (short)3866, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short) (-531), (short)3866, (short)1}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)27;
      Byte byte1 = new Byte((byte)27);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)27, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)27, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)27);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)27, (byte)byte3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      char[] charArray1 = ArrayUtils.add(charArray0, ':');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(characterArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = byte0;
      byteArray1[1] = byte0;
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray3 = ArrayUtils.removeElements(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte)0}, byteArray3);
      assertEquals(3, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(3, byteArray3.length);
      assertNotNull(byteArray3);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) ':';
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) (byte)27;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = 378L;
      longArray0[5] = (long) byte0;
      longArray0[6] = (long) (byte)27;
      longArray0[7] = (long) byte0;
      longArray0[8] = (long) byte0;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {58L, 27L, 27L, 0L, 378L, 27L, 27L, 27L, 27L}, longArray0);
      assertEquals(9, longArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)27;
      shortArray0[1] = (short) (byte)27;
      shortArray0[2] = (short) (byte)27;
      shortArray0[3] = (short) (byte)27;
      short[] shortArray1 = ArrayUtils.insert(2, shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)27, (short)27, (short)27, (short)27, (short)27, (short)27, (short)27, (short)27}, shortArray1);
      assertArrayEquals(new short[] {(short)27, (short)27, (short)27, (short)27}, shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      byte byte0 = (byte)21;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)21;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)8, (byte)0, (byte)8, (byte)21, (byte)0, (byte)0, (byte)21}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)8;
      longArray0[2] = (long) (byte)21;
      longArray0[3] = (long) (byte)21;
      longArray0[4] = (long) (byte)1;
      longArray0[5] = (long) (byte)8;
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (long) (byte)8;
      longArray0[8] = (long) (byte)1;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 8L, 21L, 21L, 1L, 8L, 0L, 8L, 1L}, longArray0);
      assertEquals(9, longArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '');
      assertNull(charArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte)1, (byte)8, (byte)0, (byte)8, (byte)21, (byte)0, (byte)0, (byte)21}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte[] byteArray3 = new Byte[6];
      byteArray3[0] = (Byte) (byte)0;
      byteArray3[1] = (Byte) (byte)8;
      byteArray3[2] = (Byte) (byte)21;
      byteArray3[3] = (Byte) (byte)21;
      byteArray3[4] = (Byte) (byte)21;
      byteArray3[5] = (Byte) (byte)0;
      Byte byte1 = new Byte(byte0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)21, (byte)byte1);
      
      Byte byte2 = ArrayUtils.get(byteArray3, (int) 8, byte1);
      assertEquals(6, byteArray3.length);
      assertNotNull(byte2);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)21, (byte)byte2);
      
      boolean boolean2 = ArrayUtils.isSameType(byte2, byte1);
      assertEquals(6, byteArray3.length);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) (byte)40);
      assertNotNull(float0);
      assertEquals(40.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-412.0F));
      assertArrayEquals(new float[] {40.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      ArrayUtils.reverse((long[]) null, (int) (byte) (-1), Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-68));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-68), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[2];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)36);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 115;
      longArray0[1] = (long) 1556;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (short)36;
      longArray0[6] = (long) (short)0;
      longArray0[7] = (-1000L);
      ArrayUtils.shift(longArray0, (int) byte0);
      assertArrayEquals(new long[] {115L, 1556L, 0L, (-1L), 36L, 0L, 0L, (-1000L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 1556L);
      assertArrayEquals(new long[] {115L, 1556L, 0L, (-1L), 36L, 0L, 0L, (-1000L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(longArray0, 643, (-167));
      assertArrayEquals(new long[] {115L, 1556L, 0L, (-1L), 36L, 0L, 0L, (-1000L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 128;
      intArray0[2] = 2;
      intArray0[3] = 162;
      intArray0[4] = 7;
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = 'J';
      boolean boolean0 = ArrayUtils.contains(charArray0, ')');
      assertArrayEquals(new char[] {'~', '~', ')', ')', 'J'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-2144477651));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 128, 2, 162, 7, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.shift((long[]) null, (-1), 704, 0);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'E');
      assertArrayEquals(new char[] {'J', 'J', 'J'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-2144477651));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.reverse(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      ArrayUtils.shift((long[]) null, (-1824), (-1824), (-1824));
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-4937), (-4937), (-7));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'w';
      doubleArray0[1] = (double) 'w';
      doubleArray0[2] = (double) 59;
      doubleArray0[3] = (double) 59;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-636);
      intArray0[1] = 1;
      intArray0[2] = (int) 'w';
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-87));
      assertArrayEquals(new int[] {(-636), 1, 119, 1, 1, 1}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.indexOf(shortArray0, (short)321, 84);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.shift((Object[]) byteArray0, 1);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 1808);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 0L);
      assertNull(longArray0);
      
      ArrayUtils.reverse((Object[]) null);
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertArrayEquals(new int[] {2, 2, 2, 2}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'A';
      charArray0[2] = '=';
      charArray0[3] = 's';
      charArray0[4] = 'k';
      charArray0[5] = '<';
      charArray0[6] = '|';
      ArrayUtils.shift(charArray0, 1, 1, (-496));
      assertArrayEquals(new char[] {'Y', 'A', '=', 's', 'k', '<', '|'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.contains(charArray0, '!');
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      ArrayUtils.shift(charArray1, (-487), (-7), (-2146553809));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      MockRandom mockRandom0 = new MockRandom(2);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      mockRandom0.setSeed((short)7);
      MockRandom mockRandom1 = new MockRandom(1L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      IntStream intStream1 = mockRandom1.ints();
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(intStream1, intStream0);
      assertNotNull(intStream1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(intStream1.equals((Object)intStream0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertNotSame(mockRandom0, mockRandom1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, true, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      
      Integer integer0 = new Integer((-1658));
      assertNotNull(integer0);
      assertEquals((-1658), (int)integer0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, true, false, true}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, 1537, (-2010));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, true, false, true}, booleanArray0));
      assertEquals(0, booleanArray2.length);
      assertEquals(9, booleanArray0.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      boolean[] booleanArray3 = ArrayUtils.addAll(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, true, false, true}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertEquals(9, booleanArray0.length);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2424;
      intArray0[5] = 70;
      intArray0[2] = 47;
      intArray0[3] = 0;
      intArray0[4] = 0;
      Byte byte0 = new Byte((byte) (-43));
      assertNotNull(byte0);
      assertEquals((byte) (-43), (byte)byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(1, objectArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 47;
      doubleArray0[1] = (double) (byte) (-43);
      doubleArray0[2] = (double) 2424;
      doubleArray0[3] = (double) 2424;
      doubleArray0[3] = (double) 70;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 47;
      ArrayUtils.shift(doubleArray0, (-1), 0, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {47.0, (-43.0), 2424.0, 70.0, 0.0, 0.0, 47.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      byteArray0[7] = byte0;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) Integer.MAX_VALUE);
      assertArrayEquals(new double[] {47.0, (-43.0), 2424.0, 70.0, 0.0, 0.0, 47.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-43);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray2, (byte) (-62), 15);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {(byte) (-43)}, byteArray2);
      assertEquals(1, byteArray2.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 9;
      Byte byte0 = new Byte((byte) (-43));
      assertNotNull(byte0);
      assertEquals((byte) (-43), (byte)byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) 9;
      objectArray0[3] = (Object) 9;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) byte0;
      objectArray0[6] = object0;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(7, objectArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (byte) (-43);
      doubleArray0[6] = (double) (byte) (-43);
      doubleArray0[7] = (-2742.26174);
      ArrayUtils.shift(doubleArray0, 3764, (-793), (-1));
      assertArrayEquals(new double[] {0.0, 9.0, (-1.0), 9.0, (-1.0), (-43.0), (-43.0), (-2742.26174)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      Byte byte1 = new Byte((byte) (-1));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      ArrayUtils.swap(floatArray0, 0, 1, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)93;
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)71;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)71;
      byteArray1[4] = (byte)71;
      byteArray1[5] = (byte)93;
      byteArray1[6] = (byte)32;
      byte[] byteArray2 = ArrayUtils.insert(0, byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)32, (byte)93}, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)71, (byte)32, (byte)71, (byte)71, (byte)93, (byte)32}, byteArray1);
      assertArrayEquals(new byte[] {(byte)32, (byte)71, (byte)32, (byte)71, (byte)71, (byte)93, (byte)32, (byte)32, (byte)93}, byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertEquals(9, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1, 6);
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short) (-1807);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-1807), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1807);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (short) (-1807);
      doubleArray0[3] = (double) 0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-2377.75260549665));
      assertArrayEquals(new double[] {(-1807.0), 1.0, (-1807.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1807.0), 1.0, (-1807.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-1807), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-3834.3977734));
      assertArrayEquals(new double[] {(-1807.0), 1.0, (-1807.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) shortArray1, (Object[]) shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-1807), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 1, (int) (short) (-1807), (-2155));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) long0;
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.shift((char[]) null, 1);
      ArrayUtils.reverse((double[]) null);
      char[] charArray0 = ArrayUtils.add((char[]) null, '@');
      assertArrayEquals(new char[] {'@'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.swap(booleanArray1, (-162), 2145994408, (-50));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      ArrayUtils.shift(booleanArray0, 48);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      ArrayUtils.swap(booleanArray0, 2, 48, 4203);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'r';
      floatArray0[1] = (float) 'Y';
      floatArray0[2] = (float) '\u0000';
      floatArray0[3] = (float) 'Y';
      ArrayUtils.swap(floatArray0, 0, 0, 0);
      assertArrayEquals(new float[] {114.0F, 89.0F, 0.0F, 89.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)71, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 2;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)83;
      shortArray0[1] = (short)7;
      shortArray0[2] = (short) (-1599);
      shortArray0[3] = (short) (-4236);
      shortArray0[4] = (short)1050;
      ArrayUtils.shift(shortArray0, 2, (int) (short) (-4236), 2147483633);
      assertArrayEquals(new short[] {(short)83, (short)7, (short) (-1599), (short) (-4236), (short)1050}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 799;
      floatArray0[1] = (float) (short) (-4236);
      floatArray0[2] = (float) (short)83;
      floatArray0[3] = (float) (short) (-1599);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {799.0F, (-4236.0F), 83.0F, (-1599.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(intArray0, 2);
      assertArrayEquals(new int[] {0, 0, 0, 2, 2, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, 799);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 799, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 41.43086279029616;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 41.43086279029616, 41.43086279029616);
      assertArrayEquals(new double[] {41.43086279029616}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1718);
      intArray0[1] = 2263;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-1718), 2263}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-3066), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3066, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 2559, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2559, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      int[] intArray0 = new int[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      char[] charArray0 = new char[0];
      int[] intArray0 = new int[9];
      intArray0[0] = (-328);
      intArray0[1] = 2142;
      intArray0[2] = (-724);
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 51;
      intArray0[6] = 386;
      intArray0[7] = 49;
      intArray0[8] = 54;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2142, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (int) (short) (-48);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short) (-48), 1072);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-48));
      assertNotNull(double0);
      assertEquals((-48.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertArrayEquals(new double[] {(-48.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)5;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray1);
      assertArrayEquals(new double[] {(-48.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-70L), 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 0, 7, (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((Object[]) longArray0);
      assertEquals(1, longArray0.length);
      
      Short[] shortArray0 = new Short[1];
      short short0 = (short)82;
      Short short1 = new Short((short)82);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)82, (short)short1);
      
      shortArray0[0] = short1;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)82;
      intArray0[1] = 26;
      intArray0[2] = (int) short0;
      intArray0[3] = (-3409);
      intArray0[4] = (int) (short)82;
      intArray0[5] = (-3409);
      intArray0[6] = (int) short0;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 26;
      intArray1[1] = (int) (short)82;
      intArray1[2] = (-3409);
      intArray1[3] = 606;
      intArray1[4] = (int) (short)82;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3409), intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3409, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-256);
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) (-256));
      assertNull(byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-256), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -256, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1705.994F);
      assertArrayEquals(new float[] {1705.994F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {1705.994F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) floatArray0, (Object) null);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(2, floatArray0.length);
      assertNotNull(bitSet0);
      
      Character character0 = Character.valueOf('`');
      assertNotNull(character0);
      assertEquals('`', (char)character0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      MockRandom mockRandom0 = new MockRandom((short)53);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.doubles((long) (short)53, (double) (short)53, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short) (-1200));
      assertNotNull(short0);
      assertEquals((short) (-1200), (short)short0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-1200);
      doubleArray0[3] = (double) (short) (-1200);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.shift(doubleArray0, 1, 1, (-1));
      assertArrayEquals(new double[] {(-1200.0), 0.0, 0.0, (-1200.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2002);
      intArray0[1] = 1632;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1632, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-537.27737141392);
      doubleArray0[4] = 0.0;
      ArrayUtils.shift(doubleArray0, 12);
      assertArrayEquals(new double[] {(-537.27737141392), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 12);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {12.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 12;
      intArray0[2] = 12;
      doubleArray0[4] = (double) 12;
      Byte byte0 = new Byte((byte) (-43));
      assertNotNull(byte0);
      assertEquals((byte) (-43), (byte)byte0);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte1 = new Byte((byte) (-65));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-65), (byte)byte1);
      
      byteArray0[0] = byte1;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 82);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = 'l';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'d', 'l'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[0];
      boolean[] booleanArray3 = ArrayUtils.removeAll(booleanArray1, intArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, booleanArray3.length);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)64);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)900);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2274.6455);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (byte)64;
      doubleArray0[5] = (double) (short)900;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-2274.6455), 78, (-1.0));
      assertArrayEquals(new double[] {(-2274.6455), 0.0, (-1.0), (-1.0), 64.0, 900.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-28));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)386;
      shortArray0[1] = (short) (-891);
      shortArray0[2] = (short) (-3487);
      shortArray0[3] = (short)15;
      shortArray0[4] = (short) (-3409);
      shortArray0[5] = (short)1;
      shortArray0[7] = (short) (-891);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)386;
      longArray0[1] = (long) (short) (-3409);
      longArray0[2] = (long) (short) (-3487);
      longArray0[3] = (-1000L);
      longArray0[4] = (long) (short) (-3409);
      longArray0[6] = (long) (short) (-891);
      ArrayUtils.shift(longArray0, 115);
      assertArrayEquals(new long[] {(-3409L), 0L, (-891L), 386L, (-3409L), (-3487L), (-1000L)}, longArray0);
      assertEquals(7, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2);
      assertArrayEquals(new short[] {(short)386, (short) (-891), (short) (-3487), (short)15, (short) (-3409), (short)1, (short)0, (short) (-891)}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(481, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 481, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Byte[] byteArray1 = new Byte[6];
      byteArray1[0] = (Byte) (byte)40;
      byteArray1[1] = byte0;
      byteArray1[2] = byte0;
      byteArray1[3] = byte0;
      byteArray1[4] = (Byte) object0;
      byteArray1[5] = byte0;
      Byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray1, (Byte) object0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      char[] charArray1 = new char[2];
      charArray1[0] = 'i';
      charArray1[1] = 'Q';
      ArrayUtils.reverse(charArray1);
      assertArrayEquals(new char[] {'Q', 'i'}, charArray1);
      assertEquals(2, charArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 261.0883;
      doubleArray0[1] = (double) 70;
      doubleArray0[2] = (double) 'i';
      doubleArray0[3] = (double) 51;
      doubleArray0[4] = (double) 'i';
      doubleArray0[5] = (double) 70;
      ArrayUtils.shift(doubleArray0, (-2055), 70, (-2145881199));
      assertArrayEquals(new double[] {51.0, 105.0, 70.0, 261.0883, 70.0, 105.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 261.0883);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {51.0, 105.0, 70.0, 70.0, 105.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {51.0, 105.0, 70.0, 261.0883, 70.0, 105.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 3198.1F);
      assertArrayEquals(new float[] {3198.1F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {51.0, 105.0, 70.0, 70.0, 105.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {51.0, 105.0, 70.0, 70.0, 105.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {51.0, 105.0, 70.0, 261.0883, 70.0, 105.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) doubleArray0, object0);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      ArrayUtils.shift(doubleArray0, (-1), 679, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {2.147483647E9, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)37);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'I';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'m', 'm', 'I', 'G'}, charArray0);
      assertEquals(4, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-127));
      assertNotNull(byte0);
      assertEquals((byte) (-127), (byte)byte0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'm';
      intArray0[1] = (int) 'I';
      intArray0[2] = (int) 'm';
      intArray0[3] = (int) (byte)37;
      intArray0[4] = (int) (byte) (-127);
      intArray0[5] = (int) 'm';
      intArray0[6] = (int) 'G';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 109);
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{0, 2, 5}", bitSet0.toString());
      assertArrayEquals(new int[] {109, 73, 109, 37, (-127), 109, 71}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-68);
      Byte byte3 = new Byte((byte) (-68));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-68), (byte)byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)0);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte4);
      
      byteArray0[2] = byte4;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byte2;
      longArray0[1] = (long) byte2;
      longArray0[2] = (long) (byte) (-68);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) byte2, (int) byte2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-68L), (-68L), (-68L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(byte2 == byte0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Character character0 = Character.valueOf('+');
      assertNotNull(character0);
      assertEquals('+', (char)character0);
      
      Character character1 = Character.valueOf('X');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('X', (char)character1);
      
      Character character2 = new Character('}');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('}', (char)character2);
      
      Character character3 = new Character('}');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals('}', (char)character3);
      
      Character character4 = Character.valueOf('J');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertEquals('J', (char)character4);
      
      Character character5 = Character.valueOf('\"');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertEquals('\"', (char)character5);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-68L), (-68L), (-68L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 1, (int) byte0);
      assertFalse(byte0 == byte2);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = byte0;
      byteArray1[1] = (byte)24;
      byteArray1[2] = (byte)0;
      byteArray1[3] = byte0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = byte0;
      byteArray1[6] = (byte) (-68);
      byteArray1[7] = (byte)0;
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)24, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-68), (byte)0}, byteArray1);
      assertEquals(16, byteArray2.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 566.4602831141126;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3048.987;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1635.262798643, 438.0786739863139);
      assertArrayEquals(new double[] {566.4602831141126, 0.0, 3048.987, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[6] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)5);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {566.4602831141126, 0.0, 3048.987, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {566.4602831141126, 0.0, 3048.987, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short)0;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 122, (int) (short)0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-713), (-216));
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-216));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-216), (int)integer0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-1017));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      long[] longArray1 = ArrayUtils.subarray((long[]) null, 1, 1);
      assertNull(longArray1);
      
      Character character0 = Character.valueOf('P');
      assertNotNull(character0);
      assertEquals('P', (char)character0);
      
      Character character1 = Character.valueOf('P');
      assertNotNull(character1);
      assertEquals('P', (char)character1);
      
      Character character2 = new Character('+');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('+', (char)character2);
      
      Character character3 = new Character('r');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertEquals('r', (char)character3);
      
      Character character4 = Character.valueOf('P');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertEquals('P', (char)character4);
      
      Character character5 = Character.valueOf('h');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertEquals('h', (char)character5);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, long0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (-303));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '#');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) '~';
      floatArray0[2] = (-819.0F);
      floatArray0[3] = (float) '~';
      floatArray0[4] = (float) '~';
      ArrayUtils.shift(floatArray0, 0, (-1), (-2010));
      assertArrayEquals(new float[] {(-1.0F), 126.0F, (-819.0F), 126.0F, 126.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.shift(floatArray0, (int) (byte) (-56));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-18);
      intArray0[2] = (-18);
      intArray0[2] = 0;
      intArray0[3] = 1;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1);
      assertArrayEquals(new int[] {(-18), 0, 0, 1, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(3, int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short)114;
      shortArray0[3] = (short)114;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)114, (-18));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)114, (short)114}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.shift((Object[]) byteArray0, 8);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-1);
      ArrayUtils.shift(floatArray0, (-18));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-8);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)110;
      floatArray0[1] = (float) (byte)110;
      floatArray0[2] = (float) (byte)8;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 110.0F);
      assertArrayEquals(new float[] {110.0F, 110.0F, 8.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = 'r';
      charArray0[2] = '_';
      charArray0[3] = ',';
      charArray0[4] = ' ';
      int int0 = ArrayUtils.indexOf(charArray0, ',', (int) (byte)110);
      assertArrayEquals(new char[] {'8', 'r', '_', ',', ' '}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(booleanArray1, (int) (byte)45, 128, (int) (byte) (-8));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.swap(charArray0, (int) (byte)110, 1698, (int) (byte) (-8));
      assertArrayEquals(new char[] {'8', 'r', '_', ',', ' '}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (-256);
      doubleArray0[3] = (double) (short) (-458);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) 0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-256.0), (-458.0), (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-458);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (short) (-458);
      floatArray0[3] = (float) (short) (-458);
      floatArray0[4] = (float) (short) (-1);
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {(-458.0F), 0.0F, (-458.0F), (-458.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(4466, (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-91);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (int) (byte)21);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)2, (byte) (-91)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-91)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      char[] charArray1 = ArrayUtils.insert((int) (byte) (-91), (char[]) null, charArray0);
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (-2668), (-2668));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[7] = (float) 0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)2, 516);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = '8';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'8', '8'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)18688;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)18688}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = (double) (byte)40;
      doubleArray0[1] = (double) (byte)40;
      doubleArray0[2] = (double) (byte)40;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(22, doubleArray0.length);
      assertEquals(22, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)40;
      longArray0[1] = (long) (byte)40;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {40L, 40L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte)40;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)40, (byte)40, (byte)40, (byte)40, (byte)40, (byte)40, (byte)40}, byteArray1);
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)40, (byte)40, (byte)40, (byte)40, (byte)40, (byte)40, (byte)40}, byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-18);
      intArray0[1] = (-18);
      intArray0[2] = 0;
      intArray0[3] = 1;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1);
      assertArrayEquals(new int[] {(-18), (-18), 0, 1, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(3, int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)114;
      shortArray0[2] = (short)114;
      shortArray0[3] = (short)114;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)114, (-18));
      assertArrayEquals(new short[] {(short)0, (short)114, (short)114, (short)114}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.reverse(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      ArrayUtils.shift((Object[]) byteArray0, 8);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-523.7576F);
      floatArray0[1] = (float) 3;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 0);
      assertArrayEquals(new float[] {(-523.7576F), 3.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'V');
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'V';
      doubleArray0[1] = (double) 'V';
      doubleArray0[2] = (double) 'V';
      doubleArray0[0] = (double) 'V';
      doubleArray0[4] = (double) 'V';
      doubleArray0[2] = (double) 'V';
      doubleArray0[1] = 1.5;
      doubleArray0[7] = (double) 'V';
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = new Byte((byte)59);
      assertNotNull(byte0);
      assertEquals((byte)59, (byte)byte0);
      
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte[] byteArray2 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 9;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {9, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) (-1);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 2);
      assertArrayEquals(new double[] {9.0, 9.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
      
      int int1 = ArrayUtils.indexOf(intArray1, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {9, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = 'W';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2, 69);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'Q', 'W'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte)9, (byte) (-47), (byte)52, (byte) (-39), (byte)97, (byte)36, (byte)15, (byte) (-1)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)14);
      assertNotNull(short0);
      assertEquals((short)14, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)14);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)14, (short)short1);
      
      shortArray0[1] = short1;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)108, 1);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-22), (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-22);
      ArrayUtils.shift(byteArray1, (int) (byte)108, 1595, 3009);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-22)}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 857.5241076207765;
      doubleArray0[1] = 2216.982372;
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'G', (-3752));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-2784), (-2784));
      assertNull(longArray0);
      
      Character character0 = Character.valueOf('+');
      assertNotNull(character0);
      assertEquals('+', (char)character0);
      
      Character character1 = Character.valueOf('');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('', (char)character1);
      
      Character character2 = new Character('h');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('h', (char)character2);
      
      Character character3 = new Character('m');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertEquals('m', (char)character3);
      
      Character character4 = Character.valueOf('O');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertEquals('O', (char)character4);
      
      Character character5 = Character.valueOf('^');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertEquals('^', (char)character5);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 621.24290608731);
      assertArrayEquals(new double[] {857.5241076207765, 2216.982372, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 857.5241076207765);
      assertArrayEquals(new double[] {857.5241076207765, 2216.982372, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)64;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)122);
      assertArrayEquals(new byte[] {(byte) (-28), (byte) (-115), (byte)122, (byte)17, (byte)97, (byte)64}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1, 6);
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short) (-1807);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-1807), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1807);
      doubleArray0[1] = (double) 1;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)20;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)20, (byte)0, (byte)20}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)0;
      Object object0 = ArrayUtils.get(objectArray0, (-2999));
      assertEquals(9, objectArray0.length);
      assertNull(object0);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) (-1807.0);
      objectArray0[3] = (Object) (byte)20;
      objectArray0[4] = (Object) (short) (-1807);
      objectArray0[5] = (Object) (byte)0;
      objectArray0[6] = (Object) (byte)20;
      objectArray0[7] = (Object) 1.0;
      objectArray0[8] = (Object) 1.0;
      ArrayUtils.shift(objectArray0, (int) (byte)54);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      short[] shortArray0 = new short[3];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      ArrayUtils.swap(shortArray0, (-567), (-567), (-567));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.sort((Byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 633.681447207871;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = 0.0;
      int[] intArray0 = new int[2];
      intArray0[0] = 123;
      intArray0[1] = 66;
      ArrayUtils.swap(intArray0, 0, 66);
      assertArrayEquals(new int[] {123, 66}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 633.681447207871, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte byte0 = (byte)3;
      Byte byte1 = new Byte((byte)3);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)3, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) byte0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {3L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      Byte[] byteArray2 = ArrayUtils.sort(byteArray0);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)121;
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      boolean boolean1 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-84));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-84), (byte)byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-59));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-59), (byte)byte2);
      
      byteArray0[2] = byte2;
      byte byte3 = (byte)18;
      Byte byte4 = new Byte((byte)18);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertEquals((byte)18, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-1));
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte) (-1), (byte)byte5);
      
      byteArray0[4] = byte5;
      try { 
        Byte.valueOf("", (int) byte3);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      char[] charArray1 = new char[2];
      charArray1[0] = 'i';
      charArray1[1] = 'Q';
      ArrayUtils.reverse(charArray1);
      assertArrayEquals(new char[] {'Q', 'i'}, charArray1);
      assertEquals(2, charArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[4] = 70;
      intArray0[1] = (int) (short) (-1430);
      intArray0[2] = 51;
      intArray0[3] = (int) '&';
      intArray0[4] = 137;
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.swap(booleanArray1, 1615, 51, 1615);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-799.0325));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-799.0325)}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(charArray0, (-3489), (-3489));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3489);
      longArray0[1] = (long) (-3489);
      longArray0[2] = (long) (-3489);
      longArray0[3] = (long) (-3489);
      longArray0[4] = (long) (-3489);
      longArray0[5] = (long) (-3489);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-3489L), (-3489L), (-3489L), (-3489L), (-3489L), (-3489L)}, longArray0);
      assertArrayEquals(new long[] {(-3489L), (-3489L), (-3489L), (-3489L), (-3489L), (-3489L)}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = '~';
      charArray0[2] = '&';
      charArray0[3] = 'Q';
      charArray0[4] = 'c';
      charArray0[5] = 'Q';
      charArray0[6] = '{';
      charArray0[7] = 'j';
      charArray0[8] = '=';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'^', '~', '&', 'Q', 'c', 'Q', '{', 'j', '='}, charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'^', '~', '&', 'Q', 'c', 'Q', '{', 'j', '='}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.reverse(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'^', '~', '&', 'Q', 'c', 'Q', '{', 'j', '='}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '^';
      intArray0[1] = (int) 'Q';
      intArray0[2] = (int) 'Q';
      intArray0[3] = (int) 'j';
      intArray0[4] = (int) 'Q';
      intArray0[5] = (int) 'c';
      intArray0[6] = 51;
      intArray0[7] = (int) 'j';
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {94, 81, 81, 106, 81, 99, 51, 106}, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      Byte byte0 = new Byte((byte) (-43));
      assertNotNull(byte0);
      assertEquals((byte) (-43), (byte)byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-3317.1);
      doubleArray0[5] = (double) long0;
      ArrayUtils.shift(doubleArray0, 0, 0, 2146824110);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-3317.1), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-294.278);
      doubleArray0[1] = (-1188.351);
      doubleArray0[2] = 0.0;
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      MockRandom mockRandom0 = new MockRandom(2);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(2);
      assertEquals(0, int0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      mockRandom0.setSeed(2);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1114.30275), 2);
      assertArrayEquals(new double[] {(-294.278), (-1188.351), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[9];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[3];
      // Undeclared exception!
      try { 
        mockRandom0.ints((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) long0;
      floatArray0[2] = (float) long0;
      ArrayUtils.swap(floatArray0, 1, 1, 1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)71;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)71, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 71, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (-3855));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2561, (int) (short)386);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockRandom0;
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(1, objectArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((short) (-3409));
      Short short0 = new Short((short)3);
      assertNotNull(short0);
      assertEquals((short)3, (short)short0);
      
      Short[] shortArray1 = new Short[1];
      shortArray1[0] = short0;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (-385));
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)3}, shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)386;
      intArray0[1] = (-1);
      intArray0[2] = (int) (short)3;
      boolean boolean0 = ArrayUtils.contains(intArray0, 2107715432);
      assertArrayEquals(new int[] {386, (-1), 3}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)6;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, (String) null);
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'r';
      charArray0[2] = 'm';
      Boolean boolean1 = new Boolean("");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[6];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray2));
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      ArrayUtils.shift((char[]) null, (-1));
      ArrayUtils.reverse((double[]) null);
      char[] charArray1 = ArrayUtils.add((char[]) null, 'l');
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray1);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(charArray0, (-1), (-1), 925);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'Y', 'r', 'm', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1883));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.add(charArray0, '8');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'8'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      Byte byte2 = new Byte((byte)1);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte2);
      
      Byte byte3 = new Byte((byte)1);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)1, (byte)byte3);
      
      Byte byte4 = new Byte((byte) (-97));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte) (-97), (byte)byte4);
      
      Byte byte5 = new Byte((byte)90);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertEquals((byte)90, (byte)byte5);
      
      Byte byte6 = new Byte((byte) (-97));
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertEquals((byte) (-97), (byte)byte6);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte6;
      byteArray0[1] = byte4;
      byteArray0[2] = byte6;
      byteArray0[3] = byte6;
      Byte byte7 = new Byte((byte)1);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte1));
      assertEquals((byte)1, (byte)byte7);
      
      byteArray0[4] = byte7;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, (int)  (-97));
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = true;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)37);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Double double0 = new Double((byte)37);
      assertNotNull(double0);
      assertEquals(37.0, (double)double0, 0.01);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 93, (int) (byte)37);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 1;
      byteArray0[3] = (byte)37;
      floatArray0[3] = (float) (byte)37;
      floatArray0[4] = (float) (byte)37;
      ArrayUtils.reverse(floatArray0, 2, (-31));
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, 37.0F, 37.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      Long[] longArray0 = new Long[4];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      Long long2 = Long.getLong("+cn4;Un:J0", (Long) long0);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertEquals(0L, (long)long2);
      
      longArray0[1] = long2;
      Long long3 = Long.valueOf((long) 93);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertEquals(93L, (long)long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(long0);
      assertNotNull(long4);
      assertTrue(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long0));
      assertEquals(0L, (long)long4);
      
      longArray0[3] = long4;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(1072, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2424;
      intArray0[1] = 70;
      intArray0[2] = 47;
      intArray0[3] = 0;
      intArray0[4] = 70;
      intArray0[5] = 3;
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)112);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) '<';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (-1199), (double) 70);
      assertArrayEquals(new double[] {0.0, 60.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 1924.0F;
      floatArray0[2] = (float) 2424;
      floatArray0[3] = (float) '<';
      floatArray0[4] = (float) '<';
      floatArray0[5] = (float) '<';
      floatArray0[6] = (float) '<';
      floatArray0[7] = (float) '<';
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {60.0F, 60.0F, 60.0F, 60.0F, 60.0F, 2424.0F, 1924.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('X');
      assertNotNull(character0);
      assertEquals('X', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'X');
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.swap(charArray0, (-906), 2, 2);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)386;
      shortArray0[1] = (short) (-891);
      shortArray0[2] = (short) (-3487);
      shortArray0[3] = (short)15;
      shortArray0[4] = (short) (-3409);
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)15;
      shortArray0[7] = (short) (-12);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)386;
      longArray0[1] = (long) (short) (-3409);
      longArray0[2] = (long) (short) (-3487);
      longArray0[3] = (-1000L);
      longArray0[4] = (long) (short) (-3409);
      longArray0[5] = (long) (short) (-12);
      ArrayUtils.shift(longArray0, 115);
      assertArrayEquals(new long[] {(-3409L), (-12L), 0L, 386L, (-3409L), (-3487L), (-1000L)}, longArray0);
      assertEquals(7, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2);
      assertArrayEquals(new short[] {(short)386, (short) (-891), (short) (-3487), (short)15, (short) (-3409), (short)1, (short)15, (short) (-12)}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)46;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)76);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)57, (byte)46}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)57, (byte)46}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (int) (byte)80, (int) (byte)80, (int) (byte)80);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte) (-9);
      byteArray0[4] = (byte) (-9);
      byteArray0[2] = (byte)67;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)67, (byte)0, (byte) (-9), (byte) (-9), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2424;
      intArray0[1] = 70;
      intArray0[2] = 2424;
      intArray0[3] = 0;
      intArray0[4] = 70;
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 70;
      intArray0[3] = 2424;
      doubleArray0[3] = (double) 70;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 2424;
      ArrayUtils.shift(doubleArray0, (-19), 70, (-2147483645));
      assertArrayEquals(new double[] {2424.0, 70.0, 0.0, 0.0, 70.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (int) (short) (-48);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short) (-48), 1072);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-48));
      assertNotNull(double0);
      assertEquals((-48.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertArrayEquals(new double[] {(-48.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte)3;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)114, (byte) (-124), (byte) (-121), (byte) (-108), (byte)5, (byte) (-86), (byte)44, (byte)3}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-2066), (-94));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray0);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (-2066);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-2066);
      floatArray1[1] = (float) (int)integerArray0[0];
      floatArray1[2] = (float) (-94);
      floatArray1[3] = (float) (-94);
      floatArray1[4] = (float) (-1);
      floatArray1[5] = (float) (-94);
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F, (-2066.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2066.0F), 2.14748365E9F, (-94.0F), (-94.0F), (-1.0F), (-94.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((int[]) null, (-1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert(91, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      int[] intArray0 = new int[5];
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)147;
      shortArray0[1] = (short)147;
      shortArray0[2] = (short)147;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)147, (short)147, (short)147}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short)147;
      objectArray0[1] = (Object) (short)147;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) shortArray1);
      assertArrayEquals(new short[] {(short)147, (short)147, (short)147}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(2, objectArray0.length);
      assertFalse(boolean0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (short)147);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {147, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.reverse((byte[]) null);
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      charArray0[1] = 'L';
      charArray0[2] = 'v';
      charArray0[3] = 'd';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 147, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '4';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      charArray0[6] = '4';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'4', '\'', '\'', '4', '\'', '\'', '4'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) '4';
      Byte byte0 = new Byte((byte) (-86));
      assertNotNull(byte0);
      assertEquals((byte) (-86), (byte)byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-2142376189), (Object) byte0);
      assertEquals(9, objectArray0.length);
      assertNotNull(object0);
      assertEquals((byte) (-86), object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) '\'';
      objectArray0[4] = (Object) '\'';
      objectArray0[5] = (Object) '\'';
      objectArray0[6] = (Object) '\'';
      objectArray0[7] = (Object) '4';
      objectArray0[8] = (Object) '4';
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object1 = ArrayUtils.toPrimitive(objectArray0[7]);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(9, objectArray0.length);
      assertNotNull(object1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals('4', object1);
      
      Object object2 = ArrayUtils.get(objectArray1, 0, object1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(3, objectArray1.length);
      assertEquals(9, objectArray0.length);
      assertNull(object2);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      
      objectArray1[0] = null;
      objectArray1[1] = (Object) '\'';
      objectArray1[2] = (Object) '4';
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(3, objectArray1.length);
      assertEquals(9, objectArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-86);
      floatArray0[1] = (float) '4';
      floatArray0[2] = (float) (byte) (-86);
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-86.0F), 52.0F, (-86.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1490.3920209;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1287;
      longArray0[1] = (long) 1287;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 1287;
      longArray0[4] = (long) 1287;
      longArray0[5] = (long) 1287;
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2274.6455));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1490.3920209}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)147;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 350);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {147}, intArray0);
      assertArrayEquals(new int[] {350, 147}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1287L;
      floatArray0[1] = (float) 350;
      floatArray0[2] = (float) 1287L;
      floatArray0[2] = (float) 1287L;
      floatArray0[4] = (float) (short)147;
      floatArray0[5] = (float) (-1L);
      floatArray0[6] = (float) (-1L);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 1287L, 147);
      assertArrayEquals(new float[] {1287.0F, 350.0F, 1287.0F, 0.0F, 147.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(2, int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The Array must not be null";
      stringArray0[1] = "#~Cr]";
      stringArray0[2] = "";
      stringArray0[3] = "The Array must not be null";
      stringArray0[4] = "z6A1(xzUaH";
      stringArray0[6] = "Timeout for vintage @Test must be positive.";
      stringArray0[7] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.insert((-1540), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      int int0 = ArrayUtils.indexOf((short[]) null, (short)1822);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int1 = ArrayUtils.indexOf((short[]) null, (short)1822, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Short short0 = new Short((short)1822);
      assertNotNull(short0);
      assertEquals((short)1822, (short)short0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      ArrayUtils.swap(charArray0, (int) (short)1822, 0, (-1965));
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(1, charArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray1, (byte) (-76));
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      Byte byte2 = new Byte((byte)14);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)14, (byte)byte2);
      
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = 'O';
      char[] charArray1 = ArrayUtils.add(charArray0, 'O');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'4', 'O'}, charArray0);
      assertArrayEquals(new char[] {'4', 'O', 'O'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.reverse((byte[]) null);
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(byte3, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 566.4602831141126;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3048.987;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1635.262798643, 438.0786739863139);
      assertArrayEquals(new double[] {566.4602831141126, 0.0, 3048.987, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[6] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)5);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {566.4602831141126, 0.0, 3048.987, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {566.4602831141126, 0.0, 3048.987, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short)0;
      objectArray0[5] = (Object) (short)0;
      objectArray0[6] = (Object) 0.0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[7] = object1;
      boolean boolean1 = ArrayUtils.isSameType(566.4602831141126, 566.4602831141126);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isSameType(object1, object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)64);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)900);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2274.6455);
      doubleArray0[1] = (double) (byte)64;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (byte)64;
      doubleArray0[5] = (double) (short)900;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-2274.6455), 78, (-1.0));
      assertArrayEquals(new double[] {(-2274.6455), 64.0, (-1.0), (-1.0), 64.0, 900.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray1 = ArrayUtils.insert(36, (short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-848L);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 78;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 78;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {78L, (-1L), 78L, (-1L), (-848L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      ArrayUtils.reverse((Object[]) null, 32, 93);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 78;
      intArray0[2] = (int) (short)900;
      intArray0[3] = (int) (byte)64;
      intArray0[4] = 36;
      intArray0[5] = 36;
      intArray0[6] = (int) (short)900;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 900, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-376), (-1));
      assertNull(intArray0);
      
      Double double0 = new Double(1072);
      assertNotNull(double0);
      assertEquals(1072.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 2862.980926564101);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 212, 212);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)2;
      objectArray0[1] = (Object) (byte)2;
      objectArray0[2] = (Object) (byte)2;
      ArrayUtils.swap(objectArray0, (-3547), (int) (byte)2, (-265));
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)14;
      shortArray0[2] = (short)14;
      shortArray0[3] = (short) (-987);
      shortArray0[4] = (short)9;
      shortArray0[5] = (short) (-1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short)121;
      objectArray0[1] = (Object) (short) (-987);
      objectArray0[2] = (Object) (short)14;
      objectArray0[3] = (Object) (short)14;
      objectArray0[4] = (Object) (short) (-1);
      objectArray0[5] = (Object) true;
      ArrayUtils.reverse(objectArray0, (-551), (-551));
      assertEquals(6, objectArray0.length);
      
      ArrayUtils.shift(shortArray0, 1048, 2223, 147);
      assertArrayEquals(new short[] {(short)121, (short)14, (short)14, (short) (-987), (short)9, (short) (-1), (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (long) (short) (-458);
      longArray0[2] = (long) (short)14;
      longArray0[3] = (long) (short) (-987);
      longArray0[4] = (long) (short) (-458);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), (-458L), 14L, (-987L), (-458L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1430);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short) (-1430)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (int) (short)36);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short) (-1430)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)67);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)36;
      intArray0[1] = (-45);
      intArray0[2] = (int) (byte)67;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 36);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {36, (-45), 67}, intArray0);
      assertArrayEquals(new int[] {(-45), 67}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (int) (byte)67, (long) (short) (-1430));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 67, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Byte[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      ArrayUtils.swap((byte[]) null, 35, Integer.MAX_VALUE, (-1458));
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 35;
      longArray0[1] = (long) (-1458);
      longArray0[2] = (long) (-1458);
      longArray0[3] = (long) (short)119;
      longArray0[4] = (long) (short)119;
      longArray0[5] = (long) 35;
      longArray0[6] = (long) (short)119;
      longArray0[7] = (long) (short)119;
      longArray0[8] = (long) 35;
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1L);
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {35L, (-1458L), (-1458L), 119L, 119L, 35L, 119L, 119L, 35L}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertArrayEquals(new long[] {35L, (-1458L), (-1458L), 119L, 119L, 35L, 119L, 119L, 35L}, longArray2);
      assertEquals(9, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(9, longArray2.length);
      assertNotNull(longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 52;
      longArray0[1] = (long) 52;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, (long[]) null);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {52L, 52L}, longArray0);
      assertArrayEquals(new long[] {52L, 52L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.swap((float[]) null, 1, 6);
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short) (-1807);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-1807), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1807);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (short) (-1807);
      doubleArray0[3] = (double) 0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-2377.75260549665));
      assertArrayEquals(new double[] {(-1807.0), 1.0, (-1807.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1807.0), 1.0, (-1807.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1807.0);
      objectArray0[1] = (Object) (-1807.0);
      ArrayUtils.reverse(objectArray0, 2223, 2223);
      assertEquals(2, objectArray0.length);
      
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1807);
      shortArray1[1] = (short) (-1807);
      shortArray1[2] = (short) (-1807);
      ArrayUtils.shift(shortArray1, (int) (short) (-1807), (int) (short) (-1807), (-1));
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1807), (short) (-1807), (short) (-1807)}, shortArray1);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-1807);
      longArray0[1] = (long) 2223;
      longArray0[2] = (long) (short) (-1807);
      longArray0[3] = (long) 1;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1807L), 2223L, (-1807L), 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      long[] longArray0 = new long[12];
      boolean boolean0 = ArrayUtils.contains(longArray0, 326L);
      assertEquals(12, longArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)77;
      floatArray0[1] = (float) (byte)77;
      floatArray0[2] = 95.40503F;
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, (float[]) null);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {77.0F, 77.0F, 95.40503F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {77.0F, 77.0F, 95.40503F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 95.40503F;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 555.6665403616;
      doubleArray0[3] = (double) (byte)77;
      doubleArray0[4] = (double) 77.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 77.0F, (int) (byte)0, 4860.402783);
      assertArrayEquals(new double[] {95.405029296875, 2.0, 555.6665403616, 77.0, 77.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      boolean boolean0 = ArrayUtils.contains(longArray0, 2644L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 2L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '>';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '#');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'#', '>'}, charArray0);
      assertArrayEquals(new char[] {'>'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)2;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 3586, (-62));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, (int) (byte)2, (-1220));
      assertNotSame(floatArray1, floatArray0);
      assertSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      String string0 = ArrayUtils.toString(object1, "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '#';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 1);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {35.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[0] = 6;
      intArray0[3] = 0;
      boolean[] booleanArray0 = new boolean[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 6;
      intArray0[1] = 0;
      ArrayUtils.shift(booleanArray0, 6);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, 6);
      assertArrayEquals(new double[] {6.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 2147483633;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 2, 2, 2, 2, 2, 2147483633}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2147483633, 0, (double) 2147483633);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = '`';
      charArray0[2] = 's';
      charArray0[3] = '=';
      char[] charArray1 = ArrayUtils.add(charArray0, '$');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'=', '`', 's', '=', '$'}, charArray1);
      assertArrayEquals(new char[] {'=', '`', 's', '='}, charArray0);
      assertEquals(5, charArray1.length);
      assertEquals(4, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.remove(charArray0, 2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'=', '`', '='}, charArray2);
      assertArrayEquals(new char[] {'=', '`', 's', '='}, charArray0);
      assertEquals(3, charArray2.length);
      assertEquals(4, charArray0.length);
      assertNotNull(charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      
      ArrayUtils.swap(intArray0, 0, 2147483633, 2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 2, 2, 2, 2, 2, 2147483633}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (int) '`';
      intArray2[2] = (int) '=';
      intArray2[3] = 2;
      int[] intArray3 = ArrayUtils.insert(0, intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 2, 2, 2, 2, 2, 2147483633}, intArray0);
      assertArrayEquals(new int[] {96, 0, 61, 2}, intArray2);
      assertArrayEquals(new int[] {96, 0, 61, 2}, intArray3);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(4, intArray2.length);
      assertEquals(4, intArray3.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray4 = ArrayUtils.addAll(intArray2, intArray3);
      assertNotSame(intArray0, intArray4);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray4);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray4);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 2, 2, 2, 2, 2, 2147483633}, intArray0);
      assertArrayEquals(new int[] {96, 0, 61, 2}, intArray2);
      assertArrayEquals(new int[] {96, 0, 61, 2}, intArray3);
      assertArrayEquals(new int[] {96, 0, 61, 2, 96, 0, 61, 2}, intArray4);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(4, intArray2.length);
      assertEquals(4, intArray3.length);
      assertEquals(8, intArray4.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray4);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.insert(8849, (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (int) (byte)21);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short) (byte)2;
      ArrayUtils.shift(shortArray0, (int) (byte)0, 1907, 1406);
      assertArrayEquals(new short[] {(short)6, (short)2}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      float[] floatArray0 = ArrayUtils.insert(1406, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)6;
      int int0 = ArrayUtils.indexOf(longArray0, 6L, 114);
      assertArrayEquals(new long[] {6L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      boolean[] booleanArray1 = new boolean[5];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[2] = false;
      booleanArray1[4] = true;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertEquals(8, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      ArrayUtils.shift((double[]) null, (-106));
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      MockRandom mockRandom0 = new MockRandom((-106));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, (-2143353870), 0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean[] booleanArray3 = ArrayUtils.addAll(booleanArray2, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      byte byte0 = (byte)21;
      Byte byte1 = new Byte((byte)21);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)21, (byte)byte1);
      
      Byte byte2 = new Byte((byte)37);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)37, (byte)byte2);
      
      Byte byte3 = new Byte((byte)21);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)21, (byte)byte3);
      
      Byte byte4 = new Byte((byte)80);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte)80, (byte)byte4);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte3;
      Byte byte5 = new Byte((byte) (-68));
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertEquals((byte) (-68), (byte)byte5);
      
      byteArray0[1] = byte5;
      Byte byte6 = new Byte((byte)80);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertEquals((byte)80, (byte)byte6);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Byte byte7 = new Byte((byte) (-68));
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertEquals((byte) (-68), (byte)byte7);
      
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte7);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray1, (Random) mockRandom0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Integer integer0 = new Integer(2043);
      assertNotNull(integer0);
      assertEquals(2043, (int)integer0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(1, booleanArray2.length);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray3 = new boolean[1];
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      
      booleanArray3[0] = false;
      boolean[] booleanArray4 = ArrayUtils.subarray(booleanArray3, (int) (byte) (-68), 50);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotSame(booleanArray4, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray4));
      assertEquals(1, booleanArray3.length);
      assertEquals(1, booleanArray4.length);
      assertNotNull(booleanArray4);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      
      boolean[] booleanArray5 = ArrayUtils.addAll(booleanArray0, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray3, booleanArray5);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray5, booleanArray0);
      assertNotSame(booleanArray5, booleanArray4);
      assertNotSame(booleanArray5, booleanArray1);
      assertNotSame(booleanArray5, booleanArray3);
      assertNotSame(booleanArray5, booleanArray2);
      assertNotSame(booleanArray0, booleanArray4);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray5);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray5));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(1, booleanArray3.length);
      assertEquals(3, booleanArray5.length);
      assertEquals(2, booleanArray0.length);
      assertNotNull(booleanArray5);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray4));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray5.equals((Object)booleanArray0));
      assertFalse(booleanArray5.equals((Object)booleanArray4));
      assertFalse(booleanArray5.equals((Object)booleanArray1));
      assertFalse(booleanArray5.equals((Object)booleanArray3));
      assertFalse(booleanArray5.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray4));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)37;
      floatArray0[1] = (float) (byte) (-68);
      floatArray0[2] = (float) 50;
      floatArray0[3] = (float) byte0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-662.4557F), (int) (byte)21);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {37.0F, (-68.0F), 50.0F, 21.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '4';
      charArray0[2] = '\'';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'-', '4', '\''}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '\'';
      objectArray0[1] = (Object) '4';
      objectArray0[2] = (Object) '-';
      objectArray0[3] = (Object) '-';
      objectArray0[4] = (Object) '4';
      objectArray0[5] = (Object) '\'';
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(6, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2747.4679);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)2);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (-2274.6455), 1, (-2274.6455));
      assertArrayEquals(new double[] {(-2747.4679), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray1 = ArrayUtils.insert((int) (short)900, (short[]) null, (short[]) null);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'r';
      charArray0[2] = 'm';
      Boolean boolean1 = new Boolean("");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[6];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false}, booleanArray2));
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      ArrayUtils.shift((char[]) null, (-1));
      ArrayUtils.reverse((double[]) null);
      char[] charArray1 = ArrayUtils.add((char[]) null, 'l');
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray1);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) (-1));
      assertNull(doubleArray0);
      
      ArrayUtils.shift((double[]) null, 7, 1114111, 7);
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, 48);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object2 = ArrayUtils.get(objectArray1, 48, object0);
      assertSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(object2, object1);
      assertSame(object2, object0);
      assertEquals(0, objectArray1.length);
      assertNotNull(object2);
      assertFalse(object0.equals((Object)object1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[0] = object2;
      objectArray0[1] = (Object) false;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) true;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(5, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(boolean0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 3);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      assertNotNull(classArray1);
      
      Byte[] byteArray0 = ArrayUtils.toArray((Byte[]) null);
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 48;
      doubleArray0[1] = (double) 48;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 48;
      doubleArray0[4] = (double) 48;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 48.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {48.0, 0.0, 48.0, 48.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {48.0, 48.0, 0.0, 48.0, 48.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)8}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)8;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 8L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)1;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '0';
      charArray0[2] = '{';
      charArray0[3] = 'F';
      charArray0[4] = '^';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'k');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'3', '0', '{', 'F', '^'}, charArray0);
      assertArrayEquals(new char[] {'3', '0', '{', 'F', '^'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-4184L));
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {0L, 0L, 8L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.get(objectArray0, 4);
      assertEquals(9, objectArray0.length);
      assertNull(object0);
      
      objectArray0[3] = null;
      Byte byte0 = new Byte((byte) (-128));
      assertNotNull(byte0);
      assertEquals((byte) (-128), (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(9, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)8}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)8;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 8L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)1;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '0';
      charArray0[2] = '{';
      charArray0[3] = 'F';
      charArray0[4] = '^';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'k');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'3', '0', '{', 'F', '^'}, charArray0);
      assertArrayEquals(new char[] {'3', '0', '{', 'F', '^'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Byte[] byteArray2 = new Byte[5];
      byteArray2[0] = (Byte) (byte)0;
      Byte byte1 = new Byte((byte) (-37));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-37), (byte)byte1);
      
      byteArray2[1] = byte1;
      byteArray2[2] = (Byte) (byte)8;
      byteArray2[3] = (Byte) (byte)0;
      byteArray2[4] = (Byte) (byte)1;
      Byte byte2 = ArrayUtils.get(byteArray2, (int) byte0);
      assertEquals(5, byteArray2.length);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-37), (byte)byte2);
      
      String string0 = ArrayUtils.toString((Object) byte2);
      assertEquals(5, byteArray2.length);
      assertNotNull(string0);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals("-37", string0);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'w';
      doubleArray0[1] = (double) 'w';
      doubleArray0[2] = (double) 59;
      doubleArray0[3] = (double) 59;
      doubleArray0[4] = (double) 59;
      doubleArray0[5] = (double) 'w';
      doubleArray0[6] = (double) 59;
      doubleArray0[7] = (double) 59;
      ArrayUtils.swap(doubleArray0, 59, (-119));
      assertArrayEquals(new double[] {119.0, 119.0, 59.0, 59.0, 59.0, 119.0, 59.0, 59.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 59;
      floatArray0[1] = (float) 59;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {59.0F, 59.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)64;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)7, (int) (byte) (-1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)64, (byte)7, (byte) (-1), (byte)64}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('w');
      assertNotNull(character0);
      assertEquals('w', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('w');
      assertNotNull(character1);
      assertEquals('w', (char)character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertNotNull(characterArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)64;
      shortArray0[1] = (short) (byte)64;
      shortArray0[2] = (short) (byte)7;
      shortArray0[3] = (short) (byte)64;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)2475);
      assertArrayEquals(new short[] {(short)64, (short)64, (short)7, (short)64}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 2);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, (-4979));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '>';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '#');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'#', '>'}, charArray0);
      assertArrayEquals(new char[] {'>'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1152L;
      longArray0[1] = (long) (byte)21;
      longArray0[2] = (-1L);
      longArray0[3] = (long) '>';
      long[] longArray1 = ArrayUtils.add(longArray0, 1, (-1L));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {1152L, (-1L), 21L, (-1L), 62L}, longArray1);
      assertArrayEquals(new long[] {1152L, 21L, (-1L), 62L}, longArray0);
      assertEquals(5, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)2;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 3586, (-62));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, (int) (byte)2, (-1220));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences((int[]) null, 1);
      assertNull(intArray1);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      String string0 = ArrayUtils.toString(object1, "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArrayUtils.swap((float[]) null, 1899, 1899);
      int int0 = ArrayUtils.indexOf((short[]) null, (short)160);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNull(object1);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs((-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)6;
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-726);
      shortArray1[1] = (short) (byte)2;
      boolean boolean1 = ArrayUtils.isSorted(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-726), (short)2}, shortArray1);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-726);
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (short)36;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-726), 2, 36}, intArray0);
      assertArrayEquals(new int[] {(-726), 2, 36}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 36;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {36.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {36.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) 36.0F;
      doubleArray0[2] = (double) (short)36;
      doubleArray0[3] = (double) 36.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 36, (-1477), 5188.50054);
      assertArrayEquals(new double[] {2.0, 36.0, 36.0, 36.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[7] = (float) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2615.1643F, 0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(false);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean("Q:dG=d;Z1UCt");
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean2;
      Boolean boolean4 = new Boolean("m7%:`5");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      
      booleanArray0[1] = boolean4;
      booleanArray0[3] = boolean3;
      booleanArray0[4] = boolean1;
      booleanArray0[5] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray1));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.shift(floatArray0, 71);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 5);
      Class<Byte> class0 = Byte.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.TYPE;
      assertSame(class2, class0);
      assertNotSame(class2, class1);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("byte", class2.toString());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertNotNull(class2);
      assertFalse(class2.equals((Object)class1));
      
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[4] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(5, classArray1.length);
      assertEquals(5, classArray0.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      float[] floatArray0 = new float[5];
      ArrayUtils.shift(floatArray0, 88);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (-4790L);
      longArray0[2] = (-4790L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)0, 2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, (-4790L), (-4790L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-4790L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)69;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 114);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 114, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3684.4;
      doubleArray0[1] = 339.12646611;
      doubleArray0[2] = (-1881.088752516286);
      doubleArray0[3] = 867.92511;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 218.028;
      doubleArray0[6] = (-1048.0137445199525);
      doubleArray0[7] = (-388.1013);
      ArrayUtils.shift(doubleArray0, (-1219), (-95), Integer.MAX_VALUE);
      assertArrayEquals(new double[] {3684.4, 339.12646611, (-1881.088752516286), 867.92511, (-1.0), 218.028, (-1048.0137445199525), (-388.1013)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 218.028;
      objectArray0[1] = (Object) 3684.4;
      objectArray0[2] = (Object) 339.12646611;
      ArrayUtils.shift(objectArray0, (-1219));
      assertEquals(3, objectArray0.length);
      
      short[] shortArray0 = new short[3];
      ArrayUtils.shift(shortArray0, (-378), (int) (short) (-2431), (-95));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0, (-378), (-1219));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.reverse(shortArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-294.278);
      doubleArray0[1] = (-1188.351);
      doubleArray0[2] = 0.0;
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      MockRandom mockRandom0 = new MockRandom(2);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(2);
      assertEquals(0, int0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      mockRandom0.setSeed(2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-84)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(16, (int)integer0);
      
      Integer integer1 = new Integer(322);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(322, (int)integer1);
      
      Integer integer2 = new Integer((byte) (-84));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals((-84), (int)integer2);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-7);
      byteArray1[1] = (byte) (-84);
      ArrayUtils.shift(byteArray1, 51, (int) (byte) (-7), 0);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-84)}, byteArray1);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse((short[]) null, 363, (int) (byte) (-84));
      short[] shortArray1 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, (-1));
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-1);
      ArrayUtils.swap(byteArray0, (int) (byte)3, (int) (byte)3, 9);
      assertArrayEquals(new byte[] {(byte)109, (byte)0, (byte)109, (byte)109, (byte) (-1)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[3];
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = 0L;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {2147483647L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      ArrayUtils.shift((short[]) null, (-2146581250), Integer.MAX_VALUE, (-6));
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      ArrayUtils.shift((short[]) null, (-1907), (-1907), (-1907));
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-18);
      intArray0[1] = (-18);
      intArray0[2] = 0;
      intArray0[3] = 1;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1);
      assertArrayEquals(new int[] {(-18), (-18), 0, 1, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(3, int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-62);
      shortArray0[2] = (short)114;
      shortArray0[3] = (short)114;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)114, (-18));
      assertArrayEquals(new short[] {(short)0, (short) (-62), (short)114, (short)114}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.reverse((float[]) null, (int) (short)0, Integer.MAX_VALUE);
      int int2 = ArrayUtils.lastIndexOf((float[]) null, 48.0F, 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      int int3 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) byte0);
      assertEquals(0, byteArray0.length);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-62), (short)114, (short)114}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-62), (short)114, (short)114}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-62), (short)114, (short)114}, shortArray0);
      assertEquals(0, intArray1.length);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertNotNull(shortArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '_');
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3547);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-19), 52, (int) (byte) (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      ArrayUtils.swap((short[]) null, Integer.MAX_VALUE, 82);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 52;
      intArray0[3] = Integer.MAX_VALUE;
      ArrayUtils.shift(intArray0, 69);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, (-1), Integer.MAX_VALUE, 52}, intArray0);
      assertEquals(4, intArray0.length);
      
      ArrayUtils.swap(booleanArray0, Integer.MAX_VALUE, (-953));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-17));
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences((double[]) null, 4762.0463477192);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 51, (-19), 52);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      ArrayUtils.swap((short[]) null, 1455, 82);
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Byte byte1 = new Byte((byte)37);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)37, (byte)byte1);
      
      Byte byte2 = new Byte((byte)21);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)21, (byte)byte2);
      
      Byte byte3 = new Byte((byte)80);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)80, (byte)byte3);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)37, (int) (byte)80, 2224);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 82;
      intArray0[2] = 1211;
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = '~';
      charArray0[2] = '5';
      charArray0[3] = '~';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'5', '~', '5', '~'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.swap((short[]) null, (int) (byte)21, (-2130843324));
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, 48);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert(48, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = 'u';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'', 'u'}, charArray0);
      assertArrayEquals(new char[] {'', '', 'u'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1726));
      assertNotNull(short0);
      assertEquals((short) (-1726), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short) (-1726)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-256);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)39;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)39}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)39}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2424;
      intArray0[1] = 70;
      intArray0[2] = 47;
      intArray0[3] = 0;
      intArray0[4] = (-2877);
      intArray0[5] = 3;
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '&';
      charArray0[6] = '<';
      charArray0[7] = '<';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '<');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '&', '<', '<'}, charArray1);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '&', '<', '<'}, charArray0);
      assertEquals(7, charArray1.length);
      assertEquals(8, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)112);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) '<';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (-1199), (double) (-2877));
      assertArrayEquals(new double[] {0.0, 60.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '&', '<', '<'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = 1924.0F;
      floatArray0[2] = (float) 2424;
      floatArray0[3] = (float) '<';
      floatArray0[4] = (float) '<';
      floatArray0[5] = (float) '<';
      floatArray0[6] = (float) '<';
      floatArray0[7] = (float) '<';
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {60.0F, 60.0F, 60.0F, 60.0F, 60.0F, 2424.0F, 1924.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-36);
      Byte byte1 = new Byte((byte) (-36));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-36), (byte)byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-68);
      Byte byte3 = new Byte((byte) (-68));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-68), (byte)byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte) (-36));
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte) (-36), (byte)byte4);
      
      ArrayUtils.reverse((double[]) null, (int) (byte) (-36), (int) byte2);
      assertFalse(byte2 == byte0);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte) (-26);
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift((Object[]) byteArray0, (int) byte0);
      assertEquals(3, byteArray0.length);
      assertFalse(byte0 == byte2);
      
      String string0 = ArrayUtils.toString((Object) byte3);
      assertNotNull(string0);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte4));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals("-68", string0);
      
      ArrayUtils.shift((int[]) null, (-2145922975));
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) byte2;
      shortArray0[1] = (short) (byte) (-68);
      shortArray0[2] = (short) (-281);
      shortArray0[3] = (short) byte0;
      ArrayUtils.reverse(shortArray0, 115, (-2145921840));
      assertArrayEquals(new short[] {(short) (-68), (short) (-68), (short) (-281), (short) (-36)}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-2959.0F), (-2144112401));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)14;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[3] = (-1.0);
      doubleArray0[5] = (double) (-175);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-175);
      intArray0[2] = (-175);
      intArray0[3] = (int) (byte)14;
      intArray0[4] = (-175);
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (-175);
      ArrayUtils.shift(intArray0, (-1972), 4, (-1932735283));
      assertArrayEquals(new int[] {14, 0, (-175), (-175), (-175), 0, 0, (-175)}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.0F);
      floatArray1[1] = 0.0F;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 49);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[1] = 'U';
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) '\u0000';
      objectArray0[2] = (Object) 'U';
      ArrayUtils.reverse(objectArray0, 49, (-1162));
      assertEquals(3, objectArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 2223, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Float[] floatArray3 = ArrayUtils.toObject(floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray3.length);
      assertNotNull(floatArray3);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2223;
      intArray0[1] = (-1162);
      intArray0[2] = (int) 'U';
      intArray0[3] = 49;
      intArray0[4] = 49;
      intArray0[5] = (-1162);
      intArray0[6] = (-334);
      intArray0[7] = 2223;
      ArrayUtils.shift(intArray0, 49);
      assertArrayEquals(new int[] {2223, 2223, (-1162), 85, 49, 49, (-1162), (-334)}, intArray0);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray1, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, 2130, (short) (-670));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2130, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-758), (-758));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.swap((float[]) null, 1, 6);
      short[] shortArray0 = new short[7];
      short short0 = (short) (-1807);
      shortArray0[5] = (short) (-1807);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-1807), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1807);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (short) (-1807);
      doubleArray0[3] = (double) 0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-2377.75260549665));
      assertArrayEquals(new double[] {(-1807.0), 1.0, (-1807.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1807.0), 1.0, (-1807.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[16];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = '|';
      charArray0[3] = ',';
      charArray0[4] = '[';
      charArray0[5] = ',';
      ArrayUtils.shift(charArray0, (-385));
      assertEquals(16, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 502, (short)76);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 502, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      Boolean boolean3 = new Boolean("");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4);
      
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-174.816882066);
      boolean boolean6 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-174.816882066)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean6);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) boolean3;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) boolean4;
      objectArray0[3] = (Object) (-174.816882066);
      objectArray0[4] = (Object) boolean5;
      objectArray0[5] = (Object) (-174.816882066);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) boolean5;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(9, objectArray1.length);
      assertEquals(9, objectArray0.length);
      assertNotNull(objectArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-377);
      ArrayUtils.swap(floatArray0, (-377), (-377), (-377));
      assertArrayEquals(new float[] {(-377.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-687);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-687), (int) (byte) (-1));
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new float[] {(-687.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean((String) null);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      
      double[] doubleArray0 = new double[0];
      boolean boolean4 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean4);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) boolean2;
      objectArray0[1] = (Object) (byte) (-1);
      objectArray0[2] = (Object) (byte) (-1);
      objectArray0[3] = (Object) boolean0;
      ArrayUtils.reverse(objectArray0, (-687), 125);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-19);
      longArray0[2] = 0L;
      ArrayUtils.reverse(longArray0, (int) (short) (-19), 1130);
      assertArrayEquals(new long[] {0L, 0L, (-19L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)64);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)900);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2274.6455);
      doubleArray0[1] = (double) (byte)64;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (byte)64;
      doubleArray0[5] = (double) (short)900;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-2274.6455), 78, (-1.0));
      assertArrayEquals(new double[] {(-2274.6455), 64.0, (-1.0), (-1.0), 64.0, 900.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray1 = ArrayUtils.insert(36, (short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-848L);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 78;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 78;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {78L, (-1L), 78L, (-1L), (-848L)}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-411);
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.reverse(objectArray0, (-1162), (-1162));
      assertEquals(0, objectArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3582;
      ArrayUtils.shift(shortArray0, 4, (-1162), (int) (short)3582);
      assertArrayEquals(new short[] {(short)3582}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[4] = (-18);
      intArray0[5] = 4;
      ArrayUtils.shift(intArray0, 35);
      assertArrayEquals(new int[] {4, 4, Integer.MAX_VALUE, 0, (-18), 4, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, 214);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 214, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte)125;
      byteArray0[8] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-113));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-69), (byte)8, (byte)110, (byte)45, (byte) (-8), (byte) (-24), (byte)125, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-69), (byte) (-113), (byte)8, (byte)110, (byte)45, (byte) (-8), (byte) (-24), (byte)125, (byte) (-1)}, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-27);
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-27);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -27, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      int[] intArray0 = new int[4];
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertEquals(4, intArray0.length);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray2 = ArrayUtils.addFirst(longArray1, (long) (byte)0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray2.length);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)73;
      intArray0[2] = (int) (byte)58;
      intArray0[3] = (int) (byte)111;
      intArray0[4] = (int) (byte)6;
      intArray0[5] = (int) (byte)6;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)111;
      intArray0[8] = (int) (byte)73;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      Byte[] byteArray0 = ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[3] = (double) (short) (-458);
      Short short0 = new Short((short) (-458));
      assertNotNull(short0);
      assertEquals((short) (-458), (short)short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-458));
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2280));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-256));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Byte byte0 = new Byte((byte)6);
      assertNotNull(byte0);
      assertEquals((byte)6, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      byteArray0[7] = byte0;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-294.278);
      doubleArray0[1] = (-1188.351);
      doubleArray0[2] = 0.0;
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      MockRandom mockRandom0 = new MockRandom(2);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      mockRandom0.setSeed(2);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1114.30275), 1);
      assertArrayEquals(new double[] {(-294.278), (-1188.351), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-2059);
      intArray0[4] = 1;
      intArray0[5] = 2;
      intArray0[6] = 1;
      intArray0[7] = (-1);
      intArray0[8] = 2;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 312);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {2, 1, 1, (-2059), 1, 2, 1, (-1), 2}, intArray1);
      assertArrayEquals(new int[] {2, 1, 1, (-2059), 1, 2, 1, (-1), 2}, intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)6);
      assertNotNull(byte0);
      assertEquals((byte)6, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Short short0 = new Short((byte) (-49));
      assertNotNull(short0);
      assertEquals((short) (-49), (short)short0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)6;
      doubleArray0[1] = (-1470.01859801);
      doubleArray0[2] = (double) (byte) (-49);
      doubleArray0[3] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)6, 0);
      assertArrayEquals(new double[] {6.0, (-1470.01859801), (-49.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 0.0, 0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1.5);
      assertNotNull(double0);
      assertEquals(1.5, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray2 = ArrayUtils.clone(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray1);
      assertArrayEquals(new int[] {(-1)}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) 0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, (-1));
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-1);
      ArrayUtils.swap(byteArray0, (int) (byte)3, (int) (byte)3, 9);
      assertArrayEquals(new byte[] {(byte)109, (byte)0, (byte)109, (byte)109, (byte) (-1)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)109;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = 0L;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {2147483647L, 0L, 109L}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray0);
      assertSame(byteArray0, objectArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-68);
      Byte byte3 = new Byte((byte) (-68));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-68), (byte)byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)0);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte)0, (byte)byte4);
      
      ArrayUtils.reverse((double[]) null, (int) (byte)0, (int) byte2);
      assertFalse(byte2 == byte0);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte) (-1);
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte)2, (byte) (-1)}, byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      char[] charArray1 = ArrayUtils.add(charArray0, ':');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) byte0;
      longArray0[1] = (-1L);
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1375L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), 0L, (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), 0L, (-1L), (-1L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray0);
      assertSame(byteArray0, objectArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2747.4679);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 2, 2, Integer.MAX_VALUE, 2, 2, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) Integer.MAX_VALUE, 0, (double) Integer.MAX_VALUE);
      assertArrayEquals(new double[] {(-2747.4679), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = '`';
      charArray0[2] = 's';
      charArray0[3] = '=';
      char[] charArray1 = ArrayUtils.add(charArray0, '$');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'=', '`', 's', '=', '$'}, charArray1);
      assertArrayEquals(new char[] {'=', '`', 's', '='}, charArray0);
      assertEquals(5, charArray1.length);
      assertEquals(4, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.remove(charArray0, 2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertArrayEquals(new char[] {'=', '`', '='}, charArray2);
      assertArrayEquals(new char[] {'=', '`', 's', '='}, charArray0);
      assertEquals(3, charArray2.length);
      assertEquals(4, charArray0.length);
      assertNotNull(charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      
      ArrayUtils.swap(intArray0, 0, Integer.MAX_VALUE, 2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 2, 2, Integer.MAX_VALUE, 2, 2, Integer.MAX_VALUE}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (int) '`';
      intArray2[1] = (int) 's';
      intArray2[2] = (int) '`';
      intArray2[3] = 2;
      int[] intArray3 = ArrayUtils.insert(0, intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertArrayEquals(new int[] {0, 2, 2, Integer.MAX_VALUE, 2, 2, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {96, 115, 96, 2}, intArray2);
      assertArrayEquals(new int[] {96, 115, 96, 2}, intArray3);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(4, intArray2.length);
      assertEquals(4, intArray3.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray4 = ArrayUtils.addAll(intArray2, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray4);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray4);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray4);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray4);
      assertArrayEquals(new int[] {0, 2, 2, Integer.MAX_VALUE, 2, 2, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {96, 115, 96, 2}, intArray2);
      assertArrayEquals(new int[] {96, 115, 96, 2}, intArray3);
      assertArrayEquals(new int[] {96, 115, 96, 2, 96, 115, 96, 2}, intArray4);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(4, intArray2.length);
      assertEquals(4, intArray3.length);
      assertEquals(8, intArray4.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray4);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray3));
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)37);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Double double0 = new Double(854);
      assertNotNull(double0);
      assertEquals(854.0, (double)double0, 0.01);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 93, (int) (byte)37);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'c';
      intArray0[1] = (int) 'c';
      intArray0[2] = (int) 'c';
      intArray0[3] = (int) (byte)37;
      intArray0[4] = 854;
      intArray0[5] = 854;
      intArray0[6] = 93;
      ArrayUtils.shift(intArray0, 93, 1, (-581));
      assertArrayEquals(new int[] {99, 99, 99, 37, 854, 854, 93}, intArray0);
      assertEquals(7, intArray0.length);
      
      ArrayUtils.reverse(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      
      ArrayUtils.shift((Object[]) null, 51);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, (-3701));
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)6;
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-726);
      shortArray1[1] = (short)36;
      boolean boolean1 = ArrayUtils.isSorted(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-726), (short)36}, shortArray1);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 681.09784F;
      floatArray0[1] = (-1.0F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 681.09784F);
      assertArrayEquals(new float[] {681.09784F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-356L);
      longArray0[1] = 1L;
      longArray0[2] = (-1797L);
      longArray0[3] = (-6461L);
      longArray0[4] = 4012L;
      longArray0[5] = 0L;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-356L), 1L, (-1797L), (-6461L), 4012L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('w');
      assertNotNull(character0);
      assertEquals('w', (char)character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'p');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2357.833F);
      floatArray0[1] = (float) 45;
      floatArray0[2] = (float) '{';
      floatArray0[3] = (float) 'R';
      floatArray0[4] = (float) 45;
      ArrayUtils.swap(floatArray0, 1, (-23), 1052);
      assertArrayEquals(new float[] {45.0F, 123.0F, 82.0F, 45.0F, (-2357.833F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)93;
      byte[] byteArray1 = ArrayUtils.insert(4012, byteArray0, (byte[]) null);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)3, (byte)93, (byte)93}, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)3, (byte)93, (byte)93}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-758), (-758));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.swap((float[]) null, 1, 6);
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short) (-1807);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-1807), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1807);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (short) (-1807);
      doubleArray0[3] = (double) 0;
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.reverse((float[]) null, 0, (-3322));
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (float) 6, (-1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte[] byteArray1 = new Byte[6];
      byteArray1[0] = byte0;
      byteArray1[1] = byte0;
      byteArray1[2] = byte0;
      byteArray1[3] = byte0;
      byteArray1[4] = byte0;
      byteArray1[5] = byte0;
      Byte byte1 = ArrayUtils.get(byteArray1, (-1));
      assertEquals(6, byteArray1.length);
      assertNull(byte1);
      
      int int2 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-1807), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      Float float0 = new Float((-1229.737F));
      assertNotNull(float0);
      assertEquals((-1229.737F), (float)float0, 0.01F);
      
      Byte byte0 = new Byte((byte)4);
      assertNotNull(byte0);
      assertEquals((byte)4, (byte)byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) byte0, 458);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)13;
      doubleArray0[1] = (double) (byte)13;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)13;
      shortArray0[1] = (short) (byte)13;
      shortArray0[2] = (short)17;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)13, (int) (byte)13);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)13, (short)13, (short)17}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 1078L, 2626);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1732);
      shortArray0[1] = (short) (-1732);
      shortArray0[2] = (short)5108;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1732), 815);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1732), (short) (-1732), (short)5108}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1732), (short) (-1732), (short)5108}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = Float.NaN;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-4546), (-2988.0F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4546, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.add((float[]) null, 2145.2463F);
      assertArrayEquals(new float[] {2145.2463F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, 3389);
      assertEquals(7, objectArray0.length);
      assertNull(object0);
      
      objectArray0[3] = null;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) true;
      objectArray1[1] = (Object) true;
      objectArray1[2] = (Object) false;
      objectArray1[3] = (Object) true;
      int int0 = (-771);
      Object object1 = new Object();
      assertNotNull(object1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)8;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1072);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)8}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-18));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1.0), 91, (double) (byte)21);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray1 = ArrayUtils.insert(68, (short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-91);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (int) (byte)21);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)2, (byte) (-91)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-91)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = '&';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'8', '&'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.reverse((long[]) null);
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)37);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Double double0 = new Double(857);
      assertNotNull(double0);
      assertEquals(857.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)37);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("{0, 6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(bitSet0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int int0 = ArrayUtils.indexOf((Object[]) doubleArray1, (Object) null);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 857;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-819.0F));
      assertArrayEquals(new float[] {857.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.indexOf(byteArray0, (byte)37);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-759.6F);
      Byte[] byteArray0 = ArrayUtils.insert((-149), (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(3380L);
      assertNotNull(long0);
      assertEquals(3380L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(160L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(160L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-1L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-1L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[0]);
      assertEquals(7, longArray0.length);
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertEquals(3380L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((long) longArray0[0]);
      assertEquals(7, longArray0.length);
      assertNotNull(long4);
      assertTrue(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long0));
      assertEquals(3380L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((long) longArray0[0]);
      assertEquals(7, longArray0.length);
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long0));
      assertEquals(3380L, (long)long5);
      
      longArray0[5] = long5;
      Long long6 = new Long((-879L));
      assertNotNull(long6);
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long5));
      assertEquals((-879L), (long)long6);
      
      longArray0[6] = long6;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {3380L, 160L, (-1L), 3380L, 3380L, 3380L, (-879L)}, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Byte[] byteArray2 = ArrayUtils.insert(3819, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byteArray0[1]);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-786.36132586);
      doubleArray0[1] = 2862.980926564101;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1303.58299);
      doubleArray0[4] = 10.2758469175;
      doubleArray0[5] = (-786.36132586);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3150.466667));
      assertArrayEquals(new double[] {(-786.36132586), 2862.980926564101, (-1.0), (-1303.58299), 10.2758469175, (-786.36132586)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'V'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-95);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-9));
      assertEquals(20, byteArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-95);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-95), (-1), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.insert((int)  (-9), byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shift(floatArray0, 2779);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2779;
      intArray0[1] = 2779;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2779, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      Byte byte0 = new Byte((byte)14);
      assertNotNull(byte0);
      assertEquals((byte)14, (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)14;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[3] = (-1.0);
      doubleArray0[5] = (double) (-175);
      Float float0 = new Float((float) (byte)14);
      assertNotNull(float0);
      assertEquals(14.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      Float float1 = new Float(21.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(21.0F, (float)float1, 0.01F);
      
      floatArray0[2] = float1;
      floatArray0[3] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 21.0F);
      assertArrayEquals(new float[] {14.0F, 14.0F, 21.0F, 14.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {14.0F, 14.0F, 21.0F, 14.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) floatArray0, (Object) null);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(4, floatArray0.length);
      assertNotNull(bitSet0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 7);
      Byte byte2 = new Byte((byte)3);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)3, (byte)byte2);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte2, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte1, byte1);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry2);
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      Byte byte3 = new Byte((byte) (-68));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte) (-68), (byte)byte3);
      
      Byte byte4 = new Byte((byte)0);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte4);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte3, byte4);
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte4));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      Byte byte5 = new Byte((byte)14);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte5);
      
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(byte0, byte5);
      assertNotNull(abstractMap_SimpleEntry0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte3));
      assertTrue(byte0.equals((Object)byte5));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte3));
      assertTrue(byte0.equals((Object)byte5));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry6;
      int[] intArray0 = new int[7];
      intArray0[0] = 2146787408;
      intArray0[1] = (int) (byte)3;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte) (-68);
      intArray0[4] = 3038;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)14;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(abstractMap_SimpleImmutableEntryArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146787408, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2484.42035219362;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 2484.42035219362;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, (-1430));
      assertArrayEquals(new double[] {1.5, (-1.0), 0.0, 0.0, 0.0, 0.0, 2484.42035219362, 0.0, 2484.42035219362}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 52;
      intArray0[1] = (-1430);
      intArray0[2] = (-1430);
      intArray0[3] = (-1430);
      MockRandom mockRandom0 = new MockRandom(3698L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {52, (-1430), (-1430), (-1430)}, intArray0);
      assertEquals(4, intArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)3);
      assertNotNull(byte0);
      assertEquals((byte)3, (byte)byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(object0, (Object) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-256);
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, (-256));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short)1816;
      shortArray0[2] = (short) (byte) (-91);
      shortArray0[3] = (short)6;
      ArrayUtils.shift(shortArray0, Integer.MAX_VALUE, (-662), 1);
      assertArrayEquals(new short[] {(short)2, (short)1816, (short) (-91), (short)6}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)14;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[3] = (-1.0);
      doubleArray0[5] = (double) (-175);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.953807708835627, (int) (byte)0);
      assertArrayEquals(new double[] {14.0, 0.0, 0.0, (-1.0), 0.0, (-175.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-175);
      int int1 = ArrayUtils.indexOf(longArray0, (-383L), 37);
      assertArrayEquals(new long[] {(-175L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 508, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 508, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = 'l';
      charArray0[2] = 'S';
      charArray0[3] = ';';
      charArray0[4] = 'U';
      charArray0[5] = '~';
      charArray0[6] = '.';
      charArray0[7] = 'i';
      ArrayUtils.shift(charArray0, 4);
      assertArrayEquals(new char[] {'U', '~', '.', 'i', '&', 'l', 'S', ';'}, charArray0);
      assertEquals(8, charArray0.length);
      
      char[] charArray1 = ArrayUtils.add(charArray0, '=');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'U', '~', '.', 'i', '&', 'l', 'S', ';'}, charArray0);
      assertArrayEquals(new char[] {'U', '~', '.', 'i', '&', 'l', 'S', ';', '='}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)1, (byte)byte2);
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)85;
      Byte byte4 = new Byte((byte)85);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte)85, (byte)byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)85);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertEquals((byte)85, (byte)byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)90);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertEquals((byte)90, (byte)byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte(byte3);
      assertNotNull(byte7);
      assertFalse(byte3 == byte0);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte5));
      assertEquals((byte)85, (byte)byte7);
      
      byteArray0[5] = byte7;
      byte byte8 = (byte) (-97);
      Byte byte9 = new Byte((byte) (-97));
      assertNotNull(byte9);
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte2));
      assertTrue(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte6));
      assertEquals((byte) (-97), (byte)byte9);
      
      byteArray0[6] = byte9;
      Byte byte10 = new Byte(byte0);
      assertNotNull(byte10);
      assertFalse(byte0 == byte8);
      assertFalse(byte0 == byte3);
      assertFalse(byte10.equals((Object)byte4));
      assertTrue(byte10.equals((Object)byte1));
      assertFalse(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte7));
      assertTrue(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte5));
      assertFalse(byte10.equals((Object)byte9));
      assertTrue(byte10.equals((Object)byte2));
      assertFalse(byte10.equals((Object)byte6));
      assertFalse(byte10.equals((Object)byte3));
      assertEquals((byte)1, (byte)byte10);
      
      byteArray0[7] = byte10;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, (int) byte8);
      assertEquals(8, byteArray0.length);
      assertFalse(byte8 == byte0);
      assertFalse(byte8 == byte3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)7);
      assertNotNull(short0);
      assertEquals((short)7, (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)7}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2561, (int) (short)386);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockRandom0;
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(1, objectArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((short) (-3409));
      Short short0 = new Short((short)35);
      assertNotNull(short0);
      assertEquals((short)35, (short)short0);
      
      Short[] shortArray1 = new Short[0];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[7] = 13;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 13);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 13}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 13}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(4064.578688);
      assertNotNull(double0);
      assertEquals(4064.578688, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertArrayEquals(new double[] {4064.578688}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1260);
      intArray0[1] = 2;
      intArray0[2] = (-2130843324);
      intArray0[3] = 3486;
      intArray0[4] = 901;
      int[] intArray1 = ArrayUtils.subarray(intArray0, Integer.MIN_VALUE, (-2059));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1260), 2, (-2130843324), 3486, 901}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1017), (-1017));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.6844856));
      assertArrayEquals(new double[] {(-1.6844856)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 9, 9);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1705.994F);
      assertArrayEquals(new float[] {1705.994F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {1705.994F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) floatArray0, (Object) null);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte)40;
      longArray0[2] = (long) (byte)40;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-1L), 40L, 40L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-38);
      doubleArray0[2] = (double) (-38);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 48;
      longArray0[1] = (long) 13;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-38.0);
      objectArray0[1] = (Object) 48L;
      objectArray0[2] = (Object) (-38.0);
      objectArray0[3] = (Object) 48L;
      objectArray0[4] = (Object) mockRandom0;
      objectArray0[5] = (Object) 13L;
      Byte byte0 = new Byte((byte)72);
      assertNotNull(byte0);
      assertEquals((byte)72, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)72, object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 13);
      assertEquals(6, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)126;
      floatArray0[1] = (float) (byte)126;
      ArrayUtils.shift(floatArray0, 88);
      assertArrayEquals(new float[] {0.0F, 126.0F, 126.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Double double0 = new Double(126.0F);
      assertNotNull(double0);
      assertEquals(126.0, (double)double0, 0.01);
      
      org.evosuite.runtime.Random.setNextRandom((byte)126);
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte) (-26));
      assertNotNull(byte0);
      assertEquals((byte) (-26), (byte)byte0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, (int) (byte)126);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      float[] floatArray0 = new float[3];
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) 0.0F;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[3], 1);
      assertEquals(5, objectArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-759.6F);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {(-759.6F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (int) (byte)64, (int) (byte) (-1));
      assertNull(byteArray0);
      
      ArrayUtils.reverse((float[]) null, Integer.MAX_VALUE, 48);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1118.95108849;
      doubleArray0[1] = (double) (-759.6F);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 48;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {1118.95108849, (-759.5999755859375), 1.0, 48.0, 2.147483647E9, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-1255), (double) (-1255));
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[4];
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (-1255));
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((Object[]) shortArray0);
      assertEquals(4, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-2147483645));
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(1, objectArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      Byte byte0 = new Byte((byte)31);
      assertNotNull(byte0);
      assertEquals((byte)31, (byte)byte0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray1, (Object) null, (int) (byte)31);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-18);
      intArray0[1] = (-18);
      intArray0[2] = 0;
      intArray0[3] = 1;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1);
      assertArrayEquals(new int[] {(-18), (-18), 0, 1, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(3, int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-62);
      shortArray0[1] = (short) (-62);
      shortArray0[2] = (short)114;
      shortArray0[3] = (short)114;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)114, (-18));
      assertArrayEquals(new short[] {(short) (-62), (short) (-62), (short)114, (short)114}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.reverse((float[]) null, (int) (short) (-62), Integer.MAX_VALUE);
      int int2 = ArrayUtils.lastIndexOf((float[]) null, 48.0F, 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      int int3 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) byte0);
      assertEquals(0, byteArray0.length);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-62), (short) (-62), (short)114, (short)114}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 45;
      intArray0[1] = 128;
      intArray0[2] = 2;
      intArray0[0] = 162;
      intArray0[4] = 0;
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)64;
      Byte byte1 = new Byte((byte)64);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)64, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)64, (byte)byte2);
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)48;
      Byte byte4 = new Byte((byte)48);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertEquals((byte)48, (byte)byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)64);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertEquals((byte)64, (byte)byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte) (-1));
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte6);
      
      byteArray0[4] = byte6;
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 162);
      assertArrayEquals(new int[] {162, 128, 2, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)48;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) byte0, (-2988));
      assertArrayEquals(new short[] {(short)48}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(int1 == int0);
      assertFalse(byte0 == byte3);
      assertEquals((-1), int1);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)64, (byte)64, (byte)48, (byte)64, (byte) (-1)}, byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-2988);
      floatArray0[1] = (float) 2;
      intArray0[0] = 0;
      floatArray0[3] = (float) byte3;
      floatArray0[4] = (float) (byte)64;
      floatArray0[5] = (float) 2;
      int int2 = ArrayUtils.lastIndexOf(floatArray0, 95.40503F, 90);
      assertArrayEquals(new float[] {(-2988.0F), 2.0F, 0.0F, 48.0F, 64.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.insert((-1540), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      int int0 = ArrayUtils.indexOf((short[]) null, (short)1822);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int1 = ArrayUtils.indexOf((short[]) null, (short)1822, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      int int2 = new Short((short)1822);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((short)1822, int2);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      short[] shortArray0 = new short[6];
      ArrayUtils.shift(shortArray0, 2, 321, 2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = (float) (-5341);
      ArrayUtils.shift(floatArray0, 88);
      assertArrayEquals(new float[] {(-5341.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Double double0 = new Double((-1748.3604401069852));
      assertNotNull(double0);
      assertEquals((-1748.3604401069852), (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-5341);
      longArray0[1] = (long) (-5341);
      longArray0[2] = (long) (-5341);
      longArray0[3] = (long) 88;
      longArray0[5] = (long) (-5341);
      longArray0[7] = (long) (-5341);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-5341L), (-5341L), (-5341L), 88L, 0L, (-5341L), 0L, (-5341L)}, longArray0);
      assertArrayEquals(new long[] {(-5341L), (-5341L), (-5341L), 88L, 0L, (-5341L), 0L, (-5341L)}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 88, (-5341));
      assertSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-5341L), (-5341L), (-5341L), 88L, 0L, (-5341L), 0L, (-5341L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, (-5341L));
      assertSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-5341L), (-5341L), (-5341L), 88L, 0L, (-5341L), 0L, (-5341L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1174);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1174, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-18);
      intArray0[1] = (-18);
      intArray0[3] = 1;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1);
      assertArrayEquals(new int[] {(-18), (-18), 0, 1, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(3, int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-62);
      shortArray0[1] = (short) (-62);
      shortArray0[2] = (short)114;
      shortArray0[3] = (short)114;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)114, (-18));
      assertArrayEquals(new short[] {(short) (-62), (short) (-62), (short)114, (short)114}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      int int2 = ArrayUtils.lastIndexOf((float[]) null, (-568.0F), 1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-121);
      doubleArray0[2] = (double) (short)114;
      doubleArray0[3] = (double) (-18);
      doubleArray0[4] = (double) (short) (-62);
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 431.688F;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {1.0, (-121.0), 114.0, (-18.0), (-62.0), 3.0, 1.0, 431.68798828125}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -18, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, 1L);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-1));
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte) (-1);
      doubleArray1[1] = (double) 1467;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 1467.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean("");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = new Boolean((String) null);
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean3));
      assertFalse(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-876);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-876), 1269);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-876)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-876)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 7L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = (-1L);
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L, (-667));
      assertArrayEquals(new long[] {7L, 0L, (-1L), 0L, (-1L), 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(1, int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)75;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)589;
      shortArray0[3] = (short) (-4827);
      shortArray0[4] = (short)10;
      shortArray0[5] = (short)10;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-1);
      shortArray0[8] = (short)2;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1, 0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)75, (short)1, (short)589, (short) (-4827), (short)10, (short)10, (short) (-1), (short) (-1), (short)2}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-4827);
      intArray0[1] = 1661;
      intArray0[2] = (int) (short)589;
      intArray0[3] = (int) (short)2;
      intArray0[4] = (int) (short) (-1);
      intArray0[5] = (int) (short)10;
      intArray0[6] = (int) (short) (-4827);
      intArray0[7] = (int) (short) (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (short)2, (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-4827), 1661, 589, 2, (-1), 10, (-4827), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-4827), 1661, (-1), 589, 2, (-1), 10, (-4827), (-1)}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)256;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)256}, shortArray0);
      assertArrayEquals(new short[] {(short)256}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.shift(shortArray1, (int) (short)256, (int) (short)256, (int) (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)256}, shortArray0);
      assertArrayEquals(new short[] {(short)256}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, 1, (int) (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)256}, shortArray0);
      assertArrayEquals(new short[] {(short)256}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-294.278);
      doubleArray0[1] = (-1188.351);
      ArrayUtils.swap(doubleArray0, 2402, 961);
      assertArrayEquals(new double[] {(-294.278), (-1188.351), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2402;
      floatArray0[1] = (float) 2402;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {2402.0F, 2402.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      
      byte byte0 = (byte) (-1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), 961);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, int0);
      
      Byte byte1 = new Byte((byte) (-34));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-34), (byte)byte1);
      
      Byte[] byteArray2 = new Byte[5];
      byteArray2[0] = byte1;
      byteArray2[1] = (Byte) (byte) (-1);
      byteArray2[2] = byte1;
      byteArray2[3] = (Byte) (byte) (-1);
      byteArray2[4] = byte1;
      Byte byte2 = ArrayUtils.get(byteArray2, (int) byte0);
      assertEquals(5, byteArray2.length);
      assertNull(byte2);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {2402.0F, 2402.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-17));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-17), (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-17);
      doubleArray0[1] = (double) (byte)0;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-17);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-1186L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-17L)}, longArray0);
      assertArrayEquals(new long[] {(-17L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)45);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-17), (byte) (-17), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), int0);
      
      Byte byte3 = new Byte((byte)63);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)63, (byte)byte3);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte3);
      assertNotNull(object0);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte2));
      assertFalse(object0.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte0));
      assertEquals((byte)63, object0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)63;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte) (-17);
      floatArray0[4] = (float) (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt(3474);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {63.0F, 0.0F, (-17.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte)0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(1, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      int int0 = (-1540);
      short[] shortArray0 = ArrayUtils.insert((-1540), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      int int1 = ArrayUtils.indexOf((short[]) null, (short)1822);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = 615L;
      BitSet bitSet1 = BitSet.valueOf(longArray0);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(128, bitSet1.size());
      assertEquals(70, bitSet1.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 73}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(74, bitSet1.length());
      assertArrayEquals(new long[] {(-1L), 615L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      BitSet bitSet2 = BitSet.valueOf(byteArray0);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(1, bitSet2.cardinality());
      assertEquals(3, bitSet2.length());
      assertEquals("{2}", bitSet2.toString());
      assertFalse(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bitSet2);
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertFalse(bitSet2.equals((Object)bitSet0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      byte byte0 = (byte) (-70);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[6] = (byte) (-70);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-70), (byte) (-70), (byte)0, (byte)0, (byte) (-70), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-70), (byte) (-70), (byte)0, (byte)0, (byte) (-70), (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(byteArray1, (-1), 294);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-70), (byte) (-70), (byte)0, (byte)0, (byte) (-70), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-70), (byte)0, (byte)0, (byte) (-70), (byte) (-70), (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Double double0 = new Double((byte)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      Double double1 = new Double((byte)0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      Double double2 = new Double((double) doubleArray0[3]);
      assertEquals(9, doubleArray0.length);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[4] = double2;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)12);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-70), (byte) (-70), (byte)0, (byte)0, (byte) (-70), (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(bitSet0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Byte[] byteArray2 = new Byte[5];
      byteArray2[0] = (Byte) (byte) (-70);
      byteArray2[1] = (Byte) (byte) (-70);
      byteArray2[2] = (Byte) (byte) (-70);
      byteArray2[3] = (Byte) (byte) (-70);
      byteArray2[4] = (Byte) (byte) (-70);
      boolean boolean0 = ArrayUtils.isSorted(byteArray2);
      assertEquals(5, byteArray2.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'I', (int) byte0);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) 'I';
      longArray0[3] = (long) (byte) (-70);
      longArray0[4] = (long) byte0;
      longArray0[5] = (long) 294;
      longArray0[6] = (long) byte0;
      longArray0[7] = (long) byte0;
      longArray0[8] = (long) byte0;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-4025L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-70L), (-70L), 73L, (-70L), (-70L), 294L, (-70L), (-70L), (-70L)}, longArray0);
      assertArrayEquals(new long[] {(-70L), (-70L), 73L, (-70L), (-70L), 294L, (-70L), (-70L), (-70L)}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'R', (-824));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'{'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)416;
      int int0 = (-2145881199);
      ArrayUtils.shift(shortArray0, (-2145881199), (int) (short)416, (int) (short)416);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.sort((Byte[]) null, (Comparator<? super Byte>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte) (-10);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-10), (int) (byte) (-10));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-10);
      shortArray0[1] = (short) (byte) (-10);
      shortArray0[2] = (short) (byte) (-10);
      shortArray0[3] = (short) (byte) (-10);
      shortArray0[4] = (short) (byte) (-10);
      shortArray0[5] = (short)6;
      shortArray0[6] = (short) (byte) (-10);
      ArrayUtils.shift(shortArray0, 8192, 14, 322);
      assertArrayEquals(new short[] {(short) (-10), (short) (-10), (short) (-10), (short) (-10), (short) (-10), (short)6, (short) (-10)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Byte[] byteArray2 = new Byte[8];
      byteArray2[0] = (Byte) (byte) (-10);
      byteArray2[1] = (Byte) (byte) (-10);
      byteArray2[2] = (Byte) (byte) (-10);
      Byte byte0 = new Byte((byte) (-10));
      assertNotNull(byte0);
      assertEquals((byte) (-10), (byte)byte0);
      
      byteArray2[3] = byte0;
      byteArray2[4] = (Byte) (byte) (-10);
      byteArray2[5] = (Byte) (byte) (-10);
      byteArray2[6] = (Byte) (byte) (-10);
      byteArray2[7] = (Byte) (byte) (-10);
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      Byte[] byteArray3 = ArrayUtils.sort(byteArray2, (Comparator<? super Byte>) comparator0);
      assertSame(byteArray3, byteArray2);
      assertSame(byteArray2, byteArray3);
      assertEquals(8, byteArray3.length);
      assertEquals(8, byteArray2.length);
      assertNotNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)21;
      intArray0[1] = (int) (byte) (-91);
      intArray0[2] = (int) (byte) (-91);
      intArray0[3] = (int) (byte)21;
      intArray0[4] = 1;
      intArray0[5] = (int) (byte)21;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {21, 1, 21, (-91), (-91), 21}, intArray0);
      assertEquals(6, intArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)21;
      shortArray0[1] = (short)30180;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (byte)21);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)21, (short)30180, (short)21}, shortArray1);
      assertArrayEquals(new short[] {(short)21, (short)30180}, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 13;
      intArray0[1] = 1675;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 46;
      intArray0[5] = (-1078);
      intArray0[6] = (-39);
      int int0 = ArrayUtils.indexOf(intArray0, (-2697), 46);
      assertArrayEquals(new int[] {13, 1675, 1, 1, 46, (-1078), (-39)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, (-635));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) byte0);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.swap(shortArray0, (-2697), 1, 1747);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      Float[] floatArray0 = new Float[15];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1705.994F);
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)53;
      shortArray0[4] = (short) (-1797);
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("T_Lg.nT]Za>2");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean2));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-1797);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (short)53, (int) (short) (-1797));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {0L, (-1797L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)1008;
      intArray0[1] = (int) (short)1008;
      intArray0[2] = (-3469);
      intArray0[3] = (int) (short)1008;
      intArray0[4] = (int) (short) (-1797);
      boolean boolean3 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {1008, 1008, (-3469), 1008, (-1797)}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean3);
      
      boolean boolean4 = ArrayUtils.isEmpty((Object[]) floatArray0);
      assertEquals(15, floatArray0.length);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 6);
      Byte byte0 = new Byte((byte)98);
      assertNotNull(byte0);
      assertEquals((byte)98, (byte)byte0);
      
      Byte byte1 = new Byte((byte)104);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)104, (byte)byte1);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte1);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte1, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, (Byte) null);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertFalse(byte0.equals((Object)byte1));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry2);
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(byte0.equals((Object)byte1));
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>((Byte) null, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(byte0.equals((Object)byte1));
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry5;
      Byte byte2 = new Byte((byte)110);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)110, (byte)byte2);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte2, (Byte) null);
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry6;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElement(abstractMap_SimpleImmutableEntryArray0, (Object) abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry6);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry5);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(6, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(5, abstractMap_SimpleImmutableEntryArray1.length);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 114;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {114.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      byte byte0 = (byte)10;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-113);
      byteArray0[8] = (byte)10;
      ArrayUtils.swap(byteArray0, (int) (byte)10, 781, (-2049870753));
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)10, (byte)10, (byte)10, (byte) (-113), (byte)0, (byte)0, (byte)10}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '+';
      charArray0[2] = 'g';
      charArray0[3] = 'P';
      ArrayUtils.reverse(charArray0, (int) (byte)0, 2141);
      assertArrayEquals(new char[] {'P', 'g', '+', '2'}, charArray0);
      assertEquals(4, charArray0.length);
      
      ArrayUtils.swap(byteArray0, (-431), (int) (byte)0, (int) (byte)10);
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)10, (byte)10, (byte)10, (byte) (-113), (byte)0, (byte)0, (byte)10}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = (Byte) (byte)10;
      byteArray1[1] = (Byte) (byte) (-113);
      Byte byte1 = new Byte((byte)10);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)10, (byte)byte1);
      
      byteArray1[2] = byte1;
      byteArray1[3] = (Byte) (byte)10;
      byteArray1[4] = (Byte) (byte)10;
      Byte byte2 = new Byte((byte)10);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)10, (byte)byte2);
      
      byteArray1[5] = byte2;
      byteArray1[6] = (Byte) (byte)10;
      Byte byte3 = ArrayUtils.get(byteArray1, (int) 10, byte2);
      assertEquals(7, byteArray1.length);
      assertNotNull(byte3);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)10, (byte)byte3);
      
      ArrayUtils.hashCode((Object) byte3);
      assertEquals(7, byteArray1.length);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) '2';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {10.0F, 50.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2085;
      shortArray0[1] = (short) (-9);
      shortArray0[2] = (short)2329;
      ArrayUtils.swap(shortArray0, (int) (short)2329, (int) (short) (-9), (int) (short)2329);
      assertArrayEquals(new short[] {(short)2085, (short) (-9), (short)2329}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-9);
      longArray0[1] = (long) (short)2085;
      longArray0[2] = (long) (short)2085;
      longArray0[3] = (long) (short)2329;
      longArray0[4] = (long) (short)2329;
      longArray0[5] = (long) (short)2329;
      longArray0[6] = (long) (short) (-9);
      longArray0[7] = (long) (short) (-9);
      ArrayUtils.shift(longArray0, (int) (short)2085, (int) (short) (-9), (int) (short)2329);
      assertArrayEquals(new long[] {(-9L), 2085L, 2085L, 2329L, 2329L, 2329L, (-9L), (-9L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'q';
      charArray0[3] = 'x';
      charArray0[4] = '[';
      charArray0[5] = '*';
      charArray0[6] = '[';
      charArray0[7] = 'l';
      charArray0[8] = 'T';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '4', 422);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'h', 'h', 'q', 'x', '[', '*', '[', 'l', 'T'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '*';
      floatArray0[1] = (float) 2085L;
      floatArray0[2] = (float) (short)2085;
      floatArray0[3] = (float) 'l';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {42.0F, 2085.0F, 2085.0F, 108.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) null);
      assertNull(byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, 160, (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte)97);
      assertNotNull(byte0);
      assertEquals((byte)97, (byte)byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) 97, byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-630);
      shortArray0[1] = (short) (-1430);
      shortArray0[3] = (short)0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short) (-630);
      float[] floatArray1 = ArrayUtils.insert((int) (short)0, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-630.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-630.0F), 0.0F, (-630.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      Byte byte0 = new Byte((byte) (-74));
      assertNotNull(byte0);
      assertEquals((byte) (-74), (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "]K@2z9B0");
      assertNotNull(string0);
      assertEquals("-74", string0);
      
      Float[] floatArray2 = new Float[7];
      floatArray2[0] = (Float) 0.0F;
      floatArray2[1] = (Float) (-630.0F);
      floatArray2[2] = (Float) (-630.0F);
      floatArray2[3] = (Float) 0.0F;
      floatArray2[4] = (Float) (-630.0F);
      floatArray2[5] = (Float) (-630.0F);
      floatArray2[6] = (Float) 0.0F;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2, 64.0F);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertArrayEquals(new float[] {0.0F, (-630.0F), (-630.0F), 0.0F, (-630.0F), (-630.0F), 0.0F}, floatArray3, 0.01F);
      assertEquals(7, floatArray2.length);
      assertEquals(7, floatArray3.length);
      assertNotNull(floatArray3);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 2146662796, byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146662796, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3684.4;
      doubleArray0[1] = 339.12646611;
      doubleArray0[2] = (-1881.088752516286);
      doubleArray0[3] = 867.92511;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 218.028;
      doubleArray0[6] = (-1048.0137445199525);
      doubleArray0[7] = (-388.1013);
      ArrayUtils.shift(doubleArray0, (-1219), (-95), Integer.MAX_VALUE);
      assertArrayEquals(new double[] {3684.4, 339.12646611, (-1881.088752516286), 867.92511, (-1.0), 218.028, (-1048.0137445199525), (-388.1013)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 218.028;
      objectArray0[1] = (Object) 3684.4;
      objectArray0[2] = (Object) 339.12646611;
      ArrayUtils.shift(objectArray0, (-1219));
      assertEquals(3, objectArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2431);
      shortArray0[1] = (short) (-15);
      shortArray0[2] = (short)36;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-2431), (short) (-15), (short)36}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = '-';
      charArray0[2] = 'n';
      charArray0[3] = '[';
      charArray0[4] = '6';
      charArray0[5] = '$';
      charArray0[6] = '_';
      charArray0[7] = '}';
      charArray0[8] = 'P';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (int) (short) (-15), 'h');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -15, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, (-721), ']');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -721, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (short) (-48);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (short) (-48);
      floatArray0[4] = (float) (short) (-48);
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) (short) (-48);
      floatArray0[7] = (float) (short) (-48);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-48.0F), 0.0F, (-48.0F), (-48.0F), 1.0F, (-48.0F), (-48.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.shift(booleanArray0, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)443;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-48), (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)443}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      charArray0[1] = 'k';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'C';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'C');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'C', 'k', 'C', 'C', 'C', 'C'}, charArray0);
      assertArrayEquals(new char[] {'k'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 4, (long) 'C');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-91);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (int) (byte)21);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)2, (byte) (-91)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-91)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-91);
      intArray0[1] = 1;
      intArray0[2] = (int) (byte)21;
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-91), 1, 21}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(5, int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 5;
      floatArray0[1] = (float) 5;
      floatArray0[2] = (float) 5;
      floatArray0[3] = (-224.5299F);
      floatArray0[4] = (float) 5;
      floatArray0[5] = (float) 5;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {5.0F, 5.0F, 5.0F, (-224.5299F), 5.0F, 5.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[7] = (float) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2615.1643F, 0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean("Q:dG=d;Z1UCt");
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean2;
      Boolean boolean4 = new Boolean("m7%:`5");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      
      booleanArray0[3] = boolean3;
      booleanArray0[4] = boolean1;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5);
      
      Boolean boolean6 = Boolean.FALSE;
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6);
      
      Boolean boolean7 = new Boolean("");
      assertNotNull(boolean7);
      assertTrue(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean2));
      assertFalse(boolean7);
      
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = new boolean[7];
      booleanArray2[0] = (boolean) boolean3;
      booleanArray2[1] = (boolean) boolean1;
      booleanArray2[2] = (boolean) boolean3;
      booleanArray2[3] = (boolean) boolean1;
      booleanArray2[4] = (boolean) boolean1;
      booleanArray2[5] = (boolean) boolean3;
      booleanArray2[6] = (boolean) boolean3;
      int int0 = ArrayUtils.lastIndexOf(booleanArray2, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray2));
      assertEquals(7, booleanArray2.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 4388.81090582, 721);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      Character character0 = new Character('%');
      assertNotNull(character0);
      assertEquals('%', (char)character0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-10948);
      shortArray0[1] = (short)2570;
      shortArray0[2] = (short)1809;
      shortArray0[3] = (short)2570;
      shortArray0[4] = (short)2570;
      shortArray0[5] = (short) (-70);
      shortArray0[6] = (short) (-70);
      shortArray0[7] = (short)2384;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)2384, (short) (-70), (short) (-70), (short)2570, (short)2570, (short)1809, (short)2570, (short) (-10948)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = 'B';
      charArray0[3] = '%';
      charArray0[4] = 'M';
      charArray0[5] = 'B';
      ArrayUtils.swap(charArray0, 721, (int) (short)2570);
      assertArrayEquals(new char[] {'%', '%', 'B', '%', 'M', 'B'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.swap((byte[]) null, 1138, (-689));
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) 0L;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[3]);
      assertEquals(5, objectArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 1078L, 2626);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-667), 2141451390);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray0, 9, 9);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      MockRandom mockRandom0 = new MockRandom((-5));
      assertNotNull(mockRandom0);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, (-1896.1F));
      assertFalse(boolean0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 1078L, 2626);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-667), 2141451390);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray0, 9, (-1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '>');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)37);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Double double0 = new Double(854);
      assertNotNull(double0);
      assertEquals(854.0, (double)double0, 0.01);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 93, (int) (byte)37);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = 'C';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'c');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'c', 'c', 'c', 'C'}, charArray0);
      assertArrayEquals(new char[] {'C'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'c';
      longArray0[1] = (-62L);
      longArray0[2] = (long) 1;
      long[] longArray1 = ArrayUtils.add(longArray0, 1, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {99L, (-62L), 1L}, longArray0);
      assertArrayEquals(new long[] {99L, (-1L), (-62L), 1L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 99L;
      floatArray0[1] = (float) 'c';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2110, 1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {99.0F, 99.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, 955, 2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {99.0F, 99.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)14;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[3] = (-1.0);
      doubleArray0[5] = (double) (-175);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (int) (byte)0);
      assertArrayEquals(new double[] {14.0, 0.0, 0.0, (-1.0), 0.0, (-175.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-175);
      int int1 = ArrayUtils.indexOf(longArray0, (-383L), 37);
      assertArrayEquals(new long[] {(-175L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      float[] floatArray0 = new float[4];
      double[] doubleArray0 = new double[0];
      int int0 = 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      ArrayUtils.shift((Object[]) byteArray0, (-6));
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift(doubleArray0, (-1312), (-1), Integer.MAX_VALUE);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-5);
      byteArray1[1] = (byte)45;
      byteArray1[2] = (byte) (-5);
      byteArray1[4] = (byte)49;
      byteArray1[5] = (byte)2;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)90;
      ArrayUtils.swap(byteArray1, (-1971), (-529), (int) (byte)0);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)45, (byte) (-5), (byte)0, (byte)49, (byte)2, (byte)0, (byte)90}, byteArray1);
      assertEquals(8, byteArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)45;
      doubleArray0[1] = (double) (-1L);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)49;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 49, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)14;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[3] = (-1.0);
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)14;
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)14}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)14;
      shortArray0[1] = (short) (byte)14;
      shortArray0[2] = (short) (byte)14;
      shortArray0[3] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte) (-59));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)14, (short)14, (short)14, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)14, (short)14, (short)14, (short)0}, shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-59), 3078);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2;
      floatArray0[0] = 140.86461F;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 2;
      floatArray0[5] = 1.0F;
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {140.86461F, 0.0F, 2.0F, 2.0F, 2.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 785.4F;
      floatArray0[2] = 59.0F;
      floatArray0[3] = 330.7F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 59.0F, 330.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 59.0F, 330.7F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)111;
      Byte byte1 = new Byte((byte)111);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)111, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)111);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)111, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray2 = ArrayUtils.insert(2, floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 59.0F, 330.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, 59.0F, 330.7F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 785.4F, (-1.0F), 785.4F, 59.0F, 330.7F, 59.0F, 330.7F}, floatArray2, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(8, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      Byte[] byteArray2 = new Byte[7];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = byte2;
      byteArray2[1] = byte1;
      byteArray2[2] = byte1;
      byteArray2[3] = byte2;
      byteArray2[4] = byte1;
      byteArray2[5] = byte1;
      byteArray2[6] = byte1;
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2, class0);
      assertSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(7, byteArray3.length);
      assertEquals(7, byteArray2.length);
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = byte0;
      byteArray4[1] = byte0;
      byteArray4[2] = byte0;
      byte[] byteArray5 = ArrayUtils.removeElements(byteArray4, byteArray4);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray5, byteArray4);
      assertArrayEquals(new byte[] {(byte)111, (byte)111, (byte)111}, byteArray4);
      assertArrayEquals(new byte[] {}, byteArray5);
      assertEquals(3, byteArray4.length);
      assertEquals(0, byteArray5.length);
      assertNotNull(byteArray5);
      assertFalse(byteArray5.equals((Object)byteArray4));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte0;
      intArray0[3] = 3699;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {111, 111, 111, 3699}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, 48);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert(48, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = 'u';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'', 'u'}, charArray0);
      assertArrayEquals(new char[] {'', '', 'u'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, 1802.3132176, 1802.3132176);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = '#';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '#');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'T', 'T', '#'}, charArray0);
      assertArrayEquals(new char[] {'T', 'T'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'T';
      floatArray0[1] = (float) 'T';
      floatArray0[2] = (float) 'T';
      floatArray0[3] = (float) 'T';
      floatArray0[4] = (float) 'T';
      ArrayUtils.swap(floatArray0, 45, 1, 45);
      assertArrayEquals(new float[] {84.0F, 84.0F, 84.0F, 84.0F, 84.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)108;
      byteArray0[8] = (byte)124;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(210, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 210, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(83L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 83L;
      doubleArray0[1] = (double) (-1814L);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 83L;
      floatArray0[1] = (float) (-13);
      ArrayUtils.swap(floatArray0, (-984), 2146778123, (-984));
      assertArrayEquals(new float[] {83.0F, (-13.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2747.4679);
      doubleArray0[1] = 409.09;
      doubleArray0[2] = 1624.73446065069;
      doubleArray0[3] = 607.6082571177;
      int[] intArray0 = new int[0];
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2747.4679), 409.09, 1624.73446065069, 607.6082571177}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {(-2747.4679), 409.09, 1624.73446065069, 607.6082571177}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte) (-1);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)77);
      assertArrayEquals(new byte[] {(byte)77, (byte)49, (byte)48, (byte)111, (byte)109, (byte) (-33), (byte)1, (byte)62, (byte) (-1)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)109;
      floatArray0[1] = (float) (byte)49;
      floatArray0[2] = (float) (byte)49;
      floatArray0[3] = (float) (byte)111;
      floatArray0[4] = (float) (byte)48;
      floatArray0[5] = (float) (byte)48;
      floatArray0[6] = (float) (byte)109;
      floatArray0[7] = (float) (byte)49;
      floatArray0[8] = (float) (byte)48;
      ArrayUtils.swap(floatArray0, (int) (byte) (-33), (int) (byte)48, 0);
      assertArrayEquals(new float[] {109.0F, 49.0F, 49.0F, 111.0F, 48.0F, 48.0F, 109.0F, 49.0F, 48.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      
      ArrayUtils.shift((long[]) null, (-1876));
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)79);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)17);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)17;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 34);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {17}, intArray0);
      assertArrayEquals(new int[] {17}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-284.4F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, object0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-294.278);
      doubleArray0[1] = (-1218.713247788964);
      ArrayUtils.swap(doubleArray0, 2402, 961);
      assertArrayEquals(new double[] {(-294.278), (-1218.713247788964), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2402;
      floatArray0[1] = (float) 2402;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {2402.0F, 2402.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      
      byte byte0 = (byte) (-1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      
      Byte byte1 = new Byte((byte) (-34));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-34), (byte)byte1);
      
      Byte[] byteArray1 = new Byte[5];
      byteArray1[0] = byte1;
      byteArray1[1] = (Byte) (byte) (-1);
      byteArray1[2] = byte1;
      byteArray1[3] = (Byte) (byte) (-1);
      byteArray1[4] = byte1;
      Byte byte2 = ArrayUtils.get(byteArray1, (int) byte0);
      assertEquals(5, byteArray1.length);
      assertNull(byte2);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {2402.0F, 2402.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-17));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-17), (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-17);
      doubleArray0[1] = (double) (byte)0;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-17);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-1186L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-17L)}, longArray0);
      assertArrayEquals(new long[] {(-17L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)45);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-17), (byte) (-17), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), int0);
      
      Byte byte3 = new Byte((byte)63);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)63, (byte)byte3);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte3);
      assertNotNull(object0);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(object0.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte2));
      assertEquals((byte)63, object0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)63;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte) (-17);
      floatArray0[4] = (float) (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {63.0F, 0.0F, (-17.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)346);
      assertArrayEquals(new short[] {(short)346}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      short[] shortArray0 = new short[8];
      Short short0 = new Short((short) (-1200));
      assertNotNull(short0);
      assertEquals((short) (-1200), (short)short0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2497), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2497, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)14;
      shortArray0[2] = (short)14;
      shortArray0[3] = (short) (-987);
      shortArray0[4] = (short)9;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-458);
      shortArray0[7] = (short)147;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)147;
      doubleArray0[1] = (double) (short)121;
      doubleArray0[2] = (double) (short)121;
      doubleArray0[3] = (double) (short) (-987);
      doubleArray0[4] = (double) (short)121;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) (short)147;
      doubleArray0[7] = (double) (short)14;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (short)121);
      assertArrayEquals(new double[] {147.0, 121.0, 121.0, (-987.0), 121.0, 1.0, 147.0, 14.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (short)121);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {121}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) (short)9;
      longArray0[2] = (long) (short)121;
      longArray0[3] = (long) (short)121;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1008L, (int) (short)147);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {(-1L), 9L, 121L, 121L}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)80;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)80, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)8}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)8;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 8L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)1;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)8);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Long[] longArray1 = new Long[7];
      Long long0 = new Long((byte)1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      longArray1[0] = long0;
      longArray1[1] = (Long) 0L;
      longArray1[2] = (Long) 0L;
      longArray1[3] = (Long) 0L;
      longArray1[4] = (Long) 8L;
      longArray1[5] = (Long) 0L;
      longArray1[6] = (Long) 0L;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray2.length);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, 48);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object2 = ArrayUtils.get(objectArray1, 48, object0);
      assertNotSame(object0, object1);
      assertSame(object0, object2);
      assertNotSame(objectArray1, objectArray0);
      assertSame(object2, object0);
      assertNotSame(object2, object1);
      assertEquals(0, objectArray1.length);
      assertNotNull(object2);
      assertFalse(object0.equals((Object)object1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[0] = object2;
      objectArray0[1] = (Object) false;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(5, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'q';
      charArray0[1] = '#';
      char[] charArray1 = ArrayUtils.removeElement((char[]) null, 'q');
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      Short[] shortArray0 = new Short[17];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)14);
      assertEquals(17, shortArray0.length);
      assertEquals(17, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert((int) (byte)40, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, (int) (byte) (-112));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -112, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2146580870);
      intArray0[1] = (-2104);
      intArray0[2] = 1;
      intArray0[3] = (-771);
      intArray0[4] = (-1114);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-2146580870));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146580870, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)32;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)80);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)80, (byte)80, (byte) (-9), (byte) (-70), (byte)32}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)80, (byte)80, (byte) (-9), (byte) (-70), (byte)32, (byte)80}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(byteArray1, (int) (byte)80, 854);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)80, (byte)80, (byte) (-9), (byte) (-70), (byte)32}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)80, (byte)80, (byte) (-9), (byte) (-70), (byte)32, (byte)80}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      ArrayUtils.swap((Object[]) doubleArray0, (int) (byte)32, (int) (byte)80, (-1365));
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 733.38865812137;
      doubleArray0[3] = (-537.27737141392);
      doubleArray0[4] = (-1.0);
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 733.38865812137, (-537.27737141392), (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[2] = 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 733.38865812137, (-537.27737141392), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0, 733.38865812137, (-537.27737141392), 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, intArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 733.38865812137;
      ArrayUtils.swap(objectArray0, (-982), 256, 256);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      char[] charArray1 = new char[2];
      charArray1[0] = 'i';
      charArray1[1] = 'Q';
      ArrayUtils.reverse(charArray1);
      assertArrayEquals(new char[] {'Q', 'i'}, charArray1);
      assertEquals(2, charArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 70;
      intArray0[1] = (int) (short) (-1430);
      intArray0[2] = 51;
      intArray0[3] = (int) '&';
      intArray0[4] = 137;
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {70, (-1430), 51, 38, 137}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-759.6F);
      floatArray0[1] = (-1904.317F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1744.37F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-759.6F), (-1904.317F), 0.0F, 1.0F, 1744.37F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 1744.37F;
      objectArray0[2] = (Object) 1.0F;
      objectArray0[3] = (Object) 0.0F;
      objectArray0[4] = (Object) (-1904.317F);
      objectArray0[5] = (Object) 0.0F;
      objectArray0[6] = (Object) 0.0F;
      objectArray0[7] = (Object) (-759.6F);
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(8, objectArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = '@';
      charArray0[2] = 'F';
      charArray0[3] = '2';
      charArray0[4] = '~';
      charArray0[5] = '5';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'}', '@', 'F', '2', '~', '5'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)63;
      shortArray0[4] = (short) (-1797);
      shortArray0[3] = (short)1008;
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean("T_Lg.nT]Za>2");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      
      booleanArray0[0] = boolean3;
      booleanArray0[1] = boolean2;
      booleanArray0[2] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean2);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean3));
      assertTrue(boolean2.equals((Object)boolean1));
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean4 = ArrayUtils.isSorted(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 0.0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-2145881199), (-2145881199), (-2145881199));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-91);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (int) (byte)21);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)2, (byte) (-91)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-91)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[2];
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short) (byte)2;
      ArrayUtils.shift(shortArray0, (int) (byte) (-91), 1907, 1406);
      assertArrayEquals(new short[] {(short)6, (short)2}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.shift(shortArray0, (-2145881199), (int) (short)438, (int) (short)438);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockRandom0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "qM");
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.3291112780570984;
      doubleArray0[3] = (-2186.192117355);
      doubleArray0[4] = (double) (byte)1;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.3291112780570984, (-2186.192117355), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      ArrayUtils.reverse((boolean[]) null, (-748), (-748));
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1155.09889305));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {Double.NaN, 0.3291112780570984, (-2186.192117355), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-748), (-4549.291));
      assertArrayEquals(new double[] {Double.NaN, 0.3291112780570984, (-2186.192117355), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "-0X");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = ArrayUtils.get(objectArray0, (-3341));
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Byte byte0 = new Byte((byte)4);
      assertNotNull(byte0);
      assertEquals((byte)4, (byte)byte0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) byte0, 0);
      assertEquals(3, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(3, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, (int) (byte)4);
      assertEquals(3, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "+");
      assertEquals(3, objectArray0.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte)4;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (-3341);
      intArray0[5] = 0;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, (-3341), (-1), 0, 4, (-1)}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-3341));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-3341), (-1), 0, 4, (-1)}, intArray0);
      assertArrayEquals(new int[] {(-3341), 0, (-3341), (-1), 0, 4, (-1)}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 857.5241076207765;
      doubleArray0[1] = 2216.982372;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-2854.441);
      doubleArray0[4] = (-597.82123102868);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-2186.192117355);
      doubleArray0[8] = (-1155.09889305);
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {2216.982372, Double.NaN, (-2854.441), (-597.82123102868), Double.NaN, 0.0, (-2186.192117355), (-1155.09889305), 857.5241076207765}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      ArrayUtils.reverse((boolean[]) null, 3, (-2147483646));
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN);
      assertEquals("{1, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new double[] {2216.982372, Double.NaN, (-2854.441), (-597.82123102868), Double.NaN, 0.0, (-2186.192117355), (-1155.09889305), 857.5241076207765}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2186.192117355), Double.NaN);
      assertArrayEquals(new double[] {2216.982372, Double.NaN, (-2854.441), (-597.82123102868), Double.NaN, 0.0, (-2186.192117355), (-1155.09889305), 857.5241076207765}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-2854.441);
      objectArray0[1] = (Object) Double.NaN;
      objectArray0[2] = (Object) 2216.982372;
      objectArray0[3] = (Object) Double.NaN;
      objectArray0[4] = (Object) (-2186.192117355);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "-0X");
      assertEquals(5, stringArray0.length);
      assertEquals(5, objectArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2147483646);
      intArray0[1] = (-2147483646);
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {3, 3, 3, (-2147483646), (-2147483646)}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "org.apache.commons.lang3.ArrayUtils");
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2424;
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 7, 2424);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2424;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (float) 2424;
      floatArray0[3] = (float) 7;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {2424.0F, Float.NaN, 2424.0F, 7.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1094), 1212);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-1), (byte)7, (byte)64, (byte) (-1), (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-1), (byte)7, (byte)64, (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(floatArray0, 2424, 405);
      assertArrayEquals(new float[] {2424.0F, Float.NaN, 2424.0F, 7.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-793.0F), (-576));
      assertArrayEquals(new float[] {2424.0F, Float.NaN, 2424.0F, 7.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2424, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      Float[] floatArray0 = new Float[15];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1705.994F);
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)53;
      shortArray0[4] = (short) (-1797);
      shortArray0[3] = (short)1008;
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean("T_Lg.nT]Za>2");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      
      booleanArray0[0] = boolean3;
      booleanArray0[1] = boolean2;
      booleanArray0[2] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean2);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertFalse(boolean2.equals((Object)boolean3));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)1008;
      longArray0[1] = (long) (short) (-1797);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (short)53, (int) (short) (-1797));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new long[] {1008L, (-1797L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)1008;
      intArray0[1] = (int) (short)1008;
      intArray0[2] = (-3469);
      intArray0[3] = (int) (short)1008;
      intArray0[4] = (int) (short) (-1797);
      boolean boolean4 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {1008, 1008, (-3469), 1008, (-1797)}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean4);
      
      boolean boolean5 = ArrayUtils.isEmpty((Object[]) floatArray0);
      assertEquals(15, floatArray0.length);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 0L;
      longArray1[1] = (long) Integer.MAX_VALUE;
      longArray1[2] = (long) Integer.MAX_VALUE;
      longArray1[3] = 0L;
      ArrayUtils.shift(longArray1, 66, 1, (-1073741824));
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 2147483647L, 2147483647L, 0L}, longArray1);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)42, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte) (-90), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.swap((byte[]) null, 48, 2146716684);
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-102));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-95);
      intArray0[1] = (int) 'V';
      intArray0[2] = (-964);
      intArray0[3] = 13;
      intArray0[4] = (-964);
      intArray0[5] = 48;
      intArray0[6] = 13;
      intArray0[7] = (-1);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-95), 86, (-964), 13, (-964), 48, 13, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Byte byte0 = new Byte((byte) (-95));
      assertNotNull(byte0);
      assertEquals((byte) (-95), (byte)byte0);
      
      Byte[] byteArray0 = ArrayUtils.insert(1558, (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      Byte byte1 = new Byte((byte)10);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)10, (byte)byte1);
      
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences((Byte[]) null, byte1);
      assertNull(byteArray1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean1 = new Boolean((String) null);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, 0);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-107), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) long0;
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'V', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-95);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-95);
      intArray0[1] = 1;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-95), 1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 48;
      intArray0[1] = 13;
      intArray0[2] = 0;
      intArray0[3] = 1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.swap((byte[]) null, 13, (-964));
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 1;
      objectArray0[1] = (Object) 13;
      objectArray0[2] = (Object) 13;
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      charArray0[3] = 'V';
      charArray0[4] = 'V';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'+', 'V', 'V', 'V', 'V'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-95));
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {48, 13, 0, 1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-9));
      assertNotNull(byte0);
      assertEquals((byte) (-9), (byte)byte0);
      
      byteArray0[0] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-964), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -964, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)64);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)1, 2143);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-786.36132586);
      doubleArray0[1] = 2862.980926564101;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1303.58299);
      doubleArray0[4] = 10.2758469175;
      doubleArray0[5] = (-786.36132586);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3150.466667));
      assertArrayEquals(new double[] {(-786.36132586), 2862.980926564101, (-1.0), (-1303.58299), 10.2758469175, (-786.36132586)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'V'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte) (-95)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-95);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-95), (-1), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2217);
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-116);
      Byte byte1 = new Byte((byte) (-116));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-116), (byte)byte1);
      
      byteArray0[0] = byte1;
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (int) byte0, (-2217));
      assertNull(longArray0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-2217);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2217)}, intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('d');
      assertNotNull(character0);
      assertEquals('d', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'d'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (int) (short) (-48);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short) (-48), 1072);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Character character0 = new Character('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'K';
      doubleArray0[1] = 1886.3023965934426;
      doubleArray0[2] = (double) (short) (-48);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {75.0, 1886.3023965934426, (-48.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 75.0, 1886.3023965934426, (-48.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.swap((long[]) null, 2, 1387);
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '9', (int) (short)147);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (-4790L);
      longArray0[2] = (-4790L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)0, (int) (short)0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, (-4790L), (-4790L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Character[] characterArray0 = new Character[6];
      Character character0 = Character.valueOf('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = '';
      Character character1 = Character.valueOf('');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      assertNotNull(character2);
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('N');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('N', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('D');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertEquals('D', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('D');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertEquals('D', (char)character5);
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'9', '', '', 'N', 'D', 'D'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((short) (-48));
      assertNotNull(double0);
      assertEquals((-48.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertArrayEquals(new double[] {(-48.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences((long[]) null, 18L);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      long[] longArray0 = new long[6];
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)6);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)6, (byte)byte1);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)0, (int) (byte)0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-68));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-68), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[2];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)36);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 115;
      longArray0[1] = (long) 1556;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (short)36;
      longArray0[5] = (long) (byte) (-68);
      longArray0[6] = (long) (short)0;
      longArray0[7] = (-1000L);
      ArrayUtils.shift(longArray0, (int) byte0);
      assertArrayEquals(new long[] {115L, 1556L, 0L, (-1L), 36L, (-68L), 0L, (-1000L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)46);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (int) (short) (-48);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short) (-48), 1072);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray0);
      assertArrayEquals(new int[] {0, (-48)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-48));
      assertNotNull(double0);
      assertEquals((-48.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertArrayEquals(new double[] {(-48.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-434), 0);
      assertArrayEquals(new short[] {(short) (-48), (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray0, "Array and element cannot both be null");
      assertEquals(1, doubleArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1430);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short) (-1430)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short) (-1430)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)67);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)36;
      intArray0[1] = (-45);
      intArray0[2] = (int) (byte)67;
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2433;
      shortArray0[1] = (short)62;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2433, (int) (short)62);
      assertArrayEquals(new short[] {(short)2433, (short)62}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)386;
      shortArray0[1] = (short) (-891);
      shortArray0[2] = (short) (-3487);
      shortArray0[3] = (short)15;
      shortArray0[4] = (short) (-3409);
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-3469);
      shortArray0[7] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)36);
      assertArrayEquals(new short[] {(short)386, (short) (-891), (short) (-3487), (short)15, (short) (-3409), (short)1, (short) (-3469), (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)386;
      longArray0[1] = (long) (short) (-3409);
      longArray0[2] = (long) (short) (-3469);
      longArray0[3] = (-1000L);
      longArray0[4] = (long) (short) (-3409);
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short) (-891);
      ArrayUtils.shift(longArray0, 115);
      assertArrayEquals(new long[] {(-3409L), 0L, (-891L), 386L, (-3409L), (-3469L), (-1000L)}, longArray0);
      assertEquals(7, longArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)2);
      assertArrayEquals(new short[] {(short)386, (short) (-891), (short) (-3487), (short)15, (short) (-3409), (short)1, (short) (-3469), (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)7;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)76);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-28), (byte)46, (byte)57, (byte)7}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-28), (byte)46, (byte)57, (byte)7}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte)21);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)object0));
      assertEquals((byte)21, (byte)byte1);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)21);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (int) (byte)21);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-68));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-68), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[2];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)36);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 115;
      longArray0[1] = (long) 1556;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (short)36;
      longArray0[6] = (long) (short)0;
      longArray0[7] = (-1000L);
      ArrayUtils.shift(longArray0, (-1404), 5, (int) (short)36);
      assertArrayEquals(new long[] {36L, 115L, 1556L, 0L, (-1L), 0L, 0L, (-1000L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 115L;
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) (-1000L);
      floatArray0[5] = (float) (-1000L);
      floatArray0[6] = (float) 36L;
      ArrayUtils.swap(floatArray0, (int) (short)36, 336, (-3384));
      assertArrayEquals(new float[] {115.0F, 0.0F, 0.0F, 0.0F, (-1000.0F), (-1000.0F), 36.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-68));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-68), (byte)0, (byte)0}, byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'w';
      doubleArray0[1] = (double) 'w';
      doubleArray0[3] = (double) 59;
      doubleArray0[4] = (double) 59;
      doubleArray0[5] = (double) 'w';
      doubleArray0[6] = (double) 59;
      doubleArray0[7] = (double) 59;
      ArrayUtils.swap(doubleArray0, 59, (-119));
      assertArrayEquals(new double[] {119.0, 119.0, 0.0, 59.0, 59.0, 119.0, 59.0, 59.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)64;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)7, (int) (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)7, (byte) (-1), (byte)64}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {119.0, 119.0, 0.0, 59.0, 59.0, 119.0, 59.0, 59.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {59.0, 59.0, 119.0, 59.0, 59.0, 0.0, 119.0, 119.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      ArrayUtils.shift((char[]) null, 1018);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      long[] longArray0 = new long[9];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertTrue(boolean0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(0.32911128F);
      assertNotNull(float0);
      assertEquals(0.32911128F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.32911128F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.32911128F, (float)float1, 0.01F);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)14;
      shortArray0[1] = (short)14;
      shortArray0[2] = (short) (-458);
      shortArray0[3] = (short)121;
      shortArray0[4] = (short)14;
      shortArray0[5] = (short)9;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)9;
      shortArray0[8] = (short)59;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)14, (short)14, (short) (-458), (short)121, (short)14, (short)9, (short) (-1), (short)9, (short)59}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.32911128F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2862.980926564101);
      assertArrayEquals(new double[] {0.3291112780570984}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[13];
      intArray0[0] = (int) (short)14;
      intArray0[1] = (int) (short)121;
      intArray0[2] = (int) (short)59;
      intArray0[3] = 640;
      intArray0[4] = (int) (short)9;
      intArray0[5] = (int) (short) (-1);
      intArray0[6] = (int) (short)14;
      intArray0[7] = (int) (short)121;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 309);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(13, intArray0.length);
      assertEquals(13, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Byte byte0 = new Byte((byte)24);
      assertNotNull(byte0);
      assertEquals((byte)24, (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertNotNull(string0);
      assertEquals("24", string0);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      int[] intArray0 = new int[7];
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '[');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertArrayEquals(new char[] {'#'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-1), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)10;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(121, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 121, Length: 10
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      ArrayUtils.shift(shortArray0, (int) (short) (-48), 76, (int) (short) (-48));
      assertArrayEquals(new short[] {(short) (-48), (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-75);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-75.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)50;
      Byte byte1 = new Byte((byte)50);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)50, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)50, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)2);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)2, (byte)byte3);
      
      byteArray0[2] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)50);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)2}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.insert((int) (byte)2, byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)2}, byteArray1);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50, (byte)50, (byte)2, (byte)2}, byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)37;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)80);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)80, (byte)80, (byte) (-9), (byte) (-70), (byte)37}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)80, (byte)80, (byte) (-9), (byte) (-70), (byte)37, (byte)80}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(byteArray1, (int) (byte)80, 854);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)80, (byte)80, (byte) (-9), (byte) (-70), (byte)37}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)80, (byte)80, (byte) (-9), (byte) (-70), (byte)37, (byte)80}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-70);
      shortArray0[1] = (short) (byte)37;
      shortArray0[2] = (short) (byte) (-9);
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)37, (short) (-9), (short) (-70)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (byte)80;
      doubleArray0[2] = (double) (short)37;
      doubleArray0[3] = (double) (short) (-70);
      doubleArray0[4] = (double) (byte)80;
      doubleArray0[5] = (double) (byte)37;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, 869);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {1.0, 80.0, 37.0, (-70.0), 80.0, 37.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, byteArray0, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1490.3920209;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1287;
      longArray0[1] = (long) 1287;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 1287;
      longArray0[4] = (long) 1287;
      longArray0[5] = (long) 1287;
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2274.6455));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1490.3920209}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)147;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 350);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {147}, intArray0);
      assertArrayEquals(new int[] {350, 147}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1287L;
      floatArray0[1] = (float) 350;
      floatArray0[2] = (float) 1287L;
      floatArray0[3] = (float) 1287L;
      floatArray0[4] = (float) (short)147;
      floatArray0[5] = (float) (-1L);
      floatArray0[6] = (float) (-1L);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 933.6F, 147);
      assertArrayEquals(new float[] {1287.0F, 350.0F, 1287.0F, 1287.0F, 147.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "T(-p0\"g";
      stringArray0[1] = "#~Cr]";
      stringArray0[2] = "";
      stringArray0[3] = "\"1N#^fe?{B5f=SpS";
      stringArray0[4] = "z6A1(xzUaH";
      stringArray0[5] = "Search and Replace array lengths don't match: ";
      stringArray0[6] = "Timeout for vintage @Test must be positive.";
      stringArray0[7] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[2] = 'j';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000', 0);
      assertArrayEquals(new char[] {'j', '\u0000', 'j'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      Integer integer0 = new Integer(64);
      assertNotNull(integer0);
      assertEquals(64, (int)integer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '', 64);
      assertArrayEquals(new char[] {''}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-758), (-758));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.swap((float[]) null, 1, 6);
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short) (-1807);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-1807), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1807);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (short) (-1807);
      doubleArray0[3] = (double) 0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-2377.75260549665));
      assertArrayEquals(new double[] {(-1807.0), 1.0, (-1807.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1807.0), 1.0, (-1807.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1807.0);
      objectArray0[1] = (Object) (-1807.0);
      ArrayUtils.reverse(objectArray0, 2223, 2223);
      assertEquals(2, objectArray0.length);
      
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1807);
      shortArray1[1] = (short) (-1807);
      shortArray1[2] = (short) (-1807);
      ArrayUtils.shift(shortArray1, (int) (short) (-1807), (int) (short) (-1807), (-1));
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1807), (short) (-1807), (short) (-1807)}, shortArray1);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-94));
      assertNotNull(byte0);
      assertEquals((byte) (-94), (byte)byte0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-94);
      doubleArray0[1] = (double) (byte) (-94);
      doubleArray0[2] = (double) (byte) (-94);
      doubleArray0[3] = (double) (byte) (-94);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1097.1901730628858));
      assertArrayEquals(new double[] {(-94.0), (-94.0), (-94.0), (-94.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.insert((-865), (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 'J';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'W', 2146338323);
      assertArrayEquals(new char[] {'W', 'J'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) null, "7L?");
      assertNull(stringArray1);
      
      ArrayUtils.shift((byte[]) null, (-896));
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1339;
      shortArray0[1] = (short)286;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)2823;
      ArrayUtils.shift(shortArray0, (int) (short)0, (int) (short)0, (int) (short)1339);
      assertArrayEquals(new short[] {(short)1339, (short)286, (short)0, (short)2823}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)1339;
      intArray0[2] = (int) (short)1339;
      intArray0[3] = (int) (short)286;
      intArray0[4] = (int) (short)286;
      intArray0[5] = (-60);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (short)286);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 1339, 1339, 286, 286, (-60)}, intArray0);
      assertArrayEquals(new int[] {0, 1339, 1339, (-60)}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 321, 321, 321);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '-', (int) (byte)19);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      Byte byte0 = new Byte((byte)37);
      assertNotNull(byte0);
      assertEquals((byte)37, (byte)byte0);
      
      Byte byte1 = new Byte((byte)80);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)80, (byte)byte1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)80;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)80;
      intArray0[1] = 2;
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {80, 2}, intArray0);
      assertArrayEquals(new int[] {80, 2, 80, 2}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'b');
      assertArrayEquals(new char[] {'b', '\u0000', 'b', 'b', 'b'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(4, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 80;
      doubleArray0[1] = (double) 'b';
      doubleArray0[2] = (double) (byte)37;
      doubleArray0[3] = (double) (short)80;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 37.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {80.0, 98.0, 37.0, 80.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {37.0, 80.0, 98.0, 37.0, 80.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Byte byte1 = new Byte((byte)37);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)37, (byte)byte1);
      
      Byte byte2 = new Byte((byte)21);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)21, (byte)byte2);
      
      Byte byte3 = new Byte((byte)80);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)80, (byte)byte3);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte2;
      Byte byte4 = new Byte((byte) (-68));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte) (-68), (byte)byte4);
      
      byteArray0[1] = byte4;
      byteArray0[2] = byte1;
      Byte byte5 = new Byte((byte)80);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertEquals((byte)80, (byte)byte5);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Byte byte6 = new Byte((byte) (-68));
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertEquals((byte) (-68), (byte)byte6);
      
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte6);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = 's';
      charArray0[2] = 'U';
      charArray0[3] = 'P';
      charArray0[4] = '4';
      charArray0[5] = 'S';
      charArray0[6] = '^';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '1');
      assertArrayEquals(new char[] {')', 's', 'U', 'P', '4', 'S', '^'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) (byte)21, (-1025), (-1390));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      float[] floatArray0 = new float[2];
      ArrayUtils.shift(floatArray0, (int) (byte) (-56));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      Byte byte0 = new Byte((byte)14);
      assertNotNull(byte0);
      assertEquals((byte)14, (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)14;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[3] = (-1.0);
      doubleArray0[5] = (double) (-175);
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.reverse(byteArray0, 764, 854);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-70);
      shortArray0[1] = (short) (byte) (-9);
      shortArray0[2] = (short) (byte)14;
      shortArray0[3] = (short) (byte)14;
      shortArray0[4] = (short) (byte) (-9);
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte) (-9);
      shortArray0[7] = (short) (byte) (-9);
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-9), (short)14, (short)14, (short) (-9), (short)0, (short) (-9), (short) (-9), (short) (-70)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 764;
      floatArray0[1] = (float) (short) (-9);
      floatArray0[2] = (-2731.89F);
      ArrayUtils.shift(floatArray0, (int) (byte)0);
      assertArrayEquals(new float[] {764.0F, (-9.0F), (-2731.89F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 95.40503F);
      assertArrayEquals(new float[] {764.0F, (-9.0F), (-2731.89F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-9);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(386, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 386, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1705.994F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2664);
      shortArray0[1] = (short)53;
      shortArray0[2] = (short) (-1797);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)53;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {53L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[3];
      booleanArray1[0] = boolean1;
      Boolean boolean2 = new Boolean("q=G2OK3A5PZk`F!p");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray1[1] = boolean2;
      booleanArray1[2] = boolean1;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray2));
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray2);
      
      boolean boolean3 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-2664), (short)53, (short) (-1797), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 1211, Integer.MAX_VALUE, (-1624));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 1211;
      intArray0[2] = 1211;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = 82;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 1211, 1211, Integer.MAX_VALUE, 82}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 5.88552718);
      assertArrayEquals(new double[] {5.88552718}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {82, Integer.MAX_VALUE, 1211, 1211, Integer.MAX_VALUE}, intArray0);
      assertEquals(5, intArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)110;
      shortArray0[2] = (short)2171;
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 1222, Integer.MAX_VALUE, (-1624));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int[] intArray0 = new int[5];
      ArrayUtils.swap(intArray0, 21, (-1110));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)66;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)98, (byte)58, (byte)98, (byte)66, (byte)66}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (long) (byte)1;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {1L, 1L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'R';
      charArray0[2] = '!';
      charArray0[3] = '{';
      charArray0[4] = '@';
      charArray0[5] = '~';
      charArray0[6] = ')';
      boolean boolean0 = ArrayUtils.contains(charArray0, '@');
      assertArrayEquals(new char[] {'{', 'R', '!', '{', '@', '~', ')'}, charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Character character0 = new Character(')');
      assertNotNull(character0);
      assertEquals(')', (char)character0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '~';
      longArray0[1] = (long) 'R';
      longArray0[2] = (long) '{';
      ArrayUtils.shift(longArray0, 1, (int) character0, (-1273));
      assertArrayEquals(new long[] {126L, 123L, 82L}, longArray0);
      assertEquals(3, longArray0.length);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) 123L);
      assertNotNull(float0);
      assertEquals(123.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) 123L);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(123.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) character0);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(41.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2133164226), (-1522));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'{', 'R', '!', '{', '@', '~', ')'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 633.681447207871;
      doubleArray0[5] = 1490.3920209;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1320;
      longArray0[1] = (long) 1320;
      longArray0[2] = 1320L;
      longArray0[3] = (long) 1320;
      longArray0[4] = (long) 1320;
      longArray0[5] = (long) 1320;
      longArray0[6] = (long) 1320;
      longArray0[7] = (long) 1320;
      longArray0[8] = (long) 1320;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {1320L, 1320L, 1320L, 1320L, 1320L, 1320L, 1320L, 1320L, 1320L}, longArray0);
      assertEquals(9, longArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Boolean[] booleanArray2 = new Boolean[9];
      booleanArray2[0] = (Boolean) true;
      booleanArray2[1] = (Boolean) true;
      booleanArray2[2] = (Boolean) true;
      booleanArray2[3] = (Boolean) true;
      booleanArray2[4] = booleanArray2[3];
      booleanArray2[5] = (Boolean) true;
      booleanArray2[7] = (Boolean) true;
      booleanArray2[8] = (Boolean) true;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'w';
      doubleArray0[1] = (double) 'w';
      doubleArray0[2] = (double) 59;
      doubleArray0[3] = (double) 59;
      doubleArray0[4] = (double) 59;
      doubleArray0[5] = (double) 'w';
      doubleArray0[6] = (double) 59;
      doubleArray0[7] = (double) 59;
      ArrayUtils.swap(doubleArray0, 59, (-119));
      assertArrayEquals(new double[] {119.0, 119.0, 59.0, 59.0, 59.0, 119.0, 59.0, 59.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 59;
      floatArray0[1] = (float) 59;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {59.0F, 59.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-1);
      boolean boolean1 = ArrayUtils.isSorted((long[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)64, (byte)7, (byte) (-1), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)64, (byte)7, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-19);
      longArray0[1] = (-4790L);
      longArray0[2] = (-4790L);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-19);
      intArray0[1] = 2;
      intArray0[2] = 2;
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-4790L);
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((Object[]) longArray0);
      assertEquals(1, longArray0.length);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)82);
      assertNotNull(short0);
      assertEquals((short)82, (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)82}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-91);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (int) (byte)60);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)2, (byte) (-91)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-91)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-91);
      floatArray0[1] = (float) (byte)21;
      floatArray0[2] = (float) 'm';
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-91.0F), 21.0F, 109.0F, (-91.0F), 21.0F, 109.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-91.0F), 21.0F, 109.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-91);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 21.0F;
      ArrayUtils.reverse(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-537.27737141392);
      doubleArray0[4] = 0.0;
      ArrayUtils.shift(doubleArray0, 12);
      assertArrayEquals(new double[] {(-537.27737141392), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 12);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {12.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 12;
      intArray0[2] = 12;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 12;
      longArray0[1] = (-1375L);
      longArray0[2] = (long) 12;
      longArray0[3] = (long) 12;
      longArray0[4] = (long) 12;
      longArray0[5] = (long) 12;
      longArray0[6] = (long) 12;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 294L, (-1302));
      assertArrayEquals(new long[] {12L, (-1375L), 12L, 12L, 12L, 12L, 12L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {12L, (-1375L), 12L, 12L, 12L, 12L, 12L}, longArray0);
      assertEquals(7, longArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray2 = ArrayUtils.add(floatArray0, (float) (-1375L));
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertArrayEquals(new float[] {(-1375.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(1, floatArray2.length);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-18);
      intArray0[1] = (-18);
      intArray0[2] = 0;
      intArray0[3] = 1;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1);
      assertArrayEquals(new int[] {(-18), (-18), 0, 1, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(3, int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-62);
      shortArray0[1] = (short) (-62);
      shortArray0[2] = (short)114;
      shortArray0[3] = (short)114;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)114, (-18));
      assertArrayEquals(new short[] {(short) (-62), (short) (-62), (short)114, (short)114}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      int int2 = ArrayUtils.lastIndexOf((float[]) null, (-568.0F), 1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-121);
      doubleArray0[2] = (double) (short)114;
      doubleArray0[3] = (double) (-18);
      doubleArray0[4] = (double) (short) (-62);
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 431.688F;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {1.0, (-121.0), 114.0, (-18.0), (-62.0), 3.0, 1.0, 431.68798828125}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-62);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (short)114;
      int int3 = ArrayUtils.lastIndexOf(longArray0, (-1375L), 0);
      assertArrayEquals(new long[] {(-62L), 2L, 114L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-18);
      intArray0[1] = (-18);
      intArray0[2] = 0;
      intArray0[3] = (-18);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1);
      assertArrayEquals(new int[] {(-18), (-18), 0, (-18), 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-62);
      shortArray0[1] = (short) (-62);
      shortArray0[2] = (short)114;
      shortArray0[3] = (short) (-62);
      int int1 = ArrayUtils.indexOf(shortArray0, (short)114, (-18));
      assertArrayEquals(new short[] {(short) (-62), (short) (-62), (short)114, (short) (-62)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      int int2 = ArrayUtils.lastIndexOf((float[]) null, (float) 1, 1);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-18);
      doubleArray0[1] = (double) (short) (-62);
      doubleArray0[2] = (double) (short) (-62);
      doubleArray0[3] = (double) (-18);
      doubleArray0[4] = (double) (short) (-62);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 431.688F;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-18.0), (-62.0), (-62.0), (-18.0), (-62.0), (-1.0), 1.0, 431.68798828125}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-62);
      longArray0[1] = (long) 2;
      doubleArray0[1] = (double) (short)114;
      int int3 = ArrayUtils.lastIndexOf(longArray0, (-1375L), 0);
      assertArrayEquals(new long[] {(-62L), 2L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (int) (byte) (-1));
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-1.0F), 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-1.0F), 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, (-1.0F), 0.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      ArrayUtils.shift((double[]) null, (-106));
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      MockRandom mockRandom0 = new MockRandom((-106));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-91);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (int) (byte)21);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)2, (byte) (-91)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-91)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = '&';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'8', '&'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 7);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[4] = class4;
      Class<Byte> class5 = Byte.class;
      classArray0[5] = class5;
      Class<Byte> class6 = Byte.class;
      classArray0[6] = class6;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(7, classArray0.length);
      assertEquals(7, classArray1.length);
      assertNotNull(classArray1);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-3));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-3), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = ArrayUtils.get(byteArray0, (-20));
      assertEquals(3, byteArray0.length);
      assertNull(byte4);
      
      String string0 = ArrayUtils.toString((Object) null, " P'S");
      assertNotNull(string0);
      assertEquals(" P'S", string0);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Byte byte0 = new Byte((byte)24);
      assertNotNull(byte0);
      assertEquals((byte)24, (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertNotNull(string0);
      assertEquals("24", string0);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-83);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte) (-83));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-83), 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long long0 = new Long(1838L);
      assertNotNull(long0);
      assertEquals(1838L, (long)long0);
      
      Long long1 = new Long((-1L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      
      Long long2 = new Long((-2652L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-2652L), (long)long2);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte)58;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-101), (byte)3, (byte) (-84), (byte) (-84), (byte) (-84), (byte)58}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      
      Integer integer0 = Integer.valueOf(7);
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      Integer integer1 = new Integer(3785);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(3785, (int)integer1);
      
      Integer integer2 = new Integer((byte) (-84));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-84), (int)integer2);
      
      ArrayUtils.shift(byteArray0, (-84), (-7404), 1);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-101), (byte)3, (byte) (-84), (byte) (-84), (byte) (-84), (byte)58}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((short)3467);
      assertNotNull(long0);
      assertEquals(3467L, (long)long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)8}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)8;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 8L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)1;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte)8);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Long[] longArray1 = new Long[7];
      Long long0 = new Long((byte)1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      longArray1[0] = long0;
      longArray1[1] = (Long) 0L;
      longArray1[2] = (Long) 0L;
      longArray1[3] = (Long) 0L;
      longArray1[4] = (Long) 8L;
      longArray1[5] = (Long) 0L;
      longArray1[6] = (Long) 0L;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray2.length);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 634.744;
      doubleArray0[1] = (-3725.7315891404155);
      doubleArray0[2] = 1.5;
      doubleArray0[3] = 1918.9;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-697.439));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {634.744, (-3725.7315891404155), 1.5, 1918.9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-697.439), 634.744, (-3725.7315891404155), 1.5, 1918.9}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-619));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -619, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      byteArray0[2] = (Byte) byte0;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte0;
      intArray0[3] = (int) byte0;
      intArray0[4] = (int) byte0;
      intArray0[5] = (int) byte0;
      intArray0[6] = (int) byte0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1556);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (byte)0;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-687), (-1));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-5516));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5516, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3447.0145614;
      doubleArray0[1] = 2862.980926564101;
      doubleArray0[2] = (-1303.58299);
      doubleArray0[3] = (-786.36132586);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1167.325272755902);
      doubleArray0[6] = 10.2758469175;
      doubleArray0[7] = 1918.9;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5);
      assertArrayEquals(new double[] {3447.0145614, 2862.980926564101, (-1303.58299), (-786.36132586), (-1.0), (-1167.325272755902), 10.2758469175, 1918.9}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-324));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-324);
      doubleArray0[1] = (double) (-324);
      doubleArray0[2] = (double) (-324);
      doubleArray0[3] = (double) (-324);
      doubleArray0[4] = (double) (-324);
      doubleArray0[5] = (double) (-324);
      doubleArray0[6] = (double) (-324);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-980.79606));
      assertArrayEquals(new double[] {(-324.0), (-324.0), (-324.0), (-324.0), (-324.0), (-324.0), (-324.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'w';
      doubleArray0[1] = (double) 'w';
      doubleArray0[2] = (double) 59;
      doubleArray0[3] = (double) 59;
      doubleArray0[4] = (double) 59;
      doubleArray0[5] = (double) 'w';
      doubleArray0[6] = (double) 59;
      doubleArray0[7] = (double) 59;
      ArrayUtils.swap(doubleArray0, 59, (-119));
      assertArrayEquals(new double[] {119.0, 119.0, 59.0, 59.0, 59.0, 119.0, 59.0, 59.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 59;
      floatArray0[1] = (float) 59;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {59.0F, 59.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)64;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)7, (int) (byte) (-1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)64, (byte)7, (byte) (-1), (byte)64}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(floatArray0, 1, (int) (byte)64);
      assertArrayEquals(new float[] {59.0F, 59.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {119.0, 119.0, 59.0, 59.0, 59.0, 119.0, 59.0, 59.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-265.4629F), (int) (byte)64);
      assertArrayEquals(new float[] {59.0F, 59.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-119);
      intArray0[1] = (int) (byte)7;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1385);
      shortArray0[1] = (short)108;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-1385), (short)108}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)108, (short) (-1385)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1764.2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-336.3304258383));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'R';
      charArray0[2] = '!';
      charArray0[3] = '{';
      charArray0[4] = '@';
      charArray0[5] = '~';
      charArray0[6] = ')';
      boolean boolean0 = ArrayUtils.contains(charArray0, '@');
      assertArrayEquals(new char[] {'{', 'R', '!', '{', '@', '~', ')'}, charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Character character0 = new Character(')');
      assertNotNull(character0);
      assertEquals(')', (char)character0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '~';
      longArray0[1] = (long) 'R';
      longArray0[2] = (long) '{';
      ArrayUtils.shift(longArray0, 1, (int) character0, (-1273));
      assertArrayEquals(new long[] {126L, 123L, 82L}, longArray0);
      assertEquals(3, longArray0.length);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) 123L);
      assertNotNull(float0);
      assertEquals(123.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) 123L);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(123.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) character0);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(41.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) 82L);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      int int0 = ArrayUtils.indexOf((short[]) null, (short)1822);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int1 = ArrayUtils.indexOf((short[]) null, (short)1822, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 69, 0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift((short[]) null, (-1));
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-392.81551));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-392.81551), (double)double2, 0.01);
      
      Class<Byte> class0 = Byte.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Class<Byte> class1 = Byte.TYPE;
      assertSame(class1, class0);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("byte", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertNotNull(class1);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 1);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[7] = (float) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2615.1643F, 0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean("Q:dG=d;Z1UCt");
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean2;
      Boolean boolean4 = new Boolean("m7%:`5");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4);
      
      booleanArray0[1] = boolean4;
      booleanArray0[3] = boolean3;
      booleanArray0[4] = boolean1;
      booleanArray0[5] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray1));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.shift(floatArray0, 50);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 5);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[4] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(5, classArray1.length);
      assertEquals(5, classArray0.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      short[] shortArray0 = new short[0];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 721;
      doubleArray0[1] = (double) 1072;
      doubleArray0[2] = (double) 721;
      doubleArray0[3] = (double) 1072;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1072.0, 2146976493);
      assertArrayEquals(new double[] {721.0, 1072.0, 721.0, 1072.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, int0);
      
      Character character0 = new Character('q');
      assertNotNull(character0);
      assertEquals('q', (char)character0);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.swap((char[]) null, (-982), 3582);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'', '', '\u0000'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1726));
      assertNotNull(short0);
      assertEquals((short) (-1726), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short) (-1726)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      char[] charArray2 = ArrayUtils.subarray(charArray0, (int) (short) (-1726), (int) (short) (-1726));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray2.length);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      ArrayUtils.swap(charArray2, (int) (short) (-1726), (int) (short) (-1726), 1704);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 721, 1072);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      Character character0 = new Character('\\');
      assertNotNull(character0);
      assertEquals('\\', (char)character0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-70);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-70)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'B';
      charArray0[4] = '\\';
      charArray0[5] = '%';
      charArray0[6] = '\\';
      ArrayUtils.swap(charArray0, (-982), 3582);
      assertArrayEquals(new char[] {'B', 'M', 'M', 'B', '\\', '%', '\\'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      char[] charArray0 = new char[2];
      ArrayUtils.shift(charArray0, 1322);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.swap(charArray0, 1322, 1322, 1322);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 5.88552718;
      doubleArray0[1] = (double) (-2146737475);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), (-70));
      assertArrayEquals(new double[] {5.88552718, (-2.146737475E9)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      Character character0 = new Character('M');
      assertNotNull(character0);
      assertEquals('M', (char)character0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2570;
      shortArray0[1] = (short) (-70);
      shortArray0[2] = (short) (-10948);
      shortArray0[3] = (short) (-10948);
      shortArray0[4] = (short)2384;
      shortArray0[5] = (short)2570;
      shortArray0[6] = (short)2384;
      shortArray0[7] = (short)32;
      shortArray0[8] = (short) (-707);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-707), (short)32, (short)2384, (short)2570, (short)2384, (short) (-10948), (short) (-10948), (short) (-70), (short)2570}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      charArray0[7] = 'M';
      charArray0[8] = 'M';
      ArrayUtils.swap(charArray0, (int) (short)2570, 41);
      assertArrayEquals(new char[] {'B', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1214.0F;
      doubleArray0[1] = (double) 1214.0F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1214.0F;
      doubleArray0[4] = (double) 1214.0F;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1214.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, 0, 1214.0);
      assertArrayEquals(new double[] {1214.0, 1214.0, 0.0, 1214.0, 1214.0, 0.0, 1214.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = ArrayUtils.get(objectArray0, (-3341));
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Byte byte0 = new Byte((byte)4);
      assertNotNull(byte0);
      assertEquals((byte)4, (byte)byte0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) byte0, 11);
      assertEquals(3, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(objectArray0, (int) (byte)4);
      assertEquals(3, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 566.4602831141126;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1635.262798643, 425.18116617402);
      assertArrayEquals(new double[] {566.4602831141126, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)5);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {566.4602831141126, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {566.4602831141126, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short)0;
      objectArray0[5] = (Object) (short)0;
      objectArray0[6] = (Object) 0.0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[7] = object1;
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(8, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, Float.NaN);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray0, Float.NaN);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (-303));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = '?';
      charArray0[2] = 'D';
      charArray0[3] = '!';
      charArray0[4] = 'Q';
      charArray0[5] = 'F';
      charArray0[6] = 's';
      charArray0[7] = '{';
      charArray0[8] = '!';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'D';
      doubleArray0[1] = (double) '~';
      doubleArray0[2] = (double) 'D';
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {68.0, 126.0, 68.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 's';
      floatArray0[1] = (float) '{';
      floatArray0[2] = (float) '{';
      floatArray0[3] = (float) 's';
      floatArray0[4] = (float) '!';
      floatArray0[5] = (float) '?';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-324), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -324, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1705.994F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2664);
      shortArray0[1] = (short)53;
      shortArray0[2] = (short) (-1797);
      shortArray0[3] = (short)1008;
      shortArray0[4] = (short)147;
      shortArray0[5] = (short)3650;
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'l', 1);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)1008;
      longArray0[2] = (long) (short)3650;
      longArray0[3] = (-4790L);
      longArray0[4] = (long) (short)1008;
      longArray0[5] = (long) 'l';
      longArray0[6] = (long) (short)3650;
      longArray0[7] = (long) (short) (-2664);
      longArray0[8] = (long) (short)1008;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)53, 2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 1008L, 3650L, (-4790L), 1008L, 108L, 3650L, (-2664L), 1008L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[2] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-9);
      shortArray0[3] = (short)1850;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-630);
      shortArray0[6] = (short) (-1430);
      shortArray0[7] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals("{0, 1, 4, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-9), (short)1850, (short)0, (short) (-630), (short) (-1430), (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-238L));
      assertNull(longArray0);
      
      ArrayUtils.reverse((Object[]) null);
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 26;
      intArray0[1] = 26;
      intArray0[2] = 2;
      intArray0[3] = 8192;
      intArray0[4] = 606;
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {26, 26, 2, 8192, 606}, intArray0);
      assertArrayEquals(new int[] {26, 26, 26, 26, 2, 8192, 606, 2, 8192, 606}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      ArrayUtils.swap(byteArray0, 21, 26, 1312);
      assertArrayEquals(new byte[] {(byte)16}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)16}, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)16}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[7] = (float) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2615.1643F, 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean("Q:dG=d;Z1UCt");
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      boolean boolean4 = ArrayUtils.contains(doubleArray0, 1.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean4);
      
      boolean boolean5 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 735;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {735, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 735, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2085;
      shortArray0[1] = (short) (-9);
      shortArray0[2] = (short)2329;
      ArrayUtils.swap(shortArray0, (int) (short)2329, (int) (short) (-9), (int) (short)2329);
      assertArrayEquals(new short[] {(short)2085, (short) (-9), (short)2329}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-9);
      longArray0[1] = (long) (short)2085;
      longArray0[2] = (long) (short)2085;
      longArray0[3] = (long) (short)2329;
      longArray0[4] = (long) (short)2329;
      longArray0[5] = (long) (short)2329;
      longArray0[2] = (long) (short) (-9);
      longArray0[7] = (long) (short) (-9);
      ArrayUtils.shift(longArray0, (int) (short)2085, (int) (short) (-9), (int) (short)2329);
      assertArrayEquals(new long[] {(-9L), 2085L, (-9L), 2329L, 2329L, 2329L, 0L, (-9L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-9L), 2085L, (-9L), 2329L, 2329L, 2329L, 0L, (-9L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean[] booleanArray2 = new Boolean[3];
      booleanArray2[0] = boolean1;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short short0 = (short)79;
      Short short1 = new Short((short)79);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)79, (short)short1);
      
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short0);
      assertArrayEquals(new short[] {(short)79}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((Object[]) longArray0);
      assertEquals(1, longArray0.length);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)3);
      assertNotNull(short0);
      assertEquals((short)3, (short)short0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)14);
      assertArrayEquals(new short[] {(short)14}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      Short[] shortArray0 = new Short[17];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)14);
      assertEquals(17, shortArray0.length);
      assertEquals(17, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-68);
      Byte byte3 = new Byte((byte) (-68));
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-68), (byte)byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)0);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte)0, (byte)byte4);
      
      byteArray0[2] = byte4;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (byte)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-687), (int) byte2);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(byte2 == byte0);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) byteArray1, (Random) mockRandom0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      org.evosuite.runtime.Random.setNextRandom((-1389));
      Short[] shortArray1 = new Short[9];
      shortArray1[0] = (Short) (short)0;
      shortArray1[1] = (Short) (short)0;
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      shortArray1[2] = short0;
      shortArray1[3] = (Short) (short)0;
      shortArray1[4] = (Short) (short)0;
      shortArray1[5] = (Short) (short)0;
      shortArray1[6] = (Short) (short)0;
      shortArray1[7] = (Short) (short)0;
      shortArray1[8] = (Short) (short)0;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)2085);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray2.length);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-758), (-758));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.swap((float[]) null, 1, 32);
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short) (-1807);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-1807), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean("");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = new Boolean((String) null);
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1131.1F);
      floatArray0[1] = 3718.867F;
      floatArray0[2] = (-1.0F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 3718.867F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1131.1F), 3718.867F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1131.1F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray0, object0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(8, booleanArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1244;
      intArray0[1] = 2080;
      ArrayUtils.swap(intArray0, (-1388), (-1388), 2080);
      assertArrayEquals(new int[] {1244, 2080}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)121;
      ArrayUtils.shift(booleanArray0, 4, 1136, (int) (short)121);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = '~';
      charArray0[2] = '5';
      charArray0[3] = '~';
      charArray0[4] = '~';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'5', '~', '5', '~', '~'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.swap(shortArray0, 4, 2224);
      assertArrayEquals(new short[] {(short)121, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)2;
      ArrayUtils.reverse(intArray0, 97, 97);
      assertArrayEquals(new int[] {2, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      ArrayUtils.swap((float[]) null, 1110, (-2147483612));
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-1807));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, 0.0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (short)2;
      doubleArray0[2] = (-254.9962526318347);
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("NSK,.wXf*b?}x>T18)");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean0;
      ArrayUtils.swap((short[]) null, 2, (int) (short)2, 1);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short)0, (int) (short)0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.swap(shortArray0, 5630, 5630, 5630);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2085;
      shortArray0[1] = (short) (-9);
      shortArray0[2] = (short)2329;
      ArrayUtils.swap(shortArray0, (int) (short)2329, (int) (short) (-9), (int) (short)2329);
      assertArrayEquals(new short[] {(short)2085, (short) (-9), (short)2329}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-9);
      longArray0[1] = (long) (short)2085;
      longArray0[2] = (long) (short)2085;
      longArray0[3] = (long) (short)2329;
      longArray0[4] = (long) (short)2329;
      longArray0[5] = (long) (short)2329;
      longArray0[6] = (long) (short) (-9);
      longArray0[7] = (long) (short) (-9);
      ArrayUtils.shift(longArray0, (int) (short)2085, (int) (short) (-9), (int) (short)2329);
      assertArrayEquals(new long[] {(-9L), 2085L, 2085L, 2329L, 2329L, 2329L, (-9L), (-9L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = 'F';
      charArray0[2] = 'q';
      charArray0[3] = 'x';
      charArray0[4] = '[';
      charArray0[5] = '*';
      charArray0[6] = '[';
      charArray0[7] = 'l';
      charArray0[8] = 'T';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '4', 422);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new char[] {'h', 'F', 'q', 'x', '[', '*', '[', 'l', 'T'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(1, int0);
      
      ArrayUtils.reverse(booleanArray0, 1, 114);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false, false, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (-303));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = '?';
      charArray0[2] = 'D';
      charArray0[3] = '!';
      charArray0[4] = 'Q';
      charArray0[5] = 'C';
      charArray0[6] = 's';
      charArray0[7] = '{';
      charArray0[8] = '!';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'~', '?', 'D', '!', 'Q', 'C', 's', '{', '!'}, charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      charArray0[4] = 'D';
      doubleArray0[1] = (double) '~';
      doubleArray0[2] = (double) 'D';
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 126.0, 68.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.insert(5, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.insert(1, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5321.0302);
      doubleArray0[1] = (-1627.6008281);
      doubleArray0[2] = (-524.7704);
      doubleArray0[3] = (-4700.99267578125);
      doubleArray0[4] = (-4554.927811571522);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-5321.0302), (-876), (-1627.6008281));
      assertArrayEquals(new double[] {(-5321.0302), (-1627.6008281), (-524.7704), (-4700.99267578125), (-4554.927811571522)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 68;
      intArray0[1] = 0;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 2;
      intArray0[4] = (-2146908318);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {68, 0, Integer.MAX_VALUE, 2, (-2146908318)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 68;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 68, (-2), (double) (-2146908318));
      assertArrayEquals(new double[] {68.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = '^';
      charArray0[2] = 'V';
      charArray0[3] = '1';
      charArray0[4] = '`';
      charArray0[5] = 'H';
      charArray0[6] = 't';
      charArray0[7] = '6';
      charArray0[8] = '6';
      char[] charArray1 = ArrayUtils.add(charArray0, '=');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'s', '^', 'V', '1', '`', 'H', 't', '6', '6', '='}, charArray1);
      assertArrayEquals(new char[] {'s', '^', 'V', '1', '`', 'H', 't', '6', '6'}, charArray0);
      assertEquals(10, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(7, bitSet0.cardinality());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 5, 6, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(48, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-687);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-687), (int) (byte) (-1));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new float[] {(-687.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-1);
      objectArray0[1] = (Object) (-687.0F);
      objectArray0[2] = (Object) (-687.0F);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(7, byteBuffer0.remaining());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(7, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      BitSet bitSet1 = BitSet.valueOf(byteBuffer0);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(7, byteBuffer0.remaining());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(7, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(16, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(16, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}", bitSet1.toString());
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      objectArray0[3] = (Object) bitSet0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-1', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[6] = (byte) (-70);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-70), (byte) (-70), (byte)0, (byte)0, (byte) (-70), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-70), (byte) (-70), (byte)0, (byte)0, (byte) (-70), (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(byteArray1, (-1), (int) (byte) (-70));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-70), (byte) (-70), (byte)0, (byte)0, (byte) (-70), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-70), (byte) (-70), (byte)0, (byte)0, (byte) (-70), (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Double double0 = new Double((byte)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      Double double1 = new Double((byte)0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      Double double2 = new Double((double) doubleArray0[3]);
      assertEquals(9, doubleArray0.length);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[4] = double2;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)12);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-70), (byte) (-70), (byte)0, (byte)0, (byte) (-70), (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(bitSet0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Byte[] byteArray2 = new Byte[5];
      byteArray2[0] = (Byte) (byte) (-70);
      byteArray2[1] = (Byte) (byte) (-70);
      byteArray2[2] = (Byte) (byte) (-70);
      byteArray2[3] = (Byte) (byte) (-70);
      byteArray2[4] = (Byte) (byte) (-70);
      boolean boolean0 = ArrayUtils.isSorted(byteArray2);
      assertEquals(5, byteArray2.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-70);
      longArray0[1] = (long) (byte) (-70);
      longArray0[2] = (long) (byte) (-70);
      longArray0[3] = (-1204L);
      longArray0[4] = (-1073L);
      longArray0[5] = (long) (byte) (-70);
      longArray0[6] = (long) (byte) (-70);
      longArray0[7] = (long) (byte) (-70);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 5, 1776);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-70L), (-70L), (-70L)}, longArray1);
      assertArrayEquals(new long[] {(-70L), (-70L), (-70L), (-1204L), (-1073L), (-70L), (-70L), (-70L)}, longArray0);
      assertEquals(3, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) (short)0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)3, Integer.MAX_VALUE);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 2L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = (-1.8801737F);
      floatArray0[1] = 783.71454F;
      floatArray0[2] = 59.0F;
      floatArray0[3] = 3228.7512F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.8801737F), 783.71454F, 59.0F, 3228.7512F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.8801737F), 783.71454F, 59.0F, 3228.7512F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(10, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertNotNull(floatArray1);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)111;
      Byte byte1 = new Byte((byte)111);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)111, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)111);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)111, (byte)byte2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) '9';
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2418), 1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {2L}, longArray1);
      assertArrayEquals(new long[] {2L, 2L, 111L, 57L}, longArray0);
      assertEquals(1, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-29L));
      assertNotNull(long0);
      assertEquals((-29L), (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)1119;
      shortArray0[2] = (short)128;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)128, (short)1119, (short) (-1)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (-29L), (int) (short)128);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (-3717), (-3717));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2747.4679);
      doubleArray0[1] = (-2747.4679);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 5.88552718, (-2146737475));
      assertArrayEquals(new double[] {(-2747.4679), (-2747.4679), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'p';
      charArray0[4] = 'Y';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 5.88552718;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 657.30880384307;
      doubleArray1[4] = (double) 'p';
      doubleArray1[5] = (double) (-2146737475);
      doubleArray1[6] = (double) (-1);
      int int1 = new Character('f');
      assertFalse(int1 == int0);
      assertEquals('f', int1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2570;
      shortArray0[1] = (short)2384;
      shortArray0[2] = (short)11;
      shortArray0[3] = (short) (-70);
      shortArray0[4] = (short) (-10948);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-10948), (short) (-70), (short)11, (short)2384, (short)2570}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)88);
      assertArrayEquals(new byte[] {(byte)88, (byte)88}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)88;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)88, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 88, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      long[] longArray0 = ArrayUtils.insert((int) (short) (-48), (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1921L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-1921L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(3, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)14;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[3] = (-1.0);
      doubleArray0[5] = (double) (-175);
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = 'S';
      charArray0[2] = 'Y';
      charArray0[3] = '%';
      charArray0[4] = 'K';
      charArray0[5] = '.';
      charArray0[6] = 'c';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'Y');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {' ', 'S', '%', 'K', '.', 'c'}, charArray1);
      assertArrayEquals(new char[] {' ', 'S', 'Y', '%', 'K', '.', 'c'}, charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(7, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)14;
      longArray0[1] = 1364L;
      longArray0[2] = (long) 'S';
      longArray0[3] = (long) '%';
      longArray0[4] = (long) '.';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)14, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray0, object0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 48;
      intArray0[1] = 13;
      intArray0[2] = 0;
      intArray0[3] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 48);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {48, 13, 0, 1}, intArray0);
      assertArrayEquals(new int[] {48, 13, 0, 1, 48}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 48;
      ArrayUtils.swap((byte[]) null, 13, (-964));
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 1;
      objectArray0[1] = (Object) 13;
      objectArray0[2] = (Object) 48.0;
      objectArray0[3] = (Object) 48.0;
      objectArray0[4] = (Object) 48.0;
      objectArray0[5] = (Object) 13;
      objectArray0[6] = (Object) 0;
      objectArray0[7] = (Object) 48.0;
      objectArray0[8] = (Object) 0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, objectArray0.length);
      assertNotNull(stringArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) stringArray0, object0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, objectArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-9);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 569;
      doubleArray0[2] = (-3725.7315891404155);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-166.053), (int) (byte)80);
      assertArrayEquals(new double[] {1.0, 569.0, (-3725.7315891404155)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)80;
      intArray0[1] = (int) (byte)80;
      intArray0[2] = (-1);
      intArray0[3] = (int) (byte)80;
      intArray0[4] = (int) (byte)80;
      intArray0[5] = (int) (byte)80;
      intArray0[6] = 569;
      intArray0[7] = (int) (byte) (-9);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 80);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {80, (-1), 80, 80, 80, 569, (-9)}, intArray1);
      assertArrayEquals(new int[] {80, 80, (-1), 80, 80, 80, 569, (-9)}, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)14;
      shortArray0[1] = (short)14;
      shortArray0[2] = (short) (-458);
      shortArray0[3] = (short)121;
      shortArray0[4] = (short)14;
      shortArray0[5] = (short)9;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)9;
      shortArray0[8] = (short)59;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)14, (short)14, (short) (-458), (short)121, (short)14, (short)9, (short) (-1), (short)9, (short)59}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2862.980926564101);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)14;
      intArray0[1] = (int) (short)121;
      intArray0[2] = (int) (short)59;
      intArray0[3] = 640;
      intArray0[4] = (int) (short)9;
      intArray0[5] = (int) (short) (-1);
      intArray0[6] = (int) (short)14;
      intArray0[7] = (int) (short)121;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 309);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {14, 121, 59, 640, 9, (-1), 14, 121}, intArray0);
      assertArrayEquals(new int[] {14, 121, 59, 640, 9, (-1), 14, 121}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)37);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Double double0 = new Double(854);
      assertNotNull(double0);
      assertEquals(854.0, (double)double0, 0.01);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 93, (int) (byte)37);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 1;
      byteArray0[3] = (byte)37;
      floatArray0[3] = (-2490.3867F);
      floatArray0[4] = (float) (byte)37;
      ArrayUtils.reverse(floatArray0, 2, (-31));
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, (-2490.3867F), 37.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 854, (int) (byte)37);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, (-2490.3867F), 37.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-18);
      intArray0[1] = (-18);
      intArray0[2] = 0;
      intArray0[3] = 1;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      Byte byte0 = new Byte((byte)8);
      assertNotNull(byte0);
      assertEquals((byte)8, (byte)byte0);
      
      Byte byte1 = new Byte((byte)8);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)8, (byte)byte1);
      
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)8;
      shortArray0[1] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short)8, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((long[]) null, 9);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)8);
      assertArrayEquals(new short[] {(short)8, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)60);
      assertNull(byteArray2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 9;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 9.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-68);
      Byte byte3 = new Byte((byte) (-68));
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-68), (byte)byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)0);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte4);
      
      byteArray0[2] = byte4;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-68);
      intArray0[1] = (int) byte2;
      intArray0[2] = (int) byte0;
      intArray0[3] = (int) byte0;
      Byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) byte0);
      assertArrayEquals(new int[] {(-68), (-68), 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(byte0 == byte2);
      assertEquals(6, int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte2;
      shortArray0[3] = (short)114;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte) (-68);
      shortArray0[6] = (short) (byte)0;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-62), (-121));
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-68), (short)114, (short)0, (short) (-68), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-68), (byte)0, (byte)0}, byteArray3);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray3.length);
      assertNotNull(byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int2 = ArrayUtils.lastIndexOf((float[]) null, 431.688F, (int) (short) (-68));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) byte2;
      doubleArray0[2] = (double) (short) (-68);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-68.0), (-68.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-61L));
      assertNull(longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (-687));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      ArrayUtils.shift((double[]) null, 0);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-3769.1F);
      floatArray0[3] = (-313.63345F);
      floatArray0[4] = (-1523.412F);
      floatArray0[5] = (-91.0F);
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      float[] floatArray0 = new float[4];
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 1, 0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean[] booleanArray3 = ArrayUtils.addAll(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-648), 312);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, true, true}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-294.278);
      doubleArray0[1] = (-1188.351);
      doubleArray0[2] = 0.0;
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      MockRandom mockRandom0 = new MockRandom(2);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      mockRandom0.setSeed(2);
      IntStream intStream1 = mockRandom0.ints();
      assertNotSame(intStream1, intStream0);
      assertNotNull(intStream1);
      assertFalse(intStream1.equals((Object)intStream0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      int int0 = new Integer(2);
      assertEquals(2, int0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, 1, 2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertEquals(1, booleanArray2.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      boolean[] booleanArray3 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, true, false, true, true}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertEquals(10, booleanArray3.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 36;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayUtils.shift(doubleArray0, 161);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayUtils.shift(doubleArray0, 147);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1070.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 1070.0;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 733.38865812137;
      doubleArray1[5] = (-537.27737141392);
      doubleArray1[6] = (-537.27737141392);
      doubleArray1[7] = (double) 0;
      ArrayUtils.shift(doubleArray1, 147);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-537.27737141392), (-537.27737141392), 0.0, 1070.0, (-1.0), 1070.0, (-1.0), 733.38865812137}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1472.6097F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1472.6097F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 147;
      intArray0[2] = 147;
      intArray0[3] = 147;
      intArray0[4] = 147;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 147, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-1), 0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-59), intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)37);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 93, (int) (byte)37);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = 'C';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'c');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'c', 'c', 'c', 'C'}, charArray0);
      assertArrayEquals(new char[] {'C'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[2];
      booleanArray1[0] = boolean1;
      booleanArray1[1] = boolean1;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray2));
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (int) (byte)37);
      assertArrayEquals(new int[] {37}, intArray1);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)14;
      shortArray0[2] = (short)59;
      shortArray0[3] = (short) (-987);
      shortArray0[4] = (short)9;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-458);
      shortArray0[7] = (short)147;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)121, (short)14, (short)59, (short) (-987), (short)9, (short) (-1), (short) (-458), (short)147}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)147;
      doubleArray0[1] = (double) (short)121;
      doubleArray0[2] = (double) (short)59;
      doubleArray0[3] = (double) (short) (-987);
      doubleArray0[4] = (double) (short)121;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) (short)147;
      doubleArray0[7] = (double) (short)14;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (short)121);
      assertArrayEquals(new double[] {147.0, 121.0, 59.0, (-987.0), 121.0, 1.0, 147.0, 14.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) shortArray1, (Object[]) shortArray1);
      assertArrayEquals(new short[] {(short)121, (short)14, (short)59, (short) (-987), (short)9, (short) (-1), (short) (-458), (short)147}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (short)121);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {121}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-256);
      intArray0[2] = 0;
      intArray0[3] = 1;
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-256);
      doubleArray0[2] = (double) 0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0);
      assertArrayEquals(new double[] {0.0, (-256.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs(2203L, 1882L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 566.4602831141126;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1635.262798643, 425.18116617402);
      assertArrayEquals(new double[] {566.4602831141126, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (-1), (-54));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)102;
      shortArray0[1] = (short) (byte)98;
      shortArray0[2] = (short) (byte)58;
      shortArray0[3] = (short) (byte)66;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)102, (short)98, (short)58, (short)66}, shortArray0);
      assertArrayEquals(new short[] {(short)102, (short)98, (short)58, (short)66}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)98, (byte)58, (byte)58, (byte)58}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[1] = 749L;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) (short) (-19);
      longArray0[5] = (-4790L);
      longArray0[6] = (-2590L);
      longArray0[7] = (long) 2;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 76, 2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 749L, 2L, (-19L), 0L, (-4790L), (-2590L), 2L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 2147483623, 2147483623);
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      booleanArray0[1] = true;
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-1), (-2325));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'a');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[2] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'l', 78);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)0, 0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      MockRandom mockRandom0 = new MockRandom((short) (-48));
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-48);
      longArray0[1] = (long) (short) (-48);
      longArray0[2] = (-2326L);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      Float[] floatArray0 = new Float[15];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[1]);
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (short)53);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = 'b';
      charArray0[2] = '#';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '#');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'~', 'b', '#'}, charArray0);
      assertArrayEquals(new char[] {'~', 'b'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(floatArray1, 1, 2161, (-2653));
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shift(floatArray0, 88);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 0, (-1));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      ArrayUtils.shift((float[]) null, 0);
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Class<Byte> class1 = Byte.TYPE;
      assertSame(class1, class0);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("byte", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[7] = (float) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2615.1643F, 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean("Q:dG=d;Z1UCt");
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean2;
      Boolean boolean4 = new Boolean("m7%:`5");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4);
      
      booleanArray0[1] = boolean4;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean3;
      booleanArray0[4] = boolean1;
      booleanArray0[5] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.shift(floatArray0, 50);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)32;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)80);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)80, (byte) (-109), (byte) (-9), (byte) (-70), (byte)32}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)80, (byte) (-109), (byte) (-9), (byte) (-70), (byte)32, (byte)80}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(byteArray1, (int) (byte) (-109), 854);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)80, (byte) (-109), (byte) (-9), (byte) (-70), (byte)32}, byteArray0);
      assertArrayEquals(new byte[] {(byte)80, (byte)32, (byte) (-70), (byte) (-9), (byte) (-109), (byte)80, (byte)37}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-9), 2, (int) (byte) (-9));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)37, (byte)80, (byte) (-109), (byte) (-9), (byte) (-70), (byte)32}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) (byte)80;
      doubleArray2[1] = (double) (byte) (-109);
      doubleArray2[2] = (-210.83906703827);
      doubleArray2[3] = (double) 854;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (double) (byte) (-70);
      doubleArray2[6] = (-1048.0137445199525);
      double[] doubleArray3 = ArrayUtils.removeAllOccurences(doubleArray2, (double) (byte)32);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertArrayEquals(new double[] {80.0, (-109.0), (-210.83906703827), 854.0, (-1.0), (-70.0), (-1048.0137445199525)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {80.0, (-109.0), (-210.83906703827), 854.0, (-1.0), (-70.0), (-1048.0137445199525)}, doubleArray2, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 256;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {256}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 256;
      doubleArray0[1] = (double) 256;
      doubleArray0[2] = (double) 256;
      doubleArray0[3] = (double) 256;
      doubleArray0[4] = (double) 256;
      doubleArray0[5] = (-806.4);
      doubleArray0[6] = (double) 256;
      doubleArray0[7] = (double) 256;
      doubleArray0[8] = (double) 256;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-4749.4016356));
      assertArrayEquals(new double[] {256.0, 256.0, 256.0, 256.0, 256.0, (-806.4), 256.0, 256.0, 256.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 943);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {256}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (-3341), (-62L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3341, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 785.4F;
      floatArray0[3] = 330.7F;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 311.38;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {311.38}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.reverse((boolean[]) null, 1, (-2147483646));
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {311.38}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 785.4F, 2.0);
      assertArrayEquals(new double[] {311.38}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 785.4F;
      objectArray0[1] = (Object) 311.38;
      objectArray0[2] = (Object) 330.7F;
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 79;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-1365);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {79, Integer.MAX_VALUE, (-1365)}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertArrayEquals(new char[] {'8'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      Byte byte0 = new Byte((byte)52);
      assertNotNull(byte0);
      assertEquals((byte)52, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)52, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-91);
      shortArray0[2] = (short) (byte)52;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte)52, 106);
      assertArrayEquals(new short[] {(short) (-91), (short)0, (short)52}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = '8';
      charArray0[2] = ',';
      int int1 = ArrayUtils.indexOf(charArray0, 'B', (int) (byte) (-91));
      assertArrayEquals(new char[] {',', '8', ','}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.shift(booleanArray0, (-1568), (-1), (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.swap(charArray0, 65536, 1704, (-1568));
      assertArrayEquals(new char[] {',', '8', ','}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (-1094.87048016706));
      assertArrayEquals(new double[] {(-1094.87048016706)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 48L);
      assertArrayEquals(new long[] {48L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 1222, Integer.MAX_VALUE, (-1624));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 1222;
      intArray0[2] = 1222;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = 82;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 1222, 1222, Integer.MAX_VALUE, 82}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 5.88552718);
      assertArrayEquals(new double[] {5.88552718}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {82, Integer.MAX_VALUE, 1222, 1222, Integer.MAX_VALUE}, intArray0);
      assertEquals(5, intArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)110;
      shortArray0[2] = (short)2171;
      shortArray0[3] = (short) (-1643);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)91, (short)110, (short)2171, (short) (-1643)}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-987);
      shortArray0[1] = (short) (-987);
      shortArray0[2] = (short) (-1826);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-987);
      shortArray0[8] = (short) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-987), (short) (-987), (short) (-1826), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-987), (short) (-1)}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Short[] shortArray1 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (short) (-1826));
      assertArrayEquals(new byte[] {(byte)17, (byte) (-107), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      Long long0 = new Long((-6L));
      assertNotNull(long0);
      assertEquals((-6L), (long)long0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (-6L);
      doubleArray0[2] = (double) (-6L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-6L));
      assertArrayEquals(new double[] {0.0, (-6.0), (-6.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      short[] shortArray0 = new short[8];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      Float float0 = new Float(Float.NaN);
      assertNotNull(float0);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, Float.NaN);
      assertArrayEquals(new float[] {Float.NaN}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-18);
      intArray0[1] = (-18);
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(240.81F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(240.81F, (float)float1, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-1.0F));
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, object1);
      assertNotSame(object1, object0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1705.994F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2664);
      shortArray0[1] = (short)53;
      shortArray0[2] = (short) (-1797);
      shortArray0[3] = (short)1008;
      shortArray0[4] = (short)147;
      shortArray0[5] = (short)3650;
      shortArray0[6] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)147);
      assertEquals("{4}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertArrayEquals(new short[] {(short) (-2664), (short)53, (short) (-1797), (short)1008, (short)147, (short)3650, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = 'E';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = ')';
      charArray0[5] = 'p';
      charArray0[6] = ' ';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {')', 'E', 'X', 'X', ')', 'p', ' '}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(14, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2747.4679);
      doubleArray0[1] = 409.09;
      doubleArray0[2] = 1624.73446065069;
      doubleArray0[3] = 607.6082571177;
      int[] intArray0 = new int[0];
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2747.4679), 409.09, 1624.73446065069, 607.6082571177}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {(-2747.4679), 409.09, 1624.73446065069, 607.6082571177}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte) (-1);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)77);
      assertArrayEquals(new byte[] {(byte)77, (byte)49, (byte)48, (byte)111, (byte)109, (byte) (-33), (byte)1, (byte)62, (byte) (-1)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte) (-121));
      assertNotNull(byte0);
      assertEquals((byte) (-121), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-121), object0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)2;
      ArrayUtils.reverse(intArray0, 97, 97);
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.swap((float[]) null, 1110, (-2147483612));
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-1807));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, 0.0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (short)2;
      doubleArray0[2] = (-254.9962526318347);
      doubleArray0[3] = (double) (short) (-1807);
      doubleArray0[4] = (double) 97;
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = 0.0;
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {1.0, 2.0, (-254.9962526318347), (-1807.0), 97.0, 6.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, 2068, 2068);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'w';
      doubleArray0[1] = (double) 'w';
      doubleArray0[2] = (double) 59;
      doubleArray0[3] = (double) 59;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(integerArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {119.0, 119.0, 59.0, 59.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1883);
      shortArray0[1] = (short)909;
      shortArray0[2] = (short) (-420);
      shortArray0[3] = (short) (-5362);
      shortArray0[4] = (short)194;
      shortArray0[5] = (short)1321;
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-1883), (short)909, (short) (-420), (short) (-5362), (short)194, (short)1321}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-3131));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2484.42035219362;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 2484.42035219362;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, (-1430));
      assertArrayEquals(new double[] {1.5, (-1.0), 0.0, 0.0, 0.0, 0.0, 2484.42035219362, 0.0, 2484.42035219362}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 52;
      intArray0[1] = (-1430);
      intArray0[2] = (-1430);
      intArray0[3] = (-1430);
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-1430));
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-125);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)110);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = ArrayUtils.get(byteArray0, 7);
      assertEquals(4, byteArray0.length);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-294.278);
      doubleArray0[1] = (-1188.351);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-597.82123102868);
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)83);
      assertArrayEquals(new byte[] {(byte)83}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.reverse((byte[]) null, (-5516), 122);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-70);
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-70)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)37);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse((byte[]) null, 2, 2611);
      Double double0 = new Double(2.146908386E9);
      assertNotNull(double0);
      assertEquals(2.146908386E9, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      Double double1 = new Double((-427.3704945612));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-427.3704945612), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)37);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(bitSet0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = ArrayUtils.get(abstractMap_SimpleImmutableEntryArray0, 2145398712);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertNull(abstractMap_SimpleImmutableEntry0);
      
      int int0 = ArrayUtils.indexOf((Object[]) doubleArray0, (Object) null);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 11.0992598);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-294.278);
      doubleArray0[1] = (-1188.351);
      doubleArray0[2] = 0.0;
      ArrayUtils.swap((float[]) null, 841, 2);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)31;
      ArrayUtils.swap(byteArray0, (-2894), (int) (byte)120);
      assertArrayEquals(new byte[] {(byte)70, (byte)2, (byte) (-26), (byte) (-1), (byte)12, (byte)2, (byte)120, (byte)31}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (byte)120);
      assertArrayEquals(new double[] {(-294.278), (-1188.351), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) 841;
      longArray0[2] = (long) 2;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-1L), 841L, 2L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2747.4679);
      doubleArray0[1] = (-2747.4679);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 5.88552718, (-2146737475));
      assertArrayEquals(new double[] {(-2747.4679), (-2747.4679), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'p';
      charArray0[4] = 'Y';
      charArray0[5] = 'b';
      charArray0[6] = 'b';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'b');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'D', 'b', 'b', 'p', 'Y', 'b', 'b'}, charArray0);
      assertArrayEquals(new char[] {'D', 'p', 'Y'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)14;
      shortArray0[2] = (short)14;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      byte byte0 = (byte)43;
      Byte byte1 = new Byte((byte)43);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)43, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)43);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)43, (byte)byte2);
      
      byteArray0[2] = byte2;
      byteArray0[3] = byte1;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) 121, 205);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = 3718.867F;
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) (short)14;
      floatArray0[4] = (float) (-1L);
      floatArray0[5] = (float) (short)14;
      floatArray0[6] = (float) (-1);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1171.4F, 1);
      assertArrayEquals(new float[] {43.0F, 3718.867F, (-1.0F), 14.0F, (-1.0F), 14.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 45;
      intArray0[1] = 128;
      intArray0[2] = 2;
      intArray0[3] = 162;
      intArray0[4] = 0;
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)64;
      Byte byte1 = new Byte((byte)64);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)64, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)64, (byte)byte2);
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)48;
      Byte byte4 = new Byte((byte)48);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte)48, (byte)byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)64);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      assertEquals((byte)64, (byte)byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte) (-1));
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte6);
      
      byteArray0[4] = byte6;
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 162);
      assertArrayEquals(new int[] {45, 128, 2, 162, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(3, int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)48;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) byte0, (-2988));
      assertArrayEquals(new short[] {(short)48}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(int1 == int0);
      assertFalse(byte0 == byte3);
      assertEquals((-1), int1);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)64, (byte)64, (byte)48, (byte)64, (byte) (-1)}, byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-2988);
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) byte3;
      floatArray0[4] = (float) (byte)64;
      floatArray0[5] = (float) 2;
      int int2 = ArrayUtils.lastIndexOf(floatArray0, 95.40503F, 90);
      assertArrayEquals(new float[] {(-2988.0F), 2.0F, 0.0F, 48.0F, 64.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte)7);
      assertNotNull(byte0);
      assertEquals((byte)7, (byte)byte0);
      
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse((byte[]) null);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)7;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)7);
      assertArrayEquals(new float[] {7.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 235.6F, 0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 135.169F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      int[] intArray0 = new int[3];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)386;
      shortArray0[1] = (short) (-891);
      shortArray0[2] = (short) (-3487);
      shortArray0[3] = (short)15;
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (int) (short)15, (int) (short)386);
      assertNull(byteArray0);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Long long0 = Long.valueOf((long) (short) (-3487));
      assertNotNull(long0);
      assertEquals((-3487L), (long)long0);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (short)15;
      doubleArray0[2] = (double) (short) (-3409);
      doubleArray0[3] = (double) (short) (-891);
      doubleArray0[4] = (double) (short)386;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {2.0, 15.0, (-3409.0), (-891.0), 386.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      boolean boolean0 = ArrayUtils.contains((Object[]) characterArray0, (Object) null);
      assertEquals(1, characterArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[0] = 6;
      intArray0[3] = 0;
      boolean[] booleanArray0 = new boolean[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 0;
      ArrayUtils.shift(booleanArray0, 6);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)37);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse((byte[]) null, 0, 2610);
      Double double0 = new Double(2.146908386E9);
      assertNotNull(double0);
      assertEquals(2.146908386E9, (double)double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '3';
      floatArray0[1] = 64.0F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 2610;
      floatArray0[4] = (float) 2610;
      floatArray0[5] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {51.0F, 64.0F, 0.0F, 2610.0F, 2610.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shift(booleanArray0, (int) (byte)37);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)37;
      shortArray0[1] = (short) (byte)37;
      shortArray0[2] = (short) (byte)37;
      shortArray0[3] = (short) (byte)37;
      shortArray0[4] = (short)443;
      shortArray0[5] = (short) (byte)37;
      shortArray0[6] = (short) (byte)37;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)37, (short)37, (short)37, (short)37, (short)443, (short)37, (short)37}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[7] = true;
      ArrayUtils.shift(booleanArray0, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)37);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)37;
      doubleArray0[1] = (double) (byte)37;
      doubleArray0[2] = 2808.1;
      doubleArray0[3] = (-761.4902004411108);
      doubleArray0[4] = (double) (byte)37;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, 98);
      assertArrayEquals(new double[] {37.0, 37.0, 2808.1, (-761.4902004411108), 37.0, 2.147483647E9}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray1 = ArrayUtils.add(charArray0, ':');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ':'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1375L);
      longArray0[1] = (-1L);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) ':';
      longArray0[5] = (-1375L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1375L));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), 2L, 58L, (-1375L)}, longArray1);
      assertArrayEquals(new long[] {(-1375L), (-1L), (-1L), 2L, 58L, (-1375L)}, longArray0);
      assertEquals(5, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      Double double1 = new Double((-2045.8819958));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2045.8819958), (double)double1, 0.01);
      
      doubleArray0[3] = double1;
      doubleArray0[4] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)14;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)14);
      assertEquals(5, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 5, 6, 7, 8}", bitSet0.toString());
      assertEquals(9, bitSet0.length());
      assertArrayEquals(new byte[] {(byte)14, (byte)127, (byte)0, (byte)0, (byte)74, (byte)14, (byte)14, (byte)14, (byte)14}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(bitSet0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object0);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte2));
      assertEquals((byte)14, object0);
      
      int int0 = ArrayUtils.indexOf((Object[]) doubleArray1, (Object) byte0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)object0));
      assertTrue(byte0.equals((Object)byte2));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1073L);
      longArray0[1] = (long) (byte)14;
      longArray0[2] = (long) (byte)127;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)14;
      longArray0[5] = (long) (byte)74;
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (byte)14;
      longArray0[8] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-44L));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-1073L), 14L, 127L, 0L, 14L, 74L, (-1L), 14L, (-1L)}, longArray1);
      assertArrayEquals(new long[] {(-1073L), 14L, 127L, 0L, 14L, 74L, (-1L), 14L, (-1L)}, longArray0);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 565L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-125));
      assertNotNull(byte0);
      assertEquals((byte) (-125), (byte)byte0);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[6] = (byte) (-70);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-70), (byte) (-70), (byte)0, (byte)0, (byte) (-70), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-70), (byte) (-70), (byte)0, (byte)0, (byte) (-70), (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(byteArray1, (-1), 294);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-70), (byte) (-70), (byte)0, (byte)0, (byte) (-70), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-70), (byte)0, (byte)0, (byte) (-70), (byte) (-70), (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Double double0 = new Double((byte)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      Double double1 = new Double((byte)0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      Double double2 = new Double((double) doubleArray0[3]);
      assertEquals(9, doubleArray0.length);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[4] = double2;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)12);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-70), (byte) (-70), (byte)0, (byte)0, (byte) (-70), (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(bitSet0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Byte[] byteArray2 = new Byte[5];
      byteArray2[0] = (Byte) (byte) (-70);
      byteArray2[1] = (Byte) (byte) (-70);
      byteArray2[2] = (Byte) (byte) (-70);
      byteArray2[3] = (Byte) (byte) (-70);
      byteArray2[4] = (Byte) (byte) (-70);
      boolean boolean0 = ArrayUtils.isSorted(byteArray2);
      assertEquals(5, byteArray2.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      char[] charArray0 = new char[4];
      ArrayUtils.shift(charArray0, (-1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 1402);
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) (byte) (-1);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shift((boolean[]) null, (-1199));
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = 'U';
      charArray0[3] = 'D';
      charArray0[4] = 'd';
      charArray0[5] = '>';
      charArray0[6] = '[';
      charArray0[7] = '>';
      ArrayUtils.shift(charArray0, (-2146637642));
      assertArrayEquals(new char[] {'U', 'D', 'd', '>', '[', '>', '|', '|'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 46.0F, 2778);
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 135.169F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-294.278);
      doubleArray0[1] = (-1188.351);
      ArrayUtils.swap(doubleArray0, 2402, 961);
      assertArrayEquals(new double[] {(-294.278), (-1188.351), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2402;
      floatArray0[1] = (float) 2402;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {2402.0F, 2402.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), 961);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(floatArray0, Integer.MAX_VALUE, 1);
      assertArrayEquals(new float[] {2402.0F, 2402.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-294.278), (-1188.351), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1415.9F), (-241));
      assertArrayEquals(new float[] {2402.0F, 2402.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2402;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2402, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 733.38865812137;
      doubleArray0[3] = (-537.27737141392);
      doubleArray0[4] = 1070.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 733.38865812137, (-537.27737141392), 1070.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("Arguments cannot both be null");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("Arguments cannot both be null");
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean1);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean((String) null);
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean2);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false}, booleanArray1));
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertFalse(boolean2.equals((Object)boolean6));
      assertFalse(boolean2.equals((Object)boolean4));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean5));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean3));
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 733.38865812137, (-537.27737141392), 1070.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, 10);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2424;
      intArray0[1] = 70;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[4] = (Object) 2424;
      objectArray0[6] = (Object) false;
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 56);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "D7e");
      assertNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 1, 2, 3, 4}", bitSet1.toString());
      assertEquals(5, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(5, bitSet1.cardinality());
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2424;
      intArray0[1] = 70;
      intArray0[2] = 47;
      intArray0[3] = 0;
      intArray0[4] = (-2877);
      intArray0[5] = 3;
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '&';
      charArray0[6] = '<';
      charArray0[7] = '<';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '<');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '&', '<', '<'}, charArray1);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '&', '<', '<'}, charArray0);
      assertEquals(7, charArray1.length);
      assertEquals(8, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 2424;
      floatArray0[5] = (-3783.874F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F, 2424.0F, (-3783.874F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Byte byte0 = new Byte((byte) (-52));
      assertNotNull(byte0);
      assertEquals((byte) (-52), (byte)byte0);
      
      ArrayUtils.hashCode((Object) byte0);
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      ArrayUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      int[] intArray0 = new int[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 99);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'S');
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      Short short0 = new Short((short) (-1726));
      assertNotNull(short0);
      assertEquals((short) (-1726), (short)short0);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short) (-1726), (short) (-1726)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short) (-1726), 16);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertArrayEquals(new char[] {'S'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray1, (short) (-1726));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short) (-1726), (short) (-1726)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1726), (short) (-1726), (short) (-1726)}, shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 74);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1726));
      assertNotNull(short0);
      assertEquals((short) (-1726), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short) (-1726)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short) (-1726), (int) (short) (-1726));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray1, (short) (-1726));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short) (-1726)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1726), (short) (-1726)}, shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      int[] intArray0 = new int[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 41.43086279029616, 41.43086279029616);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2668);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2668.0), (-2668));
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertArrayEquals(new double[] {(-2668.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 11.0992598;
      doubleArray0[2] = (double) 1.0F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN);
      assertArrayEquals(new double[] {11.0992598, 0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = Double.NaN;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-141));
      assertArrayEquals(new int[] {(-141)}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, Double.NaN);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[3] = 330.7F;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 311.38;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {311.38}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.reverse((boolean[]) null, (-2147483646), (-2147483646));
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {311.38}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 0.0F, 311.38);
      assertArrayEquals(new double[] {311.38}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1, 6);
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short) (-1807);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-1807), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1807);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (short) (-1807);
      doubleArray0[3] = (double) 0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-2377.75260549665));
      assertArrayEquals(new double[] {(-1807.0), 1.0, (-1807.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1807.0), 1.0, (-1807.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-1807), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)0;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-87), (byte) (-87), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) (byte) (-87));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (-126);
      intArray0[2] = (-12);
      intArray0[3] = 324;
      intArray0[4] = 0;
      intArray0[5] = (-12);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, (-126), (-12), 324, 0, (-12)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-2775);
      longArray0[1] = (long) 324;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) (-126);
      longArray0[4] = (long) (-12);
      longArray0[5] = (long) (-2775);
      int int0 = ArrayUtils.lastIndexOf(intArray2, 0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-687);
      shortArray0[1] = (short)262;
      shortArray0[2] = (short) (-687);
      shortArray0[3] = (short)1454;
      shortArray0[4] = (short) (-687);
      shortArray0[0] = (short) (-687);
      shortArray0[6] = (short) (-687);
      shortArray0[7] = (short) (-687);
      shortArray0[8] = (short) (-687);
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1454, 64);
      assertArrayEquals(new short[] {(short) (-687), (short)262, (short) (-687), (short)1454, (short) (-687), (short)0, (short) (-687), (short) (-687), (short) (-687)}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-2775);
      floatArray0[1] = (float) (short) (-687);
      floatArray0[2] = (float) (short) (-687);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 3330.0F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-2775.0F), (-687.0F), (-687.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2775.0F), (-687.0F), (-687.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = longArray0[0];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2655L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)2592, 2753, (-567.1964935629012));
      assertArrayEquals(new double[] {(-2655.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 68;
      intArray0[1] = 0;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 2;
      intArray0[4] = (-2146908318);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {68, 0, Integer.MAX_VALUE, 2, (-2146908318)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 68;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 68, 5, (double) (-2146908318));
      assertArrayEquals(new double[] {68.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = '^';
      charArray0[2] = 'V';
      charArray0[3] = '1';
      charArray0[4] = '`';
      charArray0[5] = 'H';
      charArray0[6] = 't';
      charArray0[7] = '6';
      charArray0[8] = '\"';
      char[] charArray1 = ArrayUtils.add(charArray0, '=');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'s', '^', 'V', '1', '`', 'H', 't', '6', '\"', '='}, charArray1);
      assertArrayEquals(new char[] {'s', '^', 'V', '1', '`', 'H', 't', '6', '\"'}, charArray0);
      assertEquals(10, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2146315618;
      floatArray0[1] = (float) 2146315618;
      floatArray0[2] = (float) 2146315618;
      floatArray0[3] = (float) 2146315618;
      floatArray0[4] = (float) 2146315618;
      floatArray0[5] = (float) 2146315618;
      floatArray0[6] = (float) 2146315618;
      floatArray0[7] = (float) 2146315618;
      floatArray0[8] = (float) 2146315618;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, (float[]) null);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.14631565E9F, 2.14631565E9F, 2.14631565E9F, 2.14631565E9F, 2.14631565E9F, 2.14631565E9F, 2.14631565E9F, 2.14631565E9F, 2.14631565E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.14631565E9F, 2.14631565E9F, 2.14631565E9F, 2.14631565E9F, 2.14631565E9F, 2.14631565E9F, 2.14631565E9F, 2.14631565E9F, 2.14631565E9F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'E');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 200.332851362;
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '<');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'B', 'B'}, charArray0);
      assertArrayEquals(new char[] {'B', 'B'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)70);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 200.332851362, (int) (byte)70, (-1756.8596));
      assertArrayEquals(new double[] {200.332851362, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-567), (double) (byte)70);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -567, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1355()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, 89, (double) 89);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 89, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1356()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 9);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1357()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.0F);
      floatArray1[1] = 0.0F;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 49);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'U';
      charArray0[2] = '';
      charArray0[3] = 'l';
      charArray0[4] = '|';
      charArray0[5] = ',';
      charArray0[6] = '>';
      charArray0[7] = '[';
      ArrayUtils.shift(charArray0, 49);
      assertArrayEquals(new char[] {'[', 'd', 'U', '', 'l', '|', ',', '>'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1358()  throws Throwable  {
      ArrayUtils.swap((float[]) null, (-6), 6);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-103));
      assertArrayEquals(new byte[] {(byte)62}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-6));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -6, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1359()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)2);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1360()  throws Throwable  {
      long[] longArray0 = new long[12];
      int int0 = ArrayUtils.indexOf((int[]) null, 40);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, (-1), 1739, (-1));
      assertEquals(12, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1361()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'R';
      charArray0[2] = '!';
      charArray0[3] = '{';
      charArray0[4] = '@';
      charArray0[5] = '~';
      charArray0[6] = ')';
      boolean boolean0 = ArrayUtils.contains(charArray0, '@');
      assertArrayEquals(new char[] {'{', 'R', '!', '{', '@', '~', ')'}, charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = new Character(')');
      assertEquals(')', int0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '~';
      longArray0[1] = (long) 'R';
      longArray0[2] = (long) '{';
      ArrayUtils.shift(longArray0, 1, ')', (-1273));
      assertArrayEquals(new long[] {126L, 123L, 82L}, longArray0);
      assertEquals(3, longArray0.length);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) 123L);
      assertNotNull(float0);
      assertEquals(123.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 123L);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(123.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) ')');
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(41.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1362()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-85L);
      ArrayUtils.shift(longArray0, 0, 34, 34);
      assertArrayEquals(new long[] {0L, (-85L)}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1363()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      ArrayUtils.shift(longArray0, (-5848), 843, 1950);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1364()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-19);
      longArray0[1] = (-4790L);
      longArray0[2] = (-4790L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short) (-19), 2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-19L), (-4790L), (-4790L)}, longArray0);
      assertArrayEquals(new long[] {(-19L), (-4790L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.reverse(longArray1, (int) (short) (-19), 1130);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-19L), (-4790L), (-4790L)}, longArray0);
      assertArrayEquals(new long[] {(-4790L), (-19L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1365()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-19));
      assertNotNull(byte0);
      assertEquals((byte) (-19), (byte)byte0);
      
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      Byte byte1 = new Byte((byte) (-19));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-19), (byte)byte1);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)2);
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Byte byte2 = new Byte((byte)46);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)46, (byte)byte2);
  }

  @Test(timeout = 4000)
  public void test1366()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1367()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte) (-1), (-393));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals((-1), int0);
      
      Byte[] byteArray2 = ArrayUtils.subarray((Byte[]) null, 0, 122);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test1368()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'w';
      doubleArray0[1] = (double) 'w';
      doubleArray0[2] = (double) 59;
      doubleArray0[3] = (double) 59;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(integerArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)34, 115);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {119.0, 119.0, 59.0, 59.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) integerArray0, (Random) mockRandom0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1369()  throws Throwable  {
      int[] intArray0 = new int[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1370()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      char char0 = 'Y';
      char char1 = 'm';
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'A';
      charArray0[4] = 'Z';
      // Undeclared exception!
      try { 
        mockRandom0.nextBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test1371()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.shift(booleanArray0, 49);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1372()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-93.745834F));
      assertArrayEquals(new float[] {(-93.745834F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift((Object[]) floatArray0, 2146666181, 1267, 2146666181);
      assertEquals(1, floatArray0.length);
      
      ArrayUtils.swap(floatArray1, 2146666181, 2, 1267);
      assertArrayEquals(new float[] {(-93.745834F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1373()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shift(floatArray0, (int) (byte) (-56));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1374()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1375()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1376()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 633.681447207871;
      doubleArray0[5] = 1490.3920209;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1287;
      longArray0[1] = (long) 1287;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 1287;
      longArray0[4] = (long) 1287;
      longArray0[5] = (long) 1287;
      longArray0[6] = (long) 1287;
      longArray0[7] = (long) 1287;
      longArray0[8] = (long) 1287;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {1287L, 1287L, (-1L), 1287L, 1287L, 1287L, 1287L, 1287L, 1287L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Boolean[] booleanArray2 = new Boolean[9];
      booleanArray2[0] = (Boolean) true;
      booleanArray2[1] = (Boolean) false;
      booleanArray2[2] = (Boolean) false;
      booleanArray2[3] = (Boolean) false;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray2[4] = boolean1;
      booleanArray2[5] = (Boolean) true;
      booleanArray2[6] = (Boolean) false;
      booleanArray2[7] = (Boolean) false;
      booleanArray2[8] = (Boolean) false;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, false, false, false}, booleanArray3));
      assertEquals(9, booleanArray3.length);
      assertEquals(9, booleanArray2.length);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1377()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      shortArray0[1] = (short) (-879);
      shortArray0[2] = (short)7;
      shortArray0[3] = (short)160;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-48), (short) (-879), (short)7, (short)160}, shortArray0);
      assertArrayEquals(new short[] {(short) (-48), (short) (-879), (short)7, (short)160}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)7;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (short) (-48);
      doubleArray0[3] = (double) 1287;
      doubleArray0[4] = (double) (short)160;
      doubleArray0[5] = (double) (short)160;
      doubleArray0[6] = (double) (short) (-879);
      ArrayUtils.reverse(doubleArray0, (int) (short) (-879), 2134145240);
      assertArrayEquals(new double[] {(-879.0), 160.0, 160.0, 1287.0, (-48.0), 0.0, 7.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (short)160);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1378()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-768L);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)160;
      shortArray0[1] = (short)160;
      shortArray0[2] = (short)160;
      shortArray0[3] = (short)160;
      shortArray0[4] = (short)160;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)160, (short)160, (short)160, (short)160, (short)160}, shortArray0);
      assertArrayEquals(new short[] {(short)160, (short)160, (short)160, (short)160, (short)160}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      
      MockRandom mockRandom0 = new MockRandom((-48L));
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      IntStream intStream1 = mockRandom1.ints();
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(intStream1, intStream0);
      assertNotNull(intStream1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(intStream1.equals((Object)intStream0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null, (Random) mockRandom1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1379()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      shortArray0[1] = (short) (-879);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-879);
      longArray0[1] = 0L;
      longArray0[2] = (long) (short) (-879);
      longArray0[3] = (long) (short) (-48);
      longArray0[4] = (long) (short) (-879);
      longArray0[5] = (long) (short) (-879);
      longArray0[6] = (long) (short)7;
      longArray0[7] = (long) (short) (-48);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (int) (short) (-48), 51L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -48, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1380()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byteArray0[0]);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1381()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 200.332851362;
      ArrayUtils.shift((int[]) null, (-793), 1016, 1399);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)108, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-793);
      floatArray0[1] = (float) 1399;
      floatArray0[2] = (float) 1399;
      floatArray0[3] = (-1463.01F);
      floatArray0[4] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1579.8F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-793.0F), 1399.0F, 1399.0F, (-1463.01F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-793.0F), 1399.0F, 1399.0F, (-1463.01F), 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1382()  throws Throwable  {
      ArrayUtils.shift((int[]) null, 18, 156, 18);
  }

  @Test(timeout = 4000)
  public void test1383()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-68);
      Byte byte2 = new Byte((byte) (-68));
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-68), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte3);
      
      ArrayUtils.reverse((double[]) null, (int) (byte)0, (int) byte1);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte) (-1);
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte)2, (byte) (-1)}, byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      char[] charArray1 = ArrayUtils.add(charArray0, ':');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1384()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-68);
      Byte byte2 = new Byte((byte) (-68));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-68), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte3);
      
      ArrayUtils.reverse((double[]) null, (int) (byte)0, (int) byte1);
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte) (-1);
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte) (-1)}, byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      char[] charArray0 = new char[17];
  }

  @Test(timeout = 4000)
  public void test1385()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-2066), (-94));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray0);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1386()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1387()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      ArrayUtils.shift((Object[]) byteArray0, (int) (byte)19);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1388()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 50;
      intArray0[1] = 0;
      intArray0[2] = 1941;
      intArray0[3] = 1310;
      intArray0[4] = 0;
      ArrayUtils.shift(intArray0, 4, 507, 36);
      assertArrayEquals(new int[] {50, 0, 1941, 1310, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)68, (byte)44, (byte) (-1)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 50);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1389()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2424;
      intArray0[5] = 70;
      intArray0[2] = 47;
      intArray0[3] = 0;
      intArray0[4] = 0;
      Byte byte0 = new Byte((byte) (-43));
      assertNotNull(byte0);
      assertEquals((byte) (-43), (byte)byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '>');
      assertNull(charArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-1));
      assertArrayEquals(new int[] {2424, 0, 47, 0, 0, 70, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1390()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2424;
      intArray0[1] = 76;
      intArray0[2] = 47;
      intArray0[3] = 0;
      intArray0[4] = (-2877);
      intArray0[5] = 3;
      intArray0[6] = (-793);
      ArrayUtils.shift(intArray0, 128, (-251), 1788);
      assertArrayEquals(new int[] {2424, 76, 47, 0, (-2877), 3, (-793)}, intArray0);
      assertEquals(7, intArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-125));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-125), (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte2;
      byteArray0[3] = byte2;
      byteArray0[4] = byte2;
      byteArray0[5] = byte0;
      byteArray0[6] = byte1;
      byteArray0[7] = byte1;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[5];
      char char0 = 'G';
      Character character0 = Character.valueOf('G');
      assertNotNull(character0);
      assertEquals('G', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('x');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertEquals('x', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('$');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('$', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('G');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertEquals('G', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('6');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertEquals('6', (char)character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertArrayEquals(new char[] {'G', 'x', '$', 'G', '6'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1391()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      Byte byte1 = new Byte((byte)99);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)object0));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)99, (byte)byte1);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte1);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      assertFalse(byte1.equals((Object)object0));
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byte1.equals((Object)object0));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Character[] characterArray0 = new Character[8];
      char char0 = 'd';
      Character character0 = Character.valueOf('d');
      assertNotNull(character0);
      assertEquals('d', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('d', (char)character1);
      
      Character character2 = Character.valueOf('d');
      assertNotNull(character2);
      assertEquals('d', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('U');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertEquals('U', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(':');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertEquals(':', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character(':');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      assertEquals(':', (char)character5);
      
      characterArray0[5] = character5;
      characterArray0[6] = characterArray0[1];
      Character character6 = Character.valueOf('!');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character0));
      assertEquals('!', (char)character6);
      
      characterArray0[7] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'q');
      assertArrayEquals(new char[] {'d', 'q', 'd', 'U', ':', ':', 'q', '!'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, characterArray0.length);
      assertNotNull(charArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, (char) character4);
      assertArrayEquals(new char[] {'d', 'q', 'd', 'U', ':', ':', 'q', '!'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, characterArray0.length);
      assertFalse(character4.equals((Object)character6));
      assertFalse(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character5));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertEquals(4, int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'q';
      floatArray0[1] = (float) (char)character3;
      floatArray0[2] = (float) 'q';
      floatArray0[3] = (float) (byte)99;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) char0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {113.0F, 85.0F, 113.0F, 99.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {100.0F, 113.0F, 85.0F, 113.0F, 99.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1392()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'X');
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1393()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(object0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1394()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-70);
      byte byte0 = (byte)32;
      byteArray0[5] = (byte)32;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Byte[] byteArray1 = new Byte[5];
      byteArray1[0] = (Byte) (byte)32;
      byteArray1[1] = (Byte) (byte)80;
      byteArray1[2] = (Byte) (byte) (-70);
      byteArray1[3] = (Byte) (byte)37;
      byteArray1[4] = (Byte) (byte)32;
      Byte byte1 = ArrayUtils.get(byteArray1, (-2146176596), (Byte) byte0);
      assertEquals(5, byteArray1.length);
      assertNotNull(byte1);
      assertEquals((byte)32, (byte)byte1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) byte1, (Object) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1395()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1]);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1396()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-89));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-89)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.contains(byteArray1, (byte) (-89));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-89)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1397()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)100);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertArrayEquals(new byte[] {(byte)100, (byte)100}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1398()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1399()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1400()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)95);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1401()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) stringArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 52, 52);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 52;
      doubleArray0[1] = (double) 52;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-1), Double.NaN);
      assertArrayEquals(new double[] {52.0, 52.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1402()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      Byte byte0 = new Byte((byte)76);
      assertNotNull(byte0);
      assertEquals((byte)76, (byte)byte0);
      
      Byte byte1 = new Byte((byte)38);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)38, (byte)byte1);
      
      Byte byte2 = new Byte((byte)38);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)38, (byte)byte2);
      
      Byte byte3 = new Byte((byte)38);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)38, (byte)byte3);
      
      Integer integer0 = new Integer(110);
      assertNotNull(integer0);
      assertEquals(110, (int)integer0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray((boolean[]) null, 1949, 1);
      assertNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test1403()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      MockRandom mockRandom0 = new MockRandom((-5));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 1, 0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean[] booleanArray3 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray3, booleanArray0);
      assertSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertEquals(0, booleanArray3.length);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1404()  throws Throwable  {
      long[] longArray0 = new long[6];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short)160;
      shortArray0[2] = (short)160;
      shortArray0[3] = (short)160;
      shortArray0[4] = (short)160;
      shortArray0[5] = (short) (-879);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)160, (short)160, (short)160, (short)160, (short) (-879)}, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)160, (short)160, (short)160, (short)160, (short) (-879)}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      IntStream intStream1 = mockRandom0.ints();
      assertNotSame(intStream1, intStream0);
      assertNotNull(intStream1);
      assertFalse(intStream1.equals((Object)intStream0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)160);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, Integer.MAX_VALUE, (int) (short)7);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(0, booleanArray2.length);
      assertEquals(2, booleanArray0.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1405()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, (-389), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -389, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1406()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.lang.Long";
      stringArray0[1] = "', is neither of type Map.Entry nor an Array";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1407()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (-303));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = '?';
      charArray0[2] = 'D';
      charArray0[3] = '!';
      charArray0[4] = 'Q';
      charArray0[5] = 'F';
      charArray0[6] = 's';
      charArray0[7] = '{';
      charArray0[8] = '!';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'~', '?', 'D', '!', 'Q', 'F', 's', '{', '!'}, charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, (-703));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1408()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1409()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      short short0 = (short)121;
      shortArray0[0] = (short)121;
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'p');
      assertArrayEquals(new char[] {'p'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      Short short1 = new Short((short)3409);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)3409, (short)short1);
      
      Short[] shortArray1 = new Short[7];
      shortArray1[0] = (Short) (short)121;
      shortArray1[1] = short1;
      shortArray1[2] = short1;
      shortArray1[3] = (Short) (short)121;
      shortArray1[4] = short1;
      shortArray1[5] = short1;
      shortArray1[6] = (Short) (short)121;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)121, (short)3409, (short)3409, (short)121, (short)3409, (short)3409, (short)121}, shortArray2);
      assertEquals(7, shortArray2.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, Integer.MAX_VALUE, (int) (short)121);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'p'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray3 = ArrayUtils.addFirst(shortArray0, short0);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)121, (short)121, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray3);
      assertArrayEquals(new short[] {(short)121, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray3.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray2));
  }

  @Test(timeout = 4000)
  public void test1410()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 40);
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1411()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = 'D';
      charArray0[2] = '\'';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '\'');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'f', 'D', '\''}, charArray0);
      assertArrayEquals(new char[] {'\'', 'f', 'D', '\''}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'D';
      doubleArray0[1] = (double) 'f';
      doubleArray0[2] = (double) '\'';
      doubleArray0[3] = (double) '\'';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {68.0, 102.0, 39.0, 39.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1412()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (-987.5));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1413()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-630);
      shortArray0[1] = (short) (-1430);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-630), (short) (-1430), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-630), (short) (-1430)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short) (-1430);
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = 2216.982372;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1430.0), 0.0, 0.0, 2216.982372}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1430.0), 0.0, 0.0, 2216.982372}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-630);
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short) (-630);
      intArray0[4] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-630), 0, (-630), 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, (-2771.011585195));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1430.0), 0.0, 0.0, 2216.982372}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, (-1430.0), 0.0, 0.0, 2216.982372}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1430.0), 0.0, 0.0, 2216.982372}, doubleArray1, 0.01);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray2, 1937);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1937, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1414()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-68);
      Byte byte3 = new Byte((byte) (-68));
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-68), (byte)byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)0);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte)0, (byte)byte4);
      
      byteArray0[2] = byte4;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-68);
      intArray0[1] = (int) byte2;
      intArray0[2] = (int) byte0;
      intArray0[3] = (int) byte0;
      intArray0[4] = (int) byte0;
      intArray0[5] = (int) byte2;
      intArray0[6] = (int) byte2;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1556);
      assertArrayEquals(new int[] {(-68), (-68), 0, 0, 0, (-68), (-68)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (byte)0;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-687), (-1));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) byteArray1, (Random) mockRandom0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      org.evosuite.runtime.Random.setNextRandom((-1389));
  }

  @Test(timeout = 4000)
  public void test1415()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) false;
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(5, objectArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((short) (-916));
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, Integer.MAX_VALUE);
      assertEquals(5, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, (-1), Integer.MAX_VALUE);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1416()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2541, (int) (short)386);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[1];
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(1, objectArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((short)386);
      Short[] shortArray1 = new Short[0];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1417()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(4466, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4466, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1418()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = 'a';
      char[] charArray1 = ArrayUtils.insert((int) '.', charArray0, (char[]) null);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'.', 'a'}, charArray0);
      assertArrayEquals(new char[] {'.', 'a'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1419()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)21;
      int[] intArray1 = ArrayUtils.add(intArray0, 21);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {21}, intArray0);
      assertArrayEquals(new int[] {21, 21}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-91);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (int) (byte)60);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)2, (byte) (-91)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-91)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(46, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1420()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2668), 5500);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1421()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2668), (-2668));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1422()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 566.4602831141126;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1635.262798643, 425.18116617402);
      assertArrayEquals(new double[] {566.4602831141126, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {566.4602831141126, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      MockRandom mockRandom0 = new MockRandom((-6L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-6L);
      doubleArray1[1] = 425.18116617402;
      doubleArray1[2] = 1635.262798643;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1635.262798643;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 725.3;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 0.0, Integer.MAX_VALUE);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-6.0), 425.18116617402, 1635.262798643, 0.0, 1635.262798643, 0.0, 0.0, 725.3}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      assertNotNull(bitSet0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1423()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 2060.44396481702);
      assertEquals((-1), int0);
      
      MockRandom mockRandom1 = new MockRandom(396L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      LongStream longStream0 = mockRandom0.longs(1L, 1008L);
      assertNotSame(mockRandom0, mockRandom1);
      assertNotNull(longStream0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertNotSame(mockRandom0, mockRandom1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 634.744, (-1430));
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockRandom1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockRandom0;
      objectArray0[3] = (Object) mockRandom1;
      objectArray0[4] = (Object) mockRandom0;
      objectArray0[5] = (Object) mockRandom1;
      ArrayUtils.reverse(objectArray0);
      assertEquals(6, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 2067947216);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2067947216, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1424()  throws Throwable  {
      short[] shortArray0 = new short[3];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1425()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (-4512), 0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)77;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-35);
      byteArray1[5] = (byte)0;
      ArrayUtils.swap(byteArray1, 1136, (int) (byte)0, (-2322));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)77, (byte)0, (byte) (-35), (byte)0}, byteArray1);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte) (-35);
      shortArray0[3] = (short) (byte)77;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-35), (short)77, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1426()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.swap(byteArray0, (int) (byte) (-49), (int) (byte) (-49), (int) (byte) (-49));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1427()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 733.38865812137;
      doubleArray0[3] = (-537.27737141392);
      doubleArray0[4] = 1070.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, (-1.0), 733.38865812137, (-537.27737141392), 1070.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.swap(floatArray0, (-161), 0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-15);
      shortArray0[1] = (short) (-1029);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)1983;
      ArrayUtils.swap((byte[]) null, 1, 14);
  }

  @Test(timeout = 4000)
  public void test1428()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-19));
      assertNotNull(byte0);
      assertEquals((byte) (-19), (byte)byte0);
      
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      Byte byte1 = new Byte((byte) (-19));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-19), (byte)byte1);
      
      char[] charArray0 = new char[1];
      ArrayUtils.swap((byte[]) null, (int) (byte)2, 2146375710);
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)2);
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Byte byte2 = new Byte((byte)46);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)46, (byte)byte2);
  }

  @Test(timeout = 4000)
  public void test1429()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-759.6F);
      floatArray0[1] = (-1904.317F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1744.37F;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)22;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)22);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)22}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)22;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (short)22;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) (short)22;
      doubleArray0[5] = 866.0;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 1744.37F;
      doubleArray0[8] = 0.0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1430()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = 3366L;
      longArray0[2] = (-2265L);
      longArray0[3] = 244L;
      longArray0[4] = 160L;
      longArray0[5] = 74L;
      longArray0[6] = 74L;
      longArray0[7] = 1L;
      longArray0[8] = (-1186L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-1186L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), 3366L, (-2265L), 244L, 160L, 74L, 74L, 1L, (-1186L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), 3366L, (-2265L), 244L, 160L, 74L, 74L, 1L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1431()  throws Throwable  {
      long[] longArray0 = new long[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-1796), (-1796));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1432()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 4L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1433()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      shortArray0[1] = (short) (-879);
      shortArray0[2] = (short)7;
      shortArray0[3] = (short)160;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-48), (short) (-879), (short)7, (short)160}, shortArray0);
      assertArrayEquals(new short[] {(short) (-48), (short) (-879), (short)7, (short)160}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-879);
      longArray0[1] = (long) (short)160;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-1482L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-879L), 160L}, longArray0);
      assertArrayEquals(new long[] {(-879L), 160L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1434()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      shortArray0[2] = (short) (-48);
      shortArray0[3] = (short)160;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-48), (short)0, (short) (-48), (short)160}, shortArray0);
      assertArrayEquals(new short[] {(short) (-48), (short)0, (short) (-48), (short)160}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      MockRandom mockRandom0 = new MockRandom((-17L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      long[] longArray0 = new long[2];
      shortArray0[0] = (short) (-879);
      longArray0[1] = (long) (short)160;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-1482L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 160L}, longArray0);
      assertArrayEquals(new long[] {0L, 160L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1435()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1436()  throws Throwable  {
      long[] longArray0 = new long[6];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short)160;
      longArray0[5] = (long) (short)160;
      shortArray0[3] = (short)160;
      shortArray0[4] = (short)160;
      shortArray0[5] = (short) (-879);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)160, (short)0, (short)160, (short)160, (short) (-879)}, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)160, (short)0, (short)160, (short)160, (short) (-879)}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      IntStream intStream1 = mockRandom0.ints();
      assertNotSame(intStream1, intStream0);
      assertNotNull(intStream1);
      assertFalse(intStream1.equals((Object)intStream0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)160);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 160L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(5, int0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, 2147483620, (int) (short)7);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(0, booleanArray2.length);
      assertEquals(2, booleanArray0.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1437()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)80);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)80;
      longArray0[1] = (long) (byte)80;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1443L);
      assertArrayEquals(new long[] {80L, 80L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      Byte byte0 = new Byte((byte)80);
      assertNotNull(byte0);
      assertEquals((byte)80, (byte)byte0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.sort(abstractMap_SimpleImmutableEntryArray0);
      assertSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray1.length);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test1438()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-2180L);
      longArray0[1] = (-2823L);
      longArray0[2] = 2243L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2823L));
      assertArrayEquals(new long[] {(-2180L), (-2823L), 2243L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1439()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      shortArray0[1] = (short) (-879);
      shortArray0[2] = (short)7;
      shortArray0[3] = (short)160;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-48), (short) (-879), (short)7, (short)160}, shortArray0);
      assertArrayEquals(new short[] {(short) (-48), (short) (-879), (short)7, (short)160}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      IntStream intStream1 = mockRandom0.ints();
      assertNotSame(intStream1, intStream0);
      assertNotNull(intStream1);
      assertFalse(intStream1.equals((Object)intStream0));
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-48);
      longArray0[1] = (long) (short) (-879);
      longArray0[2] = (long) (short)160;
      longArray0[3] = (long) (short)7;
      longArray0[4] = (long) (short)7;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2350L);
      assertArrayEquals(new long[] {(-48L), (-879L), 160L, 7L, 7L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1440()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1441()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-759.6F);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '#');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1442()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1443()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = 'F';
      charArray0[2] = '%';
      charArray0[3] = 'F';
      charArray0[4] = 'k';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, ')');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'0', 'F', '%', 'F', 'k'}, charArray0);
      assertArrayEquals(new char[] {'0', 'F', '%', 'F', 'k'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[1] = "}6e.LX0aI1?F>";
      stringArray0[2] = "53r~nIF79o,sv(Z";
      stringArray0[3] = "";
      stringArray0[4] = "6{{r2v7Z+OoTQa^H";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(5, stringArray1.length);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 198, (-2143), 1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1444()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)3108);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test1445()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1446()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)8}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)8;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 8L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)1;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '0';
      charArray0[2] = '{';
      charArray0[3] = 'F';
      charArray0[4] = '^';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'k');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'3', '0', '{', 'F', '^'}, charArray0);
      assertArrayEquals(new char[] {'3', '0', '{', 'F', '^'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.swap(byteArray1, (-2143), (int) (byte)0, (int) (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)8}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1447()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[7] = (float) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2615.1643F, 0);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean("Q:dG=d;Z1UCt");
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean2;
      Boolean boolean4 = new Boolean("m7%:`5");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      
      booleanArray0[1] = boolean4;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean3;
      booleanArray0[4] = boolean1;
      booleanArray0[5] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1448()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1449()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1450()  throws Throwable  {
      byte byte0 = (byte) (-1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-91), (int) (byte) (-91));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char char0 = 'm';
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1451()  throws Throwable  {
      char[] charArray0 = new char[7];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'w';
      doubleArray0[1] = (double) 'w';
      doubleArray0[2] = (double) 59;
      doubleArray0[3] = (double) 59;
      doubleArray0[4] = (double) 59;
      doubleArray0[5] = (double) 'w';
      doubleArray0[6] = (double) 59;
      doubleArray0[7] = (double) 59;
      ArrayUtils.swap(doubleArray0, 59, (-119));
      assertArrayEquals(new double[] {119.0, 119.0, 59.0, 59.0, 59.0, 119.0, 59.0, 59.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 59;
      floatArray0[1] = (float) 59;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {59.0F, 59.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)64;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)7, (int) (byte) (-1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)64, (byte)7, (byte) (-1), (byte)64}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(floatArray0, 1, (int) (byte)64);
      assertArrayEquals(new float[] {59.0F, 59.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(14, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1452()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2965;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {2965}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.swap(intArray0, 79, (-1), 79);
      assertArrayEquals(new int[] {2965}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1453()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-11));
      assertNotNull(byte0);
      assertEquals((byte) (-11), (byte)byte0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-11)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1454()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1455()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-3632);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-3632);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3632), Integer.MAX_VALUE);
      assertArrayEquals(new int[] {(-3632), Integer.MAX_VALUE, (-3632)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, int0);
      
      Integer integer0 = new Integer((-2126429885));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-2126429885), (int)integer0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2126429885);
      intArray1[1] = (-1);
      intArray1[3] = (-240);
      int[] intArray2 = ArrayUtils.removeElement(intArray1, 1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {(-2126429885), (-1), 0, (-240)}, intArray1);
      assertArrayEquals(new int[] {(-2126429885), (-1), 0, (-240)}, intArray2);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test1456()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1457()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 128;
      intArray0[2] = 2;
      intArray0[3] = 162;
      intArray0[4] = 0;
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)64;
      Byte byte1 = new Byte((byte)64);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)64, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)64, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)48);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)48, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)64);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertEquals((byte)64, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-1));
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte) (-1), (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 162);
      assertArrayEquals(new int[] {0, 128, 2, 162, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(3, int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)48;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) byte0, (-2988));
      assertArrayEquals(new short[] {(short)48}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)64, (byte)64, (byte)48, (byte)64, (byte) (-1)}, byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test1458()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 8L;
      longArray0[1] = 1L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {8L, 1L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1459()  throws Throwable  {
      long[] longArray0 = new long[3];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1460()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2274.6455);
      doubleArray0[4] = 633.681447207871;
      doubleArray0[5] = 1490.3920209;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1287;
      longArray0[1] = (long) 1287;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 1287;
      longArray0[4] = (long) 1287;
      longArray0[5] = (long) 1287;
      longArray0[6] = (long) 1287;
      longArray0[7] = (long) 1287;
      longArray0[8] = (long) 1287;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {1287L, 1287L, (-1L), 1287L, 1287L, 1287L, 1287L, 1287L, 1287L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1461()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-1);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (byte)40;
      longArray0[5] = (long) (byte) (-1);
      longArray0[6] = (long) (byte)40;
      longArray0[7] = (long) (byte)40;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), 40L, (-1L), 40L, 40L, (-1L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1462()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte byte0 = (byte)59;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)59);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)59}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)59;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1364.4867F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {59.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)59;
      shortArray0[1] = (short) (byte)59;
      shortArray0[2] = (short) (byte)59;
      shortArray0[3] = (short) (byte)59;
      shortArray0[4] = (short) (byte)59;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)59, (int) (short)59);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)59, (short)59, (short)59, (short)59, (short)59}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)59, (short)59, (short)59, (short)59, (short)59}, shortArray0);
      assertArrayEquals(new short[] {(short)59, (short)59, (short)59, (short)59, (short)59}, shortArray2);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray2.length);
      assertNotNull(shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)59;
      intArray0[1] = (int) (short)59;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {59, 59}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 1658, 69.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1658, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1463()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1464()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1465()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.insert((-1540), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1540);
      intArray0[1] = (-1540);
      intArray0[2] = (-1540);
      intArray0[3] = (-1540);
      intArray0[4] = (-1540);
      intArray0[5] = (-1540);
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      short[] shortArray1 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-1);
      ArrayUtils.swap(byteArray0, (int) (byte)0, Integer.MAX_VALUE, (-928));
      assertArrayEquals(new byte[] {(byte)0, (byte)109, (byte)3, (byte) (-1)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-486L);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (-1540);
      longArray0[4] = (long) (byte)109;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {0L, (-1L), (-1540L), 109L, (-486L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1466()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.swap(byteArray0, (int) (byte) (-49), 64, 64);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1467()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1468()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-48);
      shortArray0[1] = (short) (-879);
      shortArray0[2] = (short)7;
      shortArray0[3] = (short)160;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-48), (short) (-879), (short)7, (short)160}, shortArray0);
      assertArrayEquals(new short[] {(short) (-48), (short) (-879), (short)7, (short)160}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Byte byte0 = new Byte((byte)34);
      assertNotNull(byte0);
      assertEquals((byte)34, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)34, object0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)34;
      intArray0[1] = (int) (short)160;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1469()  throws Throwable  {
      Float float0 = new Float((float) 1);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 1932.214749099561);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1470()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1471()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'R';
      charArray0[2] = '!';
      charArray0[3] = 'U';
      charArray0[4] = '@';
      charArray0[5] = '~';
      charArray0[6] = ')';
      boolean boolean0 = ArrayUtils.contains(charArray0, '@');
      assertArrayEquals(new char[] {'{', 'R', '!', 'U', '@', '~', ')'}, charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '~';
      longArray0[1] = (long) 'R';
      longArray0[2] = (long) '{';
      ArrayUtils.shift(longArray0, 1, (-1), (-1273));
      assertArrayEquals(new long[] {126L, 82L, 123L}, longArray0);
      assertEquals(3, longArray0.length);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) 82L);
      assertNotNull(float0);
      assertEquals(82.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 82L);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(82.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) (-1));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1472()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      Object[] objectArray0 = new Object[1];
      Byte byte0 = new Byte((byte)102);
      assertNotNull(byte0);
      assertEquals((byte)102, (byte)byte0);
      
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(objectArray0, 9, (-206), (-2617));
      assertEquals(1, objectArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[2] = 'M';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o', (int) (byte)102);
      assertArrayEquals(new char[] {'m', '\u0000', 'M'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1473()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)80;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)80, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1474()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 633.681447207871;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 633.681447207871;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1490.3920209;
      ArrayUtils.reverse(doubleArray0, 0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 633.681447207871, 0.0, 0.0, 0.0, 633.681447207871, 0.0, 1490.3920209}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)72;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-80), (byte) (-15), (byte)2, (byte)62, (byte)72}, byteArray0);
      assertEquals(12, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1475()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2274.6455);
      doubleArray0[4] = 633.681447207871;
      doubleArray0[5] = 1490.3920209;
      ArrayUtils.reverse(doubleArray0, 1287, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2274.6455), 633.681447207871, 1490.3920209}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1287);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1476()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (short)1802);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1477()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1478()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) 115);
      assertNotNull(float0);
      assertEquals(115.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {115.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (float) 115);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new float[] {115.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1479()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 1214.0F, 0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean("");
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1480()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 1435, (-896));
      assertNull(intArray0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)8);
      assertArrayEquals(new byte[] {(byte)8}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-896);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 1435);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-896L)}, longArray0);
      assertArrayEquals(new long[] {1435L, (-896L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '>';
      charArray0[3] = '4';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '4');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'4', '4', '>', '4'}, charArray0);
      assertArrayEquals(new char[] {'>'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '4';
      floatArray0[1] = (float) '4';
      floatArray0[2] = (float) (byte)8;
      floatArray0[3] = (float) '4';
      floatArray0[4] = (float) (-896L);
      floatArray0[5] = (float) '>';
      boolean boolean0 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertArrayEquals(new float[] {52.0F, 52.0F, 8.0F, 52.0F, (-896.0F), 62.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1481()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = Float.NaN;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, Float.NaN);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1482()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test1483()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1484()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-3783.874F);
      floatArray0[6] = 95.40503F;
      floatArray0[7] = 2015.0F;
      floatArray0[8] = 933.6F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F), (-547));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 0.0F, 0.0F, (-3783.874F), 95.40503F, 2015.0F, 933.6F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotNull(bitSet0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      Boolean boolean1 = new Boolean("");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.valueOf("");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1485()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short)0, (int) (short)0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(10, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1486()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2140.329799843762;
      doubleArray0[1] = (-2230.22);
      doubleArray0[2] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, 0.0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {2140.329799843762, (-2230.22), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 2140.329799843762;
      objectArray0[1] = (Object) 2140.329799843762;
      objectArray0[2] = (Object) 2140.329799843762;
      objectArray0[3] = (Object) bitSet0;
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) bitSet0;
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(6, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, 346);
      assertEquals(6, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1336, booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1487()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-68);
      Byte byte3 = new Byte((byte) (-68));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-68), (byte)byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)0);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte4);
      
      byteArray0[2] = byte4;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-68);
      intArray0[1] = (int) byte2;
      intArray0[2] = (int) byte0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-68);
      ArrayUtils.swap(floatArray0, (-1660), (-2236));
      assertArrayEquals(new float[] {(-68.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      ArrayUtils.swap((byte[]) null, (-4266), (-2099761788));
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, stringArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(stringArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.contains((Object[]) byteArray1, (Object) byte4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1488()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Byte byte0 = new Byte((byte)4);
      assertNotNull(byte0);
      assertEquals((byte)4, (byte)byte0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = object1;
      objectArray0[3] = object1;
      objectArray0[4] = object1;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, 0);
      assertEquals(5, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, (-1), (int) (byte)4);
      assertEquals(5, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, (-1));
      assertEquals(5, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1489()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray0, object0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1490()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)121;
      Object[] objectArray0 = new Object[0];
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)16;
      Byte byte1 = new Byte((byte)16);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)16, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)16, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = ArrayUtils.get(byteArray0, (int) 16);
      assertEquals(2, byteArray0.length);
      assertNull(byte3);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, 546);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, 32, 82);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.shift((Object[]) byteArray0, (int) (short)121);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(546, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 546, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1491()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(20, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1429), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1429, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1492()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = ArrayUtils.indexOf((Object[]) stringArray0, (Object) null, (-2146277973));
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = null;
      objectArray1[1] = null;
      objectArray1[2] = null;
      ArrayUtils.swap(objectArray1, 2324, (-2097542166));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(3, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test1493()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      ArrayUtils.shift((Object[]) byteArray0, 4);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1494()  throws Throwable  {
      char[] charArray0 = new char[2];
      Object[] objectArray0 = new Object[2];
      ArrayUtils.shift(objectArray0, (int) '\u0000');
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1495()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = ArrayUtils.get(objectArray0, (-3341));
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Byte byte0 = new Byte((byte)4);
      assertNotNull(byte0);
      assertEquals((byte)4, (byte)byte0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) byte0, 0);
      assertEquals(3, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(3, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, (int) (byte)4);
      assertEquals(3, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1496()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1497()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1, 6);
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short) (-1807);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = 2794.2680563;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      ArrayUtils.shift(doubleArray0, 4645);
      assertArrayEquals(new double[] {1.0, 6.0, 6.0, 6.0, 2794.2680563, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 1285.8157F);
      assertArrayEquals(new float[] {1285.8157F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      
      Byte byte0 = new Byte((byte)82);
      assertNotNull(byte0);
      assertEquals((byte)82, (byte)byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.shift(doubleArray1, (int) (short) (-1807), 4645, 70);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, 6.0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0.0F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1285.8157F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1285.8157F}, floatArray0, 0.01F);
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1498()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1499()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2424;
      intArray0[1] = 70;
      intArray0[2] = 47;
      intArray0[3] = 0;
      intArray0[4] = 70;
      Byte byte0 = new Byte((byte) (-43));
      assertNotNull(byte0);
      assertEquals((byte) (-43), (byte)byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 70;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(1, objectArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 47;
      doubleArray0[1] = (double) (byte) (-43);
      doubleArray0[2] = (double) 2424;
      doubleArray0[3] = (double) 2424;
      doubleArray0[4] = (double) 70;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 47;
      ArrayUtils.shift(doubleArray0, (-1), 70, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {47.0, 47.0, (-43.0), 2424.0, 2424.0, 70.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      byteArray0[7] = byte0;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1500()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-68));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-68), (byte)byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      ArrayUtils.shift((double[]) null, (int) (byte)2);
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':', ':', ':'}, charArray0);
      assertArrayEquals(new char[] {':', ':', ':'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1501()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1502()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-256);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      ArrayUtils.swap(intArray0, 0, (-1402));
      assertArrayEquals(new int[] {0, (-256), 0, 1, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)58;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)98;
      shortArray0[1] = (short) (byte)58;
      shortArray0[2] = (short) (byte)66;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)98, (short)58, (short)66}, shortArray1);
      assertArrayEquals(new short[] {(short)98, (short)58, (short)66}, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)66, (byte)98, (byte)102, (byte)58, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1503()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 733.38865812137;
      doubleArray0[3] = (-537.27737141392);
      doubleArray0[4] = 1070.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, (-1.0), 733.38865812137, (-537.27737141392), 1070.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.swap(floatArray0, (-161), 0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-15);
      shortArray0[1] = (short) (-1029);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)1983;
      shortArray0[5] = (short) (-2036);
      shortArray0[6] = (short)0;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-15), (short) (-1029), (short)0, (short) (-1), (short)1983, (short) (-2036), (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-15), (short) (-1029), (short)0, (short) (-1), (short)1983, (short) (-2036), (short)0}, shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-9);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)82, (byte) (-9)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1504()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1505()  throws Throwable  {
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)21, object0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1889.586261);
      doubleArray0[1] = (double) (byte)21;
      doubleArray0[2] = (double) (byte)21;
      doubleArray0[3] = (double) (byte)21;
      doubleArray0[4] = (double) (byte)21;
      doubleArray0[5] = (double) (byte)21;
      doubleArray0[6] = (double) (byte)21;
      doubleArray0[7] = (double) (byte)21;
      doubleArray0[8] = (double) (byte)21;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, (-1889.586261)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1506()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Byte[]) null, 3068);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3068, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1507()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      Byte byte0 = new Byte((byte)34);
      assertNotNull(byte0);
      assertEquals((byte)34, (byte)byte0);
      
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(byte0, byte0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(abstractMap_SimpleImmutableEntryArray0, (int) 34);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 34, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1508()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1509()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = 'Y';
      charArray0[2] = 'T';
      charArray0[3] = 'O';
      charArray0[4] = '\"';
      charArray0[5] = 'B';
      charArray0[6] = 'w';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'w', 'Y', 'T', 'O', '\"', 'B', 'w'}, charArray0);
      assertArrayEquals(new char[] {'w', 'Y', 'T', 'O', '\"', 'B', 'w'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1510()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1287;
      longArray0[2] = (long) 1287;
      longArray0[3] = (long) 1287;
      longArray0[4] = (long) 1287;
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.shift(longArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new long[] {1287L, 0L, 1287L, 1287L, 1287L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {1287L, 0L, 1287L, 1287L, 1287L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.toArray(abstractMap_SimpleImmutableEntryArray0);
      assertSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test1511()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)27;
      Byte byte2 = new Byte((byte)27);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)27, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte1);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)27, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-49));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte) (-49), (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-49));
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte) (-49), (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)0);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte(byte1);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte2));
      assertEquals((byte)27, (byte)byte7);
      
      byteArray0[6] = byte7;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1512()  throws Throwable  {
      long[] longArray0 = new long[8];
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(0, int0);
      
      Short short0 = new Short((short)2023);
      assertNotNull(short0);
      assertEquals((short)2023, (short)short0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, 2, (long) 2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 2L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1513()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-562), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -562, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1514()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-768L);
      longArray0[1] = 0L;
      longArray0[2] = (-1252L);
      longArray0[3] = 926L;
      longArray0[4] = 346L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, 0, (-768L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-768L), 0L, (-1252L), 926L, 346L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-768L), (-768L), 0L, (-1252L), 926L, 346L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1515()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 4, (long) 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1516()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)1339;
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)1339;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)1339;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)1339, (int) (short)1339);
      assertArrayEquals(new double[] {1339.0, 0.0, 1339.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1517()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, 48);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert(48, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = 'u';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'', 'u'}, charArray0);
      assertArrayEquals(new char[] {'', '', 'u'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '';
      floatArray0[1] = (float) 'u';
      floatArray0[2] = (float) 'u';
      floatArray0[3] = (float) 'u';
      floatArray0[4] = (float) '';
      floatArray0[5] = (float) 'u';
      floatArray0[6] = (float) 48;
      floatArray0[7] = (float) 'u';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(48, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1518()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2852);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2852), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2852, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1519()  throws Throwable  {
      float[] floatArray0 = new float[6];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(110, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 110, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1520()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (-545.5539480445531));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1521()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1522()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-1731), floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1523()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 566.4602831141126;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1635.262798643, 425.18116617402);
      assertArrayEquals(new double[] {566.4602831141126, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {566.4602831141126, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1524()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte)40;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte)40;
      doubleArray0[4] = 0.1;
      doubleArray0[5] = (double) (byte)40;
      doubleArray0[6] = (double) (byte)40;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 40.0, (-1.0), 40.0, 0.1, 40.0, 40.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray1 = new boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1525()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)14;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 841;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 841, 0, 0, 0, 841, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 841, 0}, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.reverse(intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 841, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test1526()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-1796), (-1), (-1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1527()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-29);
      ArrayUtils.shift(shortArray0, (int) (short)33, (int) (short) (-29), (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short) (-29), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short) (-29));
      assertNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-1365));
      assertNull(shortArray2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-29);
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-29)}, intArray0);
      assertArrayEquals(new int[] {(-29)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1528()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test1529()  throws Throwable  {
      long[] longArray0 = new long[10];
      ArrayUtils.shift(longArray0, 2146171790, 2146171790, 2146171790);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(10, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1530()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) 115);
      assertNotNull(float0);
      assertEquals(115.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      int[] intArray0 = new int[2];
      intArray0[0] = 1796;
      intArray0[1] = 115;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1796, 115}, intArray0);
      assertArrayEquals(new int[] {1796, 115, 1796, 115}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1531()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'm');
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1532()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1533()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (int) (byte)126, (int) (byte)126, (int) (byte)126);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1534()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      ArrayUtils.shift(booleanArray0, 52);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1535()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1536()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1537()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)121;
      shortArray0[2] = (short)121;
      shortArray0[3] = (short)121;
      shortArray0[4] = (short)9;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1538()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 64);
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertArrayEquals(new long[] {64L}, longArray2);
  }

  @Test(timeout = 4000)
  public void test1539()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      ArrayUtils.nullToEmpty(longArray0);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)335;
      shortArray0[2] = (short)768;
      shortArray0[3] = (short)1809;
      shortArray0[4] = (short)4042;
      shortArray0[5] = (short)2;
      ArrayUtils.removeAllOccurences(shortArray0, (short)768);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) (short)2;
      doubleArray0[2] = (double) (short)335;
      doubleArray0[3] = (double) 0L;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 2885);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2885, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1540()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1541()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)80;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1542()  throws Throwable  {
      ArrayUtils.insert((-1540), (short[]) null, (short[]) null);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1540);
      intArray0[1] = (-1540);
      intArray0[2] = (-1540);
      intArray0[3] = (-1540);
      intArray0[4] = (-1540);
      intArray0[5] = (-1540);
      ArrayUtils.reverse(intArray0, (-1540), (-1540));
      ArrayUtils.swap((float[]) null, (-1540), (-2146721588));
      Short short0 = new Short((short) (-15859));
      Object object0 = new Object();
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1454;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1454, (-2146721588));
      assertEquals(0, int0);
      
      ArrayUtils.removeAllOccurences((float[]) null, (float) (-1540));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)34;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-18));
      assertArrayEquals(new byte[] {(byte) (-76), (byte)5, (byte)34}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1543()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-294.278);
      doubleArray0[1] = (-1188.351);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-597.82123102868);
      doubleArray0[4] = (-29.97);
      doubleArray0[5] = (-1782.0638769811);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 5.88552718;
      doubleArray0[8] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3725.7315891404155), 569);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      charArray0[1] = 'Y';
      charArray0[2] = 'f';
      charArray0[3] = 'D';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'D');
      assertArrayEquals(new char[] {'b', 'Y', 'f'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1544()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 1078L, 2626);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (-1762.9027582670853);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 100.0;
      doubleArray0[4] = (double) 1078L;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) (-1);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2184.0));
      int[] intArray0 = new int[3];
      intArray0[0] = 2626;
      intArray0[1] = (-1);
      intArray0[2] = (int) (short) (-1);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1));
      assertArrayEquals(new int[] {(-1), 2626, (-1), (-1)}, intArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      charArray0[1] = 'h';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'u', 'h', 'u', 'h'}, charArray1);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1545()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '`');
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 100.0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1546()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)13;
      longArray0[1] = (long) (byte)13;
      longArray0[2] = (long) (byte)13;
      longArray0[3] = (long) (byte)13;
      longArray0[4] = (long) (byte)13;
      longArray0[6] = (long) (byte)13;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1547()  throws Throwable  {
      ArrayUtils.indexesOf((float[]) null, 1214.0F, 0);
      Boolean[] booleanArray0 = new Boolean[4];
      ArrayUtils.indexesOf((float[]) null, (float) 0, (-1));
      Boolean boolean0 = new Boolean("");
      Boolean boolean1 = new Boolean(true);
      Boolean.valueOf("");
      ArrayUtils.toPrimitive((Boolean[]) null, false);
      boolean boolean2 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1548()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[6] = (byte) (-70);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      ArrayUtils.reverse(byteArray1, (-1), 294);
      Double double0 = new Double((byte)0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1402);
      intArray0[1] = (-1);
      intArray0[2] = (-1402);
      ArrayUtils.swap(intArray0, (int) (byte) (-70), (-1));
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-70);
      shortArray0[1] = (short) (byte) (-70);
      shortArray0[3] = (short) (byte)58;
      shortArray0[4] = (short) (byte)102;
      shortArray0[5] = (short) (byte) (-70);
      shortArray0[6] = (short) (byte) (-70);
      shortArray0[7] = (short) (byte)98;
      ArrayUtils.clone(shortArray0);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-70), (byte)0, (byte)0, (byte) (-70), (byte) (-70), (byte)0, (byte)0}, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1549()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-126);
      intArray0[1] = (int) (byte) (-126);
      ArrayUtils.swap(intArray0, 1, (-126), 1);
      assertArrayEquals(new int[] {(-126), (-126)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1550()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2484.42035219362;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 2484.42035219362;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, (-1430));
      assertEquals(0, int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 52;
      intArray0[1] = (-1430);
      intArray0[2] = (-1430);
      intArray0[3] = (-1430);
      MockRandom mockRandom0 = new MockRandom(3698L);
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {(-1430), (-1430), (-1430), 52}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1551()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-71);
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte) (-45);
      byteArray0[8] = (byte)2;
      ArrayUtils.swap(byteArray0, 2, (-2146637181));
      ArrayUtils.lastIndexOf((byte[]) null, (byte)0);
      ArrayUtils.removeElements((int[]) null, (int[]) null);
      Byte byte0 = new Byte((byte)2);
      Byte[] byteArray1 = ArrayUtils.insert((int)  (-17), (Byte[]) null, (Byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1552()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-256);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      ArrayUtils.swap(intArray0, 0, (-1402));
      assertArrayEquals(new int[] {0, (-256), 0, 1, 0}, intArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)2;
      ArrayUtils.swap(byteArray0, (int) (byte)0, 1);
      assertArrayEquals(new byte[] {(byte)98, (byte)66, (byte)102, (byte)58, (byte)65, (byte)1, (byte) (-123), (byte)0, (byte)2}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1553()  throws Throwable  {
      char[] charArray0 = new char[4];
      ArrayUtils.shift(charArray0, (-1880));
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1554()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-910.788), (-537));
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1555()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(0.0F);
      floatArray0[0] = float0;
      Float float1 = new Float(0.0F);
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1705.994F);
      ArrayUtils.removeElements(floatArray1, floatArray1);
      Object object0 = new Object();
      ArrayUtils.indexesOf((Object[]) floatArray0, (Object) null);
      boolean boolean0 = ArrayUtils.isNotEmpty((Byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1556()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)100;
      Byte byte1 = new Byte((byte)100);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)70);
      byteArray0[2] = byte3;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1557()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 50;
      intArray0[1] = 0;
      intArray0[2] = 1941;
      intArray0[3] = 1310;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 55;
      ArrayUtils.shift(intArray0, 1788, 1941, 2807);
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      byteArray0[2] = byte3;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1558()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-2145881199), (double) (short)415);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1559()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 12.0992598, (-2387), (double) (-2387));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1560()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = '=';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(2, charArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)79;
      shortArray0[1] = (short)351;
      shortArray0[2] = (short)5;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-670);
      shortArray0[5] = (short) (-1481);
      shortArray0[6] = (short)1364;
      shortArray0[7] = (short)1148;
      shortArray0[8] = (short)1380;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-37));
      assertArrayEquals(new short[] {(short) (-37), (short)79, (short)351, (short)5, (short) (-1), (short) (-670), (short) (-1481), (short)1364, (short)1148, (short)1380}, shortArray1);
      assertEquals(10, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1561()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.toMap(objectArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2615.1643F;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-435.22387023486);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1730.911946055, (double) 2615.1643F);
      assertEquals("{0, 1, 2}", bitSet0.toString());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)48;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-4019.61145524139), 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1562()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.toObject(doubleArray0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 639.9093948494, 639.9093948494);
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1563()  throws Throwable  {
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1564()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1565()  throws Throwable  {
      ArrayUtils.indexOf((int[]) null, (-872), (-3740));
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1566()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 0, 0, (double) 0);
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1567()  throws Throwable  {
      ArrayUtils.nullToEmpty((char[]) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2140.329799843762;
      doubleArray0[1] = (-2230.22);
      doubleArray0[2] = 0.0;
      ArrayUtils.indexesOf(doubleArray0, 1.0, 0.0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1568()  throws Throwable  {
      byte byte0 = (byte) (-27);
      ArrayUtils.toPrimitive((Short[]) null, (short) (byte) (-27));
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-27);
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1569()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 121);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 121, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1570()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 733.38865812137;
      doubleArray0[3] = (-537.27737141392);
      doubleArray0[4] = 1070.0;
      ArrayUtils.shift(doubleArray0, 0);
      float[] floatArray0 = new float[0];
      ArrayUtils.add(floatArray0, (float) 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[2] = 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.removeAll(doubleArray0, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 733.38865812137, (-537.27737141392), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1571()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(0L);
      longArray0[0] = long0;
      ArrayUtils.toPrimitive(longArray0, 0L);
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1572()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1573()  throws Throwable  {
      int[] intArray0 = new int[5];
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(0);
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      ArrayUtils.removeAll(longArray1, intArray0);
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1574()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 1;
      intArray0[0] = 1;
      intArray0[1] = (-126);
      intArray0[2] = 0;
      intArray0[3] = 324;
      intArray0[4] = 0;
      intArray0[5] = (-2775);
      ArrayUtils.removeElements(intArray0, intArray0);
      ArrayUtils.clone(intArray0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-2775);
      longArray0[1] = (long) 324;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) (-126);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (-2775);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 324, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1575()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'M');
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1576()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'z');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1577()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'K');
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1578()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'q';
      charArray0[2] = '#';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '#');
      assertArrayEquals(new char[] {'T', 'q'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1579()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'y');
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1580()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = 492.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1581()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte byte1 = new Byte((byte)0);
      int[] intArray0 = new int[0];
      ArrayUtils.isEmpty(intArray0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, (int) (byte)0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)14;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1582()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1583()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)80;
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[2];
      charArray1[0] = '!';
      charArray1[1] = 's';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      boolean boolean1 = ArrayUtils.isSorted((double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1584()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1585()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1586()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1587()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (-303));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = '?';
      charArray0[2] = 'D';
      charArray0[3] = '!';
      charArray0[4] = 'Q';
      charArray0[5] = 'F';
      charArray0[6] = 's';
      charArray0[7] = '{';
      charArray0[8] = '!';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'D';
      doubleArray0[1] = (double) '~';
      doubleArray0[2] = (double) 'D';
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1588()  throws Throwable  {
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '\u0000');
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1589()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1590()  throws Throwable  {
      char[] charArray0 = new char[8];
      ArrayUtils.shift(charArray0, 1322);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1591()  throws Throwable  {
      short[] shortArray0 = new short[8];
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[3] = (-2911.4802F);
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (float) (short) (-48);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.shift((boolean[]) null, 83);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1592()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 0);
      ArrayUtils.shift((boolean[]) null, 371, 0, 160);
      char[] charArray0 = ArrayUtils.add((char[]) null, 'N');
      assertArrayEquals(new char[] {'N'}, charArray0);
      assertNotNull(charArray0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, 82);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1593()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1594()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1595()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)98;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false, false, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1596()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1597()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, ' ');
      assertArrayEquals(new char[] {' '}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1598()  throws Throwable  {
      ArrayUtils.contains((short[]) null, (short)3467);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, (int) (short)3467);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3467, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1599()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byteArray0[0]);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1600()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = 'H';
      charArray0[2] = 'G';
      ArrayUtils.add(charArray0, '@');
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      short short0 = (short)49;
      shortArray0[1] = (short)49;
      short short1 = (short)0;
      shortArray0[2] = (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) (short)49);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 49, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1601()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[3] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-91), 1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-91)}, byteArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (byte)40;
      floatArray0[3] = (float) 'g';
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 40.0F, 103.0F, 0.0F, 1.0F, 40.0F, 103.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1602()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 13);
      assertArrayEquals(new int[] {13}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1603()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 50;
      intArray0[0] = 0;
      intArray0[2] = 1941;
      intArray0[5] = 1310;
      intArray0[4] = 0;
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(booleanArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1941;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1310;
      doubleArray0[3] = (double) 1310;
      doubleArray0[4] = (double) 1310;
      doubleArray0[5] = (double) 507;
      doubleArray0[6] = 393.95072193763;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1604()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 48;
      intArray0[1] = 13;
      intArray0[2] = 0;
      intArray0[3] = 1;
      ArrayUtils.add(intArray0, 48);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.add(intArray0, 13);
      assertArrayEquals(new int[] {48, 13, 0, 1, 13}, intArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte) (-107);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, 48);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-29), (byte)40, (byte)60, (byte) (-91), (byte) (-107)}, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1605()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ArrayUtils.toStringArray(objectArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1606()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      ArrayUtils.swap(byteArray0, (int) (byte) (-1), 2, (-687));
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-1), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1607()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(5, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1608()  throws Throwable  {
      ArrayUtils.removeElements((int[]) null, (int[]) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 0);
      Float[] floatArray0 = new Float[0];
      ArrayUtils.toPrimitive(floatArray0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.removeElements(booleanArray0, booleanArray0);
      ArrayUtils.reverse((int[]) null, 0, 0);
  }

  @Test(timeout = 4000)
  public void test1609()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'r';
      charArray0[2] = 'm';
      charArray0[3] = 'A';
      charArray0[4] = '0';
      charArray0[5] = 'Y';
      MockRandom mockRandom0 = new MockRandom((-1L));
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'r', 'm', 'A', '0', 'Y', 'Y'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1610()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2747.4679);
      doubleArray0[1] = 409.09;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-161);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      ArrayUtils.swap(floatArray0, 1242, 2);
      ArrayUtils.swap((byte[]) null, 114, (-3452));
  }

  @Test(timeout = 4000)
  public void test1611()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      short[] shortArray0 = ArrayUtils.insert(88, (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1612()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-461);
      intArray0[1] = 14;
      intArray0[2] = 89;
      ArrayUtils.swap(intArray0, (-461), 14, 2325);
      assertArrayEquals(new int[] {(-461), 14, 89}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1613()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1614()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1615()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)68);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1616()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1, 6);
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short) (-1807);
      ArrayUtils.indexOf(shortArray0, (short)0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 1;
  }

  @Test(timeout = 4000)
  public void test1617()  throws Throwable  {
      ArrayUtils.insert((-1540), (short[]) null, (short[]) null);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1540);
      intArray0[1] = (-1540);
      intArray0[2] = (-1540);
      intArray0[3] = (-1540);
      intArray0[4] = (-1540);
      intArray0[5] = (-1540);
      ArrayUtils.reverse(intArray0, (-1540), (-1540));
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      ArrayUtils.indexOf((short[]) null, (short)1822);
      Object object0 = new Object();
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1618()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)37);
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      Double double0 = new Double(854);
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)37);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("{0, 6}", bitSet0.toString());
      
      ArrayUtils.toPrimitive((Object) null);
      int int0 = ArrayUtils.indexOf((Object[]) doubleArray1, (Object) null);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1619()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-54);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-70));
      ArrayUtils.reverse(byteArray1, (-923), 46);
      Double double0 = new Double(145.184404680243);
      Double[] doubleArray0 = new Double[0];
      ArrayUtils.nullToEmpty(doubleArray0);
      ArrayUtils.indexesOf(byteArray1, (byte)60);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-54), (byte) (-1)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1620()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-18));
      assertArrayEquals(new byte[] {(byte) (-18)}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1621()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte) (-5));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1622()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)100);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1623()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-418.0));
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1624()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)32;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)80);
      ArrayUtils.reverse(byteArray1, (int) (byte) (-109), 854);
      assertArrayEquals(new byte[] {(byte)80, (byte)32, (byte) (-70), (byte) (-9), (byte) (-109), (byte)80, (byte)37}, byteArray1);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1.0));
      doubleArray0[0] = double0;
      ArrayUtils.nullToEmpty(doubleArray0);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)27);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1625()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      ArrayUtils.indexOf((short[]) null, (short)1822);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      ArrayUtils.subarray(byteArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      ArrayUtils.toStringArray((Object[]) null);
      ArrayUtils.shift(shortArray0, 0, (-1540), 0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1626()  throws Throwable  {
      ArrayUtils.subarray((byte[]) null, (-2820), (int) (byte) (-1));
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = 'm';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-1), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1627()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.1;
      ArrayUtils.shift(doubleArray0, 2, 2, 2);
      ArrayUtils.swap(doubleArray0, 2, 2, 2);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1628()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-294.278);
      doubleArray0[1] = (-1218.713247788964);
      ArrayUtils.swap(doubleArray0, 2402, 961);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2402;
      floatArray0[1] = (float) 2402;
      ArrayUtils.isEmpty(floatArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 2402, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2402, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1629()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-9));
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (int) (byte)21);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1630()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1631()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayUtils.shift(doubleArray0, (-30));
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1632()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 200.332851362;
      ArrayUtils.swap(doubleArray0, 59, 59);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 59;
      floatArray0[1] = (float) 59;
      floatArray0[2] = (float) 59;
      floatArray0[3] = (float) 59;
      floatArray0[4] = (float) 59;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)64;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)64, 59);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      ArrayUtils.reverse(floatArray0, 0, (-326));
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'g';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'t', 'g', 't', 'g'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1633()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'a';
      charArray0[1] = ',';
      charArray0[2] = 'H';
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1634()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.insert(111, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1635()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      integerArray0[0] = integer0;
      ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray0);
      boolean[] booleanArray0 = new boolean[19];
      ArrayUtils.removeElements(booleanArray0, booleanArray0);
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1636()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1637()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1638()  throws Throwable  {
      float[] floatArray0 = new float[7];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1639()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2484.42035219362;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (-175));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1640()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-299.22929832564165);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-299.22929832564165));
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1641()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.indexOf(doubleArray0, (double) (-1430), 1136);
      int[] intArray0 = new int[0];
  }

  @Test(timeout = 4000)
  public void test1642()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 106.4885;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1628.5262123);
      doubleArray0[3] = 890.41;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1881.01952;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 2379.41;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1643()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-464.999591151);
      doubleArray0[3] = 1.5;
      doubleArray0[4] = (-51.6751851059221);
      doubleArray0[5] = (-1.0);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1644()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 3020;
      intArray0[0] = 3020;
      intArray0[2] = 3020;
      ArrayUtils.lastIndexOf(intArray0, (-1255), 3020);
      Integer integer0 = new Integer(3020);
      assertEquals(3020, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1645()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.lastIndexOf(intArray0, 1519, 1519);
      Integer integer0 = new Integer(6);
      assertEquals(6, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1646()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte)31);
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1647()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-94));
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.addFirst(booleanArray0, false);
      Byte byte1 = new Byte((byte) (-94));
      Byte byte2 = new Byte((byte) (-56));
      Byte byte3 = new Byte((byte) (-56));
      Byte[] byteArray1 = ArrayUtils.add((Byte[]) null, byte3);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1648()  throws Throwable  {
      int[] intArray0 = new int[1];
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-801), (int) (short) (-801));
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1649()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3632), (-3632));
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-3632));
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1650()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1572.632F));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1572.632F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1651()  throws Throwable  {
      Byte byte0 = new Byte((byte)64);
      Byte byte1 = new Byte((byte)64);
      Byte byte2 = new Byte((byte)48);
      Byte byte3 = new Byte((byte) (-118));
      Byte byte4 = new Byte((byte) (-118));
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      int[] intArray0 = new int[0];
      ArrayUtils.lastIndexOf(intArray0, (int) (byte)48);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)48;
      shortArray0[1] = (short) (byte) (-1);
      ArrayUtils.indexOf(shortArray0, (short)121, 59);
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1652()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertEquals(10, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test1653()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1654()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 412.64231;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3394.91891469;
      doubleArray0[4] = 1108.2685;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1756.8596);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 412.64231, 3751);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1655()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-38);
      doubleArray0[1] = (double) 569;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-166.053), (int) (byte)80);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[8];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-811));
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1656()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 0.0, 0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 129);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1657()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 566.4602831141126;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3.0, (-33));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1658()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 0L;
      Long long1 = new Long(0L);
      longArray0[0] = long1;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) long0;
      floatArray0[2] = (float) long0;
      floatArray0[3] = 1579.8F;
      floatArray0[4] = (float) long0;
      floatArray0[5] = (-1463.01F);
      floatArray0[6] = 121.0F;
      floatArray0[3] = 0.0F;
      floatArray0[8] = 3366.539F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-1463.01F), 121.0F, 0.0F, 3366.539F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1659()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[3] = (-1815L);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3903);
      shortArray0[1] = (short)3966;
      shortArray0[2] = (short)448;
      shortArray0[3] = (short) (-902);
      shortArray0[4] = (short) (-1);
      short[] shortArray1 = new short[2];
      shortArray1[0] = (short) (-1);
      shortArray1[1] = (short)448;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-3903), (short)3966, (short) (-902)}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test1660()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)0;
      ArrayUtils.swap(byteArray0, (-687), (int) (byte) (-1), (int) (byte) (-35));
      assertArrayEquals(new byte[] {(byte)77, (byte) (-1), (byte) (-35), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1661()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.swap(byteArray0, 781, (-2272), 781);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1662()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1663()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1664()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      MockRandom mockRandom0 = new MockRandom();
      long[] longArray0 = new long[2];
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1665()  throws Throwable  {
      Short short0 = new Short((byte) (-43));
      long[] longArray0 = new long[8];
      ArrayUtils.shift(longArray0, (int) (byte) (-43), (int) (byte)67, (int) (byte)67);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1666()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1667()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ArrayUtils.shift(byteArray0, 115);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1668()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (byte)126);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1669()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-125);
      byteArray0[8] = (byte)67;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-56), (byte)42, (byte) (-125), (byte)116, (byte) (-1), (byte) (-125), (byte)67, (byte)76}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1670()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1671()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1672()  throws Throwable  {
      ArrayUtils.removeElement((float[]) null, 0.0F);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)49;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((-221), (int) (byte)49);
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)112;
      mockRandom0.nextGaussian();
      shortArray0[1] = (short) (-1033);
      shortArray0[2] = (short) (byte)112;
      shortArray0[3] = (short) (byte)112;
      shortArray0[4] = (short) (byte)49;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.swap(byteArray0, (int) (byte)112, 2750, (int) (byte)49);
      assertArrayEquals(new byte[] {(byte)49, (byte)112}, byteArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-901L);
      longArray0[1] = (long) (short)112;
      longArray0[2] = (long) (short)112;
      longArray0[3] = (long) (byte)112;
      longArray0[4] = (long) (short) (-1033);
      longArray0[5] = (long) (short) (-1033);
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {(-901L), 112L, 112L, (-1033L), (-1033L), 112L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1673()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-1885));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1674()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 9;
      intArray0[1] = (-1);
      ArrayUtils.indexOf(intArray0, 1);
      Boolean[] booleanArray0 = new Boolean[0];
      ArrayUtils.toPrimitive(booleanArray0);
      char[] charArray0 = new char[2];
      charArray0[1] = 'W';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 3.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 'W';
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 100.0;
      doubleArray0[6] = (double) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1675()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-68));
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      int[] intArray0 = new int[3];
      intArray0[0] = 357;
      intArray0[1] = 357;
      intArray0[2] = 357;
      ArrayUtils.swap(intArray0, 66, 90);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-68);
      doubleArray0[1] = (double) 66;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 357;
      ArrayUtils.insert((int) byte0, doubleArray0, doubleArray0);
      Byte byte4 = new Byte((byte)0);
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1676()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.addFirst(longArray0, (long) 64);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 64);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(64, doubleArray0, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1677()  throws Throwable  {
      ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1088;
      doubleArray0[1] = (double) 1088;
      doubleArray0[2] = (double) 1088;
      doubleArray0[3] = (double) 1088;
      doubleArray0[4] = (double) 1088;
      doubleArray0[5] = (double) 1088;
      double[] doubleArray1 = ArrayUtils.insert(1088, (double[]) null, doubleArray0);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1678()  throws Throwable  {
      int[] intArray0 = new int[5];
      ArrayUtils.shift(intArray0, (-87));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1679()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1680()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      int[] intArray0 = new int[5];
      intArray0[1] = 66;
      intArray0[2] = 357;
      intArray0[3] = 357;
      intArray0[4] = 66;
      ArrayUtils.swap(intArray0, 0, 357);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(66, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 66, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1681()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 12.0992598);
      assertArrayEquals(new double[] {12.0992598, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1682()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 128;
      intArray0[2] = 2;
      intArray0[3] = 162;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = Integer.MAX_VALUE;
      intArray0[7] = (-4834);
      ArrayUtils.swap(intArray0, (-4834), 368);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 368;
      doubleArray0[2] = 670.185743;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (-2878.9919);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1683()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      ArrayUtils.toPrimitive(longArray0, 0L);
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1684()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1685()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      Map<Object, Object> map0 = ArrayUtils.toMap(byteArray0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1686()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 2683.84F);
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1687()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 1214.0F, 0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) bitSet0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '{}', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1688()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3108;
      shortArray0[1] = (short)3108;
      shortArray0[3] = (short)3108;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)3108);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1689()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.nullToEmpty(doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      ArrayUtils.isSameLength(intArray0, intArray0);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      ArrayUtils.subarray(charArray1, 62, 512);
      Byte[] byteArray0 = ArrayUtils.insert(0, (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1690()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1691()  throws Throwable  {
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1692()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1693()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-301.32851822527084));
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1694()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1695()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2424;
      intArray0[1] = 70;
      intArray0[2] = 47;
      intArray0[3] = 0;
      intArray0[4] = 70;
      Byte byte0 = new Byte((byte) (-43));
      Object object0 = new Object();
      Object object1 = new Object();
      int int0 = (-1196);
      ArrayUtils.shift(intArray0, (-1196), (int) (byte) (-43), 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 70;
      doubleArray0[1] = (double) 4;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2424, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1696()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)80;
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte)80, (int) (byte)80);
      int int1 = ArrayUtils.indexOf((float[]) null, (float) (byte)80, 1);
      assertTrue(int1 == int0);
      
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)80, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1697()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)438;
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1L);
      doubleArray0[0] = double0;
      Double double1 = new Double((-435.22387023486));
      doubleArray0[1] = double1;
      ArrayUtils.shift(shortArray0, 2559, (int) (short)438, 2528);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)438;
      intArray0[1] = 2559;
      intArray0[2] = 2559;
      ArrayUtils.shift(intArray0, (-3048), 438, (int) (short)438);
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1698()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.shift(intArray0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1699()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)27;
      Byte byte1 = new Byte((byte)27);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)27);
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      ArrayUtils.add(charArray0, ':');
      long[] longArray0 = new long[5];
      longArray0[0] = (long) byte0;
      longArray0[1] = (-1L);
      longArray0[1] = (long) byte0;
      ArrayUtils.reverse((byte[]) null);
      ArrayUtils.get((Object[]) byteArray0, (-4273));
      ArrayUtils.shift((Object[]) byteArray0, (int) byte0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1700()  throws Throwable  {
      int[] intArray0 = new int[27];
      ArrayUtils.shift(intArray0, 0);
      assertEquals(27, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1701()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2424;
      intArray0[1] = 76;
      intArray0[2] = 47;
      intArray0[3] = 0;
      intArray0[4] = (-2877);
      intArray0[5] = 3;
      intArray0[6] = (-793);
      ArrayUtils.shift(intArray0, 76, 1016, 47);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)108;
      byteArray0[8] = (byte) (-92);
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)108, (byte)68, (byte)0, (byte)0, (byte) (-1), (byte)54, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1702()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      byte[] byteArray1 = new byte[1];
      ArrayUtils.reverse(byteArray1);
      ArrayUtils.shift((Object[]) byteArray0, (-1016));
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1703()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ArrayUtils.isSorted(shortArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-1200);
      doubleArray0[3] = (double) (short) (-1200);
      ArrayUtils.reverse(doubleArray0);
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }
}
