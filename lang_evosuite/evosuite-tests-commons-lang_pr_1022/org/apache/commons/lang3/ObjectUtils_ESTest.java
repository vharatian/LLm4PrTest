/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 22:23:07 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.text.Collator;
import java.time.Clock;
import java.time.Duration;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahDate;
import java.time.chrono.HijrahEra;
import java.time.chrono.MinguoEra;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.TimeZone;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.ToDoubleFunction;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ObjectUtils_ESTest extends ObjectUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer integer0 = new Integer(101);
      Integer integer1 = new Integer(161);
      Integer integer2 = ObjectUtils.defaultIfNull(integer1, integer1);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer2;
      Integer integer3 = ObjectUtils.median(integerArray0);
      assertEquals(101, (int)integer3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Function<Integer, Integer> function0 = Function.identity();
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Integer>) function0);
      Integer integer0 = new Integer(21);
      Integer integer1 = new Integer(1367);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      Integer integer2 = ObjectUtils.median(comparator0, integerArray0);
      assertEquals(21, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = ObjectUtils.max(integerArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Supplier<ChronoLocalDate>[] supplierArray0 = (Supplier<ChronoLocalDate>[]) Array.newInstance(Supplier.class, 1);
      Supplier<ChronoLocalDate> supplier0 = (Supplier<ChronoLocalDate>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      supplierArray0[0] = supplier0;
      int int0 = ObjectUtils.hashCodeMulti(supplierArray0);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      // Undeclared exception!
      try { 
        ObjectUtils.wait((Object) linkedHashMap0, (Duration) null);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(32767);
      assertEquals((short)32767, short0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT((-32768));
      assertEquals((short) (-32768), short0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      Integer integer0 = mutableInt0.toInteger();
      Object object0 = ObjectUtils.cloneIfPossible((Object) integer0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-799));
      integerArray0[1] = integer0;
      StringBuffer stringBuffer0 = new StringBuffer("Cloneable type ");
      ObjectUtils.identityToString((Appendable) stringBuffer0, (Object) integerArray0[1]);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string0 = ObjectUtils.toString((Object) null, supplier0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).toString();
      Object object0 = ObjectUtils.requireNonEmpty((Object) supplier0, "");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) objectUtils0;
      objectArray0[1] = (Object) objectUtils0;
      objectArray0[2] = (Object) objectUtils0;
      objectArray0[3] = (Object) objectUtils0;
      Object object0 = ObjectUtils.mode(objectArray0);
      assertSame(object0, objectUtils0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MinguoEra[] minguoEraArray0 = new MinguoEra[7];
      MinguoEra minguoEra0 = MinguoEra.ROC;
      minguoEraArray0[0] = minguoEra0;
      minguoEraArray0[1] = minguoEraArray0[0];
      minguoEraArray0[2] = minguoEra0;
      minguoEraArray0[3] = minguoEra0;
      minguoEraArray0[4] = minguoEraArray0[1];
      minguoEraArray0[5] = minguoEra0;
      minguoEraArray0[6] = minguoEraArray0[2];
      MinguoEra minguoEra1 = ObjectUtils.median(minguoEraArray0);
      assertEquals(MinguoEra.ROC, minguoEra1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(toDoubleFunction0).applyAsDouble(any());
      Comparator<ArrayDeque<Integer>> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super ArrayDeque<Integer>>) toDoubleFunction0);
      ArrayDeque<Integer>[] arrayDequeArray0 = (ArrayDeque<Integer>[]) Array.newInstance(ArrayDeque.class, 4);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDequeArray0[0] = arrayDeque0;
      arrayDequeArray0[1] = arrayDeque0;
      arrayDequeArray0[2] = arrayDeque0;
      arrayDequeArray0[3] = arrayDeque0;
      ArrayDeque<Integer> arrayDeque1 = ObjectUtils.median(comparator0, arrayDequeArray0);
      assertTrue(arrayDeque1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ChronoField chronoField0 = ChronoField.MINUTE_OF_HOUR;
      ChronoField chronoField1 = ObjectUtils.requireNonEmpty(chronoField0);
      ChronoField[] chronoFieldArray0 = new ChronoField[1];
      chronoFieldArray0[0] = chronoField1;
      ChronoField chronoField2 = ObjectUtils.max(chronoFieldArray0);
      assertEquals(ChronoField.MINUTE_OF_HOUR, chronoField2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      int int0 = ObjectUtils.hashCodeMulti(objectArray0);
      assertEquals((-196513505), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Supplier<ChronoLocalDate>[] supplierArray0 = (Supplier<ChronoLocalDate>[]) Array.newInstance(Supplier.class, 1);
      TimeZone timeZone0 = TimeZone.getTimeZone("5");
      ZoneId zoneId0 = timeZone0.toZoneId();
      Clock clock0 = MockClock.system(zoneId0);
      HijrahDate hijrahDate0 = MockHijrahDate.now(clock0);
      Supplier<ChronoLocalDate> supplier0 = (Supplier<ChronoLocalDate>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(hijrahDate0).when(supplier0).get();
      supplierArray0[0] = supplier0;
      ChronoLocalDate chronoLocalDate0 = ObjectUtils.getFirstNonNull(supplierArray0);
      assertSame(chronoLocalDate0, hijrahDate0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = ObjectUtils.defaultIfNull((HashMap<Integer, Integer>) linkedHashMap0, (HashMap<Integer, Integer>) linkedHashMap0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Integer integer0 = Integer.valueOf(88);
      int int0 = ObjectUtils.compare(integer0, (Integer) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Integer integer0 = new Integer((-1534));
      Integer integer1 = new Integer(0);
      int int0 = ObjectUtils.compare(integer0, integer1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE((-128));
      assertEquals((byte) (-128), byte0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)64);
      assertEquals((short)64, short0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short) (-3));
      assertEquals((short) (-3), short0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = ObjectUtils.CONST((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = ObjectUtils.CONST(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = ObjectUtils.CONST((-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = ObjectUtils.CONST(35);
      assertEquals(35, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = ObjectUtils.CONST((-18));
      assertEquals((-18), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float float0 = ObjectUtils.CONST(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float float0 = ObjectUtils.CONST(1750.0464F);
      assertEquals(1750.0464F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = ObjectUtils.CONST(3950.05);
      assertEquals(3950.05, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = ObjectUtils.CONST((-3794.0095981207));
      assertEquals((-3794.0095981207), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char char0 = ObjectUtils.CONST(',');
      assertEquals(',', char0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char char0 = ObjectUtils.CONST('9');
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)32);
      assertEquals((byte)32, byte0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.wait((Object) null, (Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Duration duration0 = Duration.ofDays((-1L));
      // Undeclared exception!
      try { 
        ObjectUtils.wait((Object) duration0, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ArrayDeque<HijrahEra> arrayDeque0 = new ArrayDeque<HijrahEra>();
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      Duration duration0 = chronoUnit0.getDuration();
      // Undeclared exception!
      try { 
        ObjectUtils.wait((Object) arrayDeque0, duration0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.requireNonEmpty((Object) null, "gxu cWBzn`S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // gxu cWBzn`S
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.requireNonEmpty((ArrayDeque<HijrahEra>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      linkedHashMap0.put(linkedHashMap0, linkedHashMap0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) linkedHashMap0;
      // Undeclared exception!
      try { 
        ObjectUtils.mode(objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) null, (Object[]) comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null/empty items
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Collator collator0 = Collator.getInstance();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) collator0;
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) collator0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("java.text.Collator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = new Integer((-18));
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuilder) null, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuffer) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = ObjectUtils.isEmpty(hijrahEra0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty("sU0B\"[W=ft|PzTw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "";
      Object object0 = ObjectUtils.firstNonNull(objectArray0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Integer integer0 = ObjectUtils.firstNonNull((Integer[]) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = new Integer((-624));
      int int0 = ObjectUtils.compare(integer0, (Integer) null, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer integer0 = new Integer(0);
      int int0 = ObjectUtils.compare((Integer) null, integer0, true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer(0);
      int int0 = ObjectUtils.compare((Integer) null, integer0, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = ObjectUtils.compare((Integer) null, (Integer) null, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = ObjectUtils.anyNotNull((Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = Integer.valueOf((-945));
      integerArray0[1] = integer0;
      boolean boolean0 = ObjectUtils.anyNotNull(integerArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = ObjectUtils.allNotNull((Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, (Supplier<String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = new Integer(31);
      String string0 = ObjectUtils.toString((Object) integer0, (Supplier<String>) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, "NGyCf");
      assertEquals("NGyCf", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ObjectUtils.toString(object0, "NGyCf");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      boolean boolean0 = ObjectUtils.notEqual((Object) null, linkedHashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = ObjectUtils.notEqual((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[2] = (Object) "";
      Object object0 = ObjectUtils.mode(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) linkedHashMap0;
      Object object0 = ObjectUtils.mode(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object object0 = ObjectUtils.mode(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.min((Comparable<Object>[]) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = ObjectUtils.max((Integer[]) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      Object object0 = ObjectUtils.CONST((Object) linkedHashMap0);
      linkedHashMap0.put(object0, object0);
      boolean boolean0 = ObjectUtils.isEmpty(linkedHashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      boolean boolean0 = ObjectUtils.isEmpty(linkedHashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayDeque<HijrahEra> arrayDeque0 = new ArrayDeque<HijrahEra>();
      // Undeclared exception!
      try { 
        ObjectUtils.requireNonEmpty(arrayDeque0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // object
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isNotEmpty("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.requireNonEmpty((Object) "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isNotEmpty((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = ObjectUtils.identityToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = ObjectUtils.hashCodeMulti((Object[]) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HijrahEra hijrahEra0 = HijrahEra.AH;
      ObjectUtils.hashCode((Object) hijrahEra0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ArrayDeque<Comparable> arrayDeque0 = ObjectUtils.getIfNull((ArrayDeque<Comparable>) null, (Supplier<ArrayDeque<Comparable>>) null);
      assertNull(arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = ObjectUtils.getIfNull(object0, (Supplier<Object>) null);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Object object0 = ObjectUtils.getIfNull((Object) null, supplier0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Supplier<ChronoLocalDate>[] supplierArray0 = (Supplier<ChronoLocalDate>[]) Array.newInstance(Supplier.class, 1);
      Supplier<ChronoLocalDate> supplier0 = (Supplier<ChronoLocalDate>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      supplierArray0[0] = supplier0;
      ChronoLocalDate chronoLocalDate0 = ObjectUtils.getFirstNonNull(supplierArray0);
      assertNull(chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Supplier<Object>[] supplierArray0 = (Supplier<Object>[]) Array.newInstance(Supplier.class, 1);
      Object object0 = ObjectUtils.getFirstNonNull(supplierArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ChronoLocalDate chronoLocalDate0 = ObjectUtils.getFirstNonNull((Supplier<ChronoLocalDate>[]) null);
      assertNull(chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = ObjectUtils.firstNonNull(integerArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = new Object();
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      boolean boolean0 = ObjectUtils.equals(object0, (Object) linkedHashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      boolean boolean0 = ObjectUtils.equals((Object) linkedHashMap0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = ObjectUtils.equals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      boolean boolean0 = ObjectUtils.equals((Object) null, (Object) arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = ObjectUtils.defaultIfNull((Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_SHORT(32783);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [32783]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_SHORT((-32783));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [-32783]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(127);
      assertEquals((byte)127, byte0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE(2475);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [2475]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE((-1816));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [-1816]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Integer integer0 = new Integer(31);
      Integer integer1 = new Integer(31);
      int int0 = ObjectUtils.compare(integer0, integer1, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MinguoEra[] minguoEraArray0 = new MinguoEra[4];
      MinguoEra minguoEra0 = MinguoEra.ROC;
      minguoEraArray0[1] = minguoEra0;
      MinguoEra minguoEra1 = ObjectUtils.min(minguoEraArray0);
      assertSame(minguoEra1, minguoEra0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer[] integerArray0 = new Integer[17];
      Integer integer0 = new Integer((-118));
      integerArray0[0] = integer0;
      Integer integer1 = ObjectUtils.max(integerArray0);
      assertEquals((-118), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer integer0 = new Integer((short)508);
      int int0 = ObjectUtils.compare(integer0, (Integer) null, false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ArrayDeque<ArrayDeque> arrayDeque0 = ObjectUtils.cloneIfPossible((ArrayDeque<ArrayDeque>) null);
      assertNull(arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)ObjectUtils.clone((Object) linkedHashMap0);
      assertTrue(linkedHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      Object object0 = ObjectUtils.clone((Object) objectUtils0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ObjectUtils.anyNull(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = ObjectUtils.allNull((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Integer integer0 = new Integer(101);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      boolean boolean0 = ObjectUtils.allNull(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      boolean boolean0 = ObjectUtils.allNotNull(objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ObjectUtils.allNotNull(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = ObjectUtils.anyNull((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectUtils.Null objectUtils_Null0 = new ObjectUtils.Null();
      String string0 = ObjectUtils.toString((Object) objectUtils_Null0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null/empty items
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float float0 = ObjectUtils.CONST((-1289.6633F));
      assertEquals((-1289.6633F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      Object object0 = ObjectUtils.CONST((Object) linkedHashMap0);
      String string0 = ObjectUtils.identityToString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      ObjectUtils.identityToString(stringBuffer0, (Object) stringBuffer0);
      assertEquals(24, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = ObjectUtils.CONST(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char char0 = ObjectUtils.CONST('c');
      assertEquals('c', char0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte) (-14));
      assertEquals((byte) (-14), byte0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((Appendable) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ObjectUtils.identityToString(stringBuilder0, (Object) arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparable<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated array is empty
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = ObjectUtils.CONST(3576L);
      assertEquals(3576L, long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = ObjectUtils.CONST(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = ObjectUtils.compare((Integer) null, (Integer) null);
      assertEquals(0, int0);
  }
}
