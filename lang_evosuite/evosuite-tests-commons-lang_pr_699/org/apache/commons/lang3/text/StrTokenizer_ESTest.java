/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 07:30:49 GMT 2025
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.lang3.text.StrMatcher;
import org.apache.commons.lang3.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StrTokenizer_ESTest extends StrTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[2] = '-';
      charArray0[3] = 'R';
      charArray0[7] = 'R';
      charArray0[8] = 'R';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '-', 'R');
      boolean boolean0 = strTokenizer0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[3] = 'R';
      charArray0[7] = 'R';
      charArray0[8] = 'R';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '-', 'R');
      boolean boolean0 = strTokenizer0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[5];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      List<String> list0 = strTokenizer0.tokenize(charArray0, (-2413), (-2413));
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("#[NqLP}g;9T<h}k8c", 'h');
      strTokenizer0.nextToken();
      strTokenizer0.nextToken();
      strTokenizer0.previous();
      assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer("", strMatcher0, strMatcher1);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, '(', '\"');
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("3B}", "B/%9(k;sWJK");
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[2];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", 'j', 'j');
      char[] charArray0 = new char[6];
      strTokenizer0.tokenize(charArray0, 865, 44);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, 'f');
      char[] charArray0 = new char[5];
      List<String> list0 = strTokenizer0.tokenize(charArray0, 0, 2);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("", "7BCOSFM_Wrg", "X(p", "add() is unsupported", "").when(strMatcher0).toString();
      doReturn((-557), (-557), 2, 2, 2).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrTokenizer strTokenizer0 = new StrTokenizer("add() is unsupported", strMatcher0);
      int int0 = strTokenizer0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(" \t\n\r\f");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.setDelimiterString(" \t\n\r\f");
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.setQuoteChar('3');
      assertEquals(1, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[2];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, ']');
      strTokenizer0.next();
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('u');
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.setIgnoredChar('_');
      assertEquals(1, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("dg'@Y,\"W");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.setIgnoredChar('^');
      //  // Unstable assertion: assertEquals(1, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", 'm');
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar(')');
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      strTokenizer0.setEmptyTokenAsNull(true);
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('G');
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("remove() is unsupported");
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterString("remove() is unsupported");
      String string0 = strTokenizer0.next();
      //  // Unstable assertion: assertNull(string0);
      
      strTokenizer1.next();
      StrTokenizer strTokenizer2 = strTokenizer1.setIgnoreEmptyTokens(false);
      //  // Unstable assertion: assertFalse(strTokenizer2.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("B? evdI{:!", 'R');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.setIgnoreEmptyTokens(true);
      assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("remove() is unsupported", '$');
      strTokenizer0.setEmptyTokenAsNull(true);
      strTokenizer0.setIgnoreEmptyTokens(false);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(" \t\n\r\f");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterString(" \t\n\r\f");
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer1.setEmptyTokenAsNull(true);
      assertEquals(1, strTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[2];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, ']');
      String string0 = strTokenizer0.next();
      assertEquals("\u0000\u0000", string0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(false);
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("z\t\r\f");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.setDelimiterString("");
      //  // Unstable assertion: assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.setDelimiterString("");
      assertEquals(1, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      StrTokenizer strTokenizer2 = strTokenizer1.setDelimiterString("StrTokenizer[not tokenized yet]");
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.setDelimiterChar('(');
      assertEquals(1, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("add() is unsupported");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.setDelimiterChar('j');
      assertEquals(2, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      strTokenizer0.setEmptyTokenAsNull(true);
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('*');
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      strTokenizer0.setEmptyTokenAsNull(true);
      char[] charArray0 = new char[7];
      strTokenizer0.reset(charArray0);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("remove() is unsupported", '$');
      strTokenizer0.setEmptyTokenAsNull(true);
      strTokenizer0.reset("");
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance((char[]) null);
      StrTokenizer strTokenizer1 = strTokenizer0.reset();
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'J', '9');
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      strTokenizer1.reset();
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      strTokenizer0.nextToken();
      assertEquals(0, strTokenizer0.previousIndex());
      
      strTokenizer0.previousToken();
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("`wq4s5y7z");
      strTokenizer0.next();
      int int0 = strTokenizer0.previousIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("IL6,jZCaXC88Zp g,=[");
      strTokenizer0.next();
      strTokenizer0.next();
      int int0 = strTokenizer0.previousIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer1.forEachRemaining(consumer0);
      assertEquals(1, strTokenizer1.nextIndex());
      
      strTokenizer0.previous();
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(strMatcher0).toString();
      doReturn(0, 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrTokenizer strTokenizer0 = new StrTokenizer("Invalid startIndex: ", strMatcher0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      int int0 = strTokenizer0.nextIndex();
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      boolean boolean0 = strTokenizer0.isIgnoreEmptyTokens();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      strTokenizer0.setEmptyTokenAsNull(true);
      boolean boolean0 = strTokenizer0.isEmptyTokenAsNull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("\"a\"pt.");
      boolean boolean0 = strTokenizer0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("remove() is unsupported");
      List<String> list0 = strTokenizer0.getTokenList();
      assertEquals(1, list0.size());
      assertTrue(list0.contains("remove() is unsupported"));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("StrTokenizer");
      String string0 = strTokenizer0.getContent();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      Object object0 = strTokenizer0.cloneReset();
      assertNotSame(object0, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strTokenizer0.tokenize(charArray0, 34, 5613);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("JqLr@");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      boolean boolean0 = strTokenizer0.hasPrevious();
      assertEquals(0, strTokenizer0.previousIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      StrTokenizer strTokenizer1 = strTokenizer0.reset((String) null);
      assertSame(strTokenizer0, strTokenizer1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      boolean boolean0 = strTokenizer0.isEmptyTokenAsNull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("KHy$E(0", "KHy$E(0");
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar(']');
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer((char[]) null, strMatcher0, (StrMatcher) null);
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterString("");
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", 'm');
      boolean boolean0 = strTokenizer0.isIgnoreEmptyTokens();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      String string0 = strTokenizer0.toString();
      assertEquals("StrTokenizer[not tokenized yet]", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      boolean boolean0 = strTokenizer0.hasNext();
      assertFalse(boolean0);
      
      String string0 = strTokenizer0.toString();
      assertEquals("StrTokenizer[]", string0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", "");
      StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.clone();
      assertNotSame(strTokenizer1, strTokenizer0);
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      String string0 = strTokenizer0.getContent();
      //  // Unstable assertion: assertEquals("\"\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", "");
      String string0 = strTokenizer0.getContent();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Locale must not be null");
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('u');
      String string0 = strTokenizer1.previousToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("\"\"\"");
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(" \"\"");
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('\"');
      String[] stringArray0 = strTokenizer1.getTokenArray();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(" \t\n\r\f");
      boolean boolean0 = strTokenizer0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      String string0 = strTokenizer1.next();
      assertNull(string0);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("");
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("add() is unsupported");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.previousToken();
      assertEquals(1, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      strTokenizer0.nextToken();
      //  // Unstable assertion: assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      String[] stringArray0 = strTokenizer0.getTokenArray();
      //  // Unstable assertion: assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      // Undeclared exception!
      try { 
        strTokenizer0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      strTokenizer0.size();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      List<String> list0 = strTokenizer0.getTokenList();
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      int int0 = strTokenizer0.previousIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      // Undeclared exception!
      try { 
        strTokenizer0.set("org.apache.commons.lang3.text.StrMatcher$NoMatcher");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      char[] charArray0 = new char[7];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, (StrMatcher) null);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      char[] charArray0 = new char[9];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      strTokenizer0.setEmptyTokenAsNull(true);
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('q');
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      int int0 = strTokenizer0.nextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      // Undeclared exception!
      try { 
        strTokenizer0.add(", Length: 0");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      char[] charArray0 = new char[5];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      strTokenizer0.next();
      String string0 = strTokenizer0.previous();
      assertEquals("", string0);
  }
}
