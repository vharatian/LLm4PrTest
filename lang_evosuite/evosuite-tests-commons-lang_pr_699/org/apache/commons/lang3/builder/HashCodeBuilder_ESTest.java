/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 07:17:56 GMT 2025
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HashCodeBuilder_ESTest extends HashCodeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(Integer.MAX_VALUE, Integer.MAX_VALUE);
      hashCodeBuilder0.append((byte) (-1));
      int int0 = hashCodeBuilder0.toHashCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(booleanArray0);
      int int0 = hashCodeBuilder1.toHashCode();
      assertEquals((-994521857), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      int int0 = HashCodeBuilder.reflectionHashCode(object0, stringArray0);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[8];
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "C^Fa]ELqfow*fB@/", stringArray0);
      assertEquals((-1396970719), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "IA,.aWmYXE7>6UxAN'", true);
      //  // Unstable assertion: assertEquals((-335206497), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "@DefaultLocale can only be used with language tag if language, country, and variant are not set", (Collection<String>) linkedHashSet0);
      assertEquals((-1111450970), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      int int0 = HashCodeBuilder.reflectionHashCode((-1), (-1), (Object) hashCodeBuilder0, true);
      assertEquals(0, int0);
      assertEquals(17, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(5, 5);
      int int0 = HashCodeBuilder.reflectionHashCode(1, 5, (Object) hashCodeBuilder0, false);
      assertEquals(50, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      int int0 = HashCodeBuilder.reflectionHashCode((-1201), 5, (Object) hashCodeBuilder0, true);
      //  // Unstable assertion: assertEquals((-29994), int0);
      //  // Unstable assertion: assertEquals(17, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      int int0 = HashCodeBuilder.reflectionHashCode((-2399), 17, object0);
      assertEquals((-2399), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = HashCodeBuilder.isRegistered(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      hashCodeBuilder0.appendSuper((-1));
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.appendSuper((-992));
      Integer integer0 = hashCodeBuilder0.build();
      assertEquals((-363), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(1, (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(false);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append(false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) hashCodeBuilder0;
      objectArray0[1] = (Object) hashCodeBuilder1;
      objectArray0[2] = (Object) hashCodeBuilder0;
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(objectArray0);
      hashCodeBuilder3.append((boolean[]) null);
      assertEquals(0, hashCodeBuilder2.toHashCode());
      assertEquals(0, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((boolean[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(1, (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(false);
      double[] doubleArray0 = new double[0];
      hashCodeBuilder1.append(doubleArray0);
      assertEquals(0, (int)hashCodeBuilder0.build());
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-403), (-1));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      hashCodeBuilder0.append(doubleArray0);
      assertEquals((-2145386899), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((char[]) null);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(1L);
      hashCodeBuilder2.append((char[]) null);
      assertEquals(0, hashCodeBuilder1.toHashCode());
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(Integer.MAX_VALUE, Integer.MAX_VALUE);
      hashCodeBuilder0.append(Integer.MAX_VALUE);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((short) (-424));
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-424);
      longArray0[1] = (long) (short) (-424);
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) (short) (-424);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(longArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)3;
      byteArray0[8] = (byte) (-85);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(byteArray0);
      hashCodeBuilder3.append(byteArray0);
      assertEquals(0, (int)hashCodeBuilder1.build());
      assertEquals(0, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = ')';
      charArray0[2] = 'v';
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(charArray0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append('v');
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '2';
      intArray0[1] = (int) '2';
      intArray0[2] = (-1);
      intArray0[3] = (int) '2';
      intArray0[4] = (int) ')';
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(intArray0);
      hashCodeBuilder3.append(true);
      assertEquals(0, (int)hashCodeBuilder2.build());
      assertEquals(0, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object[] objectArray0 = new Object[7];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(objectArray0);
      hashCodeBuilder1.append(true);
      assertEquals((-779599631), hashCodeBuilder0.toHashCode());
      assertEquals((-779599631), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)32;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(byteArray0);
      long[] longArray0 = new long[5];
      hashCodeBuilder1.append(longArray0);
      hashCodeBuilder0.append((Object) null);
      assertEquals((-1797192587), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((char[]) null);
      hashCodeBuilder1.append(1L);
      hashCodeBuilder1.append((short)0);
      assertEquals(0, hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((int) (byte)32);
      assertEquals(661, hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      hashCodeBuilder0.append(false);
      Object object0 = new Object();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(object0);
      hashCodeBuilder1.append(0.0F);
      assertEquals(0, hashCodeBuilder0.toHashCode());
      assertEquals(0, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      hashCodeBuilder0.append(false);
      Object object0 = new Object();
      hashCodeBuilder0.append(object0);
      hashCodeBuilder0.append(0.0);
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(5, 5);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((-450.548F));
      hashCodeBuilder1.append((byte[]) null);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append('m');
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder0.append((short[]) null);
      hashCodeBuilder3.append((byte)84);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder2.append(true);
      hashCodeBuilder4.append((-608.006));
      assertEquals(434286264, hashCodeBuilder0.toHashCode());
      assertEquals(434286264, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((double) (-1));
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((short)0);
      hashCodeBuilder2.append('X');
      assertEquals((-1074790311), hashCodeBuilder2.toHashCode());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      float[] floatArray0 = new float[8];
      floatArray0[1] = 3397.1404F;
      hashCodeBuilder0.append(floatArray0);
      hashCodeBuilder0.append((byte) (-66));
      assertEquals((-1979624762), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, (Collection<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(2, 2, (LinkedHashSet<LinkedHashSet>) null, false, (Class<? super LinkedHashSet<LinkedHashSet>>) class0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(64, 64, (Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(0, 0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(16, 16, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((Object) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-2399), (-2399));
      char[] charArray0 = new char[4];
      hashCodeBuilder0.append(charArray0);
      assertEquals((-318785247), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder(8, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-403), (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((-403));
      hashCodeBuilder1.append((Object[]) null);
      assertEquals(0, hashCodeBuilder0.toHashCode());
      assertEquals(0, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      hashCodeBuilder0.append('X');
      hashCodeBuilder0.append(1L);
      assertEquals((-88), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(Integer.MAX_VALUE, Integer.MAX_VALUE);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((byte) (-1));
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-1);
      hashCodeBuilder1.append(intArray0);
      assertEquals((-1), (int)hashCodeBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(Integer.MAX_VALUE, Integer.MAX_VALUE);
      int int0 = hashCodeBuilder0.toHashCode();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append(1L);
      assertEquals(630, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      short[] shortArray0 = new short[1];
      hashCodeBuilder0.append(shortArray0);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((Object[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1327), (-1327));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((long[]) null);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.appendSuper((-1327));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-111);
      hashCodeBuilder2.append((short) (byte) (-111));
      hashCodeBuilder2.append(byteArray0);
      hashCodeBuilder2.append((float) (-1327));
      assertEquals(1519290676, (int)hashCodeBuilder0.build());
      assertEquals(1519290676, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((int[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((float[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      double[] doubleArray0 = new double[1];
      hashCodeBuilder0.append(doubleArray0);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((double[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((char[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder(7, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd multiplier
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = HashCodeBuilder.reflectionHashCode((Object) charArray0[3], false);
      //  // Unstable assertion: assertEquals(634, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(18, 18, (Object) "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Object object0 = new Object();
      int int0 = HashCodeBuilder.reflectionHashCode(3173, 3173, object0);
      assertEquals(3173, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.hashCode();
      assertEquals(17, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      int int0 = HashCodeBuilder.reflectionHashCode((Object) linkedHashSet0, (Collection<String>) linkedHashSet0);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Integer integer0 = hashCodeBuilder0.build();
      assertEquals(17, (int)integer0);
  }
}
