/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 10:13:09 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Map;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, true, true, true}, booleanArray1));
      
      ArrayUtils.swap(booleanArray1, 10, (-1660), (-137));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short) (-963);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)2292;
      shortArray0[6] = (short)117;
      shortArray0[7] = (short) (-1385);
      shortArray0[8] = (short)2;
      ArrayUtils.swap(shortArray0, (int) (short)1, (int) (short) (-1385), (int) (short) (-963));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)4, (short) (-963), (short)1, (short)1, (short)0, (short)2292, (short)117, (short) (-1385), (short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3772.0;
      doubleArray0[1] = 1130.91428453;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1130.91428453, 0, (double) 0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {3772.0, 1130.91428453}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray0, (-1861.5F));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1861.5F)}, floatArray2, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1861.5F);
      doubleArray0[1] = (double) (-1861.5F);
      doubleArray0[2] = (double) (-1861.5F);
      doubleArray0[3] = (double) (-1861.5F);
      doubleArray0[4] = (double) (-1861.5F);
      doubleArray0[5] = (double) (-1861.5F);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-1861.5), (-1861.5), (-1861.5), (-1861.5), (-1861.5), (-1861.5)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, false, false, false}, booleanArray0));
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1328);
      assertNotNull(integer0);
      assertEquals(1328, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2525));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2525), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.remove(integerArray0, 0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      ArrayUtils.swap(booleanArray1, 0, 59, 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 59;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {59}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 12);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {12}, intArray1);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {12}, intArray1);
      assertArrayEquals(new int[] {12}, intArray2);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2323.161933);
      ArrayUtils.swap(doubleArray0, 1, 1, 1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2323.161933)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 2143648855, 2143648855, 1234);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1234;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1234;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1234.0, 0.0, 1234.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2498.70841508904), 0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1234.0, 0.0, 1234.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 2530.49F;
      floatArray1[1] = (float) 4;
      floatArray1[2] = (float) (-1);
      floatArray1[3] = (float) (-1);
      float[] floatArray2 = ArrayUtils.insert(4, floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(8, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2530.49F, 4.0F, (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), 2530.49F, 4.0F, (-1.0F), (-1.0F)}, floatArray2, 0.01F);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = (-1);
      intArray0[4] = 4;
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-1187);
      shortArray0[2] = (short) (-1022);
      shortArray0[3] = (short) (-1187);
      shortArray0[4] = (short)100;
      shortArray0[5] = (short)28784;
      shortArray0[6] = (short) (-1853);
      shortArray0[7] = (short) (-106);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)2, (short) (-1187), (short) (-1022), (short) (-1187), (short)100, (short)28784, (short) (-1853), (short) (-106)}, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = '5';
      charArray0[2] = '%';
      charArray0[3] = ')';
      charArray0[4] = 'V';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ',', 2482);
      assertNotNull(bitSet0);
      assertEquals(5, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'z', '5', '%', ')', 'V'}, charArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short)100;
      objectArray0[1] = (Object) bitSet0;
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) shortArray1, objectArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(2, objectArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)2, (short) (-1187), (short) (-1022), (short) (-1187), (short)100, (short)28784, (short) (-1853), (short) (-106)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      int int0 = 1;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      long[] longArray1 = ArrayUtils.insert(1, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertArrayEquals(new long[] {1L, 1L}, longArray1);
      
      Object[] objectArray0 = new Object[6];
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals(1, object0);
      
      objectArray0[0] = object0;
      int int1 = (-1848);
      Integer integer1 = new Integer((-1848));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)object0));
      assertNotNull(integer1);
      assertEquals((-1848), (int)integer1);
      
      Object object1 = ArrayUtils.get(objectArray0, (-1848), (Object) integer1);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)int1));
      assertFalse(object1.equals((Object)int0));
      assertFalse(object1.equals((Object)integer0));
      assertNotNull(object1);
      assertEquals(6, objectArray0.length);
      assertEquals((-1848), object1);
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) 1L;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1848);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 1847.83387588705;
      doubleArray0[5] = (double) (-1848);
      doubleArray0[6] = (double) 1;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1848), (-1848), 1.0);
      assertNotNull(bitSet0);
      assertEquals(7, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals("{0, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertArrayEquals(new double[] {(-1848.0), 1.5, 1.0, 1.0, 1847.83387588705, (-1848.0), 1.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)914;
      shortArray0[1] = (short)83;
      shortArray0[2] = (short)1282;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)914, (short)83, (short)1282}, shortArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)1282;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L), (int) (short)83);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new long[] {1282L}, longArray0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((short)914);
      assertNotNull(integer0);
      assertEquals(914, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(914, (int)integer1);
      
      integerArray0[0] = integer1;
      Integer integer2 = Integer.getInteger("", integer0);
      assertNotNull(integer2);
      assertEquals(914, (int)integer2);
      
      integerArray0[1] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(4, integerArray0.length);
      assertEquals(914, (int)integer3);
      
      integerArray0[2] = integer3;
      Integer integer4 = new Integer(1416);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(1416, (int)integer4);
      
      integerArray0[3] = integer4;
      Integer integer5 = ArrayUtils.get(integerArray0, (int) 914);
      assertNull(integer5);
      assertEquals(4, integerArray0.length);
      
      String string0 = ArrayUtils.toString((Object) null, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1;
      ArrayUtils.swap(shortArray0, (int) (short)1, Integer.MAX_VALUE, 85);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4459.104;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (-532.80513641173);
      doubleArray0[3] = (-1.0);
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {4459.104, 1.5, (-532.80513641173), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5, (-532.80513641173), (-1.0)}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)100);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (int) (short)100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-14.83691479083409));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-14.83691479083409)}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, 2144192485, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("d'T~x'nZ9!d':d");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(", '");
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(", '");
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean("org.apache.commons.lang3.ArrayUtils");
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("java.lang.Object");
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      assertTrue(boolean6);
      
      booleanArray0[6] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true}, booleanArray1));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2249.714F;
      floatArray0[1] = 2786.0F;
      floatArray0[2] = (-1989.0F);
      floatArray0[3] = (-5304.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-3749.4F);
      floatArray0[6] = (-473.14F);
      ArrayUtils.shift(floatArray0, 1, 1, (-2146783131));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {2249.714F, 2786.0F, (-1989.0F), (-5304.0F), 0.0F, (-3749.4F), (-473.14F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      charArray0[1] = 'R';
      int int0 = 2;
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2, 2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'O', 'R'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      short[] shortArray0 = new short[1];
      short short0 = (short)4593;
      shortArray0[0] = (short)4593;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift((short[]) null, 53, 53, 53);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 1109;
      ArrayUtils.swap(intArray0, 2, 1109, 2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2, 1109}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[7];
      int int0 = 3;
      Integer integer0 = new Integer(3);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(3, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(3, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(90);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(90, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.getInteger("W^8km+", (Integer) int0);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(3, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(3);
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(3, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1623);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      assertEquals(1623, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = ArrayUtils.get(integerArray0, 8);
      assertNull(integer7);
      assertEquals(7, integerArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)98;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, int0, int0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)1, (byte)98}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.insert(1, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) 1);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-20);
      shortArray0[1] = (short) (-1754);
      shortArray0[2] = (short) (-1725);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) (short) (-1754));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1754, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 491.6299954659);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = 7;
      intArray0[5] = 7;
      intArray0[6] = 16;
      intArray0[7] = 7;
      intArray0[8] = 7;
      int[] intArray1 = ArrayUtils.insert(7, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(18, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {7, 7, 7, 7, 7, 7, 16, 7, 7}, intArray0);
      
      Random.setNextRandom(1864);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      ArrayUtils.shift(booleanArray0, (-1989));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)118;
      shortArray0[1] = (short) (-1203);
      ArrayUtils.shift(shortArray0, (int) (short) (-1203), (int) (short) (-1203), 106);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)118, (short) (-1203)}, shortArray0);
      
      Short[] shortArray1 = new Short[9];
      shortArray1[0] = (Short) (short)118;
      shortArray1[1] = (Short) (short) (-1203);
      shortArray1[2] = (Short) (short) (-1203);
      shortArray1[3] = (Short) (short) (-1203);
      shortArray1[4] = (Short) (short) (-1203);
      shortArray1[5] = (Short) (short)118;
      shortArray1[6] = (Short) (short)118;
      Short short0 = new Short((short) (-2817));
      assertNotNull(short0);
      assertEquals((short) (-2817), (short)short0);
      
      shortArray1[7] = short0;
      shortArray1[8] = (Short) (short) (-1203);
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)439);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(9, shortArray2.length);
      assertEquals(9, shortArray1.length);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)118, (short) (-1203), (short) (-1203), (short) (-1203), (short) (-1203), (short)118, (short)118, (short) (-2817), (short) (-1203)}, shortArray2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-64);
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-64);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-64);
      byteArray1[4] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-64)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-64), (byte) (-1), (byte) (-1), (byte) (-64), (byte) (-1)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-165.0);
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 7;
      doubleArray0[4] = (double) 7;
      doubleArray0[5] = (double) 7;
      doubleArray0[6] = (double) 7;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 7, 7, 776.29750476);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, int0);
      assertArrayEquals(new double[] {(-165.0), 7.0, 7.0, 7.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object1.equals((Object)int0));
      assertNotNull(object1);
      assertEquals(0, object1);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom(7);
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 6;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 102;
      intArray0[6] = 12;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 102, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1210L);
      longArray0[1] = (-1462L);
      longArray0[2] = 6L;
      longArray0[3] = (-663L);
      longArray0[4] = 1069L;
      longArray0[5] = (-2087L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1069L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1210L), (-1462L), 6L, (-663L), 1069L, (-2087L)}, longArray0);
      assertArrayEquals(new long[] {1069L, (-1210L), (-1462L), 6L, (-663L), 1069L, (-2087L)}, longArray1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 8);
      Integer integer0 = new Integer((-314));
      assertNotNull(integer0);
      assertEquals((-314), (int)integer0);
      
      Integer integer1 = Integer.getInteger("_-P._]+KA^b+?Ru#&", integer0);
      assertNotNull(integer1);
      assertEquals((-314), (int)integer1);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer1, integer1);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Integer integer2 = new Integer((-1347));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1347), (int)integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer2));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      Integer integer3 = new Integer((-1640));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1640), (int)integer3);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer2));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer2));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      Integer integer4 = Integer.valueOf(1);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(1, (int)integer4);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer3));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry2);
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer2));
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      Integer integer5 = new Integer((-1063));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals((-1063), (int)integer5);
      
      Integer integer6 = new Integer(1);
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      assertEquals(1, (int)integer6);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer5, integer6);
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer6));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry6;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer5, integer3);
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer6));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer6));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry7);
      
      abstractMap_SimpleImmutableEntryArray0[7] = abstractMap_SimpleImmutableEntry7;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeAll(abstractMap_SimpleImmutableEntryArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(7, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(8, abstractMap_SimpleImmutableEntryArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = 6264L;
      ArrayUtils.shift(longArray0, (-782), 0, (-782));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 6264L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-4193), (int) (short) (-4193));
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Integer integer0 = new Integer((-5019));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-5019), (int)integer0);
      
      int int1 = 1;
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      int int2 = 7;
      Integer integer2 = new Integer(7);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(7, (int)integer2);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer2;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = integer2;
      integerArray0[6] = integer1;
      Integer[] integerArray1 = ArrayUtils.insert(7, integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(7, integerArray0.length);
      assertEquals(14, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = 3492L;
      longArray0[2] = (long) int1;
      longArray0[3] = (long) (int)integerArray0[2];
      longArray0[4] = (long) int2;
      longArray0[5] = (long) (-5019);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 3492L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), 3492L, 1L, (-5019L), 7L, (-5019L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), 1L, (-5019L), 7L, (-5019L)}, longArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'j', 76);
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'P'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2261;
      shortArray0[1] = (short)17;
      shortArray0[2] = (short)18;
      ArrayUtils.shift(shortArray0, 1, Integer.MAX_VALUE, (int) (short)18);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2261, (short)17, (short)18}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 187;
      intArray0[1] = 187;
      intArray0[2] = 187;
      intArray0[3] = 187;
      intArray0[4] = 187;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 187;
      intArray1[1] = 17;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(4, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {187, 187, 187, 187, 187}, intArray0);
      assertArrayEquals(new int[] {187, 17}, intArray1);
      assertArrayEquals(new int[] {187, 187, 187, 187}, intArray2);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-22);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)14, (byte)1, (byte)22, (byte) (-68), (byte) (-22)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)14, (byte)1, (byte)22, (byte) (-68), (byte) (-22)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte)0, 2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      
      int[] intArray2 = ArrayUtils.clone(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray2, 1799, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1799, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)65;
      shortArray0[1] = (short) (-2060);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-1781);
      shortArray0[4] = (short)405;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)65, (short) (-2060), (short)1, (short) (-1781), (short)405}, shortArray0);
      
      ArrayUtils.swap((Object[]) shortArray1, (int) (short) (-1781), (int) (short)1, (int) (short)65);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)65, (short) (-2060), (short)1, (short) (-1781), (short)405}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6339.074700020739;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {6339.074700020739, (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.insert((int) (short)0, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 1.0F;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
      
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('}');
      assertNotNull(character0);
      assertEquals('}', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('}', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('z');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('z', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf((char) character1);
      assertFalse(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('}', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('x');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      assertEquals('x', (char)character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(5, characterArray1.length);
      assertEquals(5, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[6] = (short) (byte)1;
      ArrayUtils.reverse(shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)0, (short)0, (short)1, (short)0, (short)0}, shortArray0);
      
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[9];
      longArray0[1] = (long) (short)0;
      longArray0[3] = (long) (short)1;
      longArray0[4] = (long) (short)0;
      longArray0[6] = (long) (short)0;
      longArray0[8] = (long) (short)0;
      Integer integer1 = new Integer((-1373));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1373), (int)integer1);
      
      Integer integer2 = new Integer((byte)1);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      
      boolean boolean0 = ArrayUtils.isSameType(integer1, integer2);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, longArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1925), (-36));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray0, (float) (-1925));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(1, floatArray2.length);
      assertEquals(0, floatArray0.length);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertArrayEquals(new float[] {(-1925.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)0, (short)0, (short)1, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1373), (int) (short)0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (-2146699607);
      longArray0[2] = (long) (-2146699607);
      longArray0[3] = (long) (-570);
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) (byte)0;
      ArrayUtils.swap(longArray0, (int) (byte)0, (-570), (int) (byte)0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, (-2146699607L), (-2146699607L), (-570L), 0L, 0L, 0L}, longArray0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-2146699607L);
      Object object0 = ArrayUtils.get(objectArray0, 3894, objectArray0[0]);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      assertEquals((-2146699607L), object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) (-2146699607L);
      objectArray0[4] = (Object) (-2146699607L);
      objectArray0[5] = (Object) (-2146699607L);
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, object1);
      assertEquals(6, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) ';';
      intArray0[1] = (int) ';';
      intArray0[2] = (int) ';';
      intArray0[3] = (-1408);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1408), 59);
      assertEquals(4, intArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new int[] {59, 59, 59, (-1408)}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1408);
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) (-1408);
      floatArray0[3] = (-472.2F);
      ArrayUtils.shift(floatArray0, 706);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1408.0F), (-472.2F), (-1408.0F), 3.0F}, floatArray0, 0.01F);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {59, 59, 59, (-1408)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new int[] {59, 59, 59, (-1408)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      char[] charArray2 = new char[9];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = '^';
      charArray2[1] = ';';
      charArray2[2] = ';';
      charArray2[3] = ';';
      charArray2[4] = ';';
      charArray2[5] = ';';
      charArray2[6] = ';';
      charArray2[7] = ';';
      charArray2[8] = ';';
      ArrayUtils.shuffle(charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(9, charArray2.length);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {';', ';', ';', ';', ';', ';', ';', ';', '^'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      Integer integer0 = new Integer((-460));
      assertNotNull(integer0);
      assertEquals((-460), (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      Integer integer1 = new Integer((-460));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-460), (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray2 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertFalse(abstractMap_SimpleImmutableEntryArray0.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray2);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray2.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = ',';
      charArray0[2] = '2';
      charArray0[3] = 't';
      charArray0[4] = 'L';
      ArrayUtils.swap(charArray0, (-145), (-145), (-18143));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'G', ',', '2', 't', 'L'}, charArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-39), (-145));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-18143);
      floatArray0[1] = (float) 'L';
      floatArray0[2] = (float) (-39);
      floatArray0[3] = (float) ',';
      floatArray0[4] = (float) 't';
      floatArray0[5] = 1454.6F;
      floatArray0[6] = (float) (-18143);
      floatArray0[7] = (float) 'L';
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-18143.0F), 76.0F, (-39.0F), 44.0F, 116.0F, 1454.6F, (-18143.0F), 76.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[5] = false;
      boolean[] booleanArray1 = new boolean[10];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      float[] floatArray0 = new float[10];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(10, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 677L;
      longArray0[1] = (-1211L);
      longArray0[2] = 677L;
      longArray0[3] = 677L;
      int int0 = ArrayUtils.indexOf(longArray0, 677L, (-4174));
      assertEquals(4, longArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {677L, (-1211L), 677L, 677L}, longArray0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1211L), 0);
      assertFalse(int1 == int0);
      assertEquals(4, longArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {677L, (-1211L), 677L, 677L}, longArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-4174);
      intArray0[2] = (int) '';
      intArray0[3] = (-4174);
      intArray0[4] = (int) '';
      intArray0[5] = (-1);
      intArray0[6] = 1164;
      intArray0[7] = (int) '';
      intArray0[8] = 0;
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean0);
      assertEquals(9, intArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new int[] {(-1), (-4174), 127, (-4174), 127, (-1), 1164, 127, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      Integer integer0 = new Integer(1501);
      assertNotNull(integer0);
      assertEquals(1501, (int)integer0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1106);
      shortArray0[1] = (short)55;
      shortArray0[2] = (short)871;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)127;
      shortArray0[5] = (short)114;
      shortArray0[6] = (short)303;
      shortArray0[7] = (short)418;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(8, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-1106), (short)55, (short)871, (short)2, (short)127, (short)114, (short)303, (short)418}, shortArray0);
      
      ArrayUtils.shift(floatArray0, (int) (short) (-1106), (int) (short)303, (int) (short)55);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = 1180.0F;
      floatArray2[1] = 1.0F;
      floatArray2[2] = 1309.8986F;
      floatArray2[3] = (-1527.0F);
      floatArray2[4] = Float.NaN;
      floatArray2[5] = 4916.0F;
      ArrayUtils.shift(floatArray2, 1, 1, (-3835));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(6, floatArray2.length);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {1180.0F, 1.0F, 1309.8986F, (-1527.0F), Float.NaN, 4916.0F}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      int[] intArray0 = new int[15];
      intArray0[2] = (int) '>';
      byte[] byteArray0 = new byte[1];
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) '>';
      longArray0[2] = (long) (byte)0;
      longArray0[4] = (long) 62;
      longArray0[5] = (long) (byte)0;
      ArrayUtils.shift(longArray0, 0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 62L, 0L, 0L, 62L, 0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (byte)0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 62L, 0L, 0L, 62L, 0L}, longArray0);
      assertArrayEquals(new long[] {62L, 62L}, longArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 62L;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-2725));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2725), (int)integer1);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, 0, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {62.0F, 0.0F, 0.0F, 0.0F, 62.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {62.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      float[] floatArray0 = new float[10];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(10, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 20.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 2028.7F;
      floatArray1[3] = (-1886.0F);
      floatArray1[4] = 79.0F;
      floatArray1[5] = (-1.0F);
      floatArray1[6] = (-1.0F);
      floatArray1[7] = 2329.491F;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(10, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {20.0F, 0.0F, 2028.7F, (-1886.0F), 79.0F, (-1.0F), (-1.0F), 2329.491F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)99;
      shortArray0[1] = (short) (-1801);
      shortArray0[2] = (short) (-1801);
      shortArray0[3] = (short) (byte)99;
      shortArray0[4] = (short) (-1801);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-32479), (int) (short) (-1801));
      assertEquals(5, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)99, (short) (-1801), (short) (-1801), (short)99, (short) (-1801)}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2522, 126);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2522;
      intArray0[1] = (-499);
      intArray0[2] = (int) (short) (-1801);
      intArray0[3] = (-499);
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(4, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {2522, (-499), (-1801), (-499), 2522, (-499), (-1801), (-499)}, intArray1);
      assertArrayEquals(new int[] {2522, (-499), (-1801), (-499)}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, 128);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(bitSet0);
      assertEquals(8, intArray1.length);
      assertEquals(4, intArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {2522, (-499), (-1801), (-499), 2522, (-499), (-1801), (-499)}, intArray1);
      assertArrayEquals(new int[] {2522, (-499), (-1801), (-499)}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(8, intArray1.length);
      assertEquals(4, intArray0.length);
      assertFalse(boolean1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {2522, (-499), (-1801), (-499), 2522, (-499), (-1801), (-499)}, intArray1);
      assertArrayEquals(new int[] {2522, (-499), (-1801), (-499)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[5] = false;
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), (-1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 114;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      ArrayUtils.swap(intArray0, (-1), (-1), (-1));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 114, (-1), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      short[] shortArray0 = new short[8];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertNotNull(bitSet0);
      assertEquals(8, shortArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.cardinality());
      assertEquals(8, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 3554);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      
      Long[] longArray2 = new Long[7];
      Long long0 = new Long((-6043L));
      assertNotNull(long0);
      assertEquals((-6043L), (long)long0);
      
      longArray2[0] = long0;
      Long long1 = new Long(3554);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(3554L, (long)long1);
      
      longArray2[1] = long1;
      Long long2 = new Long((long) longArray2[1]);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(7, longArray2.length);
      assertEquals(3554L, (long)long2);
      
      longArray2[2] = long2;
      Long long3 = new Long(0);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      longArray2[3] = long3;
      Long long4 = new Long((long) longArray2[1]);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long2));
      assertNotNull(long4);
      assertEquals(7, longArray2.length);
      assertEquals(3554L, (long)long4);
      
      longArray2[4] = long4;
      Long long5 = new Long((-6043L));
      assertFalse(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertNotNull(long5);
      assertEquals((-6043L), (long)long5);
      
      longArray2[5] = long5;
      Long long6 = new Long((long) longArray2[3]);
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long5));
      assertTrue(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long1));
      assertNotNull(long6);
      assertEquals(7, longArray2.length);
      assertEquals(0L, (long)long6);
      
      longArray2[6] = long6;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2, (long) longArray2[5]);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertEquals(7, longArray3.length);
      assertEquals(7, longArray2.length);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertArrayEquals(new long[] {(-6043L), 3554L, 3554L, 0L, 3554L, (-6043L), 0L}, longArray3);
      
      ArrayUtils.shift(shortArray0, 0, 3554, 3554);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      ArrayUtils.swap(booleanArray1, 0, 1, 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      ArrayUtils.shift(booleanArray0, 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.insert((-2071), (int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((short)98);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(97L);
      assertNotNull(intStream0);
      
      IntStream intStream1 = mockRandom0.ints();
      assertFalse(intStream1.equals((Object)intStream0));
      assertNotNull(intStream1);
      assertNotSame(intStream1, intStream0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short) (-713);
      shortArray0[2] = (short)98;
      shortArray0[3] = (short) (-2366);
      shortArray0[4] = (short) (-2366);
      ArrayUtils.shift(shortArray0, (int) (short) (-713), 18, (int) (short)98);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)98, (short) (-2366), (short) (-2366), (short)98, (short) (-713)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-713);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-2366);
      intArray0[1] = (int) (short) (-2366);
      intArray0[2] = 18;
      intArray0[3] = 18;
      intArray0[4] = (int) (short) (-2366);
      intArray0[5] = (int) (short) (-713);
      intArray0[6] = (int) (short)98;
      intArray0[7] = (int) (short) (-2366);
      intArray0[8] = (int) (short)98;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      long[] longArray2 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      Double double0 = new Double((-3558.0));
      assertNotNull(double0);
      assertEquals((-3558.0), (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.shift((double[]) null, (-1276), 1461, 1461);
      ArrayUtils.reverse((Object[]) null, 1461, (-7));
      Integer[] integerArray0 = new Integer[9];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      Integer integer3 = new Integer((-2349));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-2349), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(9, integerArray0.length);
      assertEquals((-2349), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals(Integer.MAX_VALUE, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertNotNull(integer6);
      assertEquals(Integer.MAX_VALUE, (int)integer6);
      
      Integer integer7 = new Integer((-2349));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer3));
      assertNotNull(integer7);
      assertEquals((-2349), (int)integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(1);
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer7));
      assertNotNull(integer8);
      assertEquals(1, (int)integer8);
      
      integerArray0[8] = integer8;
      Integer integer9 = ArrayUtils.get(integerArray0, (-2349));
      assertNull(integer9);
      assertEquals(9, integerArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences((double[]) null, 406.975);
      assertNull(doubleArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2207;
      shortArray0[1] = (short)90;
      shortArray0[2] = (short) (-545);
      shortArray0[3] = (short) (-660);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-790), (int) integerArray0[4]);
      assertNotNull(bitSet0);
      assertEquals(9, integerArray0.length);
      assertEquals(4, shortArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new short[] {(short)2207, (short)90, (short) (-545), (short) (-660)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      MockRandom mockRandom0 = new MockRandom((-4929L));
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(1, int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2820);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      Random.setNextRandom(2820);
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 2820;
      longArray0[1] = (long) 2820;
      longArray0[2] = (long) 2820;
      longArray0[3] = (long) 2820;
      longArray0[4] = (long) 2820;
      longArray0[5] = (long) 2820;
      longArray0[6] = (long) 2820;
      longArray0[7] = (long) 2820;
      longArray0[8] = (long) 2820;
      boolean boolean2 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(9, longArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new long[] {2820L, 2820L, 2820L, 2820L, 2820L, 2820L, 2820L, 2820L, 2820L}, longArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2820L;
      floatArray0[1] = (float) 2820L;
      floatArray0[2] = (float) 2820L;
      floatArray0[3] = (float) 2820L;
      floatArray0[4] = (float) 2820L;
      floatArray0[5] = (float) 2820L;
      floatArray0[6] = (float) 2820L;
      floatArray0[7] = (float) 2820L;
      floatArray0[8] = (float) 2820L;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 2820L, (-2144424553));
      assertEquals(9, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {2820.0F, 2820.0F, 2820.0F, 2820.0F, 2820.0F, 2820.0F, 2820.0F, 2820.0F, 2820.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 't');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'t'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      long[] longArray0 = new long[6];
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(6, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, (-2193));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean[] booleanArray2 = new boolean[5];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      boolean[] booleanArray3 = ArrayUtils.removeElements(booleanArray2, booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotNull(booleanArray3);
      assertEquals(5, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short)114;
      shortArray0[2] = (short)46;
      shortArray0[3] = (short)1392;
      shortArray0[4] = (short)14;
      shortArray0[5] = (short)5;
      shortArray0[6] = (short)797;
      shortArray0[7] = (short)14386;
      shortArray0[8] = (short) (-2230);
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (short)4);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)4, (short)114, (short)46, (short)1392, (short)5, (short)797, (short)14386, (short) (-2230)}, shortArray1);
      assertArrayEquals(new short[] {(short)4, (short)114, (short)46, (short)1392, (short)14, (short)5, (short)797, (short)14386, (short) (-2230)}, shortArray0);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = Character.valueOf('w');
      assertNotNull(character0);
      assertEquals('w', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('j');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('j', (char)character1);
      
      characterArray0[1] = character1;
      char char0 = 'x';
      Character character2 = Character.valueOf('x');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('x', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(char0);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('x', (char)character3);
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'V');
      assertNotNull(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'w', 'j', 'x', 'x'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-1936));
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      short[] shortArray0 = new short[12];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertNotNull(bitSet0);
      assertEquals(12, shortArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(12, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}", bitSet0.toString());
      assertEquals(12, bitSet0.cardinality());
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 3554);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte)4;
      ArrayUtils.swap(byteArray0, (int) (byte) (-93), (int) (byte)1, 549);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-11), (byte)1, (byte) (-93), (byte)8, (byte)1, (byte) (-35), (byte)4, (byte)0}, byteArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      float[] floatArray0 = ArrayUtils.insert(2, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1, (-783));
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, (float) 2);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byte byte0 = (byte) (-16);
      byteArray0[4] = (byte) (-16);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, 115);
      assertFalse(int1 == int0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)2, (byte)64, (byte)0, (byte) (-1), (byte) (-16)}, byteArray0);
      
      Object[] objectArray0 = new Object[2];
      Integer integer0 = new Integer((-783));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-783), (int)integer0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-16);
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      Long long0 = new Long(69L);
      assertNotNull(long0);
      assertEquals(69L, (long)long0);
      
      Long long1 = new Long(2719L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2719L, (long)long1);
      
      Long[] longArray0 = new Long[1];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 69L;
      doubleArray0[1] = (double) 2719L;
      doubleArray0[2] = (double) 69L;
      ArrayUtils.swap(doubleArray0, Integer.MAX_VALUE, (-2146875984), (-2146875984));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {69.0, 2719.0, 69.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)13;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-11), (byte) (-1), (byte)108, (byte) (-42), (byte)0, (byte)13}, byteArray0);
      
      ArrayUtils.swap((Object[]) longArray0, 1, (int) (byte)13, (int) (byte) (-42));
      assertEquals(1, longArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {69.0, 2719.0, 69.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      short short0 = (short)1;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Short[] shortArray2 = new Short[3];
      shortArray2[0] = (Short) (short)1;
      shortArray2[1] = (Short) (short)1;
      shortArray2[2] = (Short) (short)1;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertNotNull(shortArray3);
      assertEquals(3, shortArray2.length);
      assertEquals(3, shortArray3.length);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray3);
      
      ArrayUtils.shift(shortArray0, (int) short0, 10, (int) (short)1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray3));
      assertEquals(2, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray3);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)1;
      longArray0[2] = (long) short0;
      ArrayUtils.shift(longArray0, (int) short0, (int) short0, 97);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, 1L}, longArray0);
      
      float[] floatArray0 = new float[3];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 97;
      intArray0[1] = (int) short0;
      intArray0[2] = (int) short0;
      intArray0[3] = (int) short0;
      intArray0[4] = 5;
      intArray0[5] = (int) (short)1;
      intArray0[6] = (int) (short)1;
      intArray0[7] = (int) short0;
      Integer[] integerArray1 = ArrayUtils.toObject(intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray1.length);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {97, 1, 1, 1, 5, 1, 1, 1}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      byte byte0 = (byte) (-70);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-70);
      intArray0[1] = (int) (byte) (-70);
      intArray0[2] = (int) (byte) (-70);
      intArray0[3] = (int) (byte) (-70);
      intArray0[4] = (int) (byte) (-70);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -70, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((short) (-1321));
      assertNotNull(short0);
      assertEquals((short) (-1321), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-313));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-313), (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)11);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)11, (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)55);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short)55, (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)667);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      assertEquals((short)667, (short)short4);
      
      shortArray0[4] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1321), (short) (-313), (short)11, (short)55, (short)667}, shortArray1);
      
      ArrayUtils.shift(shortArray1, (-1482), 2922, (-2866));
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-313), (short)11, (short)55, (short)667, (short) (-1321)}, shortArray1);
      
      ArrayUtils.shift(longArray0, 11, 50, 5);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1));
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-90);
      shortArray0[5] = (short)108;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 6);
      assertEquals(6, shortArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)8, (short)2, (short) (-90), (short)108}, shortArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1783.9F;
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short) (-90);
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short) (-90);
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 120, (-90.0F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      
      ArrayUtils.swap(booleanArray1, 0, 70, 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 70;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 70L}, longArray0);
      assertArrayEquals(new long[] {70L}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 70);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(2, longArray0.length);
      assertEquals(0, int0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 70L}, longArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      Short short0 = new Short((short) (-2366));
      assertNotNull(short0);
      assertEquals((short) (-2366), (short)short0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-79);
      ArrayUtils.shift(byteArray0, (int) (byte)4, (int) (byte) (-79), (int) (byte) (-79));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)4, (byte) (-65), (byte) (-96), (byte) (-1), (byte)7, (byte) (-79)}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = 'O';
      charArray0[2] = 'i';
      charArray0[3] = 'S';
      int int0 = ArrayUtils.indexOf(charArray0, '<', (-90));
      assertEquals(4, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'<', 'O', 'i', 'S'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)0;
      int int0 = new Byte((byte)0);
      assertEquals((byte)0, int0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte) (-90));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(13, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Integer integer0 = Integer.getInteger("XAw` tB&@?0EU9[", 2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurrences((Integer[]) null, integer0);
      assertNull(integerArray0);
      
      Random.setNextRandom((byte) (-90));
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (byte)2);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (byte)2;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.0, Double.NaN, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, Double.NaN, 2.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 0.0, 0.0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1630;
      longArray0[1] = (long) 89;
      longArray0[2] = (long) 1630;
      ArrayUtils.shift(longArray0, (-782), 1630, 1630);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1630L, 1630L, 89L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 2921.7581, 3);
      assertTrue(int1 == int0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) (int)integer0;
      floatArray0[3] = (float) (-1);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 54.3F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-1);
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte)1, (-743));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new byte[] {(byte)123, (byte)3, (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)1136);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 1.5);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, 1.5);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-2941));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 11, (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int int2 = ArrayUtils.lastIndexOf((double[]) null, (double) (short) (-2941), 3, (double) (short)1136);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int1));
      assertTrue(object0.equals((Object)int2));
      assertTrue(object0.equals((Object)int0));
      assertTrue(object0.equals((Object)int1));
      assertNotNull(object0);
      assertEquals((-1), object0);
      
      ArrayUtils.shift((double[]) null, (int) (short)1136, 17, 58);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 11;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 11;
      longArray0[4] = 1564L;
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 2987L;
      longArray1[1] = (long) (short) (-2941);
      longArray1[2] = (long) 3;
      longArray1[3] = (long) 11;
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray2.length);
      assertEquals(5, longArray0.length);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {2987L, (-2941L), 3L, 11L}, longArray1);
      assertArrayEquals(new long[] {(-1L), 11L, 1564L}, longArray2);
      assertArrayEquals(new long[] {11L, 3L, (-1L), 11L, 1564L}, longArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 2987L;
      objectArray0[1] = (Object) 11L;
      objectArray0[2] = (Object) (-1L);
      objectArray0[3] = object0;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-2941);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 956L;
      longArray0[1] = 2266L;
      longArray0[2] = (-1406L);
      longArray0[3] = (-1350L);
      longArray0[4] = (-1L);
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1L);
      longArray1[1] = (-1L);
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(5, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {956L, 2266L, (-1406L), (-1350L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {956L, 2266L, (-1406L), (-1350L)}, longArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.shift((long[]) null, (-1664), 117, 117);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (-1664);
      floatArray0[2] = (float) (-1664);
      floatArray0[3] = (float) (byte)9;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 9.0F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-1664.0F), (-1664.0F), 9.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 9.0F, (double) 117);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1664);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1664)}, intArray0);
      assertArrayEquals(new int[] {(-1664), (-1664)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      Short short0 = new Short((short) (-2366));
      assertNotNull(short0);
      assertEquals((short) (-2366), (short)short0);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) (-1021);
      ArrayUtils.swap(floatArray0, 2, 2);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, (-1021.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-439.7819543925);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-109.0), (-145), (-1.0));
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-439.7819543925)}, doubleArray0, 0.01);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 2379.434F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      ArrayUtils.shift(doubleArray0, 1255, (-145), (-842));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-439.7819543925)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      int[] intArray0 = new int[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1623L), 330);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, 330);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 330;
      doubleArray0[1] = (-3015.6046870668);
      doubleArray0[2] = 2983.9;
      doubleArray0[3] = (double) (-1623L);
      doubleArray0[4] = (double) 330;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1729.9563, 2983.9);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {330.0, (-3015.6046870668), 2983.9, (-1623.0), 330.0}, doubleArray0, 0.01);
      
      Long[] longArray1 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 330;
      floatArray0[1] = (float) (-1623L);
      floatArray0[2] = (float) (-1623L);
      floatArray0[3] = (float) 330;
      floatArray0[4] = (float) 330;
      floatArray0[5] = (float) 330;
      floatArray0[6] = (float) (-1623L);
      floatArray0[7] = (float) 330;
      int int0 = ArrayUtils.indexOf(floatArray0, 330.0F, 330);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {330.0F, (-1623.0F), (-1623.0F), 330.0F, 330.0F, 330.0F, (-1623.0F), 330.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-1623L);
      floatArray1[1] = (float) 330;
      floatArray1[2] = (float) (-1623L);
      floatArray1[3] = 2266.19F;
      float float0 = (-428.12158F);
      floatArray1[4] = (-428.12158F);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-750), floatArray0, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -750, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2306.0938F;
      floatArray0[1] = 1270.9976F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2306.0938F, 1270.9976F}, floatArray0, 0.01F);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '');
      assertNull(charArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 677L;
      longArray0[1] = 677L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 677L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {677L, 677L}, longArray0);
      assertArrayEquals(new long[] {677L}, longArray1);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      char[] charArray1 = ArrayUtils.insert(7, (char[]) null, (char[]) null);
      assertNull(charArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '';
      doubleArray0[1] = (double) 2306.0938F;
      doubleArray0[2] = (double) 677L;
      doubleArray0[3] = (double) 1270.9976F;
      doubleArray0[4] = 2363.61923211824;
      doubleArray0[5] = (double) 677L;
      doubleArray0[6] = (double) 677L;
      doubleArray0[7] = (double) 1270.9976F;
      doubleArray0[8] = (double) 2306.0938F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-121.4), 127.0);
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {127.0, 2306.09375, 677.0, 1270.99755859375, 2363.61923211824, 677.0, 677.0, 1270.99755859375, 2306.09375}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      short[] shortArray0 = new short[18];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)280);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(18, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = ArrayUtils.insert((int) (short)280, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(18, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertTrue(boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      ArrayUtils.swap(booleanArray1, 0, 59, 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 59;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 59L}, longArray0);
      assertArrayEquals(new long[] {59L}, longArray1);
      
      ArrayUtils.shift(longArray1, 2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 59L}, longArray0);
      assertArrayEquals(new long[] {59L}, longArray1);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-1L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (-1L));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) 925L);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int2 = ArrayUtils.lastIndexOf((double[]) null, (double) (-1), (int) (byte) (-1), (-3410.393785668431));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertTrue(boolean0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      ArrayUtils.shift(shortArray0, (-1), 2, 2);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      ArrayUtils.swap(byteArray0, (int) (byte) (-1), 2, 1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)91;
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-85), (byte) (-75), (byte) (-70), (byte)69, (byte)91}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-85), (byte) (-75), (byte) (-70), (byte)69, (byte)91}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)11492;
      shortArray0[1] = (short)115;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2251);
      shortArray0[4] = (short)30;
      shortArray0[5] = (short)2117;
      ArrayUtils.shift(shortArray0, (int) (short)30, (int) (short)115, (int) (short)11492);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)11492, (short)115, (short)0, (short) (-2251), (short)30, (short)2117}, shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)115;
      intArray0[1] = (int) (short)2117;
      intArray0[2] = (-1665);
      intArray0[3] = (int) (short)115;
      intArray0[4] = (int) (short)2117;
      intArray0[5] = (int) (short)115;
      boolean boolean0 = ArrayUtils.contains(intArray0, 115);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {115, 2117, (-1665), 115, 2117, 115}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = '5';
      charArray0[2] = 't';
      charArray0[3] = '!';
      charArray0[4] = '`';
      ArrayUtils.shift(charArray0, 115, 215, 115);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'|', '5', 't', '!', '`'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)57;
      floatArray0[1] = (float) (byte)57;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {57.0F, 57.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSorted((char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'h');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift(booleanArray0, (-1989));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.insert((-1989), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      ArrayUtils.swap((float[]) null, (int) (byte)0, 2146689078, 2146689078);
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray1));
      
      double[] doubleArray0 = ArrayUtils.insert((-27), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      Double double0 = new Double((-3558.0));
      assertNotNull(double0);
      assertEquals((-3558.0), (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.shift((double[]) null, (-1276), 1461, 1461);
      ArrayUtils.reverse((Object[]) null, 1461, (-7));
      Integer[] integerArray0 = new Integer[9];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2349));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-2349), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(9, integerArray0.length);
      assertEquals((-2349), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(Integer.MAX_VALUE, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertNotNull(integer6);
      assertEquals(Integer.MAX_VALUE, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-2349));
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)int0));
      assertTrue(integer7.equals((Object)integer4));
      assertNotNull(integer7);
      assertEquals((-2349), (int)integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(1);
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer0));
      assertNotNull(integer8);
      assertEquals(1, (int)integer8);
      
      integerArray0[8] = integer8;
      Integer integer9 = ArrayUtils.get(integerArray0, (-2349));
      assertNull(integer9);
      assertEquals(9, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      Integer integer1 = new Integer((short)1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) integerArray0, (Object) integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, integerArray0.length);
      assertFalse(boolean1);
      
      Integer integer2 = new Integer(2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1175));
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1175)}, intArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.lastIndexOf(charArray0, '%', 0);
      assertFalse(int1 == int0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = ' ';
      charArray0[2] = '*';
      charArray0[3] = '=';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'A', ' ', '*', '='}, charArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1));
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = ArrayUtils.contains(charArray0, '4');
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '4';
      charArray1[1] = '4';
      charArray1[2] = '4';
      charArray1[3] = ';';
      charArray1[4] = '4';
      charArray1[5] = '4';
      charArray1[6] = '4';
      charArray1[7] = '4';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertEquals(3, charArray0.length);
      assertEquals(8, charArray1.length);
      assertEquals(3, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'4', '4', '4', ';', '4', '4', '4', '4'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertArrayEquals(new char[] {'7', '7'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray1));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 50.5181623278414;
      doubleArray0[1] = 50.5181623278414;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {50.5181623278414, 50.5181623278414}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {50.5181623278414, 50.5181623278414}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.insert((int) (short)2, doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {50.5181623278414, 50.5181623278414}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {50.5181623278414, 50.5181623278414}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {50.5181623278414, 50.5181623278414, 50.5181623278414, 50.5181623278414}, doubleArray2, 0.01);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      short short0 = (short)1;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Short[] shortArray2 = new Short[3];
      shortArray2[0] = (Short) (short)1;
      shortArray2[1] = (Short) (short)1;
      shortArray2[2] = (Short) (short)1;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertNotNull(shortArray3);
      assertEquals(3, shortArray2.length);
      assertEquals(3, shortArray3.length);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray3);
      
      ArrayUtils.shift(shortArray0, (-2866), 10, (int) (short)1);
      assertFalse(shortArray0.equals((Object)shortArray3));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(2, shortArray0.length);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)1;
      longArray0[2] = (long) short0;
      ArrayUtils.shift(longArray0, (-2866), (int) short0, 97);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, 1L}, longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 97;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {1.0F, 1.0F, 97.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-116), 50, 2457);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      longArray0[1] = (-2083L);
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[4] = (-1L);
      longArray0[5] = (-1L);
      ArrayUtils.shift(longArray0, 2, 2, 2);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-2083L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer('y');
      assertNotNull(integer0);
      assertEquals(121, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      assertEquals(121, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(968);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(968, (int)integer2);
      
      integerArray0[2] = integer2;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)116;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)117);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)13, (byte)13, (byte)116}, byteArray0);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((long) integerArray0[0]);
      assertNotNull(long0);
      assertEquals(3, integerArray0.length);
      assertEquals(121L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((byte)13);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(13L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = Long.getLong("[5+/", (long) (byte)13);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(13L, (long)long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte)117);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {121L, 13L, 13L}, longArray1);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'y';
      charArray1[1] = 'y';
      charArray1[2] = '-';
      charArray1[3] = 'y';
      charArray1[4] = 'y';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(boolean0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'y', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'y', 'y', '-', 'y', 'y'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 36.79093198023513;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '^';
      int int0 = ArrayUtils.indexOf(longArray0, 1846L, 115);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {94L}, longArray0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, 1846L, 1);
      assertTrue(int1 == int0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {94L}, longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = '^';
      charArray0[2] = '^';
      charArray0[3] = '^';
      charArray0[4] = 'f';
      charArray0[5] = '^';
      charArray0[6] = '^';
      charArray0[7] = '^';
      charArray0[8] = '^';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {',', '^', '^', '^', 'f', '^', '^', '^', '^'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Double double0 = new Double(2201);
      assertNotNull(double0);
      assertEquals(2201.0, (double)double0, 0.01);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) double0;
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) double0;
      objectArray0[3] = (Object) double0;
      objectArray0[4] = (Object) double0;
      objectArray0[5] = (Object) double0;
      objectArray0[6] = (Object) double0;
      objectArray0[6] = (Object) double0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2201;
      intArray0[1] = 2201;
      intArray0[2] = 2201;
      intArray0[3] = (-2301);
      intArray0[4] = 2201;
      intArray0[5] = 2201;
      intArray0[6] = 2201;
      ArrayUtils.shift(intArray0, (-2107), 878, 372);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {2201, 2201, 2201, 2201, (-2301), 2201, 2201}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = ArrayUtils.get((Integer[]) null, 10);
      assertNull(integer0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)8);
      assertNotNull(byte0);
      assertEquals((byte)8, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-30));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-30), (byte)byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[2] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)50);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-30), (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1;
      ArrayUtils.shift(shortArray0, 3605);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      
      Double double0 = new Double(115.0);
      assertNotNull(double0);
      assertEquals(115.0, (double)double0, 0.01);
      
      Double double1 = new Double((-535.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-535.0), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      Double double2 = new Double((-251.832697166));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-251.832697166), (double)double2, 0.01);
      
      doubleArray0[3] = double2;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-535.0), 115.0, (-535.0), (-251.832697166), 115.0, 115.0, (-535.0)}, doubleArray1, 0.01);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((short)1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(7, integerArray0.length);
      assertEquals(1, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(5);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(5, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals((-1), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1460));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      assertEquals((-1460), (int)integer6);
      
      integerArray0[6] = integer6;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(7, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)84}, byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)84}, byteArray0);
      
      MockRandom mockRandom0 = new MockRandom((byte)84);
      assertNotNull(mockRandom0);
      
      Integer integer0 = new Integer(49);
      assertNotNull(integer0);
      assertEquals(49, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.insert(0, (Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 49;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-965.15045F);
      ArrayUtils.shift(floatArray0, (-1292), 0, 0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {49.0F, 0.0F, (-965.15045F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 49;
      intArray0[1] = 49;
      intArray0[2] = 0;
      intArray0[3] = (int) (byte)84;
      intArray0[4] = 0;
      intArray0[5] = (int) (byte)84;
      int[] intArray1 = ArrayUtils.add(intArray0, 49);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {49, 49, 0, 84, 0, 84, 49}, intArray1);
      assertArrayEquals(new int[] {49, 49, 0, 84, 0, 84}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0, 7);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (short)0, (short)239);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)239, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray1));
      
      Integer integer0 = new Integer(102);
      assertNotNull(integer0);
      assertEquals(102, (int)integer0);
      
      Integer integer1 = new Integer(102);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(102, (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(object0.equals((Object)integer1));
      assertNotNull(object0);
      assertEquals(102, object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, object0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(object0.equals((Object)integer1));
      assertFalse(boolean0);
      
      Integer integer2 = Integer.valueOf((int) (short)1);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-1));
      assertNull(intArray0);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      
      Integer integer3 = new Integer(512);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)object0));
      assertNotNull(integer3);
      assertEquals(512, (int)integer3);
      
      boolean[] booleanArray3 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray3.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray3));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray2, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-382));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      ArrayUtils.swap(booleanArray1, 0, 59, 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)64;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, (-77));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-47), (byte) (-47), (byte) (-47), (byte)64}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) int0;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1630;
      longArray0[1] = (long) 1630;
      longArray0[2] = (long) 1630;
      longArray0[3] = 1005L;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) int0;
      longArray0[7] = (long) 1630;
      ArrayUtils.shift(longArray0, (-782), 1630, int0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {1630L, 1630L, 1005L, (-1L), (-1L), (-1L), 1630L, 1630L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[11];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 934);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'R';
      charArray0[2] = 'E';
      charArray0[3] = 'v';
      charArray0[4] = '.';
      charArray0[5] = '}';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'c', 'R', 'E', 'v', '.', '}'}, charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer[] integerArray2 = ArrayUtils.removeElement(integerArray1, object0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray2.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift(floatArray0, 1021, 1021, Integer.MAX_VALUE);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '}';
      charArray1[1] = 'c';
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertEquals(2, charArray1.length);
      assertEquals(2, charArray2.length);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray1, charArray2);
      assertSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'}', 'c'}, charArray1);
      assertArrayEquals(new char[] {'}', 'c'}, charArray2);
      
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray2, (-367));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray2.length);
      assertEquals(0, intArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertSame(intArray0, intArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(13, byteArray0.length);
      assertEquals(0, int0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) byteArray1[0]);
      assertNull(shortArray0);
      assertEquals(2, byteArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = Integer.getInteger("lEac{LeYMd6n].*IX", (int) byteArray1[0]);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, byteArray1.length);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = ArrayUtils.get(integerArray0, 2);
      assertNull(integer1);
      assertEquals(1, integerArray0.length);
      
      int int1 = ArrayUtils.getLength((Object) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-439.7819543925));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 2.0);
      assertNull(doubleArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, object0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      int int1 = bitSet0.previousClearBit(int0);
      assertTrue(int1 == int0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals((-1), int1);
      
      int int2 = bitSet0.previousClearBit((-1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals((-1), int2);
      
      Integer integer1 = new Integer(int0);
      assertTrue(int0 == int2);
      assertTrue(int0 == int1);
      assertTrue(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int2));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Short[] shortArray2 = new Short[3];
      shortArray2[0] = (Short) (short)1;
      shortArray2[1] = (Short) (short)1;
      shortArray2[2] = (Short) (short)1;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertEquals(3, shortArray2.length);
      assertEquals(3, shortArray3.length);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray3);
      
      ArrayUtils.shift(shortArray0, (-2866), 10, (int) (short)1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray3));
      assertEquals(2, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray3);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray4 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short)917);
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray0));
      assertFalse(shortArray4.equals((Object)shortArray3));
      assertNotNull(shortArray4);
      assertEquals(1, shortArray4.length);
      assertNotSame(shortArray4, shortArray1);
      assertNotSame(shortArray4, shortArray0);
      assertNotSame(shortArray4, shortArray3);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new short[] {(short)917}, shortArray4);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (boolean[]) null);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      Integer integer0 = new Integer(1567);
      assertNotNull(integer0);
      assertEquals(1567, (int)integer0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertFalse(int1 == int0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)115);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)2}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.insert((int) (byte)2, byteArray0, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)2, (byte) (-23), (byte)2}, byteArray2);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-23);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) (byte) (-23);
      doubleArray0[4] = (double) (byte)115;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (double) (byte) (-23);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), (int) (byte)2);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {(-23.0), (-1.0), (-1.0), (-23.0), 115.0, (-1.0), (-23.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte)2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      Character character0 = Character.valueOf('8');
      assertNotNull(character0);
      assertEquals('8', (char)character0);
      
      Character character1 = new Character('2');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('2', (char)character1);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      ArrayUtils.shift((long[]) null, (-1474), 0, (-1400));
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) (-1474));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1474L)}, longArray0);
      
      Object[] objectArray1 = new Object[6];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) character1;
      objectArray1[1] = (Object) map0;
      objectArray1[2] = (Object) character0;
      objectArray1[3] = (Object) character1;
      objectArray1[4] = (Object) character0;
      objectArray1[5] = (Object) map0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(stringArray0);
      assertEquals(6, objectArray1.length);
      assertEquals(6, stringArray0.length);
      assertNotSame(objectArray1, objectArray0);
      
      short[] shortArray0 = ArrayUtils.insert(699, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.addFirst((short[]) null, (short) (-296));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-296)}, shortArray1);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) null, "");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 5176L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 5176L);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {5176L}, longArray0);
      
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      longArray1[1] = 5176L;
      longArray1[2] = 5176L;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = 5176L;
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray2.length);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 5176L, 5176L, 0L, 0L, 0L, 5176L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-742);
      intArray0[1] = (-742);
      intArray0[2] = (-742);
      intArray0[3] = 2;
      intArray0[4] = (-742);
      intArray0[5] = (-742);
      intArray0[7] = (-1021);
      intArray0[8] = (-742);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-742), (-742), (-742), 2, (-742), (-742), 0, (-1021), (-742)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'i');
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'i'}, charArray0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(characterArray0);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)547);
      assertNull(shortArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray3 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertNotNull(charArray3);
      assertEquals(0, charArray3.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray3, charArray1);
      assertSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertArrayEquals(new char[] {}, charArray3);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      float[] floatArray0 = new float[12];
      floatArray0[0] = (-720.0F);
      floatArray0[1] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 6);
      assertEquals(12, floatArray0.length);
      assertEquals(1, int0);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[4] = (-720.0F);
      floatArray1[4] = (float) 6;
      floatArray1[5] = (float) 1;
      floatArray1[6] = (float) 6;
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      int[] intArray0 = new int[9];
      intArray0[0] = 6;
      intArray0[1] = (int) 'm';
      intArray0[2] = (int) 'm';
      intArray0[3] = (-1926);
      intArray0[4] = (int) 'm';
      intArray0[5] = 1;
      intArray0[6] = (int) 'm';
      intArray0[7] = 1;
      intArray0[8] = 6;
      ArrayUtils.shift(intArray0, 6, 6, (-207));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {6, 109, 109, (-1926), 109, 1, 109, 1, 6}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 1136);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      float[] floatArray0 = new float[12];
      floatArray0[0] = (-720.0F);
      floatArray0[1] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 6);
      assertEquals(12, floatArray0.length);
      assertEquals(1, int0);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[4] = (-720.0F);
      floatArray1[4] = (float) 6;
      floatArray1[5] = (float) 1;
      floatArray1[6] = (float) 1;
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[3] = 'm';
      charArray0[5] = 'm';
      charArray0[6] = 'm';
      Integer integer0 = ArrayUtils.get((Integer[]) null, 6);
      assertNull(integer0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 'm';
      longArray0[2] = (long) 'm';
      longArray0[3] = (long) 'm';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 6L);
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new long[] {6L, 109L, 109L, 109L}, longArray0);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertEquals(4, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new long[] {6L, 109L, 109L, 109L}, longArray0);
      
      int int2 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null, 3374);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 3647.9F;
      floatArray0[1] = 61.0F;
      floatArray0[2] = 2116.0303F;
      floatArray0[3] = (-1801.0F);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {3647.9F, 61.0F, 2116.0303F, (-1801.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int[] intArray0 = new int[1];
      int int0 = 116;
      intArray0[0] = 116;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 116, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 174;
      floatArray0[1] = (float) 174;
      ArrayUtils.shift(floatArray0, (-3570));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {174.0F, 174.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, (int) (byte)0, 'I');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'I'}, charArray0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1136, 2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {174.0F, 174.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = ';';
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 451.694, 1, (double) 642);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      ArrayUtils.shift(shortArray0, (-270), 1, 1807);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray0);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, '{');
      assertFalse(boolean1 == boolean0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'\u0000', ';', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', ';', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ArrayUtils.shift((Object[]) characterArray0, (int) (short)1, (int) (short)1, (int) (short)1);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', ';', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Double double0 = new Double(2201);
      assertNotNull(double0);
      assertEquals(2201.0, (double)double0, 0.01);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      ArrayUtils.shift((long[]) null, 2201, 3003, (-1474));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-36);
      ArrayUtils.swap(byteArray0, (-1175), (int) (byte)6);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)6, (byte) (-36)}, byteArray0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) (byte)1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = ',';
      charArray0[2] = '=';
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 'p';
      floatArray1[1] = (float) (byte)1;
      floatArray1[2] = (float) (byte) (-36);
      floatArray1[3] = (float) (byte) (-36);
      floatArray1[4] = (float) '=';
      floatArray1[5] = 1.0F;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(1, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {112.0F, 1.0F, (-36.0F), (-36.0F), 61.0F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray2, 0.01F);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '=';
      intArray0[1] = 7;
      intArray0[2] = (int) '<';
      intArray0[3] = (-1474);
      intArray0[4] = 2201;
      intArray0[5] = (int) 'p';
      intArray0[6] = 2201;
      intArray0[7] = 2201;
      intArray0[8] = (int) (byte) (-36);
      ArrayUtils.shift(intArray0, 1072);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-36), 61, 7, 60, (-1474), 2201, 112, 2201, 2201}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1103.0F);
      floatArray0[1] = 354.58966F;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 354.58966F;
      floatArray1[1] = 354.58966F;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-1103.0F), 354.58966F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {354.58966F, 354.58966F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1103.0F)}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1758L;
      longArray0[1] = 1758L;
      longArray0[4] = 1758L;
      longArray0[3] = 1758L;
      longArray0[4] = 1758L;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1940L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 0L, 1758L, 1758L}, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 0L, 1758L, 1758L}, longArray1);
      
      Integer integer0 = new Integer(99);
      assertNotNull(integer0);
      assertEquals(99, (int)integer0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-109));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-109)}, byteArray0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((-2786L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2786L), (long)long1);
      
      Long[] longArray2 = new Long[5];
      longArray2[0] = (Long) 1758L;
      longArray2[2] = (Long) 1758L;
      longArray2[3] = long1;
      Long long2 = Long.valueOf(1L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      longArray2[4] = long2;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2, (-2786L));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertNotNull(longArray3);
      assertEquals(5, longArray3.length);
      assertEquals(5, longArray2.length);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {1758L, (-2786L), 1758L, (-2786L), 1L}, longArray3);
      
      ArrayUtils.swap(byteArray0, 1, 12, 8);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-109)}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 12;
      intArray0[1] = 99;
      intArray0[2] = 8;
      intArray0[3] = 8;
      intArray0[4] = 12;
      intArray0[5] = 1;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {12, 99, 8, 8, 12, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-1989));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2123);
      longArray0[1] = (long) (-1989);
      longArray0[2] = (long) (-2123);
      ArrayUtils.swap(longArray0, (-1768), (-2123));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-2123L), (-1989L), (-2123L)}, longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1989);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1989)}, intArray0);
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 306, 306, (int) (byte)42);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)44;
      ArrayUtils.shift(byteArray0, 1, (-205), (-1268));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)25, (byte)114, (byte)13, (byte)59, (byte)44}, byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)25;
      shortArray0[1] = (short) (byte)59;
      shortArray0[2] = (short) (byte)13;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)44;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)59;
      ArrayUtils.swap(shortArray0, (int) (byte)2, (-778), (int) (short)2);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)13, (short)2, (short)25, (short)59, (short)44, (short)2, (short)59}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (byte) (-1), (int) (byte) (-1), (int) (byte) (-1));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-1), 0}, intArray0);
      
      short[] shortArray0 = ArrayUtils.insert(46, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap(intArray0, (-1984), 0, Integer.MAX_VALUE);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-1));
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1), 0}, intArray0);
      
      String string0 = "$X\\";
      Integer integer0 = new Integer(2236);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2236, (int)integer0);
      
      Integer integer1 = Integer.getInteger("$X", integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2236, (int)integer1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      long[] longArray0 = new long[18];
      longArray0[4] = (long) '>';
      ArrayUtils.shift(longArray0, (-14));
      assertEquals(18, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Byte byte0 = new Byte((byte)119);
      assertNotNull(byte0);
      assertEquals((byte)119, (byte)byte0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean("', has a length less than 2");
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = 228L;
      longArray0[2] = (long) (byte)119;
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (byte)119;
      longArray0[5] = (long) (byte) (-1);
      longArray0[6] = (long) (byte) (-1);
      ArrayUtils.shift(longArray0, (int) (byte) (-1));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {228L, 119L, (-1L), 119L, (-1L), (-1L), (-1L)}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {228L, 119L, (-1L), 119L, (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {228L, 119L, (-1L), 119L, (-1L), (-1L), (-1L)}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(7, longArray2.length);
      assertEquals(7, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {228L, 119L, (-1L), 119L, (-1L), (-1L), (-1L)}, longArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)119;
      ArrayUtils.swap(byteArray0, (int) (byte)119, (-1), (-1));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)119, (byte)119, (byte) (-1), (byte)119, (byte)119}, byteArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray1);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2269, (int) (byte)119);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)119, (byte) (-1), (byte)119, (byte)119}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)51;
      shortArray0[1] = (short) (-2372);
      shortArray0[2] = (short) (-711);
      shortArray0[3] = (short) (-711);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short) (-711), (short) (-711), (short)0}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short) (-711), (short) (-711), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short) (-711), (short) (-711), (short)0, (short)51, (short) (-2372), (short) (-711), (short) (-711), (short)0}, shortArray2);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (int) (short)51);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 1816);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-711);
      doubleArray0[1] = (-2480.0);
      doubleArray0[2] = (double) (short) (-2372);
      doubleArray0[3] = (double) (short) (-711);
      doubleArray0[4] = 3345.061885844;
      doubleArray0[5] = (double) 726;
      doubleArray0[6] = (double) (short) (-711);
      doubleArray0[7] = (double) Integer.MAX_VALUE;
      doubleArray0[8] = 3345.061885844;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2206.47249908), (-586), 3345.061885844);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-711.0), (-2480.0), (-2372.0), (-711.0), 3345.061885844, 726.0, (-711.0), 2.147483647E9, 3345.061885844}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-36);
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte) (-24));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 0.0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-24);
      floatArray0[1] = (float) 914L;
      floatArray0[2] = (float) (byte) (-24);
      Short short0 = new Short((byte) (-24));
      assertNotNull(short0);
      assertEquals((short) (-24), (short)short0);
      
      Short short1 = new Short((byte) (-36));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-36), (short)short1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = 'I';
      charArray0[2] = '9';
      charArray0[3] = 'R';
      charArray0[4] = 'q';
      charArray0[5] = 'A';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 50, 36);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(6, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'{', 'I', '9', 'R', 'q', 'A'}, charArray0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-24.0F), 914.0F, (-24.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-24.0F), 914.0F, (-24.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-270));
      assertNotNull(integer0);
      assertEquals((-270), (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-270)}, intArray0);
      
      ArrayUtils.reverse((long[]) null);
      Integer integer1 = new Integer((-270));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-270), (int)integer1);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray0, (-270), (-1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray2.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)119;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)46, (byte)119, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)46, (byte)119, (byte)0}, byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)99;
      shortArray0[1] = (short) (byte)46;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)99, (short)46}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)46;
      doubleArray0[1] = (double) (byte)119;
      doubleArray0[2] = (double) (byte)99;
      doubleArray0[3] = (-409.6658761018336);
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-2568.363917114), 119.0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {46.0, 119.0, 99.0, (-409.6658761018336)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, (int) (byte)60, 84);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (byte)60;
      doubleArray0[2] = (double) 84;
      doubleArray0[1] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, 84, 0, (-724));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)60;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)23;
      shortArray0[4] = (short) (byte)60;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      int[] intArray0 = new int[0];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, intArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short)60, (short)0, (short)0, (short)23, (short)60, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)60, (short)0, (short)0, (short)23, (short)60, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-742);
      intArray0[1] = (-742);
      intArray0[2] = (-742);
      Integer integer0 = new Integer((-2079));
      assertNotNull(integer0);
      assertEquals((-2079), (int)integer0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift(intArray0, (-742), 2, 121);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-742), (-742), (-742), 0, 0, 0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (-742);
      floatArray0[3] = (float) (-742);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 726, (-742));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(10, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.0F, 1.0F, (-742.0F), (-742.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 1;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3345.061885844, Integer.MAX_VALUE, 1.0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-742);
      intArray0[1] = (-742);
      intArray0[2] = (-742);
      Integer integer0 = new Integer((-2079));
      assertNotNull(integer0);
      assertEquals((-2079), (int)integer0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift(intArray0, (-742), 2, 121);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-742), (-742), (-742), 0, 0, 0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[10];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (-197);
      floatArray0[3] = (float) (-742);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 726, 50);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(10, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {Float.NaN, 1.0F, (-197.0F), (-742.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) (-742);
      doubleArray0[2] = (double) 1;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3345.061885844, Integer.MAX_VALUE, 1.0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {Double.NaN, (-742.0), 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      Long long0 = new Long(695L);
      assertNotNull(long0);
      assertEquals(695L, (long)long0);
      
      Long long1 = new Long(893L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(893L, (long)long1);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {695L}, longArray1);
      
      ArrayUtils.shift((Object[]) longArray0, (-1771));
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '2';
      floatArray0[1] = (float) (-1771);
      floatArray0[2] = (float) (-1771);
      floatArray0[3] = (float) 695L;
      floatArray0[4] = (float) (long)longArray0[0];
      floatArray0[5] = (float) 893L;
      int[] intArray0 = new int[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {50.0F, (-1771.0F), (-1771.0F), 695.0F, 695.0F, 893.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {50.0F, (-1771.0F), (-1771.0F), 695.0F, 695.0F, 893.0F}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)115;
      shortArray0[1] = (short)2494;
      shortArray0[2] = (short) (-1061);
      shortArray0[3] = (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)19, 12);
      assertNotNull(bitSet0);
      assertEquals(4, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new short[] {(short)115, (short)2494, (short) (-1061), (short)1}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-1L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (-1L));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) 925L);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int2 = ArrayUtils.lastIndexOf((double[]) null, (double) (-1), (int) (byte) (-1), (-3410.393785668431));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertTrue(boolean0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      ArrayUtils.shift(shortArray0, (-1), 2, 2);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = '(';
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, 12, (int) (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertNotNull(longArray3);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray3.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray3);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) 925L);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 12;
      intArray0[1] = 12;
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = 2;
      ArrayUtils.shift(intArray0, 9);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, 12, 12, (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 201.161F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-6));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      
      byte[] byteArray3 = ArrayUtils.addAll(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray3.length);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray3);
      
      boolean[] booleanArray0 = new boolean[3];
      byte[] byteArray4 = new byte[2];
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      
      byteArray4[0] = (byte) (-16);
      byteArray4[1] = (byte) (-16);
      byte[] byteArray5 = ArrayUtils.add(byteArray4, (byte)16);
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertNotNull(byteArray5);
      assertEquals(2, byteArray4.length);
      assertEquals(3, byteArray5.length);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte) (-16)}, byteArray4);
      assertArrayEquals(new byte[] {(byte) (-16), (byte) (-16), (byte)16}, byteArray5);
      
      ArrayUtils.swap(byteArray5, (int) (byte) (-16), 0, (-1242));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray5));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertEquals(2, byteArray4.length);
      assertEquals(3, byteArray5.length);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte) (-16)}, byteArray4);
      assertArrayEquals(new byte[] {(byte) (-16), (byte) (-16), (byte)16}, byteArray5);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '-';
      doubleArray0[1] = (-1816.3);
      doubleArray0[2] = (double) '-';
      doubleArray0[3] = (double) '-';
      doubleArray0[4] = (double) '-';
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1816.3);
      doubleArray1[1] = (double) '-';
      doubleArray1[2] = (-1704.144264208);
      doubleArray1[3] = (-1816.3);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {45.0, (-1816.3), 45.0, 45.0, 45.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1816.3), 45.0, (-1704.144264208), (-1816.3)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {45.0, 45.0, 45.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Short[] shortArray2 = new Short[3];
      shortArray2[0] = (Short) (short)1;
      shortArray2[1] = (Short) (short)1;
      shortArray2[2] = (Short) (short)1;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertEquals(3, shortArray2.length);
      assertEquals(3, shortArray3.length);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray3);
      
      ArrayUtils.shift(shortArray0, (-2866), 10, (int) (short)1);
      assertFalse(shortArray0.equals((Object)shortArray3));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(2, shortArray0.length);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      
      short[] shortArray4 = ArrayUtils.subarray(shortArray1, (-2866), 1);
      assertFalse(shortArray0.equals((Object)shortArray3));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray3));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray4.equals((Object)shortArray3));
      assertFalse(shortArray4.equals((Object)shortArray0));
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertNotNull(shortArray4);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray4.length);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray4);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray4);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray4, shortArray3);
      assertNotSame(shortArray4, shortArray0);
      assertNotSame(shortArray4, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray4);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) 84;
      doubleArray0[1] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, 61, 0, (-724));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) 0, (-1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, false, true}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 84.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (int) 0, integer0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(integer1);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), (int)integer1);
      assertNotSame(integerArray0, integerArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray1, (Object) integer1, (-1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(bitSet0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-40));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1758L;
      longArray0[1] = 1758L;
      longArray0[4] = 1758L;
      longArray0[3] = 1758L;
      longArray0[4] = 1758L;
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1758L;
      doubleArray0[1] = (double) 1758L;
      doubleArray0[2] = (-944.0);
      doubleArray0[3] = (double) 1758L;
      doubleArray0[4] = (double) 1758L;
      doubleArray0[5] = (double) (-355);
      doubleArray0[6] = (double) 2146246618;
      doubleArray0[7] = (double) 1758L;
      ArrayUtils.reverse(doubleArray0, (-355), 2146246618);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1758.0, 2.146246618E9, (-355.0), 1758.0, 1758.0, (-944.0), 1758.0, 1758.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 2146246618);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 0L, 1758L, 1758L}, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 0L, 1758L, 1758L}, longArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)96;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)115);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)96, (byte)115, (byte)68, (byte)96, (byte)96}, byteArray0);
      assertArrayEquals(new byte[] {(byte)96, (byte)68, (byte)96, (byte)96}, byteArray1);
      
      float[] floatArray1 = ArrayUtils.addFirst((float[]) null, 4524.063F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {4524.063F}, floatArray1, 0.01F);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1758.0, 2.146246618E9, (-355.0), 1758.0, 1758.0, (-944.0), 1758.0, 1758.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)70;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-1754);
      ArrayUtils.shift(shortArray0, 1225);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1754), (short)1, (short)70, (short)1}, shortArray0);
      
      ArrayUtils.reverse((short[]) null);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)70;
      intArray0[1] = (int) (short)1;
      shortArray0[2] = (short)70;
      intArray0[3] = (int) (short)1;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-2319));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {70, 1, 0, 1}, intArray0);
      assertArrayEquals(new int[] {(-2319), 70, 1, 0, 1}, intArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 556.7676;
      doubleArray0[1] = (double) (short) (-1754);
      doubleArray0[2] = (-1699.193593428);
      doubleArray0[3] = (double) (short)1;
      ArrayUtils.shift(doubleArray0, 1, 85, 85);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {556.7676, 1.0, (-1754.0), (-1699.193593428)}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1754), (short)1, (short)70, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1754), (short)1, (short)70, (short)1}, shortArray1);
      
      short[] shortArray2 = new short[2];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (-21957);
      shortArray2[1] = (short)1;
      short[] shortArray3 = ArrayUtils.add(shortArray2, (short)4244);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertEquals(2, shortArray2.length);
      assertEquals(3, shortArray3.length);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertArrayEquals(new short[] {(short) (-21957), (short)1}, shortArray2);
      assertArrayEquals(new short[] {(short) (-21957), (short)1, (short)4244}, shortArray3);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray3));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertEquals(4, shortArray0.length);
      assertFalse(boolean0);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short) (-1754), (short)1, (short)70, (short)1}, shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = 'Q';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(2, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'g', 'Q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'g', 'Q'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte) (-1);
      floatArray1[1] = (float) (byte) (-1);
      floatArray1[2] = (float) (byte) (-1);
      floatArray1[3] = 0.0F;
      float[] floatArray2 = ArrayUtils.insert(0, floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(7, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (byte) (-1), 0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-113));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      int[] intArray0 = ArrayUtils.insert((-2146635668), (int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-720.0F);
      floatArray0[1] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 6);
      assertEquals(6, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-720.0F), 1.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1;
      longArray0[3] = (long) 6;
      longArray0[2] = (long) 6;
      longArray0[3] = (long) 6;
      longArray0[5] = (long) 6;
      longArray0[6] = (long) 1;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-663L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1L, 0L, 6L, 6L, 0L, 6L, 1L}, longArray0);
      assertArrayEquals(new long[] {1L, 0L, 6L, 6L, 0L, 6L, 1L}, longArray1);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = (-720.0F);
      floatArray1[4] = (float) 0L;
      floatArray1[6] = (float) 6L;
      char[] charArray0 = new char[7];
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 's';
      charArray0[4] = 's';
      charArray0[5] = 's';
      int int1 = ArrayUtils.indexOf((double[]) null, (-546.614408), 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', 's', 's', 's', 's', 's', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      Long long0 = new Long(695L);
      assertNotNull(long0);
      assertEquals(695L, (long)long0);
      
      Long long1 = new Long(893L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(893L, (long)long1);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      int[] intArray0 = new int[5];
      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray1, intArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray1.length);
      assertEquals(5, intArray0.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 695L;
      floatArray0[1] = (float) 893L;
      floatArray0[2] = (float) 103;
      floatArray0[3] = (float) 695L;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, (-502));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {695.0F, 893.0F, 103.0F, 695.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 0, 128);
      assertNull(doubleArray0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'S');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'W');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      float[] floatArray0 = new float[20];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(20, floatArray0.length);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(")y,:1]");
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 482;
      longArray0[1] = (long) 'A';
      ArrayUtils.shift(longArray0, (int) (byte)0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {482L, 65L}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 908L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {482L, 65L}, longArray1);
      assertArrayEquals(new long[] {482L, 65L}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 482L);
      assertEquals(20, floatArray0.length);
      assertEquals((-1), int0);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {482L, 65L}, longArray1);
      assertArrayEquals(new long[] {482L, 65L}, longArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      ArrayUtils.swap(byteArray0, (-1), (int) (byte) (-1), (int) (byte) (-75));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-75), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray1, true);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (byte) (-14);
      floatArray0[4] = (float) (byte) (-14);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertFalse(int1 == int0);
      assertEquals(7, floatArray0.length);
      assertEquals(6, int1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-14.0F), (-14.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int2 = ArrayUtils.indexOf((double[]) null, (-1.0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (-958.1135033724038));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null, 59L);
      assertNull(longArray1);
      
      Long[] longArray2 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      
      long[] longArray3 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray3);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      ArrayUtils.shift(booleanArray0, (-1989));
      assertEquals(10, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1989);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-1989);
      doubleArray0[4] = (double) (-1989);
      doubleArray0[5] = (double) (-1989);
      doubleArray0[6] = (double) (-1989);
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) (-1989);
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-1989.0), 1.0, (-1989.0), (-1989.0), (-1989.0), (-1989.0), 1.0, (-1989.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)43, (int) (byte)121);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)2);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1136, (short)1136, (short)1136, (short)1136, (short)1136, (short)1136, (short)1136, (short)1136}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray2.length);
      assertEquals(8, shortArray0.length);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)1136, (short)1136, (short)1136, (short)1136, (short)1136, (short)1136, (short)1136, (short)1136}, shortArray1);
      assertArrayEquals(new short[] {(short)1136, (short)1136, (short)1136, (short)1136, (short)1136, (short)1136, (short)1136, (short)1136}, shortArray2);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)121;
      doubleArray0[1] = 807.2039963068584;
      doubleArray0[2] = (double) (short)shortArray0[0];
      doubleArray0[3] = (double) (short)shortArray0[0];
      doubleArray0[4] = (double) (short)shortArray0[4];
      doubleArray0[5] = (double) (short)shortArray0[4];
      doubleArray0[6] = (double) (short)shortArray0[6];
      double[] doubleArray1 = ArrayUtils.insert((int) (short)2, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {121.0, 807.2039963068584, 1136.0, 1136.0, 1136.0, 1136.0, 1136.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((short)2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short)2);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(78L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(78L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(2918L);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(2918L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((long) longArray0[1]);
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals(6, longArray0.length);
      assertEquals(2L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long(2918L);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long3));
      assertNotNull(long5);
      assertEquals(2918L, (long)long5);
      
      longArray0[5] = long5;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {2L, 2L, 78L, 2918L, 2L, 2918L}, longArray1);
      
      ArrayUtils.shift((Object[]) longArray0, 120);
      assertEquals(6, longArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1771);
      intArray0[1] = (int) (short)2;
      intArray0[2] = 120;
      intArray0[3] = (-1771);
      intArray0[4] = 120;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1771), 2, 120, (-1771), 120}, intArray0);
      
      short[] shortArray1 = ArrayUtils.insert((int) (short)2, shortArray0, (short[]) null);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)0, (short)0, (short)0}, shortArray1);
      
      ArrayUtils.swap(intArray0, (-1771), (-19), (int) (short)2);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1771), 2, 120, (-1771), 120}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1771));
      assertEquals(5, intArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new int[] {(-1771), 2, 120, (-1771), 120}, intArray0);
      
      ArrayUtils.reverse((char[]) null, 3, 120);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)57;
      Integer integer0 = new Integer(52);
      assertNotNull(integer0);
      assertEquals(52, (int)integer0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2552);
      shortArray0[1] = (short) (byte)57;
      shortArray0[2] = (short) (byte)5;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)5;
      intArray0[1] = (int) (short)1060;
      intArray0[2] = (int) (short)57;
      intArray0[3] = (int) (short)57;
      intArray0[4] = (int) (short)5;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 102);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {5, 1060, 57, 57, 5}, intArray0);
      assertArrayEquals(new int[] {5, 1060, 57, 57, 5}, intArray1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.clone((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 35.99314179645;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1335.3337F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 482.0F;
      floatArray0[3] = (-556.9F);
      floatArray0[4] = 4005.942F;
      floatArray0[5] = (-86.0F);
      floatArray0[6] = 2725.2234F;
      int int0 = ArrayUtils.indexOf(floatArray0, 1148.4658F);
      assertEquals(7, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1335.3337F), 1.0F, 482.0F, (-556.9F), 4005.942F, (-86.0F), 2725.2234F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'T');
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'('}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-105);
      boolean[] booleanArray0 = new boolean[14];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)2;
      ArrayUtils.shift(doubleArray0, (-39), (int) (short) (-105), (-693));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((short) (-105));
      assertNotNull(integer0);
      assertEquals((-105), (int)integer0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-70);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)37, (byte) (-70), (byte) (-70), (byte) (-70), (byte) (-70), (byte) (-70)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)37, (byte) (-70), (byte) (-70), (byte) (-70), (byte) (-70), (byte) (-70)}, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1668.7606, (int) (byte) (-70), (double) (short) (-105));
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      
      Integer integer1 = new Integer((byte)37);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(37, (int)integer1);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (byte) (-1), 2349, (int) (byte) (-1));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((byte) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = '[';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\\', '['}, charArray0);
      assertArrayEquals(new char[] {'\\', '['}, charArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1964.38F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1964.38F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1964.38F}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) integerArray0[2]);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) integerArray0[0], 2698);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, integerArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(boolean0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\\', '['}, charArray0);
      assertArrayEquals(new char[] {'\\', '['}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      long[] longArray0 = new long[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 925L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte) (-24));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 0.0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-24);
      floatArray0[1] = (float) 925L;
      floatArray0[2] = (float) (byte) (-24);
      ArrayUtils.shift(byteArray0, (-1), 2, 108);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-24), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-24);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte) (-36);
      shortArray0[3] = (short) (byte) (-24);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-105);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (-1440.68084700953);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (short)2;
      doubleArray0[2] = (double) (short) (-105);
      doubleArray0[5] = (double) (short) (-105);
      doubleArray0[6] = (double) (short)2;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.reverse(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      int[] intArray0 = new int[0];
      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray1, intArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(0, intArray0.length);
      assertEquals(3, booleanArray2.length);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)2;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 103, 103);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-270));
      assertNotNull(integer0);
      assertEquals((-270), (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-270)}, intArray0);
      
      ArrayUtils.reverse((long[]) null);
      char[] charArray0 = new char[5];
      charArray0[0] = 'c';
      charArray0[1] = 'W';
      charArray0[2] = '[';
      charArray0[3] = '-';
      charArray0[4] = '[';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'c', 'W', '[', '-', '['}, charArray0);
      assertArrayEquals(new char[] {'c', 'W', '[', '-', '['}, charArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '-';
      floatArray0[1] = (float) '[';
      floatArray0[2] = (float) '[';
      floatArray0[3] = 1964.38F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {45.0F, 91.0F, 91.0F, 1964.38F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {45.0F, 91.0F, 91.0F, 1964.38F}, floatArray0, 0.01F);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) integerArray0[0]);
      assertNull(longArray0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 35.99314179645;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(12, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = 698L;
      longArray0[1] = (long) (byte)112;
      ArrayUtils.shuffle(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {112L, 698L}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-19);
      intArray0[1] = (int) (byte) (-6);
      intArray0[2] = (int) (byte) (-6);
      ArrayUtils.swap(intArray0, 2146162768, 1482, 10);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-19), (-6), (-6)}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-19));
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-19), (-6), (-6)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      ArrayUtils.swap(booleanArray1, 0, 59, 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-374L);
      longArray0[1] = (long) 59;
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) doubleArray0, (Object) null);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertEquals(1, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) null, 1);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, 299.0, (-602.25312));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null, 128L);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(3508, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)2;
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      
      Short short1 = new Short((short)1136);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)1136, (short)short1);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Short[] shortArray2 = new Short[7];
      shortArray2[0] = (Short) (short)2;
      shortArray2[1] = (Short) (short)2;
      shortArray2[2] = short1;
      shortArray2[3] = short1;
      shortArray2[4] = (Short) (short)2;
      shortArray2[5] = (Short) (short)2;
      shortArray2[6] = short1;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertEquals(7, shortArray3.length);
      assertEquals(7, shortArray2.length);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)1136, (short)1136, (short)2, (short)2, (short)1136}, shortArray3);
      
      ArrayUtils.swap(booleanArray1, (int) short0, (-2144705531), (int) short0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      Long long0 = new Long(695L);
      assertNotNull(long0);
      assertEquals(695L, (long)long0);
      
      Long long1 = new Long(893L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(893L, (long)long1);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {695L}, longArray1);
      
      Character character0 = Character.valueOf('X');
      assertNotNull(character0);
      assertEquals('X', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'X');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.removeElement(longArray2, 1789L);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 121, (-2569));
      assertNotNull(charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2569);
      floatArray0[1] = (float) 264;
      floatArray0[2] = (float) 264;
      floatArray0[3] = (float) (-2777L);
      floatArray0[4] = (float) 893L;
      floatArray0[5] = (float) (-1771);
      floatArray0[6] = (float) (-1771);
      floatArray0[7] = (float) 'X';
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 121);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-2569.0F), 264.0F, 264.0F, (-2777.0F), 893.0F, (-1771.0F), (-1771.0F), 88.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2569.0F), 264.0F, 264.0F, (-2777.0F), 893.0F, (-1771.0F), (-1771.0F), 88.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-270));
      assertNotNull(integer0);
      assertEquals((-270), (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-270)}, intArray0);
      
      ArrayUtils.reverse((long[]) null);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-270);
      floatArray0[1] = (float) (int)integerArray0[0];
      floatArray0[2] = (float) (-270);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-270), Integer.MAX_VALUE);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1648.524);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2853.52986026845, 1);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1648.524), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1730.0);
      doubleArray0[1] = (-3344.061885844);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-3344.061885844);
      doubleArray0[5] = (double) (-415);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1730.0), 842.542199770302);
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new double[] {(-1730.0), (-3344.061885844), 1.0, 1.0, (-3344.061885844), (-415.0)}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3344.061885844);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-3344.061885844);
      doubleArray1[4] = 842.542199770302;
      doubleArray1[5] = (-1730.0);
      doubleArray1[6] = 1.0;
      doubleArray1[7] = (double) (-415);
      doubleArray1[8] = 1.0;
      ArrayUtils.reverse(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-415.0), 1.0, (-1730.0), 842.542199770302, (-3344.061885844), 1.0, (-1.0), (-3344.061885844)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte) (-89);
      floatArray1[1] = (float) (byte) (-89);
      floatArray1[2] = (float) (byte) (-89);
      floatArray1[3] = (float) (byte) (-89);
      floatArray1[4] = (float) (byte) (-89);
      floatArray1[5] = (float) (byte) (-89);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-89.0F), (-89.0F), (-89.0F), (-89.0F), (-89.0F), (-89.0F)}, floatArray1, 0.01F);
      
      Double double0 = new Double((-1648.524));
      assertNotNull(double0);
      assertEquals((-1648.524), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1648.524), (-1648.524), (-1648.524)}, doubleArray1, 0.01);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)120);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 879.0F;
      floatArray1[1] = 879.0F;
      floatArray1[2] = 879.0F;
      floatArray1[3] = 879.0F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {879.0F, 879.0F, 879.0F, 879.0F}, floatArray1, 0.01F);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 879.0F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = '`';
      charArray0[2] = 'l';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'7', '`', 'l'}, charArray0);
      
      Integer[] integerArray0 = new Integer[3];
      try { 
        Integer.valueOf("java.lang.Short");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Short\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      Long long0 = new Long(695L);
      assertNotNull(long0);
      assertEquals(695L, (long)long0);
      
      Long long1 = new Long(893L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(893L, (long)long1);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {695L}, longArray1);
      
      ArrayUtils.shift((Object[]) longArray0, (-1771));
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '2');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap((char[]) null, (-2712), 1010);
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-415);
      intArray0[1] = (-2712);
      intArray0[2] = 2;
      intArray0[3] = (-2712);
      intArray0[4] = (-2712);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-514));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-415), (-2712), 2, (-2712), (-2712)}, intArray0);
      assertArrayEquals(new int[] {(-415), (-2712), 2, (-2712), (-2712)}, intArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      ArrayUtils.swap(longArray0, 2, (-1), (-514));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {2L, 2L}, longArray0);
      
      ArrayUtils.swap((Object[]) byteArray1, 599, (-2), 2392);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      
      Integer integer1 = Integer.getInteger("", Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer1));
      assertNotNull(object0);
      assertEquals((-2), object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray1, object0, 1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(object0.equals((Object)integer1));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals((-1), int0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-2712);
      integerArray0[1] = integer1;
      integerArray0[2] = (Integer) (-2712);
      integerArray0[3] = integer1;
      integerArray0[4] = (Integer) (-415);
      integerArray0[5] = (Integer) (-2712);
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertEquals(6, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1977);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-1407);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-3190L);
      longArray0[1] = 698L;
      ArrayUtils.shuffle(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {698L, (-3190L)}, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 698L;
      doubleArray0[2] = (double) (short) (-1407);
      doubleArray0[3] = (double) (short) (-1407);
      doubleArray0[4] = (double) (short) (-1407);
      Integer integer0 = new Integer((short) (-1407));
      assertNotNull(integer0);
      assertEquals((-1407), (int)integer0);
      
      Integer integer1 = new Integer((-2));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      
      Integer integer2 = new Integer(289);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(289, (int)integer2);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) null, (Object) integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.shift(doubleArray0, 2033);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1407.0), 0.0, 0.0, 0.0, 698.0, (-1407.0), (-1407.0)}, doubleArray0, 0.01);
      
      Integer integer3 = Integer.valueOf(1478);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(1478, (int)integer3);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short) (-1407));
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1407));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1407)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1407), (short) (-1407)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(3286.061885844);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(3286.061885844, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals((-1.0), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 3286.061885844, (-1.0), (-1.0)}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-2463));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)99;
      shortArray0[1] = (short) (-1801);
      shortArray0[2] = (short) (-1801);
      shortArray0[3] = (short) (byte)99;
      shortArray0[4] = (short) (-1801);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-32479), (int) (short) (-1801));
      assertEquals(5, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)99, (short) (-1801), (short) (-1801), (short)99, (short) (-1801)}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2522, 126);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2522;
      intArray0[1] = (-499);
      intArray0[2] = (int) (short) (-1801);
      intArray0[3] = (-499);
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(4, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {2522, (-499), (-1801), (-499), 2522, (-499), (-1801), (-499)}, intArray1);
      assertArrayEquals(new int[] {2522, (-499), (-1801), (-499)}, intArray0);
      
      ArrayUtils.swap(booleanArray1, (-999), (-3558), (-1801));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-105);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      
      double[] doubleArray0 = new double[7];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2823.0), 0, (double) (short) (-105));
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift(shortArray0, (-2), 0, (-355));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short) (-105), (short)0, (short)0, (short)0}, shortArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = '(';
      charArray0[6] = '(';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'(', '(', '(', '(', '(', '(', '('}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'(', '(', '(', '(', '(', '(', '('}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      long[] longArray0 = new long[0];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-11);
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)0);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) (byte)0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (byte)0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray1);
      assertNotNull(stringArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, stringArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) (byte) (-122));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, (Integer) int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)1;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte)12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 352.2453438856186;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0);
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertArrayEquals(new double[] {1.0, 352.2453438856186}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1470;
      intArray0[1] = 2;
      intArray0[2] = 111;
      intArray0[3] = (-1616);
      intArray0[4] = (-519);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1470, 1470);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1470, 2, 111, (-1616), (-519)}, intArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      assertArrayEquals(new int[] {1470, 2, 111, (-1616), (-519)}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (-519));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, 2.0F}, floatArray1, 0.01F);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(10, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {1470, 2, 111, (-1616), (-519), 1470, 2, 111, (-1616), (-519)}, intArray1);
      assertArrayEquals(new int[] {1470, 2, 111, (-1616), (-519)}, intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-519);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 1470;
      longArray0[3] = (long) (-519);
      longArray0[4] = 1L;
      longArray0[5] = (long) 2;
      ArrayUtils.shift(longArray0, (-2137304069), 1470, 126);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-519L), 2L, 1470L, (-519L), 1L, 2L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      ArrayUtils.swap(booleanArray1, 0, 59, 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-374L);
      longArray0[1] = (long) 59;
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) doubleArray0, (Object) null);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) null, 1060);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 37.0;
      char[] charArray0 = new char[9];
      charArray0[1] = '^';
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 37.0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) '^';
      ArrayUtils.shift(objectArray0, 2, 2, (-1));
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) ';';
      doubleArray0[2] = (double) ';';
      doubleArray0[3] = Double.NaN;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {59.0, 0.0, 59.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = (-6231.275942);
      doubleArray2[2] = (double) 2408;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, (-6231.275942), (int) (byte)0, 1196.94139473677);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray2.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-6231.275942), 2408.0}, doubleArray2, 0.01);
      
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer integer2 = ArrayUtils.get(integerArray0, 3925);
      assertNull(integer2);
      assertEquals(1, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(integer1, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-415);
      doubleArray0[1] = (double) (-415);
      ArrayUtils.shift(doubleArray0, 1569, (-2266), (-2823));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-415.0), (-415.0)}, doubleArray0, 0.01);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 4117, (-2266));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false}, booleanArray0));
      
      Random.setNextRandom(4117);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'j');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-415);
      longArray0[1] = (long) 'j';
      longArray0[2] = (long) 1569;
      longArray0[3] = (long) (-2823);
      longArray0[4] = (long) 4117;
      longArray0[5] = (long) (-2266);
      longArray0[6] = (long) (-2266);
      longArray0[7] = (long) (-2266);
      longArray0[8] = (-678L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-1L), (-415L), 106L, 1569L, (-2823L), 4117L, (-2266L), (-2266L), (-2266L), (-678L)}, longArray1);
      assertArrayEquals(new long[] {(-415L), 106L, 1569L, (-2823L), 4117L, (-2266L), (-2266L), (-2266L), (-678L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      ArrayUtils.swap((float[]) null, (int) (byte)0, 2146689078, 2146689078);
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(2146689078);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2146689078, (int)integer1);
      
      Integer integer2 = new Integer((byte)0);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer2, (Integer) null);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 7);
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(7, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2549.63661153;
      doubleArray0[1] = (double) 2146689078;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, 2146689078);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2549.63661153, 2.146689078E9}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = '\\';
      charArray0[2] = 'n';
      charArray0[3] = 'X';
      charArray0[4] = '#';
      charArray0[5] = 'I';
      charArray0[6] = 'k';
      charArray0[7] = '$';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'Q');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(9, charArray1.length);
      assertEquals(8, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'Q', 'd', '\\', 'n', 'X', '#', 'I', 'k', '$'}, charArray1);
      assertArrayEquals(new char[] {'d', '\\', 'n', 'X', '#', 'I', 'k', '$'}, charArray0);
      
      ArrayUtils.shift(charArray1, (-1), 577, (-2074));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray1.length);
      assertEquals(8, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'X', '#', 'I', 'k', '$', 'Q', 'd', '\\', 'n'}, charArray1);
      assertArrayEquals(new char[] {'d', '\\', 'n', 'X', '#', 'I', 'k', '$'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      int int0 = (-1284);
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.reverse((boolean[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      int[] intArray0 = ArrayUtils.add((int[]) null, 0, 866);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {866}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      int[] intArray0 = new int[6];
      intArray0[0] = (-683);
      intArray0[1] = 2146340530;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (-770);
      intArray0[4] = (-715);
      intArray0[5] = (int) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1089), (int) (byte)0);
      assertEquals(6, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-683), 2146340530, 0, (-770), (-715), 0}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 174;
      floatArray0[1] = (float) 174;
      ArrayUtils.shift(floatArray0, (-3570));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {174.0F, 174.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      
      char[] charArray0 = ArrayUtils.add((char[]) null, (int) (byte)0, 'I');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'I'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      float[] floatArray0 = new float[13];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(13, floatArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 120, (-958));
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-6231.275942);
      doubleArray0[1] = (-6231.275942);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-23);
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23)}, byteArray0);
      
      ArrayUtils.shift((long[]) null, (int) (byte)0);
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-897L));
      assertNull(longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 2002L, 253);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (byte) (-23));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-23)}, intArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1646.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-6231.275942), (-6231.275942), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-6231.275942), (-6231.275942), 0.0, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 3294L;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) 3294L;
      floatArray0[3] = (float) (byte) (-23);
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, (-4552.0F));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(4, floatArray0.length);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new float[] {3294.0F, (-1.0F), 3294.0F, (-23.0F)}, floatArray0, 0.01F);
      
      bitSet1.andNot(bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertEquals(4, floatArray0.length);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(bitSet0, bitSet1);
      assertArrayEquals(new float[] {3294.0F, (-1.0F), 3294.0F, (-23.0F)}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        bitSet0.set(1070, (int) (byte) (-23));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex < 0: -23
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'U');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray1);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-1407);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-3190L);
      longArray0[1] = 698L;
      ArrayUtils.shuffle(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {698L, (-3190L)}, longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 698L;
      doubleArray0[2] = (double) (short) (-1407);
      doubleArray0[3] = (double) (short) (-1407);
      doubleArray0[4] = (double) (short) (-1407);
      doubleArray0[5] = (double) (-3190L);
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {698.0, (-1407.0), (-1407.0), (-1407.0), (-3190.0), 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {698L, (-3190L)}, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      char[] charArray1 = ArrayUtils.add(charArray0, '+');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertArrayEquals(new char[] {'+', '+'}, charArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte) (-10);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short) (-1407), (int) (byte)9);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-85), (byte)10, (byte)9, (byte)108, (byte) (-96), (byte) (-46), (byte) (-10)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-85), (byte)10, (byte)9, (byte)108, (byte) (-96), (byte) (-46), (byte) (-10)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)2460;
      doubleArray0[1] = (double) (byte)42;
      doubleArray0[2] = (double) 84;
      doubleArray0[3] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, 61, 0, (-724));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2460.0, 42.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((short)2460);
      assertNotNull(integer0);
      assertEquals(2460, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray0, (int) 0, (-1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray2.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 41;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {41L, 0L, 0L}, longArray0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 2146799132);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {41L, 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2146799132;
      floatArray0[1] = (float) 41;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {2.1467991E9F, 41.0F}, floatArray0, 0.01F);
      
      boolean boolean2 = ArrayUtils.contains(longArray0, (-1061L));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, longArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new long[] {41L, 0L, 0L}, longArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(stringArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 41L;
      boolean boolean3 = ArrayUtils.contains(doubleArray0, 1.0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean3);
      assertArrayEquals(new double[] {41.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Short[] shortArray1 = new Short[2];
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      shortArray1[0] = short0;
      try { 
        Short.valueOf("', is neither of type Map.Entry nor an Array");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"', is neither of type Map.Entry nor an Array\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 841L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {841L}, longArray0);
      assertArrayEquals(new long[] {841L, 841L}, longArray1);
      
      ArrayUtils.swap(longArray0, (-1634), (-1634), 12);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(1, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {841L}, longArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 841L;
      doubleArray0[1] = (double) 841L;
      doubleArray0[2] = (double) (-1634);
      doubleArray0[3] = (double) 12;
      doubleArray0[4] = (double) (-1634);
      doubleArray0[5] = (double) (-1634);
      doubleArray0[6] = (double) 841L;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {841.0, 841.0, (-1634.0), 12.0, (-1634.0), (-1634.0), 841.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {841.0, 841.0, (-1634.0), 12.0, (-1634.0), (-1634.0), 841.0}, doubleArray1, 0.01);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1634.0), (-1634), 12.0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(bitSet0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{2, 4, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {841.0, 841.0, (-1634.0), 12.0, (-1634.0), (-1634.0), 841.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {841.0, 841.0, (-1634.0), 12.0, (-1634.0), (-1634.0), 841.0}, doubleArray1, 0.01);
      
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (-1634);
      longArray2[1] = (long) 12;
      longArray2[2] = (-1882L);
      longArray2[3] = (long) (-1634);
      long[] longArray3 = ArrayUtils.removeElement(longArray2, 841L);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertEquals(4, longArray2.length);
      assertEquals(4, longArray3.length);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertArrayEquals(new long[] {(-1634L), 12L, (-1882L), (-1634L)}, longArray2);
      assertArrayEquals(new long[] {(-1634L), 12L, (-1882L), (-1634L)}, longArray3);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-36);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-36)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-36)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1561L));
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-683);
      intArray0[1] = 2146340530;
      intArray0[1] = (int) (byte)0;
      intArray0[3] = (-770);
      int int1 = ArrayUtils.lastIndexOf(intArray0, 1086, 2146336255);
      assertTrue(int1 == int0);
      assertEquals(6, intArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {(-683), 0, 0, (-770), 0, 0}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      ArrayUtils.shift(floatArray0, 2529);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      
      ArrayUtils.shift(intArray0, (-770), 1086, (-770));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-770), 0, 0, (-683), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      ArrayUtils.swap(shortArray1, 25, (-3013), 25);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      Short short0 = new Short((short)18036);
      assertNotNull(short0);
      assertEquals((short)18036, (short)short0);
      
      Short short1 = new Short((short) (-3178));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-3178), (short)short1);
      
      Short short2 = new Short((short) (-1));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-1), (short)short2);
      
      Short short3 = new Short((short) (-1));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short) (-1), (short)short3);
      
      Short short4 = new Short((short)2912);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short)2912, (short)short4);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-97), (int) (short) (-3178));
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeElements((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 54;
      ArrayUtils.shift(longArray0, (-3478), (-3478), (-3478));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {54L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[5];
      byteArray0[2] = (byte) (-1);
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      byte byte0 = (byte) (-1);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[0] = (float) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-1));
      assertEquals(2, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift((byte[]) null, 18688);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '\\';
      charArray0[2] = 'I';
      charArray0[3] = '\\';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'|', '\\', 'I', '\\'}, charArray0);
      
      Integer integer0 = new Integer(18688);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(18688, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals(18688, object0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '\\';
      intArray0[1] = (int) '\\';
      intArray0[2] = 0;
      intArray0[3] = (int) '\\';
      intArray0[4] = (int) '|';
      intArray0[5] = (int) '\\';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 124, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte) (-97));
      assertNull(byteArray0);
      
      Integer[] integerArray0 = new Integer[9];
      int int0 = 3682;
      Integer integer0 = new Integer(3682);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(3682, (int)integer0);
      
      integerArray0[0] = integer0;
      int int1 = 1;
      Integer integer1 = new Integer(1);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1845));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1845), (int)integer2);
      
      integerArray0[2] = integer2;
      try { 
        Integer.valueOf(", Length: 0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \", Length: 0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      short[] shortArray0 = new short[4];
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      ArrayUtils.shift(intArray0, 0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'B', 10);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 800.2;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-269.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {800.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-269.0), 800.2}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = 114.0F;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 114.0F, 0.0F, (-1.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 114.0F, 0.0F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1136, 8);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.remove(integerArray0, 0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, 0, 1631);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)6472;
      shortArray0[1] = (short)6472;
      shortArray0[2] = (short)6472;
      shortArray0[3] = (short) (-1605);
      shortArray0[4] = (short)6472;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)6472;
      shortArray0[7] = (short)6472;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-925), (int) (short)6472);
      assertEquals(9, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)6472, (short)6472, (short)6472, (short) (-1605), (short)6472, (short)2, (short)6472, (short)6472, (short)0}, shortArray0);
      
      Integer integer0 = new Integer((short)6472);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(6472, (int)integer0);
      
      Integer integer1 = Integer.getInteger("");
      assertNull(integer1);
      
      Integer integer2 = new Integer((short)6472);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(6472, (int)integer2);
      
      Integer[] integerArray0 = ArrayUtils.insert((int) 6472, (Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
      
      Float float0 = new Float((double) (short)2);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-55.071F));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-170);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1801), 2146336255);
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1666), (short) (-170)}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1046, 9);
      assertTrue(int1 == int0);
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)0, (short) (-1666), (short) (-170)}, shortArray0);
      
      int int2 = ArrayUtils.indexOf((long[]) null, 2979L, 10);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = ArrayUtils.lastIndexOf((long[]) null, (long) (-1), 2146336255);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'m', 'e', 'e'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'m', 'e', 'e'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-59), (-6043));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 22;
      floatArray0[1] = (float) (-6043);
      floatArray0[2] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) 22;
      floatArray0[4] = (float) 22;
      floatArray0[5] = (float) (-59);
      floatArray0[6] = (float) (-6043);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2.14748365E9F, 54);
      assertNotNull(bitSet0);
      assertEquals(7, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {22.0F, (-6043.0F), 2.14748365E9F, 22.0F, 22.0F, (-59.0F), (-6043.0F)}, floatArray0, 0.01F);
      
      int[] intArray2 = ArrayUtils.removeAll(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray3 = ArrayUtils.removeAllOccurrences(intArray0, 1060);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotNull(intArray3);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray3.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray3);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
      Integer integer0 = new Integer(11);
      assertNotNull(integer0);
      assertEquals(11, (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      Integer integer2 = new Integer((-59));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-59), (int)integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.clone(abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray1.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 54;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 1060);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1060, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      Integer integer0 = new Integer((int) integerArray0[3]);
      assertNotNull(integer0);
      assertEquals(6, integerArray0.length);
      assertEquals(0, (int)integer0);
      
      integerArray0[5] = integer0;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(integerArray0, (int) integerArray0[4]);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, integerArray0.length);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = 'W';
      ArrayUtils.shift(charArray0, (int) integerArray0[4], 961, (-1337));
      assertEquals(6, integerArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'W', 'J'}, charArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (-923));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (int)integerArray0[4];
      doubleArray0[1] = (double) (int)integerArray0[1];
      doubleArray0[2] = (double) 'J';
      doubleArray0[3] = (double) (int)integerArray0[3];
      doubleArray0[4] = (double) 'W';
      doubleArray0[5] = (double) 'J';
      boolean boolean2 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {0.0, 0.0, 74.0, 0.0, 87.0, 74.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 934);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = (-1849);
      ArrayUtils.shift(intArray1, (-563), 10, 1701);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1849), (-1)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      byte byte0 = (byte)100;
      Byte byte1 = new Byte((byte)100);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)100, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Double double0 = new Double(byte0);
      assertNotNull(double0);
      assertEquals(100.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      Double double1 = new Double(byte0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(100.0, (double)double1, 0.01);
      
      doubleArray0[6] = double1;
      doubleArray0[7] = double0;
      doubleArray0[8] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[5]);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0}, doubleArray1, 0.01);
      
      Integer integer0 = new Integer(1530);
      assertNotNull(integer0);
      assertEquals(1530, (int)integer0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) doubleArray0[8];
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) doubleArray0[0];
      objectArray0[3] = (Object) double0;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) byte1;
      objectArray0[6] = (Object) doubleArray0[4];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, 0);
      assertEquals(7, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'm';
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[2] = true;
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'm'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'm'}, charArray1);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[13];
      longArray0[8] = (long) 'm';
      longArray0[1] = (long) '[';
      longArray0[2] = (long) '\\';
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 2328L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(13, longArray0.length);
      assertEquals(13, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift(booleanArray0, 2146386873);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true}, booleanArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 109L;
      doubleArray0[1] = (double) 91L;
      doubleArray0[2] = (double) 2328L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2.147483647E9, 2146386873);
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {109.0, 91.0, 2328.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1113.75599);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1113.75599}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      float[] floatArray0 = new float[13];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(13, floatArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(13, floatArray0.length);
      assertFalse(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 943.31366F);
      assertNotNull(bitSet0);
      assertEquals(13, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(13, floatArray0.length);
      assertEquals(13, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = ';';
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) ';';
      intArray0[5] = (int) ';';
      ArrayUtils.shift(intArray0, 1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {59, 1, 1, 1, 1, 59}, intArray0);
      
      byte[] byteArray0 = new byte[16];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0);
      assertEquals(16, byteArray0.length);
      assertEquals(0, int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ';', (-2144254348));
      assertNotNull(bitSet0);
      assertEquals(8, charArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertArrayEquals(new char[] {'\u0000', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1669.83);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1669.83}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short)1;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 59, 99);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Integer integer0 = new Integer((byte) (-24));
      assertNotNull(integer0);
      assertEquals((-24), (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      long[] longArray0 = new long[13];
      longArray0[0] = 3884L;
      longArray0[1] = 3884L;
      longArray0[2] = 3884L;
      longArray0[3] = 3884L;
      longArray0[4] = (long) (byte) (-24);
      longArray0[5] = 3884L;
      int int0 = ArrayUtils.indexOf(longArray0, (long) (byte) (-24));
      assertEquals(13, longArray0.length);
      assertEquals(4, int0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-24), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -24, Length: 13
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3905;
      shortArray0[1] = (short) (byte)31;
      shortArray0[2] = (short) (-2130);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (byte)31;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)3905, (short)31, (short) (-2130), (short)1, (short)31}, shortArray0);
      assertArrayEquals(new short[] {(short)3905, (short)31, (short) (-2130), (short)1, (short)31, (short)3905, (short)31, (short) (-2130), (short)1, (short)31}, shortArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = ';';
      charArray0[2] = 'N';
      charArray0[3] = 'S';
      ArrayUtils.shift(charArray0, (int) (short)31, 1273, (int) (short)1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'n', ';', 'N', 'S'}, charArray0);
      
      Random.setNextRandom(457);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) 'N';
      float[] floatArray1 = ArrayUtils.remove(floatArray0, (int) (short)1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 78.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 1.0F;
      objectArray0[1] = (Object) 'n';
      objectArray0[2] = (Object) ';';
      objectArray0[3] = (Object) (short)1;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(4, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)3956);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)3956}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)3956}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)3956;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 's';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'b', (-46));
      assertNotNull(bitSet0);
      assertEquals(4, charArray0.length);
      assertEquals(3, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'b', 'b', 'b', 's'}, charArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte) (-11), (int) (byte) (-19));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      
      Integer integer0 = new Integer(89);
      assertNotNull(integer0);
      assertEquals(89, (int)integer0);
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-62));
      assertFalse(boolean0);
      
      Integer integer1 = new Integer(194);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(194, (int)integer1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'b';
      ArrayUtils.shift(doubleArray0, (int) (byte) (-62), (-1020), (int) (byte) (-19));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {98.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'O';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'g');
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', 'O', '\u0000'}, charArray0);
      
      ArrayUtils.shift(charArray0, (-3945));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'O', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3945);
      longArray0[2] = (long) '|';
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 124L;
      objectArray0[1] = (Object) 124L;
      objectArray0[2] = (Object) 124L;
      objectArray0[3] = (Object) (-3945L);
      ArrayUtils.swap(objectArray0, (-1571), (-3945), (-1571));
      assertEquals(4, objectArray0.length);
      
      Integer integer0 = Integer.getInteger("double", (int) 'g');
      assertNotNull(integer0);
      assertEquals(103, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 672);
      assertEquals(4, objectArray0.length);
      assertEquals(2, int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 2;
      longArray0[2] = (-2745L);
      ArrayUtils.swap(longArray0, (-415), 2, (-415));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 2L, (-2745L)}, longArray0);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)105;
      byteArray2[1] = (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-647), byteArray2, byteArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -647, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 6;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 6, 0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {6.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 18688);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-24);
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) (byte) (-36);
      longArray0[3] = (long) 18688;
      longArray0[4] = (long) 4;
      ArrayUtils.shift(longArray0, 6);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {4L, (-24L), 2147483647L, (-36L), 18688L}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1284L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {4L, (-24L), 2147483647L, (-36L), 18688L}, longArray0);
      assertArrayEquals(new long[] {4L, (-24L), 2147483647L, (-36L), 18688L}, longArray1);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 4524.383F);
      assertFalse(int1 == int0);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {6.0F}, floatArray0, 0.01F);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {4L, (-24L), 2147483647L, (-36L), 18688L}, longArray0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 2560.5803F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {6.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {6.0F}, floatArray1, 0.01F);
      
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertEquals(5, longArray3.length);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray2.length);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray3);
      assertArrayEquals(new long[] {4L, (-24L), 2147483647L, (-36L), 18688L}, longArray3);
      assertArrayEquals(new long[] {4L, (-24L), 2147483647L, (-36L), 18688L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short)457;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte) (-1);
      shortArray0[7] = (short) (byte) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)457, (short)0, (short)0, (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1);
      float[] floatArray1 = ArrayUtils.insert((int) (short)0, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      
      Short[] shortArray1 = new Short[4];
      shortArray1[0] = (Short) (short) (-1);
      shortArray1[1] = (Short) (short)457;
      shortArray1[2] = (Short) (short)0;
      shortArray1[3] = (Short) (short) (-1);
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)3419);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)457, (short)0, (short) (-1)}, shortArray2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.toArray((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2146689078;
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) (short)2;
      floatArray0[3] = (float) 2146689078;
      floatArray0[4] = (float) 2146689078;
      ArrayUtils.swap(floatArray0, (int) (short)2, (int) (short)2, 4135);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {2.14668902E9F, 2.0F, 2.0F, 2.14668902E9F, 2.14668902E9F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(2146689078);
      assertNotNull(integer0);
      assertEquals(2146689078, (int)integer0);
      
      Integer integer1 = new Integer(4323);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4323, (int)integer1);
      
      Integer integer2 = new Integer(53);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(53, (int)integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer2, integer0);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry2;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      
      abstractMap_SimpleImmutableEntryArray1[0] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray1[1] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray2 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertFalse(abstractMap_SimpleImmutableEntryArray0.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertNotNull(abstractMap_SimpleImmutableEntryArray2);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray2.length);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.shift(longArray0, (-3478), 54, 62);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1530);
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short) (-1666);
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0, 114, (int) (short) (-1666));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-96), (byte)0}, byteArray0);
      
      ArrayUtils.swap(shortArray0, (int) (byte)0, (int) (byte)0, 121);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1666), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1335.3;
      doubleArray0[1] = (double) 114;
      doubleArray0[2] = (double) (byte) (-96);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 989.097554732254);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1335.3, 114.0, (-96.0), 989.097554732254}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1335.3, 114.0, (-96.0)}, doubleArray0, 0.01);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2146475439), (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-96), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      ArrayUtils.swap(booleanArray1, 0, (int) (byte) (-1), (int) (byte) (-1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Integer integer0 = new Integer((byte)76);
      assertNotNull(integer0);
      assertEquals(76, (int)integer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '.');
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertArrayEquals(new char[] {'.'}, charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) '.';
      objectArray0[1] = object0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) bitSet0;
      objectArray0[4] = (Object) bitSet0;
      BitSet bitSet1 = (BitSet)bitSet0.clone();
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(1, charArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) '.';
      objectArray0[7] = (Object) '.';
      Integer integer1 = new Integer(103);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(103, (int)integer1);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '.');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'.'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) shortArray0, (Object[]) shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)51;
      shortArray0[1] = (short) (-2372);
      shortArray0[2] = (short) (-711);
      shortArray0[3] = (short)21845;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short) (-711), (short)21845, (short)0}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short) (-711), (short)21845, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short) (-711), (short)21845, (short)0, (short)51, (short) (-2372), (short) (-711), (short)21845, (short)0}, shortArray2);
      
      ArrayUtils.reverse((Object[]) shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short) (-711), (short)21845, (short)0}, shortArray0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (int) (short)51);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[2] = false;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray1.length);
      assertFalse(boolean0);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-711);
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) (-2372), (int) (short) (-2372), 1.0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-711.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) shortArray1, (Object[]) shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(boolean1 == boolean0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertTrue(boolean1);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short) (-711), (short)21845, (short)0}, shortArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements((boolean[]) null, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-711);
      longArray0[1] = (long) (short) (-711);
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, longArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new long[] {(-711L), (-711L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = new int[1];
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-415), (int) (byte)0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      int int0 = (-499);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-499), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -499, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) (byte)9;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(13, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)9;
      shortArray0[2] = (short)457;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[0] = (short) (byte)9;
      shortArray0[7] = (short) (byte) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)9, (short)9, (short)457, (short)0, (short)0, (short)0, (short)0, (short) (-1)}, shortArray0);
      
      float[] floatArray0 = new float[1];
      doubleArray0[5] = (double) (short)9;
      float[] floatArray1 = ArrayUtils.insert((int) (short)0, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)453, (int) (short) (-1));
      assertEquals(8, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)9, (short)9, (short)457, (short)0, (short)0, (short)0, (short)0, (short) (-1)}, shortArray0);
      
      ArrayUtils.swap(doubleArray0, (int) (byte)9, (-1), (int) (byte) (-1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(13, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte)9;
      intArray0[2] = (int) (short)457;
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-36);
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte)0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 0.0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) 925L;
      floatArray0[3] = (float) (byte) (-36);
      floatArray0[4] = (float) (-1);
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 451.694;
      doubleArray0[3] = (-360.9576);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (-1.0F);
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) 925L, 642, (double) 0.0F);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {0.0, 0.0, 451.694, (-360.9576), 0.0, (-1.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) (byte)0, (-1), 56);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '(');
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = new int[0];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      long[] longArray0 = new long[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 925L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte) (-24));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 0.0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-24);
      Float[] floatArray1 = new Float[8];
      floatArray1[0] = (Float) (-24.0F);
      floatArray1[1] = (Float) (-24.0F);
      floatArray1[2] = (Float) (-24.0F);
      Float float0 = new Float((float) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray1[3] = float0;
      floatArray1[4] = (Float) (-24.0F);
      floatArray1[5] = (Float) (-24.0F);
      floatArray1[6] = (Float) (-24.0F);
      floatArray1[7] = (Float) (-24.0F);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(8, floatArray2.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-24.0F), (-24.0F), (-24.0F), (-1.0F), (-24.0F), (-24.0F), (-24.0F), (-24.0F)}, floatArray2, 0.01F);
      
      float[] floatArray3 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray3);
      
      ArrayUtils.reverse((double[]) null);
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) floatArray1[3], 100, 1.5);
      assertNotNull(bitSet0);
      assertEquals(8, floatArray1.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1869));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1869)}, intArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-24);
      shortArray0[1] = (short) (byte) (-24);
      shortArray0[2] = (short) (byte) (-24);
      shortArray0[3] = (short) (byte) (-24);
      shortArray0[4] = (short) (byte) (-24);
      shortArray0[5] = (short) (byte) (-24);
      shortArray0[6] = (short) (byte) (-24);
      shortArray0[7] = (short) (byte) (-24);
      shortArray0[8] = (short) (byte) (-24);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-24), (short) (-24), (short) (-24), (short) (-24), (short) (-24), (short) (-24), (short) (-24), (short) (-24), (short) (-24)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)2460;
      doubleArray0[1] = (double) (byte)42;
      doubleArray0[2] = (double) 84;
      doubleArray0[3] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, 61, 0, (-724));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2460.0, 42.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((short)2460);
      assertNotNull(integer0);
      assertEquals(2460, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, 84, (-657.0));
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2460.0, 42.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift(shortArray0, (-815), (-724), (-2432));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = '(';
      boolean boolean0 = ArrayUtils.contains(charArray0, '(');
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'(', '('}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'(', '('}, charArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 2407);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-1));
      assertEquals(2, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      int int1 = ArrayUtils.indexOf(doubleArray0, 1.5);
      assertFalse(int1 == int0);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1665L;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (byte) (-1);
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = 2144L;
      ArrayUtils.swap(byteArray0, 2307, (-132), (-1611));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (-360.9576);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 2876;
      doubleArray0[4] = (double) 2876;
      doubleArray0[5] = (double) 2876;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (-1661.3);
      doubleArray0[8] = (double) 2876;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2876.0, 76, 2876.0);
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {(-1.0), (-360.9576), (-1.0), 2876.0, 2876.0, 2876.0, (-1.0), (-1661.3), 2876.0}, doubleArray0, 0.01);
      
      Integer[] integerArray2 = ArrayUtils.addAll(integerArray1, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      short[] shortArray0 = new short[0];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-415);
      doubleArray0[1] = (double) (-415);
      ArrayUtils.shift(doubleArray0, 1569, (-2266), (-2823));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-415.0), (-415.0)}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 4117, (-2266));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false}, booleanArray0));
      
      Random.setNextRandom(4117);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      ArrayUtils.swap(booleanArray1, 1, (-2146242326), 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)6;
      Integer integer0 = new Integer((-4050));
      assertNotNull(integer0);
      assertEquals((-4050), (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'r');
      assertNotNull(bitSet0);
      assertEquals(8, charArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'r', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)76;
      objectArray0[2] = (Object) (byte)76;
      objectArray0[3] = (Object) (byte)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals(4, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1L);
      longArray1[1] = (long) 1;
      long[] longArray2 = ArrayUtils.insert(1, longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(7, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(9, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 1L}, longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-58);
      intArray0[1] = (-58);
      intArray0[2] = (-58);
      intArray0[3] = (-58);
      intArray0[4] = (-58);
      intArray0[5] = (-58);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2, (-58));
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {(-58), (-58), (-58), (-58), (-58), (-58)}, intArray0);
      
      Integer[] integerArray0 = new Integer[2];
      Long long0 = new Long((-58));
      assertNotNull(long0);
      assertEquals((-58L), (long)long0);
      
      Long long1 = new Long((-122L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-122L), (long)long1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)44;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-93), (byte) (-93), (byte)44}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-93), (byte) (-93), (byte)44}, byteArray0);
      
      ArrayUtils.shift((Object[]) integerArray0, (-58), (int) (byte)44, (-874));
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)2460;
      doubleArray0[1] = (double) (byte)42;
      doubleArray0[2] = (double) 84;
      doubleArray0[3] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, 61, 0, (-724));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2460.0, 42.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((short)2460);
      assertNotNull(integer0);
      assertEquals(2460, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray0, (-815), 0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray2.length);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = 'Q';
      charArray0[2] = 'V';
      charArray0[3] = 'Q';
      charArray0[4] = 'e';
      ArrayUtils.reverse(charArray0, 113, 84);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'V', 'Q', 'V', 'Q', 'e'}, charArray0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(1222.14109299);
      assertNotNull(float0);
      assertEquals(1222.1411F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1666.0F));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1222.1411F, 1222.1411F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = ';';
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-564L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-564L), (long)long2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) ';';
      floatArray0[1] = (float) ';';
      floatArray0[2] = (float) 1853L;
      floatArray0[3] = (float) (-564L);
      floatArray0[4] = (float) ';';
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-770.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {59.0F, 59.0F, 1853.0F, (-564.0F), 59.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {59.0F, 59.0F, 1853.0F, (-564.0F), 59.0F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1853L;
      doubleArray0[1] = (double) ';';
      doubleArray0[2] = (double) 59.0F;
      doubleArray0[3] = (double) 1853L;
      doubleArray0[4] = (double) 1853.0F;
      doubleArray0[5] = (double) ';';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-564.0F));
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {1853.0, 59.0, 59.0, 1853.0, 1853.0, 59.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, true}, booleanArray1));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(2145680555, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      int[] intArray2 = ArrayUtils.insert((-96), intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte)1;
      ArrayUtils.reverse(shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short) (-1), (short) (-1), (short)0, (short)1, (short)0, (short)0}, shortArray0);
      
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[9];
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short) (-1);
      longArray0[4] = (long) (short) (-1);
      longArray0[5] = (long) (byte) (-1);
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) (short) (-1);
      longArray0[8] = (long) (short)0;
      Integer integer1 = new Integer((-1373));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1373), (int)integer1);
      
      Integer integer2 = new Integer(53);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(53, (int)integer2);
      
      Integer integer3 = new Integer(32);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(32, (int)integer3);
      
      boolean boolean0 = ArrayUtils.isSameType(integer2, integer3);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(boolean0);
      
      ArrayUtils.reverse(doubleArray1, 2146246618, (int) (byte) (-1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, longArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1L), (-1L), (-1L), 0L, (-1L), 0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1925), (-36));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1L), (-1L), (-1L), 0L, (-1L), 0L}, longArray0);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)2);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray0, (float) (-1925));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1925.0F)}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) null);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "");
      assertNotNull(stringArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, stringArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((-1), 685);
      assertNotNull(intStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte) (-75);
      ArrayUtils.swap(byteArray0, (-1), (int) (byte) (-75), 685);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75)}, byteArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) null);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "");
      assertNotNull(stringArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, stringArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((-1), 685);
      assertNotNull(intStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      ArrayUtils.swap(byteArray0, (-1), (int) (byte)0, 685);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)99;
      ArrayUtils.shift(byteArray0, (-2144278447));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)99, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = '\\';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'I', 'I', '\\'}, charArray0);
      
      Integer integer0 = new Integer((-2144278447));
      assertNotNull(integer0);
      assertEquals((-2144278447), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals((-2144278447), object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertEquals((-2144278447), object1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1925);
      longArray0[1] = (-2000L);
      longArray0[2] = (long) (-2144278447);
      longArray0[3] = (long) 'I';
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)99, 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1925L), (-2000L), (-2144278447L), 73L}, longArray0);
      
      byte[] byteArray1 = ArrayUtils.add((byte[]) null, (byte) (-16));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-16)}, byteArray1);
      
      ArrayUtils.swap(byteArray1, (-1106), (-1106), 120);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-16)}, byteArray1);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-105);
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '9';
      charArray0[2] = 'u';
      charArray0[3] = 'Y';
      charArray0[4] = '~';
      charArray0[5] = 'Y';
      charArray0[6] = 't';
      charArray0[7] = '/';
      charArray0[8] = 'H';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'8', '9', 'u', 'Y', '~', 'Y', 't', '/', 'H'}, charArray0);
      assertArrayEquals(new char[] {'8', '9', 'u', 'Y', '~', 'Y', 't', '/', 'H'}, charArray1);
      
      Double double0 = new Double(2.147483647E9);
      assertNotNull(double0);
      assertEquals(2.147483647E9, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2444.0493697015827));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) integer0, (int) (short) (-105));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 61;
      ArrayUtils.shift(doubleArray0, 0, 61, (int) (short)1796);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {61.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((short)2460);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2460, (int)integer1);
      
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(480);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(480, (int)integer2);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray1, 61, 2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertEquals(3, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertEquals(0, integerArray2.length);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-82);
      ArrayUtils.shift(byteArray0, (-1337), 0, 480);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-82)}, byteArray0);
      
      ArrayUtils.reverse((Object[]) integerArray1, 5214, (int) (byte) (-82));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertEquals(3, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-82));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-48)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-82)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 91;
      intArray0[1] = 2765;
      intArray0[2] = (-2148);
      intArray0[3] = (-70);
      intArray0[4] = (-504);
      intArray0[5] = (-1615);
      intArray0[6] = 47;
      intArray0[7] = 84;
      intArray0[8] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 6);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(10, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {91, 2765, (-2148), (-70), (-504), (-1615), 47, 84, 0}, intArray0);
      assertArrayEquals(new int[] {6, 91, 2765, (-2148), (-70), (-504), (-1615), 47, 84, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 91;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (byte) (-1), (-1), (int) (byte) (-1));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[6];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-1);
      mockRandom0.nextBytes(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) mockRandom0;
      objectArray0[3] = (Object) mockRandom0;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      assertSame(object0, mockRandom0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockRandom0;
      ArrayUtils.shift(objectArray0, (int) (byte) (-1), (-447), 12);
      assertEquals(6, objectArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[4]);
      assertEquals(6, objectArray0.length);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 35.99314179645;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(12, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(12, doubleArray0.length);
      assertEquals(12, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertSame(doubleArray2, doubleArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 27.0F;
      floatArray0[1] = 27.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 660.6966F;
      floatArray0[4] = 27.0F;
      floatArray0[5] = 1203.9257F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-1622.135F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {27.0F, 27.0F, (-1.0F), 660.6966F, 27.0F, 1203.9257F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {27.0F, 27.0F, (-1.0F), 660.6966F, 27.0F, 1203.9257F}, floatArray1, 0.01F);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 660.6966F;
      objectArray0[1] = (Object) 27.0F;
      objectArray0[2] = (Object) 1203.9257F;
      objectArray0[3] = (Object) 660.6966F;
      objectArray0[4] = (Object) 27.0F;
      objectArray0[5] = (Object) 27.0F;
      objectArray0[6] = (Object) 660.6966F;
      objectArray0[7] = (Object) 35.99314179645;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[5]);
      assertEquals(8, objectArray0.length);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, 835, 835, 835);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1256);
      assertNotNull(integer0);
      assertEquals(1256, (int)integer0);
      
      integerArray0[0] = integer0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      ArrayUtils.swap(byteArray0, (-3526), 2010, (-1073741823));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-80);
      intArray0[1] = (-790);
      intArray0[2] = (-3526);
      intArray0[3] = (int) integerArray0[0];
      intArray0[4] = 1256;
      intArray0[5] = 22;
      intArray0[6] = 22;
      intArray0[7] = (-790);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-80), (-790), (-3526), 1256, 1256, 22, 22, (-790)}, intArray1);
      assertArrayEquals(new int[] {(-80), (-790), (-3526), 1256, 1256, 22, 22, (-790)}, intArray0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-80));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-80)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      ArrayUtils.shift((char[]) null, 126);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert(564, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) integerArray0);
      assertEquals(1, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, 54);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 9L;
      objectArray0[1] = null;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (float) 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(7, classArray1.length);
      assertEquals(7, classArray0.length);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 9L, 1284, (double) 1284);
      assertFalse(int1 == int0);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) classArray1);
      assertEquals(3, objectArray0.length);
      assertEquals(7, classArray1.length);
      assertEquals(7, classArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '8';
      charArray0[1] = 'N';
      charArray0[2] = 'f';
      charArray0[3] = '8';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'8', 'N', 'f', '8'}, charArray0);
      assertArrayEquals(new char[] {'8', 'N', 'f', '8'}, charArray1);
      
      Double double0 = new Double((byte)48);
      assertNotNull(double0);
      assertEquals(48.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[3]);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {48.0, 48.0, 48.0, 48.0, 48.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) null, 253);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3905;
      shortArray0[1] = (short) (byte)0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (byte)0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.clone(abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'R');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      Object object0 = null;
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      ArrayUtils.swap(booleanArray1, (int) ';', (-2146242326), 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      int int1 = ArrayUtils.indexOf(charArray0, '\"');
      assertFalse(int1 == int0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'r', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom(';');
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[7];
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2815.7;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-6231.275942);
      doubleArray0[3] = 2815.7;
      doubleArray0[4] = (-1730.0);
      doubleArray0[5] = (-3344.061885844);
      doubleArray0[6] = (-1730.0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2144249485);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'G';
      charArray0[2] = 'X';
      charArray0[3] = 'a';
      charArray0[4] = '/';
      charArray0[5] = 'f';
      ArrayUtils.shuffle(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'G', 'X', 'a', '/', 'f', 'w'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      long[] longArray0 = new long[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-11);
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)0);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) (byte)0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, (long) (byte)0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {}, longArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray1);
      assertNotNull(stringArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, stringArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean2 = ArrayUtils.contains((double[]) null, (double) (byte) (-122));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'J';
      charArray0[1] = 'F';
      charArray0[2] = 'L';
      charArray0[3] = '[';
      charArray0[4] = 'a';
      charArray0[5] = 'e';
      charArray0[6] = 'e';
      charArray0[7] = 'x';
      int int2 = ArrayUtils.lastIndexOf(charArray0, 'e', 2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'J', 'F', 'L', '[', 'a', 'e', 'e', 'x'}, charArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-108));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      float[] floatArray0 = new float[13];
      ArrayUtils.shift(floatArray0, 174);
      assertEquals(13, floatArray0.length);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 174, 174);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short)457;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[6] = (short) (byte) (-1);
      shortArray0[7] = (short) (byte) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)457, (short)0, (short)0, (short)0, (short) (-1), (short) (-1)}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.insert((int) (short)0, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)453, (int) (short) (-1));
      assertEquals(8, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)457, (short)0, (short)0, (short)0, (short) (-1), (short) (-1)}, shortArray0);
      
      ArrayUtils.swap(doubleArray0, (int) (byte) (-1), (-1), (int) (byte) (-1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 50;
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (short) (-1);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = (int) (byte) (-1);
      intArray1[2] = (int) (short)457;
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 669, (-2818));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 35.99314179645;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(12, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 695, 695);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)20);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-1407);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-3190L);
      longArray0[1] = 698L;
      ArrayUtils.shuffle(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {698L, (-3190L)}, longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 698L;
      doubleArray0[2] = (double) (short) (-1407);
      doubleArray0[3] = (double) (short) (-1407);
      doubleArray0[4] = (double) (short) (-1407);
      doubleArray0[5] = (double) (-3190L);
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {698.0, (-1407.0), (-1407.0), (-1407.0), (-3190.0), 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSorted((long[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      char[] charArray1 = ArrayUtils.add(charArray0, '+');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertArrayEquals(new char[] {'+', '+'}, charArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte) (-10);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short) (-1407), (int) (byte)9);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-85), (byte)10, (byte)9, (byte)108, (byte) (-96), (byte) (-46), (byte) (-10)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-85), (byte)10, (byte)9, (byte)108, (byte) (-96), (byte) (-46), (byte) (-10)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      int[] intArray0 = new int[20];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(20, intArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-43);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1), 2005);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-43)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-43)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)0);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeElements((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-58);
      intArray0[1] = (-58);
      intArray0[2] = (-58);
      intArray0[3] = (-58);
      intArray0[4] = (-58);
      intArray0[3] = (-58);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2, (-58));
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new int[] {(-58), (-58), (-58), (-58), (-58), 0}, intArray0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-58);
      Long long0 = new Long((-58));
      assertNotNull(long0);
      assertEquals((-58L), (long)long0);
      
      Long[] longArray0 = new Long[6];
      Long long1 = new Long((-122L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-122L), (long)long1);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-58), (-58), (-58), (-58), (-58), 0}, intArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) null);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(6, longArray0.length);
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet1.toString());
      assertEquals(6, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(6, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) null, 122);
      assertEquals(2, integerArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)86;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 669, (-1343));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)1, (byte)98, (byte)55, (byte)86}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) ';';
      doubleArray0[1] = (double) ';';
      doubleArray0[2] = (double) 'r';
      doubleArray0[3] = (double) 'r';
      doubleArray0[4] = (double) 'r';
      doubleArray0[5] = (double) ';';
      long[] longArray0 = new long[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) ';', 1);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 53;
      intArray0[1] = (int) 'r';
      intArray0[2] = (int) ';';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 109);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(3, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {109, 53, 114, 59}, intArray1);
      assertArrayEquals(new int[] {53, 114, 59}, intArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 109);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {59.0, 59.0, 114.0, 114.0, 114.0, 59.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {59.0, 59.0, 114.0, 114.0, 114.0, 59.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray2 = ArrayUtils.clone(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertEquals(3, intArray2.length);
      assertEquals(3, intArray0.length);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {53, 114, 59}, intArray2);
      assertArrayEquals(new int[] {53, 114, 59}, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-4509);
      shortArray0[1] = (short) (-1620);
      shortArray0[2] = (short) (-1839);
      shortArray0[3] = (short)90;
      shortArray0[4] = (short) (-54);
      shortArray0[5] = (short)90;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short) (-1839), (int) (short)90);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new short[] {(short) (-4509), (short) (-1620), (short) (-1839), (short)90, (short) (-54), (short)90}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte)1;
      ArrayUtils.reverse(shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short) (-1), (short) (-1), (short)0, (short)1, (short)0, (short) (-1)}, shortArray0);
      
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[9];
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = (long) (short) (-1);
      longArray0[4] = (long) (short) (-1);
      longArray0[5] = (long) (byte) (-1);
      longArray0[6] = (long) (short) (-1);
      longArray0[7] = (long) (short) (-1);
      longArray0[8] = (long) (short)0;
      Integer integer1 = new Integer((-1373));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1373), (int)integer1);
      
      Integer integer2 = new Integer(53);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(53, (int)integer2);
      
      Integer integer3 = new Integer(32);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(32, (int)integer3);
      
      boolean boolean0 = ArrayUtils.isSameType(integer2, integer3);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(boolean0);
      
      ArrayUtils.reverse(doubleArray1, 2146246618, (int) (byte) (-1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, longArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {0L, 0L, (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), 0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1925), (-36));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), 0L}, longArray0);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)2);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-58);
      intArray0[1] = (-58);
      intArray0[2] = (-58);
      intArray0[3] = (-58);
      intArray0[4] = (-58);
      intArray0[5] = (-58);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2, (-58));
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {(-58), (-58), (-58), (-58), (-58), (-58)}, intArray0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-58);
      Long long0 = new Long((-58));
      assertNotNull(long0);
      assertEquals((-58L), (long)long0);
      
      Long[] longArray0 = new Long[6];
      Long long1 = new Long((-122L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-122L), (long)long1);
      
      longArray0[0] = long1;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      longArray0[5] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-122L), (-58L), (-58L), (-58L), (-58L), (-58L)}, longArray1);
      
      ArrayUtils.shift((Object[]) integerArray0, (-58));
      assertEquals(2, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-58), (-58), (-58), (-58), (-58), (-58)}, intArray0);
      
      short[] shortArray0 = ArrayUtils.insert((-2146875984), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray1, (long) (-58));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(6, bitSet1.length());
      assertEquals("{1, 2, 3, 4, 5}", bitSet1.toString());
      assertEquals(5, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {(-122L), (-58L), (-58L), (-58L), (-58L), (-58L)}, longArray1);
      
      short[] shortArray1 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 0.0, 1.0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-33);
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte) (-33)}, byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-33)}, byteArray0);
      
      MockRandom mockRandom0 = new MockRandom((byte) (-33));
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 667;
      floatArray0[1] = 1223.14F;
      floatArray0[2] = (float) (byte) (-33);
      floatArray0[3] = (float) 'z';
      floatArray0[4] = (float) 667;
      floatArray0[5] = (float) 'z';
      floatArray0[6] = (float) '[';
      floatArray0[7] = (float) '{';
      ArrayUtils.shift(floatArray0, (-77), 2146340530, (-1203));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {122.0F, 667.0F, 122.0F, 91.0F, 123.0F, 667.0F, 1223.14F, (-33.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.reverse((double[]) null, 1, 2537);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-58);
      intArray0[1] = (-58);
      intArray0[2] = (-58);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-58), (-58), (-58), 0, 0, 0}, intArray0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.shift((boolean[]) null, (-58), 2044, (-58));
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-58), (-58), (-58), 0, 0, 0}, intArray0);
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-66);
      byteArray2[1] = (byte) (-39);
      byteArray2[2] = (byte) (-10);
      byteArray2[3] = (byte)121;
      byteArray2[4] = (byte)3;
      byteArray2[5] = (byte) (-1);
      byteArray2[6] = (byte) (-44);
      byteArray2[7] = (byte) (-88);
      byte[] byteArray3 = ArrayUtils.remove(byteArray2, 2);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      assertEquals(7, byteArray3.length);
      assertEquals(8, byteArray2.length);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-39), (byte)121, (byte)3, (byte) (-1), (byte) (-44), (byte) (-88)}, byteArray3);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-39), (byte) (-10), (byte)121, (byte)3, (byte) (-1), (byte) (-44), (byte) (-88)}, byteArray2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'I';
      charArray0[2] = 'n';
      charArray0[3] = 'r';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (int) (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1584L));
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-663);
      intArray0[1] = 2146340530;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (-770);
      int int1 = ArrayUtils.lastIndexOf((char[]) null, '$', 174);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      MutableInt mutableInt0 = new MutableInt((-770));
      assertNotNull(mutableInt0);
      assertEquals((short) (-770), mutableInt0.shortValue());
      assertEquals((-770), mutableInt0.intValue());
      assertEquals((-770L), mutableInt0.longValue());
      assertEquals((byte) (-2), mutableInt0.byteValue());
      assertEquals((-770.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-770", mutableInt0.toString());
      assertEquals((-770), (int)mutableInt0.toInteger());
      assertEquals((-770), (int)mutableInt0.getValue());
      assertEquals((-770.0F), mutableInt0.floatValue(), 0.01F);
      
      int int2 = mutableInt0.decrementAndGet();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-771.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-771), mutableInt0.shortValue());
      assertEquals((-771L), mutableInt0.longValue());
      assertEquals((-771.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-771), (int)mutableInt0.toInteger());
      assertEquals((-771), (int)mutableInt0.getValue());
      assertEquals((-771), mutableInt0.intValue());
      assertEquals("-771", mutableInt0.toString());
      assertEquals((byte) (-3), mutableInt0.byteValue());
      assertEquals((-771), int2);
      
      Integer integer0 = mutableInt0.toInteger();
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals((-771.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-771), mutableInt0.shortValue());
      assertEquals((-771L), mutableInt0.longValue());
      assertEquals((-771.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-771), (int)mutableInt0.toInteger());
      assertEquals((-771), (int)mutableInt0.getValue());
      assertEquals((-771), mutableInt0.intValue());
      assertEquals("-771", mutableInt0.toString());
      assertEquals((byte) (-3), mutableInt0.byteValue());
      assertEquals((-771), (int)integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) (-663);
      integerArray0[2] = (Integer) 2146340530;
      Integer integer1 = ArrayUtils.get(integerArray0, 70, (Integer) 2146340530);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      assertEquals(2146340530, (int)integer1);
      
      Integer integer2 = new Integer(2);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) null, (Object) integer2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = 9L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 9L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 54;
      ArrayUtils.shift((boolean[]) null, 0, 54, (-1456));
      ArrayUtils.shift(intArray0, 2, 0, 5);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {54, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1939);
      shortArray0[1] = (short) (-1873);
      shortArray0[2] = (short) (-3270);
      shortArray0[3] = (short) (-2624);
      shortArray0[4] = (short) (-3270);
      shortArray0[5] = (short)2;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-663), (-1669));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1939), (short) (-1873), (short) (-3270), (short) (-2624), (short) (-3270), (short)2}, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)89}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte)1;
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte)1;
      ArrayUtils.reverse(shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short) (-1), (short) (-1), (short)0, (short)0, (short)0, (short) (-1)}, shortArray0);
      
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Boolean[] booleanArray1 = new Boolean[5];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray1[2] = boolean1;
      booleanArray1[4] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(5, booleanArray2.length);
      assertEquals(5, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray2));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      charArray0[1] = 'q';
      charArray0[2] = 'i';
      charArray0[3] = 'r';
      charArray0[4] = '2';
      int[] intArray0 = new int[8];
      intArray0[0] = (-3383);
      intArray0[1] = (int) 'q';
      intArray0[2] = 93;
      intArray0[3] = (int) 'q';
      intArray0[4] = (int) 'i';
      intArray0[5] = 45;
      intArray0[6] = (int) 'r';
      intArray0[7] = (int) (short)1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 114, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, (-922));
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (byte)42;
      shortArray0[2] = (short) (byte)42;
      shortArray0[4] = (short)2460;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)42);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)42, (short)42, (short)0, (short)2460}, shortArray0);
      assertArrayEquals(new short[] {(short)42, (short) (-1), (short)42, (short)42, (short)0, (short)2460}, shortArray1);
      
      Integer integer0 = new Integer((-1817));
      assertNotNull(integer0);
      assertEquals((-1817), (int)integer0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short)0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integerArray0[6]);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(8, integerArray1.length);
      assertEquals(7, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-1347), (int) (byte)42, (int) (byte)42);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((double) integerArray0[6]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(double0);
      assertEquals(7, integerArray0.length);
      assertEquals((-1817.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1337.5026468931121));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1337.5026468931121), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) integerArray0[1]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(7, integerArray0.length);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals((-1.0), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[1]);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1337.5026468931121), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(2851.337646484375);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      assertEquals(2851.337646484375, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-1046.5));
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotNull(double6);
      assertEquals((-1046.5), (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((-1046.5));
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertEquals((double)double7, (double)double6, 0.01);
      assertNotNull(double7);
      assertEquals((-1046.5), (double)double7, 0.01);
      
      doubleArray0[7] = double7;
      Double double8 = new Double((double) doubleArray0[6]);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertEquals((double)double8, (double)double7, 0.01);
      assertNotNull(double8);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1046.5), (double)double8, 0.01);
      
      doubleArray0[8] = double8;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {(-1817.0), (-1337.5026468931121), 0.0, (-1.0), (-1337.5026468931121), 2851.337646484375, (-1046.5), (-1046.5), (-1046.5)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1256);
      assertNotNull(integer0);
      assertEquals(1256, (int)integer0);
      
      integerArray0[0] = integer0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      ArrayUtils.swap(byteArray0, (-3526), 2010, (-1073741823));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-80);
      intArray0[1] = (-790);
      intArray0[2] = (-3526);
      intArray0[3] = (int) integerArray0[0];
      intArray0[4] = 1256;
      intArray0[5] = 22;
      intArray0[6] = 22;
      intArray0[7] = (-790);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-80), (-790), (-3526), 1256, 1256, 22, 22, (-790)}, intArray1);
      assertArrayEquals(new int[] {(-80), (-790), (-3526), 1256, 1256, 22, 22, (-790)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1948;
      Object[] objectArray0 = new Object[1];
      int int0 = 2;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 109);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1948, 0}, intArray0);
      assertArrayEquals(new int[] {1948, 0}, intArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 47L;
      longArray0[1] = (long) 109;
      ArrayUtils.swap(longArray0, (-3901), 1073741824, 2146171807);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {47L, 109L}, longArray0);
      
      ArrayUtils.swap(objectArray0, (-415), (-1571), 1647);
      assertEquals(1, objectArray0.length);
      
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1948;
      intArray2[1] = 2146171807;
      intArray2[2] = 2;
      intArray2[3] = 275;
      intArray2[4] = 109;
      intArray2[5] = 1647;
      int[] intArray3 = ArrayUtils.removeElement(intArray2, 1073741824);
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray3);
      assertEquals(6, intArray3.length);
      assertEquals(6, intArray2.length);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertArrayEquals(new int[] {1948, 2146171807, 2, 275, 109, 1647}, intArray3);
      assertArrayEquals(new int[] {1948, 2146171807, 2, 275, 109, 1647}, intArray2);
      
      try { 
        Integer.valueOf(")KtlN");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \")KtlN\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short) (-1407);
      ArrayUtils.reverse(shortArray0, (int) (short)3, (int) (short)3);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)3, (short) (-1407)}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2206.97F);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-2206.97F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2335.12F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 2140.0F;
      ArrayUtils.shift(floatArray0, (-149), 139, (-149));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {2140.0F, (-2335.12F), 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-1475), 1601, (-1503));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray0);
      assertNotNull(stringArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short)710;
      shortArray0[2] = (short)3;
      ArrayUtils.shift(shortArray0, 1, 2, 68);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1136, (short)710, (short)3}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-6));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'T';
      doubleArray0[1] = 1069.3;
      doubleArray0[2] = (double) 'T';
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) 'T';
      int int0 = ArrayUtils.indexOf(doubleArray0, 84.0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {84.0, 1069.3, 84.0, 0.0, 84.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (byte)0);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertTrue(boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      ArrayUtils.swap((float[]) null, (-661), (-6068), 61);
      long[] longArray0 = new long[4];
      longArray0[0] = 1940L;
      longArray0[1] = (long) '8';
      longArray0[2] = 0L;
      longArray0[3] = (-335L);
      ArrayUtils.shift(longArray0, 61, (-1337), (-738));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1940L, 56L, 0L, (-335L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0, 2621);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      
      ArrayUtils.swap((byte[]) null, (-1), 0, 245);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 22;
      intArray1[1] = (-2146523664);
      intArray1[2] = (-1);
      intArray1[3] = (-1);
      intArray1[4] = 2621;
      int[] intArray2 = ArrayUtils.clone(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray2.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {22, (-2146523664), (-1), (-1), 2621}, intArray1);
      assertArrayEquals(new int[] {22, (-2146523664), (-1), (-1), 2621}, intArray2);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      Integer integer0 = new Integer(1501);
      assertNotNull(integer0);
      assertEquals(1501, (int)integer0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-66);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-66), (int) (byte) (-51));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)64, (byte) (-51), (byte) (-66)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      ArrayUtils.swap(byteArray1, (int) (byte) (-51), (int) (byte) (-66), 7);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)64, (byte) (-51), (byte) (-66)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 2;
      floatArray0[6] = (-1.0F);
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MAX_VALUE;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)100;
      shortArray0[2] = (short) (byte)100;
      shortArray0[3] = (short)1190;
      shortArray0[4] = (short) (byte)100;
      shortArray0[6] = (short) (byte)100;
      ArrayUtils.swap(shortArray0, (-2144249485), 2159, (int) (short)1190);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)100, (short)0, (short)100, (short)1190, (short)100, (short)0, (short)100}, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)100;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)100, (byte) (-109), (byte) (-93), (byte)81, (byte)100}, byteArray1);
      assertArrayEquals(new byte[] {(byte)100, (byte) (-109), (byte) (-93), (byte)81, (byte)100}, byteArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (-341.24F);
      floatArray0[3] = 2.0F;
      floatArray0[4] = (float) (byte)100;
      floatArray0[5] = (float) (byte)81;
      floatArray0[6] = (float) (short)100;
      floatArray0[7] = (float) (short)100;
      floatArray0[8] = (float) Integer.MAX_VALUE;
      float[] floatArray1 = ArrayUtils.insert(7, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, (-341.24F), 2.0F, 100.0F, 81.0F, 100.0F, 100.0F, 2.14748365E9F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (-1));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, 1L);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1L, 82);
      assertTrue(int1 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      long[] longArray0 = new long[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-36);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 925L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte) (-24));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 0.0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-24);
      floatArray0[1] = (float) 925L;
      floatArray0[2] = (float) (byte) (-24);
      Short short0 = new Short((byte) (-24));
      assertNotNull(short0);
      assertEquals((short) (-24), (short)short0);
      
      Short short1 = new Short((byte) (-36));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-36), (short)short1);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte) (-36));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)99;
      ArrayUtils.shift(byteArray0, (-2144278447));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)99, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'I', '\\', '\\'}, charArray0);
      
      Integer integer0 = new Integer((-2144278447));
      assertNotNull(integer0);
      assertEquals((-2144278447), (int)integer0);
      
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte)0, (byte)99, (byte)0}, byteArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) 'I';
      floatArray0[3] = (float) 'I';
      floatArray0[4] = 2.0F;
      floatArray0[5] = (float) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-234.23506F), (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(6, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {0.0F, 0.0F, 73.0F, 73.0F, 2.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 73.0F;
      doubleArray0[1] = (double) 0.0F;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {73.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2815.7;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-6231.275942);
      doubleArray0[3] = 2815.7;
      doubleArray0[4] = (-1730.0);
      doubleArray0[5] = (-3344.061885844);
      doubleArray0[6] = (-1730.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1730.0), (-1730.0));
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {2815.7, (-1.0), (-6231.275942), 2815.7, (-1730.0), (-3344.061885844), (-1730.0), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[1] = (-1651);
      intArray0[2] = 34;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, (-1651), 34}, intArray0);
      
      Integer[] integerArray0 = new Integer[1];
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) null);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(1, integerArray0.length);
      assertEquals(64, bitSet1.size());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) null, (-1651));
      assertEquals(1, integerArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3171, (-1651));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 0, 114.0);
      assertFalse(int1 == int0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, int1);
      assertArrayEquals(new double[] {2815.7, (-1.0), (-6231.275942), 2815.7, (-1730.0), (-3344.061885844), (-1730.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)2460;
      doubleArray0[1] = (double) (byte)42;
      doubleArray0[2] = (double) 84;
      doubleArray0[3] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, 61, 0, (-724));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2460.0, 42.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)42;
      intArray0[2] = (int) (short)0;
      intArray0[3] = 61;
      intArray0[4] = (-724);
      intArray0[5] = 84;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 42, 0, 61, (-724), 84}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-4358);
      intArray0[1] = (-4358);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-4358), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4358, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 2, 2349, (int) (byte) (-1));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((byte) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      byte byte0 = (byte) (-70);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-70));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2876;
      Integer integer1 = new Integer((byte) (-1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      int int0 = (-499);
      int[] intArray0 = new int[2];
      intArray0[0] = 2847;
      intArray0[1] = 3817;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-1), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, (int) (byte)42);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      Integer integer0 = new Integer((byte)42);
      assertNotNull(integer0);
      assertEquals(42, (int)integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[0] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)2460;
      intArray0[1] = (int) (byte)42;
      ArrayUtils.shift(intArray0, (-1347), (int) integerArray0[0], (int) integerArray0[0]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(5, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new int[] {2460, 42, 0}, intArray0);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertSame(shortArray0, shortArray2);
      assertSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray2);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      int[] intArray0 = new int[4];
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)100;
      ArrayUtils.reverse(byteArray0);
      assertEquals(11, byteArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) (byte)100;
      floatArray0[2] = (float) (byte)100;
      floatArray0[4] = (float) 22;
      floatArray0[6] = (float) (byte)100;
      floatArray0[7] = (float) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 100.0F, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(8, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{1, 2, 6}", bitSet0.toString());
      assertArrayEquals(new float[] {0.0F, 100.0F, 100.0F, 0.0F, 22.0F, 0.0F, 100.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      Integer integer0 = new Integer((-2146305006));
      assertNotNull(integer0);
      assertEquals((-2146305006), (int)integer0);
      
      Integer integer1 = new Integer(83);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(83, (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer0);
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(integer0.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(15).when(comparator0).compare(any(java.util.AbstractMap.SimpleImmutableEntry.class) , any(java.util.AbstractMap.SimpleImmutableEntry.class));
      boolean boolean0 = ArrayUtils.isSorted(abstractMap_SimpleImmutableEntryArray0, comparator0);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = null;
      integerArray0[1] = null;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(7, integerArray0.length);
      assertEquals(14, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)2460;
      doubleArray0[1] = (double) (byte)42;
      doubleArray0[2] = (double) 84;
      doubleArray0[3] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, 61, 0, (-724));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2460.0, 42.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((short)2460);
      assertNotNull(integer0);
      assertEquals(2460, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray0, (-815), 37);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray2.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = 'Q';
      charArray0[2] = 'V';
      charArray0[3] = '.';
      charArray0[4] = 'e';
      ArrayUtils.reverse(charArray0, 113, 84);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'V', 'Q', 'V', '.', 'e'}, charArray0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(1222.14109299);
      assertNotNull(float0);
      assertEquals(1222.1411F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (-815));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-815.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1666.0F));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1222.1411F, (-815.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      float[] floatArray0 = new float[12];
      floatArray0[0] = (-720.0F);
      floatArray0[1] = 1.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1730.0);
      doubleArray0[1] = (-6231.275942);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-6231.275942), (double) (-720.0F));
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {(-1730.0), (-6231.275942)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1651);
      intArray0[1] = (-348);
      intArray0[2] = (-1651);
      intArray0[3] = (-1651);
      intArray0[4] = 34;
      intArray0[5] = 1532;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-1651), (-348), (-1651), (-1651), 34, 1532}, intArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1730.0);
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(1, objectArray0.length);
      assertEquals(64, bitSet1.size());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-348));
      assertEquals(1, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte) (-93));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(13, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Short[] shortArray0 = new Short[0];
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray0, (int) (short) (-451), (int) (short) (-451));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 59;
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(59);
      assertNotNull(double0);
      assertEquals(59.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 59);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {59.0}, doubleArray1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) doubleArray0, (Object) null);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) null, 1060);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 59L}, longArray0);
      assertArrayEquals(new long[] {0L, 59L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 41;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {41L, 0L, 0L}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray1, (Object) null);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals((-1), int0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'b';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'b', (-1216));
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertArrayEquals(new char[] {'x', 'b', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-11);
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)12, (int) (byte)12);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte)41, (byte)2, (byte)12, (byte) (-11)}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x', 2201);
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'x', 'b', '\u0000'}, charArray0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((byte)2);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {2.0, 2.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted((Integer[]) null, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      int[] intArray0 = new int[4];
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)100;
      ArrayUtils.reverse(byteArray0);
      assertEquals(11, byteArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) (byte)100;
      floatArray0[2] = (float) (byte)100;
      floatArray0[4] = (float) 22;
      floatArray0[6] = (float) (byte)100;
      floatArray0[7] = (float) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 100.0F, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(8, floatArray0.length);
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{1, 2, 6}", bitSet0.toString());
      assertArrayEquals(new float[] {0.0F, 100.0F, 100.0F, 0.0F, 22.0F, 0.0F, 100.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      Integer integer0 = new Integer((-2146305006));
      assertNotNull(integer0);
      assertEquals((-2146305006), (int)integer0);
      
      Integer integer1 = new Integer(83);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(83, (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer0);
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(integer0.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.util.AbstractMap.SimpleImmutableEntry.class) , any(java.util.AbstractMap.SimpleImmutableEntry.class));
      boolean boolean0 = ArrayUtils.isSorted(abstractMap_SimpleImmutableEntryArray0, comparator0);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-59), (-6043));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) (-2844);
      longArray0[2] = (long) (-6043);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[4] = (byte)48;
      byteArray0[2] = (byte) (-53);
      byteArray0[4] = (byte) (-53);
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-53), (byte)0, (byte) (-53)}, byteArray0);
      
      ArrayUtils.shift(longArray0, (int) (byte)0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2147483647L, (-2844L), (-6043L)}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 3294L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2147483647L, (-2844L), (-6043L)}, longArray0);
      assertArrayEquals(new long[] {2147483647L, (-2844L), (-6043L)}, longArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-53);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (long) (-6043), (int) (byte)0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(bitSet0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2147483647L, (-2844L), (-6043L)}, longArray0);
      assertArrayEquals(new long[] {2147483647L, (-2844L), (-6043L)}, longArray1);
      
      int[] intArray2 = ArrayUtils.addFirst(intArray1, (int) (byte)0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray2.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0}, intArray2);
      assertArrayEquals(new int[] {}, intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-6043);
      doubleArray0[1] = (double) (-6043);
      doubleArray0[2] = (double) (-6043);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (byte)48);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-6043.0), (-6043.0), (-6043.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-6043.0), (-6043.0), (-6043.0)}, doubleArray1, 0.01);
      
      int[] intArray3 = ArrayUtils.clone(intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotNull(intArray3);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray2.length);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray3.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0}, intArray2);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0}, intArray3);
      
      int[] intArray4 = ArrayUtils.removeElement(intArray2, (-2146305006));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertNotNull(intArray4);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray2.length);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray4.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray4);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray4);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0}, intArray2);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0}, intArray4);
      
      Integer integer0 = new Integer((-2844));
      assertNotNull(integer0);
      assertEquals((-2844), (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1417));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1417)}, intArray1);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-1417), (-1324));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) ';';
      doubleArray0[1] = (double) ';';
      doubleArray0[2] = (double) 'r';
      doubleArray0[3] = (double) 'r';
      doubleArray0[4] = (double) 'r';
      doubleArray0[5] = (double) ';';
      long[] longArray0 = new long[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, 1);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 53;
      intArray0[1] = (int) 'r';
      intArray0[2] = (int) ';';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 109);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(3, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {109, 53, 114, 59}, intArray1);
      assertArrayEquals(new int[] {53, 114, 59}, intArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 109);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {59.0, 59.0, 114.0, 114.0, 114.0, 59.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {59.0, 59.0, 114.0, 114.0, 114.0, 59.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray2 = ArrayUtils.clone(intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertEquals(3, intArray2.length);
      assertEquals(3, intArray0.length);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertArrayEquals(new int[] {53, 114, 59}, intArray2);
      assertArrayEquals(new int[] {53, 114, 59}, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-4509);
      shortArray0[1] = (short) (-1620);
      shortArray0[2] = (short) (-1839);
      shortArray0[3] = (short)90;
      shortArray0[4] = (short) (-54);
      shortArray0[5] = (short) (-6);
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short) (-1839), (int) (short) (-6));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(6, shortArray0.length);
      assertEquals(3, bitSet1.length());
      assertEquals("{2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new short[] {(short) (-4509), (short) (-1620), (short) (-1839), (short)90, (short) (-54), (short) (-6)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)67;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)42;
      shortArray0[1] = (short) (byte)67;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)42, (short)67}, shortArray0);
      assertArrayEquals(new short[] {(short)42, (short)67, (short)42, (short)67}, shortArray1);
      
      ArrayUtils.reverse((Object[]) integerArray0);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = 'o';
      charArray0[2] = '_';
      charArray0[3] = 'X';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o', (int) (byte)2);
      assertEquals(6, charArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'_', 'o', '_', 'X', '\u0000', '\u0000'}, charArray0);
      
      MutableInt mutableInt0 = new MutableInt((-504));
      assertNotNull(mutableInt0);
      assertEquals((byte)8, mutableInt0.byteValue());
      assertEquals((short) (-504), mutableInt0.shortValue());
      assertEquals((-504), (int)mutableInt0.toInteger());
      assertEquals((-504.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-504", mutableInt0.toString());
      assertEquals((-504), (int)mutableInt0.getValue());
      assertEquals((-504L), mutableInt0.longValue());
      assertEquals((-504), mutableInt0.intValue());
      assertEquals((-504.0F), mutableInt0.floatValue(), 0.01F);
      
      int int1 = mutableInt0.decrementAndGet();
      assertFalse(int1 == int0);
      assertEquals((-505.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-505), mutableInt0.shortValue());
      assertEquals("-505", mutableInt0.toString());
      assertEquals((byte)7, mutableInt0.byteValue());
      assertEquals((-505), (int)mutableInt0.getValue());
      assertEquals((-505), (int)mutableInt0.toInteger());
      assertEquals((-505), mutableInt0.intValue());
      assertEquals((-505L), mutableInt0.longValue());
      assertEquals((-505.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-505), int1);
      
      Integer integer0 = mutableInt0.toInteger();
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-505.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-505), mutableInt0.shortValue());
      assertEquals("-505", mutableInt0.toString());
      assertEquals((byte)7, mutableInt0.byteValue());
      assertEquals((-505), (int)mutableInt0.getValue());
      assertEquals((-505), (int)mutableInt0.toInteger());
      assertEquals((-505), mutableInt0.intValue());
      assertEquals((-505L), mutableInt0.longValue());
      assertEquals((-505.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-505), (int)integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (int) 2, integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, integerArray0.length);
      assertEquals((-505.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-505), mutableInt0.shortValue());
      assertEquals("-505", mutableInt0.toString());
      assertEquals((byte)7, mutableInt0.byteValue());
      assertEquals((-505), (int)mutableInt0.getValue());
      assertEquals((-505), (int)mutableInt0.toInteger());
      assertEquals((-505), mutableInt0.intValue());
      assertEquals((-505L), mutableInt0.longValue());
      assertEquals((-505.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-505), (int)integer1);
      
      ArrayUtils.swap(charArray0, 1, 1, 12);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'_', 'o', '_', 'X', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'b';
      charArray0[2] = '~';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'b', (-1216));
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new char[] {'x', 'b', '~'}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)2;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 231.58935037227707;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-1216);
      doubleArray0[4] = Double.NaN;
      ArrayUtils.shift(doubleArray0, (-2033), (-2033), 83);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {231.58935037227707, 0.0, 0.0, (-1216.0), Double.NaN}, doubleArray0, 0.01);
      
      ArrayUtils.shift(charArray0, 0, 0, 801);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'x', 'b', '~'}, charArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'x');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(2, charArray1.length);
      assertEquals(3, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'b', '~'}, charArray1);
      assertArrayEquals(new char[] {'x', 'b', '~'}, charArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)41;
      shortArray0[1] = (short) (byte)41;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)41;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)41);
      assertEquals(4, shortArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new short[] {(short)41, (short)41, (short)2, (short)41}, shortArray0);
      
      Object[] objectArray0 = new Object[0];
      Integer integer0 = new Integer((-2146875984));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2146875984), (int)integer0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, (Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(0, objectArray0.length);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'm';
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1872.0), 848, (-1872.0));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'm'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'm'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[2] = (double) ';';
      doubleArray0[3] = 652.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 'r';
      doubleArray0[6] = (double) ';';
      int int1 = ArrayUtils.indexOf(doubleArray0, 2523.050213723434, Integer.MAX_VALUE);
      assertFalse(int1 == int0);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {0.0, 0.0, 59.0, 652.0, 0.0, 114.0, 59.0}, doubleArray0, 0.01);
      
      int int2 = ArrayUtils.indexOf(booleanArray1, true, 1600);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals((-1), int2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-1173);
      longArray0[1] = (long) 'r';
      longArray0[2] = (long) 'r';
      longArray0[3] = (long) 'r';
      longArray0[4] = (long) ';';
      longArray0[5] = (long) (short)1713;
      longArray0[7] = (-1L);
      int int1 = ArrayUtils.indexOf(longArray0, (long) (short) (-1173), (-59));
      assertTrue(int1 == int0);
      assertEquals(8, longArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new long[] {(-1173L), 114L, 114L, 114L, 59L, 1713L, 0L, (-1L)}, longArray0);
      
      int int2 = ArrayUtils.lastIndexOf(longArray0, 114L, (-1769));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, longArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new long[] {(-1173L), 114L, 114L, 114L, 59L, 1713L, 0L, (-1L)}, longArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, characterArray0.length);
      assertArrayEquals(new char[] {'r', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short)457;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[6] = (short) (byte) (-1);
      shortArray0[7] = (short) (byte) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)457, (short)0, (short)0, (short)0, (short) (-1), (short) (-1)}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.insert((int) (short)0, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)453, (int) (short) (-1));
      assertEquals(8, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)457, (short)0, (short)0, (short)0, (short) (-1), (short) (-1)}, shortArray0);
      
      ArrayUtils.swap(doubleArray0, (int) (byte) (-1), (int) (byte)0, (int) (byte) (-1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 50;
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (short) (-1);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = (int) (byte) (-1);
      intArray1[2] = (int) (short)457;
      intArray1[3] = (int) (byte)0;
      intArray1[4] = 50;
      int[] intArray2 = ArrayUtils.clone(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {50, (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {50, (-1), (-1)}, intArray2);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, 189.897390886183, (-1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int1 == int0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals((-1), int1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      float[] floatArray0 = new float[13];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(13, floatArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[2] = 3519L;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 577);
      assertEquals(13, floatArray0.length);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, (Object) null);
      assertNull(integerArray0);
      
      ArrayUtils.shift(floatArray0, 577, Integer.MAX_VALUE, (-3558));
      assertEquals(13, floatArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      short short0 = (short)50;
      Short short1 = new Short((short)50);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)50, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short) (-1602));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-1602), (short)short2);
      
      shortArray0[1] = short2;
      short short3 = (short)98;
      Short short4 = new Short((short)98);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short)98, (short)short4);
      
      shortArray0[2] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)50, (short) (-1602), (short)98}, shortArray1);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((short)98);
      assertNotNull(integer0);
      assertEquals(98, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(short0);
      assertFalse(short0 == short3);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(50, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(14);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(14, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.valueOf((int) short3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(short3 == short0);
      assertNotNull(integer3);
      assertEquals(98, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(1, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = Integer.getInteger("Array element ", 1);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(1, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = Integer.getInteger("'2O4|u6d(]i|>g");
      assertNull(integer6);
      
      integerArray0[6] = null;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, (Integer[]) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(7, integerArray1.length);
      assertEquals(7, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray2.length);
      assertSame(shortArray0, shortArray2);
      assertSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3.2491810762395303);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(12, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '^';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '*');
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'q', '', '', '^'}, charArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray1, (-51.925), 2201);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int1 == int0);
      assertEquals(12, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals((-1), int1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'q', '', '', '^'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int int2 = ArrayUtils.indexOf((float[]) null, (float) (-1), (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(2);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int2));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1003));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-1003), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int2));
      assertNotNull(integer3);
      assertEquals(7, integerArray0.length);
      assertEquals((-1003), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals((-1), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(18688);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int1));
      assertNotNull(integer5);
      assertEquals(18688, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-569));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)int2));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      assertEquals((-569), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(14, integerArray1.length);
      assertEquals(7, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-6));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte)0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte) (-6);
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(6, shortArray0.length);
      assertEquals(64, bitSet1.size());
      assertEquals(5, bitSet1.cardinality());
      assertEquals(5, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0, 1, 2, 3, 4}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short) (-6)}, shortArray0);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(booleanArray2, false);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(bitSet2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.cardinality());
      assertEquals(0, bitSet2.length());
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte) (-6));
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-6.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      char[] charArray0 = new char[11];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '7';
      doubleArray0[1] = (double) '7';
      doubleArray0[2] = (double) 52;
      doubleArray0[3] = (double) '^';
      doubleArray0[4] = (double) '7';
      doubleArray0[5] = (double) 52;
      doubleArray0[6] = (double) '7';
      doubleArray0[7] = (double) '7';
      ArrayUtils.shift(doubleArray0, 52, 52, (-2196));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {55.0, 55.0, 52.0, 94.0, 55.0, 52.0, 55.0, 55.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      
      ArrayUtils.shift(charArray0, (-2196), (int) (short)1, 1);
      assertEquals(11, charArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '^';
      floatArray0[1] = (-1294.3466F);
      floatArray0[2] = (float) '^';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-2196), (int) (short)1);
      assertNotNull(bitSet0);
      assertEquals(3, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {94.0F, (-1294.3466F), 94.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (byte) (-1), 2349, (int) (byte) (-1));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((byte) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short) (-1)}, shortArray1);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 1322, (-1), 2349);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Random.setNextRandom(2866);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      int[] intArray0 = new int[4];
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      ArrayUtils.swap(byteArray0, 22, (-790), Integer.MAX_VALUE);
      assertEquals(11, byteArray0.length);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(11, byteArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) (byte)100;
      floatArray0[2] = (float) (byte)100;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) 22;
      floatArray0[6] = (float) (byte)100;
      floatArray0[7] = (float) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 100.0F, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(8, floatArray0.length);
      assertEquals("{1, 2, 6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new float[] {2.14748365E9F, 100.0F, 100.0F, 1.0F, 22.0F, 0.0F, 100.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(11, byteArray1.length);
      assertEquals(11, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      boolean[] booleanArray1 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray1);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((byte)100);
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1980));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1980), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = ArrayUtils.get(integerArray0, 22);
      assertNull(integer2);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ArrayUtils.shift(shortArray0, (int) (short) (-2941));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      short[] shortArray0 = new short[3];
      ArrayUtils.shift(shortArray0, (-1));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      short[] shortArray0 = new short[5];
      ArrayUtils.shift(shortArray0, (-1723));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)7;
      intArray0[1] = (int) (short)7;
      intArray0[3] = (int) (short)7;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1723));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {7, 7, 0, 7}, intArray0);
      assertArrayEquals(new int[] {(-1723), 7, 7, 0, 7}, intArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      charArray0[1] = '#';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertArrayEquals(new char[] {'Z', '#'}, charArray0);
      
      ArrayUtils.swap((byte[]) null, 617, 7, (-2838));
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-1L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1.0F);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) 925L);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int2 = ArrayUtils.lastIndexOf((double[]) null, (double) (-1), (int) (byte) (-1), (-3410.393785668431));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertTrue(boolean0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      ArrayUtils.shift(shortArray0, (-1), 2, 2);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      boolean boolean1 = ArrayUtils.contains(charArray0, '9');
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'(', '(', '('}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'(', '(', '('}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short)70;
      shortArray0[2] = (short)7;
      shortArray0[3] = (short) (-1754);
      ArrayUtils.shift(shortArray0, 1225);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1754), (short)7, (short)70, (short)7}, shortArray0);
      
      ArrayUtils.reverse((short[]) null);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)70;
      shortArray0[0] = (short)7;
      shortArray0[2] = (short)70;
      intArray0[3] = (int) (short)7;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)7;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2924.0);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 1806.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2924.0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-2924.0), 1.5, 1806.0}, doubleArray0, 0.01);
      
      Character[] characterArray0 = new Character[4];
      char char0 = 'j';
      Character character0 = Character.valueOf('j');
      assertNotNull(character0);
      assertEquals('j', (char)character0);
      
      characterArray0[0] = character0;
      char char1 = 'o';
      Character character1 = Character.valueOf('o');
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('o', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('o');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertNotNull(character2);
      assertEquals('o', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('R');
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char1));
      assertNotNull(character3);
      assertEquals('R', (char)character3);
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'j', 'o', 'o', 'R'}, charArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) char1;
      intArray0[1] = (int) char0;
      intArray0[2] = (int) char0;
      intArray0[3] = (int) 'j';
      intArray0[4] = (int) 'j';
      intArray0[5] = (int) char1;
      intArray0[6] = (int) char0;
      ArrayUtils.shift(intArray0, 2659, (-84), 106);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {111, 106, 106, 106, 106, 111, 106}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 2, 2349, (-1284));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((byte) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-70));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2876;
      ArrayUtils.swap(longArray0, (-2146875984), (int) (byte) (-1));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2876L}, longArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2876;
      intArray0[1] = (int) (byte) (-70);
      intArray0[2] = (-1284);
      intArray0[3] = (int) (byte) (-70);
      intArray0[4] = (int) (byte) (-1);
      ArrayUtils.swap(intArray0, 4, (-1337), 2223);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-70), (-1284), (-70), 2876}, intArray0);
      
      char[] charArray0 = new char[5];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-70);
      shortArray0[2] = (short) (byte) (-1);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) (-70));
      assertEquals(3, shortArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-70), (short) (-1)}, shortArray0);
      
      ArrayUtils.shift(shortArray0, 2719, (-1521), (int) (byte) (-1));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-70), (short) (-1)}, shortArray0);
      
      Integer integer1 = new Integer(2223);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2223, (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)integer0));
      assertNotNull(object0);
      assertEquals(2223, object0);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-270));
      assertNotNull(integer0);
      assertEquals((-270), (int)integer0);
      
      Integer integer1 = new Integer(1853);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1853, (int)integer1);
      
      Integer integer2 = new Integer((-1529));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1529), (int)integer2);
      
      Integer integer3 = new Integer((-270));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-270), (int)integer3);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '=');
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (-51.925), 1827);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'q';
      charArray1[1] = '=';
      charArray1[2] = '*';
      charArray1[3] = ')';
      charArray1[4] = '=';
      charArray1[5] = '^';
      charArray1[6] = '*';
      charArray1[7] = '';
      char[] charArray2 = ArrayUtils.removeElements(charArray1, charArray0);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertEquals(8, charArray2.length);
      assertEquals(0, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertArrayEquals(new char[] {'q', '=', '*', ')', '=', '^', '*', ''}, charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'q', '=', '*', ')', '=', '^', '*', ''}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, (char[]) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)2460;
      doubleArray0[1] = (double) (byte)42;
      doubleArray0[2] = (double) 84;
      doubleArray0[3] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, 61, 0, (-724));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2460.0, 42.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom((-724));
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short) (-559);
      shortArray0[2] = (short) (-711);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)16, (short) (-559), (short) (-711)}, shortArray0);
      assertArrayEquals(new short[] {(short)16, (short) (-559), (short) (-711)}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-559);
      doubleArray0[1] = (double) (short) (-559);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (short) (-711);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-559.0), 2365, (double) 2365);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {(-559.0), (-559.0), 1.0, (-711.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)38;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)38);
      assertNotNull(bitSet0);
      assertEquals(3, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertArrayEquals(new byte[] {(byte)52, (byte) (-108), (byte)38}, byteArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-341.24F);
      floatArray0[1] = (float) (short)16;
      floatArray0[2] = (float) (short) (-711);
      floatArray0[3] = (float) 3;
      floatArray0[4] = (float) (short) (-711);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 16.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-341.24F), 16.0F, (-711.0F), 3.0F, (-711.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-341.24F), (-711.0F), 3.0F, (-711.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-564L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-564L), (long)long2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)36;
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short)114;
      shortArray0[3] = (short) (byte) (-116);
      shortArray0[5] = (short) (byte)36;
      boolean boolean0 = ArrayUtils.isSameType(long0, (short) (-116));
      assertTrue(long0.equals((Object)long1));
      assertFalse(long0.equals((Object)long2));
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-711), (int) (byte)0);
      assertFalse(int1 == int0);
      assertEquals(6, shortArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)114, (short) (-116), (short)0, (short)36}, shortArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      ArrayUtils.swap(charArray0, (-2125791893), 0, 1958);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'{'}, charArray0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-6));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (byte)0);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) bitSet0;
      Object object0 = ArrayUtils.get(objectArray0, (int) 0, objectArray0[0]);
      assertTrue(object0.equals((Object)byte0));
      assertNotNull(object0);
      assertEquals(5, objectArray0.length);
      assertEquals((byte)0, object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) bitSet0;
      objectArray0[4] = (Object) true;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(5, objectArray1.length);
      assertEquals(5, objectArray0.length);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1461.93434339501;
      doubleArray0[1] = (double) 1992;
      doubleArray0[2] = (double) 1992;
      doubleArray0[3] = (double) 1992;
      ArrayUtils.shift(doubleArray0, 20, 1133, 1992);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1461.93434339501, 1992.0, 1992.0, 1992.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = 'j';
      charArray0[2] = ';';
      charArray0[3] = 'n';
      charArray0[4] = ';';
      charArray0[5] = ';';
      charArray0[6] = 'G';
      charArray0[7] = 'N';
      ArrayUtils.shift(charArray0, (int) (short)1, 2, Integer.MAX_VALUE);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {';', 'j', ';', 'n', ';', ';', 'G', 'N'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3905;
      shortArray0[1] = (short)3905;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-15807);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)3905, (short)3905, (short)1, (short) (-15807)}, shortArray0);
      assertArrayEquals(new short[] {(short)3905, (short)3905, (short)1, (short) (-15807), (short)3905, (short)3905, (short)1, (short) (-15807)}, shortArray1);
      
      ArrayUtils.shift(charArray0, (int) (short) (-15807), (int) (short)1, (int) (short)1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'r', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Random.setNextRandom((short)3905);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, 1583);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      ArrayUtils.swap(intArray0, (-1718), 535, 1583);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1948;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 1948;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0]);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
      
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float[] floatArray1 = new Float[3];
      floatArray1[0] = float0;
      floatArray1[1] = (Float) 1.0F;
      floatArray1[2] = float0;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F}, floatArray2, 0.01F);
      
      ArrayUtils.swap(intArray0, (-1583), 1948, 1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1948, 0}, intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = 's';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'s', 's', 's'}, charArray1);
      assertArrayEquals(new char[] {'s', 's', 's'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, 2, 2349, (-1284));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((byte) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-70));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-711.0), 2876, 1.5);
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2876;
      ArrayUtils.swap(longArray0, (-2146875984), (int) (byte) (-1));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2876L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.shift(longArray0, 3541);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      float[] floatArray0 = new float[12];
      floatArray0[0] = (-720.0F);
      floatArray0[1] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 6);
      assertEquals(12, floatArray0.length);
      assertEquals(1, int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1;
      longArray0[3] = (long) 6;
      longArray0[2] = (long) 6;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 4);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ArrayUtils.shift(longArray0, Integer.MAX_VALUE);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 1L, 0L, 6L, 6L, 0L, 0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 1L, 0L, 6L, 6L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1L, 6L, 6L}, longArray1);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertFalse(int1 == int0);
      assertEquals(12, floatArray0.length);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.indexOf((double[]) null, (double) (-720.0F));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(7, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 1L, 0L, 6L, 6L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1L, 6L, 6L}, longArray1);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, Float.NaN);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(12, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.swap((short[]) null, 4, 3974, (-181));
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(doubleArray1);
      assertNotNull(map0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (-870));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.shift((long[]) null, (int) (byte) (-1), 0, 65);
      ArrayUtils.swap(byteArray0, 83, (int) (byte) (-1));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-1);
      boolean boolean2 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      boolean boolean3 = ArrayUtils.contains((long[]) null, (long) 65);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Byte[] byteArray1 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (int) (short) (-870));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1648.524), 3087);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1789;
      ArrayUtils.shift(doubleArray0, (-447), 1789, 1505);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1789.0}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      ArrayUtils.reverse((Object[]) null);
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, 0);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 1789, (double) (-447));
      assertFalse(int1 == int0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {0.0, 1789.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 3554;
      longArray0[1] = 9L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 3554, 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {3554L, 9L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[0];
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((short[]) null, 2, 299);
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertFalse(int1 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short)99);
      assertNull(shortArray1);
      
      int[] intArray0 = new int[8];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Integer integer0 = new Integer(2144559514);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2144559514, (int)integer0);
      
      Integer integer1 = new Integer((short)99);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(99, (int)integer1);
      
      int int2 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) integer1, 52);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 52, 5);
      assertNotNull(bitSet0);
      assertEquals(8, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 2146263486, 3554, 1);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-200.70671F);
      floatArray0[1] = 2112.0767F;
      floatArray0[2] = 25.125F;
      floatArray0[3] = (-1568.398F);
      floatArray0[4] = 605.64F;
      floatArray0[5] = (-3864.0F);
      floatArray0[6] = (-2694.0F);
      floatArray0[7] = 1195.0F;
      floatArray0[8] = 531.09436F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-200.70671F), 2112.0767F, 25.125F, (-1568.398F), 605.64F, (-3864.0F), (-2694.0F), 1195.0F, 531.09436F}, floatArray0, 0.01F);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 2146838145);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap((char[]) null, (int) (byte) (-28), (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1431655765);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom((-2745L));
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 42;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-1521);
      int int0 = ArrayUtils.indexOf(intArray0, (-2144936604));
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {42, 0, (-1521)}, intArray0);
      
      ArrayUtils.shift(intArray0, 854);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-1521), 42}, intArray0);
      
      ArrayUtils.shift(intArray0, 0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-1521), 42}, intArray0);
      
      int int1 = ArrayUtils.indexOf((byte[]) null, (byte) (-106));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((char[]) null, 'C', 0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-106);
      longArray0[1] = (long) (byte) (-28);
      longArray0[2] = (long) 854;
      longArray0[3] = (long) 42;
      longArray0[4] = (-2790L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-106L), (-28L), 854L, 42L, (-2790L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = '!';
      charArray0[4] = 'G';
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = '8';
      charArray0[7] = 'G';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000');
      assertEquals(8, charArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'8', '!', '\u0000', 'G', 'G', 'G', '8', 'G'}, charArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '!';
      doubleArray0[1] = (double) 'G';
      doubleArray0[2] = (double) 'G';
      doubleArray0[3] = (double) 'G';
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 'G', 2);
      assertTrue(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, int1);
      assertArrayEquals(new double[] {33.0, 71.0, 71.0, 71.0}, doubleArray0, 0.01);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(8, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'8', '!', '\u0000', 'G', 'G', 'G', '8', 'G'}, charArray0);
      
      ArrayUtils.shift((byte[]) null, (-1162));
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '!';
      floatArray0[1] = (float) '8';
      floatArray0[2] = (float) 'G';
      floatArray0[3] = (float) '!';
      floatArray0[4] = (float) '!';
      floatArray0[5] = 3173.9062F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {33.0F, 56.0F, 71.0F, 33.0F, 33.0F, 3173.9062F}, floatArray0, 0.01F);
      
      ArrayUtils.shuffle(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, charArray1.length);
      assertEquals(8, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'8', '!', '\u0000', 'G', 'G', 'G', '8', 'G'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2147173454;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2147173454, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147173454, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      float[] floatArray0 = new float[12];
      floatArray0[0] = (-720.0F);
      floatArray0[1] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 6);
      assertEquals(12, floatArray0.length);
      assertEquals(1, int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1;
      longArray0[3] = (long) 6;
      longArray0[2] = (long) 6;
      longArray0[3] = (long) 6;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 6;
      longArray0[6] = (long) 1;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-663L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1L, 0L, 6L, 6L, 1L, 6L, 1L}, longArray0);
      assertArrayEquals(new long[] {1L, 0L, 6L, 6L, 1L, 6L, 1L}, longArray1);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-663L);
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = (-720.0F);
      floatArray1[4] = (float) 0L;
      floatArray1[5] = (float) 1;
      floatArray1[6] = (float) 6L;
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      charArray0[5] = 'm';
      charArray0[6] = 'm';
      int int2 = ArrayUtils.lastIndexOf(charArray0, 'm', 6);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(7, charArray0.length);
      assertEquals(6, int2);
      assertArrayEquals(new char[] {'m', 'm', 'm', 'm', 'm', 'm', 'm'}, charArray0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-24);
      floatArray0[1] = (float) (byte) (-11);
      floatArray0[2] = (float) (byte) (-122);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-65));
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-24.0F), (-11.0F), (-122.0F)}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertTrue(int1 == int0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (byte) (-36);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-36L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-24.0F), (-11.0F), (-122.0F)}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, 5074L);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {(-1L), (-36L)}, longArray0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-24), (-562));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-122);
      byteArray1[1] = (byte) (-65);
      byteArray1[2] = (byte) (-24);
      int int3 = ArrayUtils.indexOf(byteArray1, (byte) (-122), (-3953));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(3, byteArray1.length);
      assertEquals(0, int3);
      assertArrayEquals(new byte[] {(byte) (-122), (byte) (-65), (byte) (-24)}, byteArray1);
      
      Integer integer0 = new Integer(608);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int3));
      assertNotNull(integer0);
      assertEquals(608, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(object0.equals((Object)int1));
      assertFalse(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)int3));
      assertFalse(object0.equals((Object)int2));
      assertNotNull(object0);
      assertEquals(608, object0);
      
      boolean boolean2 = ArrayUtils.isSameType(object0, object0);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(object0.equals((Object)int1));
      assertFalse(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)int3));
      assertFalse(object0.equals((Object)int2));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray0[6] = (byte) (-50);
      byteArray1[1] = (byte)47;
      byteArray0[6] = (byte)113;
      byteArray1[3] = (byte)114;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(9, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(7, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)113, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte)0, (byte)114}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)113, (byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte)42, 1, 76);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)42}, byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)42}, byteArray2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)48;
      intArray0[1] = (int) (byte)42;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {48, 42}, intArray0);
      assertArrayEquals(new int[] {48, 42, 48, 42}, intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray1, (int) (byte)48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-2565));
      assertNotNull(integer0);
      assertEquals((-2565), (int)integer0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0, (-1));
      assertNotNull(bitSet0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      int[] intArray0 = new int[5];
      intArray0[0] = 174;
      intArray0[1] = 174;
      intArray0[2] = (-663);
      intArray0[3] = 99;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2156, 99);
      assertEquals(5, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {174, 174, (-663), 99, 0}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 174;
      ArrayUtils.shift(floatArray0, 3);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {174.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      char[] charArray0 = new char[1];
      ArrayUtils.shift(charArray0, (-2473), 1, 99);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      ArrayUtils.shift(intArray0, 99, 2153, (-715));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {174, 174, (-663), 99, 0}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1194.662812, 2351.346336333596);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(stringArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 0.03741, 0, (double) 0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)0;
      Integer integer0 = new Integer((-499));
      assertNotNull(integer0);
      assertEquals((-499), (int)integer0);
      
      Integer integer1 = new Integer((byte) (-7));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-7), (int)integer1);
      
      Integer integer2 = new Integer(1315);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1315, (int)integer2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 652;
      doubleArray0[1] = (double) 1315;
      doubleArray0[2] = (double) (-499);
      ArrayUtils.shift(doubleArray0, 0, 552, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {652.0, 1315.0, (-499.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-7);
      shortArray0[2] = (short) (-2551);
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte) (-7);
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte) (-7);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(14, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-7), (short) (-2551), (short)0, (short) (-7), (short)0, (short) (-7)}, shortArray0);
      
      ArrayUtils.swap(shortArray1, 2353, 0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(14, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-7), (short) (-2551), (short)0, (short) (-7), (short)0, (short) (-7)}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1315);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {652.0, 1315.0, (-499.0)}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (byte) (-7));
      assertNotNull(intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1315, (-7), 1315}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-999.8026733398438), 114);
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {652.0, 1315.0, (-499.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1, (-1909.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {652.0, 1315.0, (-499.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {652.0, (-1909.0), 1315.0, (-499.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      ArrayUtils.shift(byteArray0, (int) (byte)99);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)99, (byte)99}, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'I';
      doubleArray0[1] = (double) (byte)99;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {73.0, 99.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {73.0, 99.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)99;
      shortArray0[1] = (short) (byte)99;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)99, (short)99}, shortArray0);
      
      Integer integer0 = new Integer((short)99);
      assertNotNull(integer0);
      assertEquals(99, (int)integer0);
      
      Integer integer1 = new Integer(42);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(42, (int)integer1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (int) 99, integer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(2993);
      assertNotNull(integer0);
      assertEquals(2993, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, 606, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 606, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-1173);
      shortArray0[3] = (short)1713;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1713, (int) (short)1713);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1136, (short)2, (short) (-1173), (short)1713}, shortArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 2223;
      intArray0[2] = (int) (short)1136;
      intArray0[3] = (-1);
      intArray0[4] = 2223;
      intArray0[5] = (int) (short)1136;
      intArray0[6] = (-1337);
      ArrayUtils.swap(intArray0, 1136, 3405, 1212);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1), 2223, 1136, (-1), 2223, 1136, (-1337)}, intArray0);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000'}, charArray1);
      
      MockRandom mockRandom0 = new MockRandom((-1337));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (java.util.Random) mockRandom0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short) (-1173), (short)1713, (short)1136}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)2460;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2460.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2460.0}, doubleArray1, 0.01);
      
      ArrayUtils.shuffle(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(2, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      Integer integer0 = new Integer((byte)42);
      assertNotNull(integer0);
      assertEquals(42, (int)integer0);
      
      Integer integer1 = new Integer(662);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(662, (int)integer1);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer2 = new Integer((-2144936604));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-2144936604), (int)integer2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, (-240), integer2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -240, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift(shortArray0, (-1743), (-1023), (-1023));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-1822));
      assertNotNull(bitSet0);
      assertEquals(3, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1822);
      doubleArray0[1] = (double) (-1822);
      doubleArray0[2] = (double) (-1822);
      doubleArray0[3] = (double) (-1822);
      doubleArray0[4] = (double) (-1822);
      ArrayUtils.reverse(doubleArray0, (-1200), (-1822));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1822.0), (-1822.0), (-1822.0), (-1822.0), (-1822.0)}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1));
      assertEquals(3, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1822);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1822);
      longArray0[6] = (long) (-1200);
      longArray0[7] = (long) (-1);
      ArrayUtils.reverse(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1200L), (-1822L), (-1L), (-1L), (-1L), (-1L), (-1822L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, Integer.MAX_VALUE);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, true, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Integer integer0 = new Integer((-5672));
      assertNotNull(integer0);
      assertEquals((-5672), (int)integer0);
      
      Integer integer1 = Integer.getInteger("Index: ", integer0);
      assertNotNull(integer1);
      assertEquals((-5672), (int)integer1);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) longArray0, (Object) integer1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-918));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-5672));
      assertNotNull(intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-5672), (-5672)}, intArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-58);
      intArray0[1] = (-58);
      intArray0[2] = (-58);
      intArray0[3] = (-58);
      intArray0[4] = (-58);
      intArray0[5] = (-58);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2, (-58));
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {(-58), (-58), (-58), (-58), (-58), (-58)}, intArray0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1032));
      assertNotNull(integer0);
      assertEquals((-1032), (int)integer0);
      
      Integer integer1 = new Integer(3294);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3294, (int)integer1);
      
      Integer integer2 = Integer.getInteger("Index: ", integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(3294, (int)integer2);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) integerArray0, (Object) integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(2, integerArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-58));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer integer3 = Integer.valueOf((-3433));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-3433), (int)integer3);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (-58));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(2, intArray1.length);
      assertEquals(2, integerArray0.length);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-58), (-58)}, intArray1);
      
      boolean[] booleanArray0 = null;
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
      
      Integer integer4 = new Integer((-328));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals((-328), (int)integer4);
      
      try { 
        Integer.valueOf("Index: ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Index: \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 2143348709);
      assertNotNull(intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2143348709, 2143348709, 2143348709, 2143348709}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-954), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -954, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap((char[]) null, (int) (byte) (-28), (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1431655765);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom((-2745L));
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 42;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-1521);
      int int0 = ArrayUtils.indexOf(intArray0, (-2144936604));
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {42, 0, (-1521)}, intArray0);
      
      float[] floatArray0 = new float[15];
      floatArray0[0] = (float) (byte) (-28);
      ArrayUtils.reverse(floatArray0, (-2011), 42);
      assertEquals(15, floatArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[8];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) true;
      Boolean boolean0 = Boolean.valueOf((boolean) booleanArray1[1]);
      assertNotNull(boolean0);
      assertEquals(8, booleanArray1.length);
      assertTrue(boolean0);
      
      booleanArray1[3] = boolean0;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) true;
      booleanArray1[7] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)964;
      char[] charArray0 = new char[0];
      int int0 = new Short((short)964);
      assertEquals((short)964, int0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 1.0, 3068);
      assertFalse(int1 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      ArrayUtils.shift((byte[]) null, 1304);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 1076);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1076;
      ArrayUtils.shift(intArray0, 1076);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)3327;
      shortArray0[2] = (short)79;
      shortArray0[3] = (short) (-25548);
      shortArray0[4] = (short)3676;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (int) (short)79);
      assertEquals(5, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)3327, (short)79, (short) (-25548), (short)3676}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(longArray0, (long) (short) (-25548), 2141019217);
      assertTrue(int1 == int0);
      assertEquals(9, longArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {1076L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      int int2 = ArrayUtils.lastIndexOf(longArray0, (-1L), (int) (short)3327);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(9, longArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new long[] {1076L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, (int) (short)0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-33), 'G');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -33, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      Integer integer1 = new Integer(101);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(101, (int)integer1);
      
      Integer integer2 = new Integer(124);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(124, (int)integer2);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-945));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      short[] shortArray1 = ArrayUtils.insert((-2146179771), shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      boolean[] booleanArray2 = ArrayUtils.insert(1, booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray2));
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) (-663));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray3 = ArrayUtils.addAll(booleanArray2, booleanArray1);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertEquals(9, booleanArray3.length);
      assertEquals(1, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, false, true, true}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray2));
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-663);
      intArray0[1] = 0;
      intArray0[2] = (-2146179771);
      intArray0[3] = 124;
      int[] intArray1 = ArrayUtils.add(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-663), 0, (-2146179771), 124}, intArray0);
      assertArrayEquals(new int[] {(-663), 0, (-2146179771), 124, 0}, intArray1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-88);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-74));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)50, (byte)53, (byte)0, (byte) (-1), (byte)112, (byte) (-88)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)50, (byte)53, (byte)0, (byte) (-1), (byte)112, (byte) (-88)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = ';';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'b', 850);
      assertNotNull(bitSet0);
      assertEquals(8, charArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'\u0000', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-11);
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-19), 10);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte) (-11)}, byteArray0);
      
      Integer integer0 = new Integer((-34));
      assertNotNull(integer0);
      assertEquals((-34), (int)integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-34);
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = 1.0;
      doubleArray0[4] = (double) 'b';
      doubleArray0[5] = (double) 850;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-34.0), 10.0, 1.0, 0.0, 98.0, 850.0}, doubleArray0, 0.01);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((byte) (-19));
      assertNotNull(long0);
      assertEquals((-19L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(1789L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1789L, (long)long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2106L));
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-19L), 0L, 1789L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1108.617511);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      Integer integer0 = new Integer((-59));
      assertNotNull(integer0);
      assertEquals((-59), (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertNotNull(string0);
      assertEquals("-59", string0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-59);
      longArray0[2] = (long) (-59);
      longArray0[3] = (long) (-59);
      Integer integer1 = new Integer((-59));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-59), (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      assertTrue(integer0.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Integer integer2 = new Integer((-59));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-59), (int)integer2);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer1));
      assertTrue(object0.equals((Object)integer0));
      assertNotNull(object0);
      assertEquals((-59), object0);
      
      Object[] objectArray0 = new Object[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0, (-59));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer1));
      assertTrue(object0.equals((Object)integer0));
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 348.44529227811023;
      doubleArray0[1] = (double) (-59L);
      doubleArray0[2] = (double) (-59L);
      doubleArray0[3] = (-1375.59011);
      doubleArray0[4] = (double) (-59L);
      doubleArray0[5] = (double) (-59L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 272.2);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {348.44529227811023, (-59.0), (-59.0), (-1375.59011), (-59.0), (-59.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-59L);
      floatArray0[1] = (float) (-59);
      floatArray0[2] = (float) (-59L);
      floatArray0[3] = (float) (-59L);
      floatArray0[4] = (float) (-59L);
      floatArray0[5] = (float) (-59L);
      floatArray0[6] = 2.14748365E9F;
      floatArray0[7] = (float) (-59);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-59.0F), (-59.0F), (-59.0F), (-59.0F), (-59.0F), (-59.0F), 2.14748365E9F, (-59.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-59.0F), (-59.0F), (-59.0F), (-59.0F), (-59.0F), (-59.0F), 2.14748365E9F, (-59.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 3554;
      longArray0[1] = 9L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 3554, 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {3554L, 9L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, 54);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((short[]) null, 2, 299);
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertFalse(int1 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short)99);
      assertNull(shortArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 3554L;
      objectArray0[1] = null;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (float) 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[0];
      int int2 = ArrayUtils.indexOf(charArray0, '@', 2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '@';
      charArray1[1] = '@';
      charArray1[2] = '@';
      charArray1[3] = '@';
      charArray1[4] = '@';
      charArray1[5] = '@';
      ArrayUtils.reverse(charArray1, (-1), 2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'@', '@', '@', '@', '@', '@'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-270));
      assertNotNull(integer0);
      assertEquals((-270), (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-270)}, intArray0);
      
      int int0 = new Byte((byte)1);
      assertEquals((byte)1, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = '`';
      ArrayUtils.reverse(charArray0, (-3947), 5);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'`', 'x'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[10];
      charArray0[6] = 'Z';
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int1 = ArrayUtils.indexOf((Object[]) null, (Object) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, true, 64);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1758L;
      longArray0[1] = 1758L;
      longArray0[4] = 1758L;
      longArray0[3] = 1758L;
      longArray0[4] = 1758L;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1940L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 0L, 1758L, 1758L}, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 0L, 1758L, 1758L}, longArray1);
      
      Integer integer0 = new Integer(156);
      assertNotNull(integer0);
      assertEquals(156, (int)integer0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-109));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-109)}, byteArray0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((-2786L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2786L), (long)long1);
      
      Character character0 = new Character('-');
      assertNotNull(character0);
      assertEquals('-', (char)character0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      ArrayUtils.swap((byte[]) null, 1, (-2140297581));
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(doubleArray1);
      assertNotNull(map0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (-855));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.shift((long[]) null, (int) (byte) (-1), 0, 65);
      ArrayUtils.swap(byteArray0, 83, 3003);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      MockRandom mockRandom0 = new MockRandom((-1271L));
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = 3003;
      intArray0[2] = 0;
      intArray0[3] = (int) (short) (-855);
      intArray0[4] = (-2144936604);
      int int0 = ArrayUtils.indexOf(intArray0, (-1));
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1), 3003, 0, (-855), (-2144936604)}, intArray0);
      
      ArrayUtils.reverse((float[]) null, (int) (byte) (-1), (-439));
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-1271L);
      doubleArray2[1] = 2314.17;
      doubleArray2[2] = (double) (-2144936604);
      doubleArray2[3] = (double) (-2144936604);
      doubleArray2[4] = (double) 83;
      doubleArray2[5] = (double) (byte) (-1);
      doubleArray2[6] = (double) (-2144936604);
      int int1 = ArrayUtils.indexOf(doubleArray2, 347.44529227811023, (double) (byte) (-1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      assertEquals(7, doubleArray2.length);
      assertEquals((-1), int1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1271.0), 2314.17, (-2.144936604E9), (-2.144936604E9), 83.0, (-1.0), (-2.144936604E9)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'O');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'O'}, charArray1);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(2142601671L);
      assertNotNull(long0);
      assertEquals(2142601671L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(3, longArray0.length);
      assertEquals(2142601671L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(631L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(631L, (long)long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {2142601671L, 2142601671L, 631L}, longArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-1822));
      assertNotNull(bitSet0);
      assertEquals(3, booleanArray0.length);
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1822);
      doubleArray0[1] = (double) (-1822);
      doubleArray0[2] = (double) (-1822);
      doubleArray0[3] = (double) (-1822);
      doubleArray0[4] = (double) (-1822);
      ArrayUtils.reverse(doubleArray0, (-1200), (-1822));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1822.0), (-1822.0), (-1822.0), (-1822.0), (-1822.0)}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1));
      assertEquals(3, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1822);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1822);
      floatArray0[5] = (float) (-1822L);
      floatArray0[6] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1822.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1822.0F), (-1822.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1822.0F), (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-1822));
      assertNotNull(bitSet0);
      assertEquals(3, booleanArray0.length);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1822);
      doubleArray0[1] = (double) (-1822);
      doubleArray0[2] = (double) (-1822);
      doubleArray0[3] = (double) (-1822);
      doubleArray0[4] = (double) (-1822);
      ArrayUtils.reverse(doubleArray0, (-1200), (-1822));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1822.0), (-1822.0), (-1822.0), (-1822.0), (-1822.0)}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1));
      assertEquals(3, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1822);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1822);
      longArray0[6] = (long) (-1200);
      longArray0[7] = (long) (-1);
      ArrayUtils.reverse(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1200L), (-1822L), (-1L), (-1L), (-1L), (-1L), (-1822L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-1L), (-1822));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(8, longArray0.length);
      assertEquals(5, bitSet1.cardinality());
      assertEquals("{0, 3, 4, 5, 6}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(7, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {(-1L), (-1200L), (-1822L), (-1L), (-1L), (-1L), (-1L), (-1822L)}, longArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(booleanArray0, true, 0);
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertNotNull(bitSet2);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, bitSet2.length());
      assertEquals("{0, 1}", bitSet2.toString());
      assertEquals(64, bitSet2.size());
      assertFalse(bitSet2.isEmpty());
      assertEquals(2, bitSet2.cardinality());
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1948;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 1948;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0]);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
      
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float[] floatArray1 = new Float[3];
      floatArray1[0] = float0;
      floatArray1[1] = (Float) 1.0F;
      floatArray1[2] = float0;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F}, floatArray2, 0.01F);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1238));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1948, 0}, intArray0);
      assertArrayEquals(new int[] {1948, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long(0);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)36;
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short)114;
      shortArray0[3] = (short) (byte) (-116);
      shortArray0[5] = (short) (byte)36;
      boolean boolean0 = ArrayUtils.isSameType(long0, (short) (-116));
      assertTrue(long0.equals((Object)long1));
      assertFalse(long0.equals((Object)long2));
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-711), (int) (byte)0);
      assertFalse(int1 == int0);
      assertEquals(6, shortArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)114, (short) (-116), (short)0, (short)36}, shortArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[1] = '';
      charArray0[2] = 'e';
      charArray0[3] = 'j';
      charArray0[4] = 'g';
      charArray0[5] = '%';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 346);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'$', '', 'e', 'j', 'g', '%'}, charArray1);
      assertArrayEquals(new char[] {'$', '', 'e', 'j', 'g', '%'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      float[] floatArray0 = new float[12];
      floatArray0[0] = (-720.0F);
      floatArray0[1] = (-720.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-720.0F), 6);
      assertEquals(12, floatArray0.length);
      assertEquals(1, int0);
      
      int[] intArray0 = new int[11];
      intArray0[0] = 2820;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 2820;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 6);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(11, intArray0.length);
      assertEquals(11, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      float[] floatArray0 = new float[12];
      floatArray0[0] = (-720.0F);
      floatArray0[1] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 6);
      assertEquals(12, floatArray0.length);
      assertEquals(1, int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[2] = (long) 6;
      longArray0[3] = (long) 6;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 6;
      longArray0[6] = (long) 1;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-663L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 6L, 1L, 6L, 1L}, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 6L, 1L, 6L, 1L}, longArray1);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-663L);
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = (-720.0F);
      floatArray1[4] = (float) 6L;
      floatArray1[5] = (float) 1;
      floatArray1[6] = (float) 6L;
      int int1 = ArrayUtils.lastIndexOf(floatArray1, (float) (-663L));
      assertFalse(int1 == int0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(7, floatArray1.length);
      assertEquals(0, int1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-663.0F), 1.0F, 1.0F, (-720.0F), 6.0F, 1.0F, 6.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      charArray0[5] = 'm';
      charArray0[6] = 'm';
      int int2 = ArrayUtils.lastIndexOf(charArray0, 'm', 6);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(7, charArray0.length);
      assertEquals(6, int2);
      assertArrayEquals(new char[] {'m', 'm', 'm', 'm', 'm', 'm', 'm'}, charArray0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      ArrayUtils.shift(byteArray0, (-2144278447));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)99, (byte)99}, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = '\\';
      Short short0 = new Short((byte)99);
      assertNotNull(short0);
      assertEquals((short)99, (short)short0);
      
      Short short1 = new Short((short)417);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)417, (short)short1);
      
      Short short2 = new Short((short)6116);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)6116, (short)short2);
      
      Short short3 = new Short((short) (-1986));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      assertEquals((short) (-1986), (short)short3);
      
      Short short4 = new Short((short)0);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short)0, (short)short4);
      
      Short short5 = new Short((byte)99);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertNotNull(short5);
      assertEquals((short)99, (short)short5);
      
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short4;
      shortArray0[1] = short2;
      shortArray0[2] = short2;
      shortArray0[3] = short4;
      shortArray0[4] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)6116, (short)6116, (short)0, (short)6116}, shortArray1);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-2144278447));
      assertNotNull(integer0);
      assertEquals((-2144278447), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = ArrayUtils.get(integerArray0, (int) 99);
      assertNull(integer1);
      assertEquals(1, integerArray0.length);
      
      String string0 = ArrayUtils.toString((Object) null, "java.lang.Object");
      assertNotNull(string0);
      assertEquals("java.lang.Object", string0);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-1543.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (-813));
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.0, 1.0, (-1543.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 3554;
      longArray0[1] = 9L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 3554, 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {3554L, 9L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, 54);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((short[]) null, 2, 299);
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertFalse(int1 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short)99);
      assertNull(shortArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 3554L;
      objectArray0[1] = (Object) 9L;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (float) 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      
      ArrayUtils.swap(objectArray0, 0, (-2147483646), (-2147483646));
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, 102);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1292.0, 0, 1743.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertTrue(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      assertEquals(0, object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 0;
      intArray0[4] = 0;
      objectArray0[5] = (Object) 0.0;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(6, objectArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean2 = new Boolean("null");
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = Boolean.valueOf(false);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[1] = boolean3;
      Boolean boolean4 = new Boolean(true);
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray0[2] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray0[3] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      assertTrue(boolean6);
      
      booleanArray0[4] = boolean6;
      Boolean boolean7 = Boolean.FALSE;
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean2));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray0[5] = boolean7;
      Boolean boolean8 = Boolean.TRUE;
      assertTrue(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean3));
      assertTrue(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean7));
      assertNotNull(boolean8);
      assertTrue(boolean8);
      
      booleanArray0[6] = boolean8;
      Boolean boolean9 = Boolean.valueOf("dbkN|t@@G)c]");
      assertFalse(boolean9.equals((Object)boolean4));
      assertFalse(boolean9.equals((Object)boolean8));
      assertTrue(boolean9.equals((Object)boolean2));
      assertFalse(boolean9.equals((Object)boolean1));
      assertTrue(boolean9.equals((Object)boolean0));
      assertFalse(boolean9.equals((Object)boolean6));
      assertFalse(boolean9.equals((Object)boolean5));
      assertNotNull(boolean9);
      assertFalse(boolean9);
      
      booleanArray0[7] = boolean9;
      Boolean boolean10 = Boolean.FALSE;
      assertFalse(boolean10.equals((Object)boolean5));
      assertFalse(boolean10.equals((Object)boolean6));
      assertTrue(boolean10.equals((Object)boolean2));
      assertFalse(boolean10.equals((Object)boolean8));
      assertFalse(boolean10.equals((Object)boolean1));
      assertTrue(boolean10.equals((Object)boolean0));
      assertFalse(boolean10.equals((Object)boolean4));
      assertNotNull(boolean10);
      assertFalse(boolean10);
      
      booleanArray0[8] = boolean10;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, true, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)0;
      Integer integer0 = new Integer((-499));
      assertNotNull(integer0);
      assertEquals((-499), (int)integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(1315);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1315, (int)integer2);
      
      Integer integer3 = new Integer(1315);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(1315, (int)integer3);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-499);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -499, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 3554;
      longArray0[1] = 9L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 3554, 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {3554L, 9L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[0];
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((short[]) null, 2, 299);
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertFalse(int1 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short)99);
      assertNull(shortArray1);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Integer integer0 = new Integer(2144559514);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2144559514, (int)integer0);
      
      Integer integer1 = new Integer((short)99);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals(99, (int)integer1);
      
      int int2 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) integer1, 52);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new int[] {}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 52, 5);
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 2146263486, 3554, 1);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = '9';
      charArray0[2] = '0';
      charArray0[3] = 'n';
      charArray0[4] = 'M';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'j', 52);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(5, charArray0.length);
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new char[] {'6', '9', '0', 'n', 'M'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[17];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(17, booleanArray0.length);
      assertEquals(18, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'r';
      Object object0 = ArrayUtils.get(objectArray0, 99);
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) ';';
      objectArray0[3] = (Object) ';';
      objectArray0[4] = null;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) 'r';
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertFalse(int1 == int0);
      assertEquals(7, objectArray0.length);
      assertEquals(1, int1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) ';';
      floatArray0[1] = (float) 488;
      int int2 = ArrayUtils.indexOf(floatArray0, (-1.0F), Integer.MAX_VALUE);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new float[] {59.0F, 488.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      int int0 = 1530;
      ArrayUtils.swap((float[]) null, 1530, 1530, (-1));
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      short short0 = (short) (-1624);
      ArrayUtils.reverse((byte[]) null);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1624));
      assertNotNull(bitSet0);
      assertEquals(6, shortArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      Integer integer0 = new Integer((-1904));
      assertNotNull(integer0);
      assertEquals((-1904), (int)integer0);
      
      Integer integer1 = new Integer((-1904));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1904), (int)integer1);
      
      Integer integer2 = new Integer((-1904));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1904), (int)integer2);
      
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      ArrayUtils.shift((Object[]) null, (-795), 1061, (-2144278447));
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) (-2144278447));
      assertNull(doubleArray0);
      
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = new byte[4];
      byteArray1[1] = (byte) (-6);
      byteArray1[2] = (byte) (-6);
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray1, (byte)126);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-6), (byte) (-6), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-6), (byte) (-6), (byte)0}, byteArray2);
      
      ArrayUtils.shift((Object[]) byteArray0, (-4288), (int) (byte) (-6), (-1039));
      assertEquals(6, byteArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (int) byte0, 1044);
      assertNull(integerArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)0, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(4, byteArray1.length);
      assertEquals(0, int0);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-6), (byte) (-6), (byte)0}, byteArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      Integer integer0 = new Integer((-1662));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1662), (int)integer0);
      
      ArrayUtils.swap(byteArray2, 709, (-1662), 1461);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-6), (byte) (-6), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-6), (byte) (-6), (byte)0}, byteArray2);
      
      ArrayUtils.reverse(byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-6), (byte) (-6), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-6), (byte) (-6), (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray1);
      assertNotNull(objectArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, objectArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      Integer integer0 = Integer.valueOf(733);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(733, (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer1 = new Integer(733);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(733, (int)integer1);
      
      integerArray0[0] = integer1;
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 733);
      assertNull(floatArray0);
      
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = null;
      objectArray0[1] = (Object) integerArray0[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertEquals(10, objectArray0.length);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences((float[]) null, (float) 733);
      assertNull(floatArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 'r';
      doubleArray0[2] = (double) ';';
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 114.0, 59.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 114.0, 59.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, true, true}, booleanArray0));
      
      ArrayUtils.shift(booleanArray0, 2, 5, 2);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[8];
      longArray0[0] = (-1730L);
      longArray0[1] = (-1341L);
      longArray0[2] = (-1730L);
      longArray0[3] = 1722L;
      longArray0[4] = (-663L);
      longArray0[5] = (-1730L);
      longArray0[6] = (long) 3554;
      longArray0[7] = 539L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1190, 3554);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1730L), (-1341L), (-1730L), 1722L, (-663L), (-1730L), 3554L, 539L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = ArrayUtils.insert(8, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, 3554, 1190, 16);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(8, longArray0.length);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {(-1730L), (-1341L), (-1730L), 1722L, (-663L), (-1730L), 3554L, 539L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      char[] charArray0 = new char[20];
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.addFirst(charArray1, '\u0000');
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray2.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      Long long0 = new Long((-1594L));
      assertNotNull(long0);
      assertEquals((-1594L), (long)long0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert(10, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      float[] floatArray0 = new float[2];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, Float.NaN);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift((Object[]) null, (int) (byte)0);
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = '!';
      charArray0[2] = '!';
      charArray0[3] = '7';
      charArray0[4] = '!';
      charArray0[5] = '!';
      charArray0[6] = '!';
      charArray0[7] = '!';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '|');
      assertTrue(int1 == int0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'7', '!', '!', '7', '!', '!', '!', '!'}, charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '!';
      doubleArray0[1] = (double) '!';
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) 'f';
      doubleArray0[4] = (-448.942746883205);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {33.0, 33.0, (-1.0), 102.0, (-448.942746883205)}, doubleArray0, 0.01);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(9, booleanArray0.length);
      assertEquals(8, int2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      ArrayUtils.shift((Object[]) null, (-322));
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = 'f';
      charArray0[2] = 'G';
      charArray0[3] = '!';
      charArray0[4] = '!';
      charArray0[5] = '7';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '$');
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'!', 'f', 'G', '!', '!', '7'}, charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '7';
      doubleArray0[1] = (double) '!';
      doubleArray0[2] = (double) '7';
      doubleArray0[3] = (double) (short)801;
      doubleArray0[4] = (double) '!';
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {55.0, 33.0, 55.0, 801.0, 33.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'f';
      floatArray0[1] = (float) '7';
      floatArray0[2] = (float) '!';
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 'G';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {102.0F, 55.0F, 33.0F, (-1.0F), 71.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-126), (int) (short)0);
      assertTrue(int1 == int0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = ';';
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) ';';
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-862), 49);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {59L}, longArray0);
      assertArrayEquals(new long[] {59L}, longArray1);
      
      long[] longArray2 = ArrayUtils.addFirst(longArray1, 59L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(2, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {59L}, longArray0);
      assertArrayEquals(new long[] {59L}, longArray1);
      assertArrayEquals(new long[] {59L, 59L}, longArray2);
      
      ArrayUtils.swap(longArray0, 49, (-862));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(1, longArray0.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {59L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short)457;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (short)0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short) (-1), (int) (short)457);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray1);
      
      byte[] byteArray0 = ArrayUtils.insert((int) (short) (-1), (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-1666), 3712, (int) (short)0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)457;
      intArray0[1] = 3712;
      intArray0[2] = 122;
      intArray0[3] = (int) (short)0;
      intArray0[4] = 3712;
      intArray0[5] = (int) (short) (-1);
      intArray0[6] = 3712;
      int[] intArray1 = ArrayUtils.add(intArray0, (-815));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {457, 3712, 122, 0, 3712, (-1), 3712}, intArray0);
      assertArrayEquals(new int[] {457, 3712, 122, 0, 3712, (-1), 3712, (-815)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      long[] longArray0 = ArrayUtils.insert((-1347), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1347), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1347, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 2387L);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-770);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-770), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)116}, byteArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte)116}, byteArray1);
      
      long[] longArray0 = ArrayUtils.insert((-1385), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true}, booleanArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'a';
      charArray0[1] = 'i';
      charArray0[2] = 'X';
      charArray0[3] = 'm';
      charArray0[4] = 'n';
      charArray0[5] = '5';
      charArray0[6] = 'B';
      charArray0[7] = 'C';
      charArray0[8] = 'C';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '5');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'a', 'i', 'X', 'm', 'n', '5', 'B', 'C', 'C'}, charArray0);
      assertArrayEquals(new char[] {'a', 'i', 'X', 'm', 'n', 'B', 'C', 'C'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      float[] floatArray0 = new float[3];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (-3331.61F));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 833.0F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {833.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      Double double0 = new Double(1207.0);
      assertNotNull(double0);
      assertEquals(1207.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {1207.0, 1207.0, 1207.0, 1207.0, 1207.0, 1207.0, 1207.0, 1207.0, 1207.0}, doubleArray1, 0.01);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) (byte) (-40));
      assertNotNull(float0);
      assertEquals((-40.0F), (float)float0, 0.01F);
      
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1194.8455F));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-1194.8455F), (-40.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 833.0F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)2460;
      doubleArray0[1] = (double) (byte)42;
      doubleArray0[2] = (double) 84;
      doubleArray0[3] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, 61, 0, (-724));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2460.0, 42.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((short)2460);
      assertNotNull(integer0);
      assertEquals(2460, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray0, (-815), (-1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray2.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = 'Q';
      charArray0[2] = 'a';
      charArray0[3] = '.';
      charArray0[4] = 'e';
      ArrayUtils.reverse(charArray0, 113, 84);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'V', 'Q', 'a', '.', 'e'}, charArray0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(1222.14109299);
      assertNotNull(float0);
      assertEquals(1222.1411F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (-815));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-815.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1666.0F));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1222.1411F, (-815.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)36, (-1516));
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)36, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = (Byte) (byte)36;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, 2592);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1);
      assertNotNull(bitSet0);
      assertEquals(2, booleanArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      mockRandom0.setSeed(171L);
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)36, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) byte0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {36.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {36.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, (-229), 'w');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -229, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(10, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      char[] charArray0 = new char[4];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'L', 97);
      assertNotNull(bitSet0);
      assertEquals(4, charArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (byte)41;
      doubleArray0[4] = (double) (byte)41;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 231.58935037227707;
      ArrayUtils.shift(doubleArray0, 657, (int) (byte)2, (int) (byte)41);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, 41.0, 41.0, 0.0, 0.0, 231.58935037227707}, doubleArray0, 0.01);
      
      ArrayUtils.shift(charArray0, Integer.MAX_VALUE, (int) (byte)41, (int) (byte)41);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '~');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1216), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1216, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)801;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)801, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)801;
      doubleArray0[2] = (double) (short)801;
      doubleArray0[3] = (double) (short)801;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)801;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) (short)0;
      doubleArray0[8] = (double) (short)801;
      ArrayUtils.shift(doubleArray0, 0, 801, (int) (short)801);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 801.0, 801.0, 801.0, 0.0, 801.0, 0.0, 0.0, 801.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = 'q';
      charArray0[2] = 'Z';
      charArray0[3] = '$';
      charArray0[4] = '2';
      charArray0[5] = 'u';
      ArrayUtils.shift(charArray0, (int) (short)801, (int) (short)0, 801);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {';', 'q', 'Z', '$', '2', 'u'}, charArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '2');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {';', 'q', 'Z', '$', '2', 'u'}, charArray0);
      assertArrayEquals(new char[] {';', 'q', 'Z', '$', 'u'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 59;
      longArray0[1] = (long) (byte)0;
      ArrayUtils.reverse(longArray0, 1, 1);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {59L, 0L, 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, 59, 59);
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true, 1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(3, booleanArray0.length);
      assertFalse(bitSet1.isEmpty());
      assertEquals(2, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{1}", bitSet1.toString());
      assertEquals(1, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(1, intArray0.length);
      assertEquals(3, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new long[] {59L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, true, true, false}, booleanArray0));
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      ArrayUtils.shift((float[]) null, 2146336202, (-1871), (-770));
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      short[] shortArray0 = new short[4];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      ArrayUtils.shift((float[]) null, 618, 618, 618);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      Integer integer1 = new Integer(101);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(101, (int)integer1);
      
      Integer integer2 = new Integer(124);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(124, (int)integer2);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-945));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      short[] shortArray1 = ArrayUtils.insert((-2146179771), shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int1 = ArrayUtils.lastIndexOf((int[]) null, (-1640), 140);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2146340530;
      floatArray0[1] = (float) (-3570);
      floatArray0[2] = (float) (-1640);
      floatArray0[3] = (float) 1;
      ArrayUtils.shift(floatArray0, (-1));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-3570.0F), (-1640.0F), 1.0F, 2.14634048E9F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray1.length);
      assertTrue(boolean1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 155, 1979);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (-1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2460, (short)0, (short)0}, shortArray2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'b';
      charArray0[2] = 'A';
      ArrayUtils.shift(charArray0, 0, 2250, 0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'n', 'b', 'A', '\u0000'}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 2);
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)0);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      
      int[] intArray0 = new int[3];
      intArray0[1] = 2451;
      intArray0[2] = (int) (short)0;
      ArrayUtils.swap(intArray0, 117, (int) (short)0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 2451, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      ArrayUtils.swap(intArray1, 48, 48, 0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)0;
      Integer integer0 = new Integer((-2421));
      assertNotNull(integer0);
      assertEquals((-2421), (int)integer0);
      
      ArrayUtils.reverse((long[]) null);
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-270));
      assertNotNull(integer0);
      assertEquals((-270), (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-270)}, intArray0);
      
      ArrayUtils.reverse((long[]) null);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-270);
      floatArray0[1] = (float) (int)integerArray0[0];
      floatArray0[2] = (float) (-270);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-270.0F), (-270.0F), (-270.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[10];
      charArray0[0] = 'Z';
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int1 = ArrayUtils.indexOf((Object[]) null, (Object) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 2146532170);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(10, charArray0.length);
      assertEquals(10, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'Z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'Z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-1));
      assertEquals(2, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      int int1 = ArrayUtils.indexOf(doubleArray0, 1.5);
      assertFalse(int1 == int0);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1665L;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (byte) (-1);
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = 2144L;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte) (-1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ArrayUtils.swap(floatArray0, (int) (byte) (-1), (-1), 1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(2, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (-1);
      intArray0[2] = 1;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (-1);
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, (-1), 1, 0, 0, (-1)}, intArray0);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray2.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '=';
      charArray0[1] = 'n';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), Integer.MAX_VALUE);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'=', 'n'}, charArray0);
      assertArrayEquals(new char[] {'=', 'n'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2005), 2337);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-15));
      assertNotNull(integer0);
      assertEquals((-15), (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (-1));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) 2146340530;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 5;
      floatArray0[6] = (float) (-1958L);
      floatArray0[7] = (float) 5;
      floatArray0[8] = (float) (-1);
      ArrayUtils.shift(floatArray0, 0, 667, (-1));
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2.14634048E9F, (-1.0F), 5.0F, (-1958.0F), 5.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 635;
      doubleArray0[8] = Double.NaN;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)76;
      shortArray0[1] = (short) (-175);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)3525;
      shortArray0[4] = (short)13;
      shortArray0[5] = (short) (-1);
      ArrayUtils.swap(shortArray0, 3554, 2, (int) (short) (-175));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)76, (short) (-175), (short) (-1), (short)3525, (short)13, (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = (-663L);
      longArray0[1] = 0L;
      longArray0[2] = (-1730L);
      longArray0[3] = 9L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 3554, 3554);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-663L), 0L, (-1730L), 9L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = ArrayUtils.insert(0, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 0, (-2066), 1);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {(-663L), 0L, (-1730L), 9L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      booleanArray1[4] = false;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      booleanArray1[7] = true;
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray1, false);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(5, booleanArray2.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-36);
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte)0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-11));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-36), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-11), (byte)0, (byte) (-36), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      Long long1 = new Long(14438L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(14438L, (long)long1);
      
      Long long2 = Long.valueOf(4748L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(4748L, (long)long2);
      
      Long[] longArray0 = new Long[7];
      longArray0[0] = long1;
      longArray0[1] = long1;
      Long long3 = new Long((byte) (-36));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals((-36L), (long)long3);
      
      longArray0[2] = long3;
      longArray0[3] = long2;
      longArray0[4] = long0;
      longArray0[5] = long1;
      Long long4 = new Long(1L);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals(1L, (long)long4);
      
      longArray0[6] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {14438L, 14438L, (-36L), 4748L, 1L, 14438L, 1L}, longArray1);
      
      Integer integer0 = Integer.getInteger("  ", (-2144254348));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2144254348), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, (Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNull(integerArray0);
      
      ArrayUtils.shift(floatArray0, (int) (byte) (-36), (-3558), (-2144254348));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-2425), (-2425), (-2425));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((short)97);
      assertNotNull(integer0);
      assertEquals(97, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1758L;
      longArray0[1] = 1758L;
      longArray0[4] = 1758L;
      longArray0[3] = 1758L;
      longArray0[4] = 1758L;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1940L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 0L, 1758L, 1758L}, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 0L, 1758L, 1758L}, longArray1);
      
      int int0 = 99;
      Integer integer0 = new Integer(99);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(99, (int)integer0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-109));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-109)}, byteArray0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((-2786L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2786L), (long)long1);
      
      Long[] longArray2 = new Long[5];
      longArray2[0] = (Long) 1758L;
      longArray2[2] = (Long) 1758L;
      longArray2[3] = long1;
      Long long2 = Long.valueOf(1L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      longArray2[4] = long2;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2, (-2786L));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertEquals(5, longArray3.length);
      assertEquals(5, longArray2.length);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertArrayEquals(new long[] {1758L, (-2786L), 1758L, (-2786L), 1L}, longArray3);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(6, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (long)longArray2[2];
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) 1758L;
      floatArray0[3] = (float) int0;
      ArrayUtils.shift(floatArray0, (-3558), (-1), 1320);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1758.0F, 99.0F, 1758.0F, 99.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-2286L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'b';
      charArray0[2] = '~';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'b', (-1216));
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'x', 'b', '~'}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-11);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)41;
      shortArray0[1] = (short) (byte) (-11);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (byte)12;
      shortArray0[4] = (short) (byte) (-11);
      shortArray0[5] = (short) (byte)41;
      shortArray0[6] = (short) (byte) (-11);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)41);
      assertEquals(7, shortArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)41, (short) (-11), (short)1, (short)12, (short) (-11), (short)41, (short) (-11)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1958L));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-14);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-65), (-892));
      assertNotNull(bitSet0);
      assertEquals(3, byteArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {(byte) (-65), (byte)88, (byte) (-14)}, byteArray0);
      
      Byte[] byteArray1 = new Byte[9];
      byteArray1[0] = (Byte) (byte) (-65);
      byteArray1[1] = (Byte) (byte) (-14);
      Byte byte0 = new Byte((byte) (-65));
      assertNotNull(byte0);
      assertEquals((byte) (-65), (byte)byte0);
      
      byteArray1[2] = byte0;
      byteArray1[3] = (Byte) (byte) (-14);
      byteArray1[4] = (Byte) (byte) (-65);
      byteArray1[5] = (Byte) (byte)88;
      byteArray1[6] = (Byte) (byte) (-65);
      byteArray1[7] = (Byte) (byte) (-14);
      byteArray1[8] = (Byte) (byte) (-14);
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)10);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(9, byteArray2.length);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-14), (byte) (-65), (byte) (-14), (byte) (-65), (byte)88, (byte) (-65), (byte) (-14), (byte) (-14)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      int[] intArray0 = new int[4];
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      ArrayUtils.swap(byteArray0, 22, (-790), Integer.MAX_VALUE);
      assertEquals(11, byteArray0.length);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(11, byteArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) (byte)100;
      floatArray0[2] = (float) (byte)100;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) 22;
      floatArray0[5] = (float) Integer.MAX_VALUE;
      floatArray0[6] = (float) (byte)100;
      floatArray0[7] = (float) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 100.0F, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(8, floatArray0.length);
      assertEquals("{1, 2, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new float[] {2.14748365E9F, 100.0F, 100.0F, 1.0F, 22.0F, 2.14748365E9F, 100.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(3, intArray1.length);
      assertEquals(4, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int[] intArray0 = new int[2];
      intArray0[0] = 1214;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1214, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1214, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-720.0F);
      floatArray0[0] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 6);
      assertEquals(2, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[2] = (long) 6;
      longArray0[3] = (long) 6;
      longArray0[4] = (long) 6;
      longArray0[5] = (long) 6;
      longArray0[6] = (long) 1;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-663L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 6L, 6L, 6L, 1L}, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 6L, 6L, 6L, 1L}, longArray1);
      
      float[] floatArray1 = new float[18];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-663L);
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = (-720.0F);
      floatArray1[4] = (float) 6L;
      floatArray1[6] = (float) 6L;
      boolean[] booleanArray0 = new boolean[7];
      int[] intArray0 = ArrayUtils.insert(1, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      ArrayUtils.swap(booleanArray0, (-3558), 2647, 1251);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1530);
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-170);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1801), 2146336255);
      assertEquals(6, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1666), (short) (-170), (short)0, (short)0, (short)0}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      int int1 = (-43);
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short) (-170), (-43));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Object[] objectArray0 = new Object[18];
      shortArray0[1] = (short) (-170);
      Integer integer0 = new Integer((short) (-170));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals((-170), (int)integer0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-1666);
      int int2 = (-499);
      intArray0[1] = (-499);
      intArray0[2] = (int) (short) (-170);
      intArray0[3] = 2146336255;
      intArray0[4] = 1530;
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(84, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 84, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)48;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-38));
      assertEquals(6, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte) (-53), (byte)48, (byte)0}, byteArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)48;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte) (-53);
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1128L), 55);
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new long[] {}, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)48;
      intArray0[1] = (int) (byte)48;
      intArray0[2] = 109;
      intArray0[3] = (int) (byte)48;
      intArray0[4] = (int) (byte)48;
      intArray0[5] = 109;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (byte)48);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {48, 48, 48, 109, 48, 48, 109}, intArray1);
      assertArrayEquals(new int[] {48, 48, 109, 48, 48, 109}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) (byte) (-38));
      assertNull(doubleArray0);
      
      int[] intArray2 = ArrayUtils.clone(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray2.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertArrayEquals(new int[] {48, 48, 48, 109, 48, 48, 109}, intArray1);
      assertArrayEquals(new int[] {48, 48, 48, 109, 48, 48, 109}, intArray2);
      assertArrayEquals(new int[] {48, 48, 109, 48, 48, 109}, intArray0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte) (-53), (byte)48, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1), (byte)0, (byte) (-53), (byte)48, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) ';';
      doubleArray0[1] = (double) ';';
      doubleArray0[2] = (double) 'r';
      doubleArray0[3] = (double) 'r';
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 59.0, (double) 0);
      assertTrue(int1 == int0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new double[] {59.0, 59.0, 114.0, 114.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, (Integer) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(9, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "");
      assertNotNull(stringArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-1938), (int) (short) (-1938));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      Integer integer0 = new Integer((-1993));
      assertNotNull(integer0);
      assertEquals((-1993), (int)integer0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1938);
      intArray0[1] = (int) (short) (-1938);
      intArray0[2] = (-1993);
      intArray0[3] = (int) (short) (-1938);
      intArray0[4] = 0;
      intArray0[5] = (int) (short) (-1938);
      Integer integer1 = new Integer((-1938));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1938), (int)integer1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-1938);
      Integer integer2 = new Integer((-1993));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1993), (int)integer2);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1938);
      doubleArray0[1] = (double) (-1993);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (short) (-1938);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1938);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 109.0, 0, (-1087.89148));
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1938.0), (-1993.0), 0.0, (-1938.0), 0.0, (-1938.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(boolean0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[2] = '~';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '~';
      doubleArray0[1] = (double) 'x';
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {120.0, 126.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '~';
      intArray0[1] = (int) 'b';
      intArray0[2] = (int) 'x';
      intArray0[3] = 101;
      intArray0[4] = (int) 'x';
      int int0 = ArrayUtils.indexOf(intArray0, 120, (-1337));
      assertEquals(5, intArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new int[] {126, 98, 120, 101, 120}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = ArrayUtils.insert(831, (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      Character[] characterArray0 = new Character[7];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '\'');
      assertNotNull(charArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\'', '\'', '\'', '\'', '\'', '\'', '\''}, charArray0);
      
      int[] intArray0 = ArrayUtils.insert(2, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      ArrayUtils.swap((Object[]) characterArray0, (-1222), (-1222), 2);
      assertEquals(7, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-29);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-29);
      shortArray0[3] = (short) (byte) (-29);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-29), (short)0, (short)0, (short) (-29)}, shortArray0);
      
      ArrayUtils.swap((Object[]) shortArray1, (int) (short)0, (int) (byte) (-29), (int) (short)0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-29), (short)0, (short)0, (short) (-29)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, Float.NaN);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 3268L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {3268L}, longArray1);
      
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      ArrayUtils.swap(longArray2, 141, 36);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(0, longArray2.length);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-720.0F);
      floatArray0[1] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 6);
      assertEquals(2, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-720.0F), 1.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)121;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)121, (int) (byte) (-11));
      assertNotNull(bitSet0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte)116, (byte)88, (byte) (-16), (byte) (-16), (byte)121}, byteArray0);
      
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = (Byte) (byte) (-16);
      byteArray1[1] = (Byte) (byte)116;
      byteArray1[2] = (Byte) (byte) (-16);
      byteArray1[3] = (Byte) (byte) (-16);
      byteArray1[4] = (Byte) (byte)116;
      byteArray1[5] = (Byte) (byte)121;
      byteArray1[6] = (Byte) (byte)88;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-111));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(7, byteArray2.length);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)116, (byte) (-16), (byte) (-16), (byte)116, (byte)121, (byte)88}, byteArray2);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2827);
      shortArray0[1] = (short)12;
      shortArray0[2] = (short) (byte) (-16);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-2827));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2827), (short)12, (short) (-16)}, shortArray0);
      assertArrayEquals(new short[] {(short)12, (short) (-16)}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short)457;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)457, (short)0, (short)0, (short) (-1), (short)0, (short) (-1)}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1);
      float[] floatArray1 = ArrayUtils.insert((int) (short)0, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0);
      assertNotNull(stringArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (byte) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)457, (short)0, (short)0, (short) (-1), (short)0, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)457, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)6965);
      assertNotNull(short0);
      assertEquals((short)6965, (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)6965}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (byte) (-1), 2349, (int) (byte) (-1));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((byte) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-711.0), 2876, (double) (byte) (-1));
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[6] = (short) (-29156);
      shortArray0[7] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short)0, (short) (-29156), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer(2);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      Integer integer2 = new Integer(498);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(498, (int)integer2);
      
      Integer integer3 = Integer.valueOf(3157);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(3157, (int)integer3);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (-1806));
      assertNull(floatArray0);
      
      MutableInt mutableInt0 = new MutableInt((-1));
      assertNotNull(mutableInt0);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) integer0);
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 498;
      longArray0[4] = (long) 3157;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      long[] longArray1 = ArrayUtils.add(longArray0, 2, 100L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), 100L, 2L, 498L, 3157L, (-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), 2L, 498L, 3157L, (-1L), (-1L)}, longArray0);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short)3049);
      assertNotNull(short0);
      assertEquals((short)3049, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-234));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-234), (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)3049);
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short)3049, (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-234));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short) (-234), (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-1986));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      assertEquals((short) (-1986), (short)short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short)3049);
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertNotNull(short5);
      assertEquals((short)3049, (short)short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short) (-1640));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short0));
      assertNotNull(short6);
      assertEquals((short) (-1640), (short)short6);
      
      shortArray0[6] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)3049, (short) (-234), (short)3049, (short) (-234), (short) (-1986), (short)3049, (short) (-1640)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (-1384));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1431655765);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom((-2745L));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)964;
      ArrayUtils.shift(intArray0, 2);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {964}, intArray0);
      
      boolean boolean1 = new Boolean(true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2142601671;
      doubleArray1[1] = (double) 2142601671;
      doubleArray1[2] = (double) 2142601671;
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 2142601671, (int) (short)964);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {2.142601671E9, 2.142601671E9, 2.142601671E9}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)964, (-1110));
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 964;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 2142601671;
      longArray0[3] = (long) 2012;
      longArray0[4] = (long) (-1128);
      int int1 = ArrayUtils.indexOf(longArray0, (-75L), 17);
      assertTrue(int1 == int0);
      assertEquals(5, longArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {964L, (-1L), 2142601671L, 2012L, (-1128L)}, longArray0);
      
      int int2 = ArrayUtils.lastIndexOf(longArray0, (long) (-1), 599);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(5, longArray0.length);
      assertEquals(1, int2);
      assertArrayEquals(new long[] {964L, (-1L), 2142601671L, 2012L, (-1128L)}, longArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = '(';
      charArray0[2] = '\"';
      charArray0[3] = 'K';
      charArray0[4] = 'o';
      charArray0[5] = '8';
      charArray0[6] = ')';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      assertArrayEquals(new char[] {'f', '(', '\"', 'K', 'o', '8', ')'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short)457;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)457, (short)0, (short)0, (short) (-1), (short)0, (short) (-1)}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1);
      float[] floatArray1 = ArrayUtils.insert((int) (short)0, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0);
      assertNotNull(stringArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (byte)100);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      boolean boolean2 = ArrayUtils.contains(floatArray1, (float) (byte)0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(boolean2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)600;
      shortArray0[1] = (short) (-1190);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)17);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)600, (short) (-1190)}, shortArray0);
      assertArrayEquals(new short[] {(short)600, (short) (-1190)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-270));
      assertNotNull(integer0);
      assertEquals((-270), (int)integer0);
      
      Integer integer1 = new Integer(1853);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1853, (int)integer1);
      
      Integer integer2 = new Integer(479);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(479, (int)integer2);
      
      Integer integer3 = new Integer((-1529));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1529), (int)integer3);
      
      Integer integer4 = new Integer((-270));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals((-270), (int)integer4);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.shift(booleanArray0, (-270), 0, (-1644));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1644);
      doubleArray0[1] = (double) 1853;
      doubleArray0[2] = (double) 1827;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1853.0, (-1644), 1435.43247);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1644.0), 1853.0, 1827.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short) (-968);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-968));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)5, (short)5, (short) (-968)}, shortArray0);
      assertArrayEquals(new short[] {(short)5, (short)5}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      
      Character character0 = Character.valueOf('8');
      assertNotNull(character0);
      assertEquals('8', (char)character0);
      
      Character character1 = new Character('2');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('2', (char)character1);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(characterArray0);
      assertNotNull(map0);
      assertEquals(0, characterArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      ArrayUtils.shift((long[]) null, 3003, (-1474), (-1474));
      ArrayUtils.swap(byteArray0, (-742), 2);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'q', 128);
      assertEquals((-1), int0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '[');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'['}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[10];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'b', 3);
      assertNotNull(bitSet0);
      assertEquals(10, charArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)12, 12);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)41, (byte)0, (byte)41, (byte)2, (byte)2}, byteArray0);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-1859));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1859), (int)integer1);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurences((Integer[]) null, integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)65);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)41, (byte)0, (byte)41, (byte)2, (byte)2}, byteArray0);
      
      Integer integer2 = new Integer((-1859));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1859), (int)integer2);
      
      BitSet bitSet2 = ArrayUtils.indexesOf((Object[]) null, (Object) null);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertNotNull(bitSet2);
      assertEquals(64, bitSet2.size());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)12;
      intArray0[2] = (int) (byte)12;
      intArray0[3] = (-1859);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)2;
      intArray0[6] = (int) (byte)41;
      intArray0[7] = (int) (byte)65;
      intArray0[8] = (int) 'b';
      int[] intArray1 = ArrayUtils.add(intArray0, 543);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(10, intArray1.length);
      assertEquals(9, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {2, 12, 12, (-1859), 0, 2, 41, 65, 98, 543}, intArray1);
      assertArrayEquals(new int[] {2, 12, 12, (-1859), 0, 2, 41, 65, 98}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((short) (-565));
      assertNotNull(short0);
      assertEquals((short) (-565), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-565), (short) (-565), (short) (-565), (short) (-565), (short) (-565), (short) (-565), (short) (-565), (short) (-565)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      short[] shortArray0 = ArrayUtils.insert(0, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (-234));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) 0L);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (-51.925));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      Short short0 = new Short((short) (-1455));
      assertNotNull(short0);
      assertEquals((short) (-1455), (short)short0);
      
      Short short1 = new Short((short) (-1455));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-1455), (short)short1);
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null, (short) (-1455));
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)6);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)6}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(59);
      assertNotNull(integer0);
      assertEquals(59, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1854));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1854), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1968526677);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1968526677, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-70));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-70), (int)integer3);
      
      integerArray0[3] = integer3;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) integer1, 6);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer3));
      assertEquals(4, integerArray0.length);
      assertEquals((-1), int0);
      assertSame(integerArray0, integerArray1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fyeT[2nC]48jup  ";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray1, integerArray0[1]);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertEquals(5, integerArray2.length);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)281);
      assertNotNull(short0);
      assertEquals((short)281, (short)short0);
      
      Short short1 = new Short((short)281);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)281, (short)short1);
      
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)281);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)281, (short)281}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)281, (short)281}, shortArray1);
      assertArrayEquals(new short[] {(short)281, (short)281}, shortArray2);
      
      Integer integer4 = new Integer((-1));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals((-1), (int)integer4);
      
      Integer[] integerArray3 = ArrayUtils.add(integerArray2, integer4);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray3);
      assertEquals(4, integerArray0.length);
      assertEquals(6, integerArray3.length);
      assertEquals(4, integerArray1.length);
      assertEquals(5, integerArray2.length);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray1, integerArray3);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray3);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-6);
      byteArray1[1] = (byte) (-6);
      byteArray1[2] = (byte) (-6);
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray1, (byte)126);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-6), (byte) (-6), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-6), (byte) (-6), (byte)0}, byteArray2);
      
      ArrayUtils.shift((Object[]) byteArray0, (-4288), (int) (byte) (-6), (-1039));
      assertEquals(6, byteArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (int) byte0, 1044);
      assertNull(integerArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)0, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(4, byteArray1.length);
      assertEquals(3, int0);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-6), (byte) (-6), (byte)0}, byteArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      
      Integer integer0 = new Integer((-1662));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1662), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isEquals(integer0, object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.swap(shortArray0, (-4288), 2146782063, (-1662));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(1, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray0);
      assertNotNull(objectArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, objectArray0.length);
      assertSame(byteArray0, objectArray0);
      
      Short[] shortArray2 = new Short[8];
      shortArray2[0] = (Short) (short)0;
      shortArray2[1] = (Short) (short)0;
      Short short0 = new Short((short)32436);
      assertNotNull(short0);
      assertEquals((short)32436, (short)short0);
      
      shortArray2[2] = short0;
      Short short1 = new Short((short)8);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)8, (short)short1);
      
      shortArray2[3] = short1;
      shortArray2[4] = (Short) (short)0;
      shortArray2[5] = (Short) (short)0;
      shortArray2[6] = (Short) (short)0;
      shortArray2[7] = (Short) (short)0;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2, (short) (byte)126);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertEquals(8, shortArray3.length);
      assertEquals(8, shortArray2.length);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)32436, (short)8, (short)0, (short)0, (short)0, (short)0}, shortArray3);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)6);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      char[] charArray0 = new char[19];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(19, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, 1019);
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[4];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0L;
      ArrayUtils.shift(doubleArray1, (-1259), (-1259), (-1259));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = 'S';
      charArray0[2] = 'N';
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)48, (int) (byte) (-17));
      assertEquals((-1), int0);
      
      ArrayUtils.swap(shortArray0, (int) (byte) (-17), (-1830), (int) (byte) (-17));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(0, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-291.0F);
      floatArray0[1] = (float) (-1259);
      floatArray0[2] = (float) 'N';
      floatArray0[3] = (float) (-1830);
      floatArray0[4] = Float.NaN;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-2190.0F));
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-291.0F), (-1259.0F), 78.0F, (-1830.0F), Float.NaN}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      short short0 = (short) (-1938);
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-1938), (int) (short) (-1938));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      int int0 = (-1993);
      Integer integer0 = new Integer((-1993));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1993), (int)integer0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-1938);
      intArray0[1] = (int) (short) (-1938);
      intArray0[2] = (-1993);
      intArray0[3] = (int) (short) (-1938);
      intArray0[4] = 0;
      intArray0[5] = (int) (short) (-1938);
      intArray0[6] = (-1993);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(93.0);
      assertNotNull(double0);
      assertEquals(93.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {93.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1256);
      assertNotNull(integer0);
      assertEquals(1256, (int)integer0);
      
      integerArray0[0] = integer0;
      Double[] doubleArray2 = new Double[9];
      Double double0 = new Double(1256);
      assertNotNull(double0);
      assertEquals(1256.0, (double)double0, 0.01);
      
      doubleArray2[0] = double0;
      Double double1 = Double.valueOf((double) 1256);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1256.0, (double)double1, 0.01);
      
      doubleArray2[1] = double1;
      Double double2 = new Double((double) doubleArray2[0]);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(9, doubleArray2.length);
      assertEquals(1256.0, (double)double2, 0.01);
      
      doubleArray2[2] = double2;
      Double double3 = new Double(1.0);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(1.0, (double)double3, 0.01);
      
      doubleArray2[3] = double3;
      Double double4 = new Double(2.0);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals(2.0, (double)double4, 0.01);
      
      doubleArray2[4] = double4;
      Double double5 = new Double((double) doubleArray2[4]);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      assertEquals(9, doubleArray2.length);
      assertEquals(2.0, (double)double5, 0.01);
      
      doubleArray2[5] = double5;
      Double double6 = new Double((-1598.0));
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotNull(double6);
      assertEquals((-1598.0), (double)double6, 0.01);
      
      doubleArray2[6] = double6;
      Double double7 = new Double(1871.61934134912);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotNull(double7);
      assertEquals(1871.61934134912, (double)double7, 0.01);
      
      doubleArray2[7] = double7;
      Double double8 = new Double((double) doubleArray2[0]);
      assertEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotNull(double8);
      assertEquals(9, doubleArray2.length);
      assertEquals(1256.0, (double)double8, 0.01);
      
      doubleArray2[8] = double8;
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {1256.0, 1256.0, 1256.0, 1.0, 2.0, 2.0, (-1598.0), 1871.61934134912, 1256.0}, doubleArray3, 0.01);
      
      try { 
        Integer.valueOf(", Length: ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \", Length: \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '/';
      longArray0[1] = (long) 'E';
      longArray0[2] = (long) 'E';
      longArray0[3] = (long) '/';
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1758L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {47L, 69L, 69L, 47L}, longArray0);
      assertArrayEquals(new long[] {47L, 69L, 69L, 47L}, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1758L;
      floatArray0[1] = (float) 69L;
      floatArray0[2] = (float) (-663L);
      floatArray0[3] = (float) (-663L);
      floatArray0[4] = (float) '/';
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'E';
      intArray0[1] = (-1);
      intArray0[2] = 17;
      intArray0[3] = (int) '/';
      intArray0[4] = (-209);
      intArray0[5] = (-1);
      intArray0[6] = 17;
      intArray0[7] = (-209);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 17);
      assertNotNull(bitSet0);
      assertEquals(8, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertEquals("{2, 6}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertArrayEquals(new int[] {69, (-1), 17, 47, (-209), (-1), 17, (-209)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = null;
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1584L));
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-663);
      intArray0[1] = (-663);
      Character character0 = new Character('+');
      assertNotNull(character0);
      assertEquals('+', (char)character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'+'}, charArray1);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (-736), 174);
      assertTrue(int1 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray2 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-449));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -449, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      float[] floatArray0 = new float[2];
      ArrayUtils.shift(floatArray0, (-2145799347));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 3554;
      longArray0[1] = 9L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 3554, 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {3554L, 9L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (-269L), 1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(bitSet0);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {3554L, 9L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3554;
      intArray0[1] = 109;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-2245));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {3554, 109, 0}, intArray0);
      assertArrayEquals(new int[] {(-2245), 3554, 109, 0}, intArray1);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.5);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray2 = ArrayUtils.clone(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {3554, 109, 0}, intArray0);
      assertArrayEquals(new int[] {(-2245), 3554, 109, 0}, intArray1);
      assertArrayEquals(new int[] {(-2245), 3554, 109, 0}, intArray2);
      
      ArrayUtils.swap(longArray0, 4287, (-2440));
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(3, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {3554L, 9L, 0L}, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)823;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3554, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'O';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'g');
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', 'O', '\u0000'}, charArray0);
      
      ArrayUtils.shift(charArray0, (-3945));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'O', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3945);
      longArray0[0] = (long) '|';
      int int0 = (-840);
      ArrayUtils.shift(longArray0, (-840), (-3550), 1889);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {124L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'g';
      doubleArray0[1] = (double) 'O';
      doubleArray0[2] = (double) (-3945);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'O';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 79, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      ArrayUtils.shift((long[]) null, (-1306), (-1306), (-1306));
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)46;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray2, byteArray2);
      assertEquals(1, byteArray2.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)46}, byteArray2);
      
      Character character0 = Character.valueOf('%');
      assertNotNull(character0);
      assertEquals('%', (char)character0);
      
      Character character1 = new Character('T');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('T', (char)character1);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, shortArray1.length);
      assertTrue(boolean1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean2 = ArrayUtils.contains(shortArray0, (short) (byte)46);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(4, shortArray0.length);
      assertFalse(boolean2);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      ArrayUtils.shift((long[]) null, (int) (byte)46, (int) (byte)46, 3003);
      ArrayUtils.swap(byteArray2, 2947, 2);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)46}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[13];
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(13, byteArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)2460}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      Integer integer0 = Integer.valueOf((-683));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-683), (int)integer0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer0, (-683));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 59;
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 59);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {59.0}, doubleArray1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) doubleArray0, (Object) null);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertEquals(1, doubleArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) null, 1060);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 59L}, longArray0);
      assertArrayEquals(new long[] {0L, 59L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'r', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'r', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[2]);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Integer integer0 = new Integer((-997));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-997), (int)integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer1 = ArrayUtils.get(integerArray0, 0);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      assertEquals((-997), (int)integer1);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) integer1, 0);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(int1 == int0);
      assertEquals(3, integerArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.contains(booleanArray1, true);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-6));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      objectArray0[1] = (Object) '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[6] = 'f';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'8', '\u0000', '8', '8', '8', '\u0000', 'f'}, charArray1);
      assertArrayEquals(new char[] {'8', '\u0000', '8', '8', '8', '\u0000', 'f'}, charArray0);
      
      Double double0 = new Double((byte) (-6));
      assertNotNull(double0);
      assertEquals((-6.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-711.0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-6.0), (-6.0)}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[2], (-193));
      assertEquals(7, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 6, 84);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2460;
      shortArray0[1] = (short)2460;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)2460}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2460, (short)2460}, shortArray1);
      
      Integer integer0 = new Integer((-1605));
      assertNotNull(integer0);
      assertEquals((-1605), (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer1 = Integer.getInteger((String) null);
      assertNull(integer1);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, (Integer) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (int) (short)2460, 2907, 97);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      
      ArrayUtils.shift((int[]) null, 97, (int) (short)0, 6);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1338), (-1338), 3682);
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)42;
      byteArray1[3] = (byte)0;
      byte[] byteArray2 = ArrayUtils.insert(1, byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)42}, byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)42, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)42, (byte)48, (byte)48, (byte)42, (byte)0}, byteArray2);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte)42, (int) (byte) (-53), (-1455));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-74));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-74)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = (-663L);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-711);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-711)}, shortArray0);
      
      ArrayUtils.shift(doubleArray0, (int) (short) (-711), (int) (short) (-711), 1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short) (-711)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-711), (short) (-711)}, shortArray2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 2122);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2122}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2122;
      floatArray0[1] = (float) (short) (-711);
      floatArray0[2] = (float) 2122;
      floatArray0[3] = (float) 2122;
      int int0 = ArrayUtils.indexOf((int[]) null, (-534), 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-6));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'f';
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) 'f';
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) 'f';
      int int0 = ArrayUtils.indexOf(doubleArray0, 102.0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {102.0, 1.5, 102.0, 0.0, 102.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (byte)0);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertTrue(boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      ArrayUtils.swap((float[]) null, (-661), (-6068), 61);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      Random.setNextRandom((-1));
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      ArrayUtils.swap(intArray0, (-280), (-1), (-1));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((short)2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short)2);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(78L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(78L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(2918L);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(2918L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((long) longArray0[1]);
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals(6, longArray0.length);
      assertEquals(2L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long(2918L);
      assertFalse(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long2));
      assertNotNull(long5);
      assertEquals(2918L, (long)long5);
      
      longArray0[5] = long5;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {2L, 2L, 78L, 2918L, 2L, 2918L}, longArray1);
      
      ArrayUtils.shift((Object[]) longArray0, 120);
      assertEquals(6, longArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1771);
      intArray0[1] = (int) (short)2;
      intArray0[2] = (-1688);
      intArray0[3] = (-1771);
      intArray0[4] = 120;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1771), 2, (-1688), (-1771), 120}, intArray0);
      
      short[] shortArray1 = ArrayUtils.insert((int) (short)2, shortArray0, (short[]) null);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)0, (short)0, (short)0}, shortArray1);
      
      ArrayUtils.swap(intArray0, (-1771), (-19), (int) (short)2);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1771), 2, (-1688), (-1771), 120}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1771));
      assertEquals(5, intArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new int[] {(-1771), 2, (-1688), (-1771), 120}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      char[] charArray0 = new char[15];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(15, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      short[] shortArray0 = new short[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2570));
      assertNotNull(bitSet0);
      assertEquals(3, shortArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      ArrayUtils.swap((int[]) null, 2, 1062, 2);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 'Z';
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 90.0F);
      assertFalse(int1 == int0);
      assertEquals(7, floatArray0.length);
      assertEquals(1, int1);
      assertArrayEquals(new float[] {0.0F, 90.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int2 = ArrayUtils.indexOf((double[]) null, (double) 2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      Long[] longArray3 = ArrayUtils.toObject(longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray3);
      assertEquals(0, longArray3.length);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 90.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean1 = Boolean.valueOf("ANj>|T(*\"TY");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf(true);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (short)0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[17];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(17, booleanArray0.length);
      assertEquals(18, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0, 0, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 3554L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {3554L}, longArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) ';';
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 488;
      ArrayUtils.swap(longArray1, 0, 0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {3554L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 2, 2349, (-1284));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((byte) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-70));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-711.0), 2876, 1.5);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2349;
      intArray0[1] = 2349;
      intArray0[2] = (int) (byte) (-70);
      intArray0[3] = 2876;
      intArray0[4] = (-1284);
      Integer[] integerArray1 = ArrayUtils.toObject(intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {2349, 2349, (-70), 2876, (-1284)}, intArray0);
      
      Integer integer1 = new Integer(2349);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2349, (int)integer1);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) integer1, (int) (byte) (-1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), int0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray1, (-621), (-3432));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(0, intArray1.length);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertNotSame(intArray1, intArray0);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new int[] {}, intArray1);
      
      int[] intArray2 = ArrayUtils.removeAllOccurrences(intArray0, (int) (byte) (-1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertEquals(5, intArray2.length);
      assertEquals(5, intArray0.length);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertArrayEquals(new int[] {2349, 2349, (-70), 2876, (-1284)}, intArray2);
      assertArrayEquals(new int[] {2349, 2349, (-70), 2876, (-1284)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1256);
      assertNotNull(integer0);
      assertEquals(1256, (int)integer0);
      
      integerArray0[0] = integer0;
      try { 
        Integer.valueOf(", Length: ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \", Length: \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = (double) 32;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 32;
      doubleArray0[4] = (double) 32;
      doubleArray0[5] = (double) 32;
      doubleArray0[6] = (double) 32;
      doubleArray0[7] = (double) 32;
      ArrayUtils.shift(doubleArray0, 6, 6, 6);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = '!';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = '8';
      charArray0[7] = 'G';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'G');
      assertEquals(8, charArray0.length);
      assertEquals(7, int0);
      assertArrayEquals(new char[] {'G', '!', 'G', 'G', 'G', 'G', '8', 'G'}, charArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '!';
      doubleArray0[1] = (double) 'G';
      doubleArray0[2] = (double) 'G';
      doubleArray0[3] = (double) 'G';
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, (double[]) null);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray2, 0.01);
      
      ArrayUtils.reverse((Object[]) integerArray0, (-1), (-3570));
      assertEquals(0, integerArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, intArray1.length);
      assertTrue(boolean1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      ArrayUtils.reverse(longArray0, 1191, (-1474));
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-60);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte)74);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 74, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short) (-2052);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-2052));
      assertEquals(18, shortArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short) (-2052), (short) (-2052));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2052, Length: 18
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte)0);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((Object[]) null, (int) (byte)0);
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = 'f';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '7');
      assertFalse(int1 == int0);
      assertEquals(3, charArray0.length);
      assertEquals(1, int1);
      assertArrayEquals(new char[] {'7', '7', 'f'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-6));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'8', '8', '8', '8', '8', 'f', 'f'}, charArray1);
      assertArrayEquals(new char[] {'8', '8', '8', '8', '8', 'f', 'f'}, charArray0);
      
      Double double0 = new Double((byte) (-6));
      assertNotNull(double0);
      assertEquals((-6.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-711.0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-6.0), (-6.0)}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      
      Float float0 = new Float((float) (byte)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) (short)457);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(457.0F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float0;
      floatArray0[1] = float1;
      floatArray0[2] = float1;
      Float float2 = new Float((-1.0F));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      floatArray0[3] = float2;
      floatArray0[4] = float1;
      floatArray0[5] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 457.0F, 457.0F, (-1.0F), 457.0F, 0.0F}, floatArray1, 0.01F);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) (float)floatArray0[2];
      doubleArray3[1] = (double) (float)floatArray0[1];
      double[] doubleArray4 = ArrayUtils.addAll(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray4);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, doubleArray4.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {457.0, 457.0, (-1.0)}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {457.0, 457.0}, doubleArray3, 0.01);
      
      ArrayUtils.reverse((Object[]) doubleArray2, (-3554), (-5358));
      assertEquals(0, doubleArray2.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = 'Q';
      charArray0[2] = 'R';
      charArray0[3] = '2';
      charArray0[4] = '8';
      ArrayUtils.shuffle(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'R', '2', '8', '-'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-270));
      assertNotNull(integer0);
      assertEquals((-270), (int)integer0);
      
      Integer integer1 = new Integer(1853);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1853, (int)integer1);
      
      Integer integer2 = new Integer((-1529));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1529), (int)integer2);
      
      Integer integer3 = new Integer((-270));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-270), (int)integer3);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.shift(booleanArray0, (-270), 1853, (-270));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-270);
      doubleArray0[1] = (double) (-1529);
      doubleArray0[2] = (double) 1827;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1529.0), 1853, 1435.43247);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-270.0), (-1529.0), 1827.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)111;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)12, 1853);
      assertFalse(int1 == int0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)12, (byte)111}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[1] = ']';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 't');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {']', ']'}, charArray0);
      assertArrayEquals(new char[] {']', ']'}, charArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) ']';
      doubleArray0[1] = (double) 't';
      doubleArray0[2] = (double) ']';
      doubleArray0[3] = (double) ']';
      doubleArray0[4] = (double) ']';
      doubleArray0[5] = (double) 't';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-88.0), 1136, 93.0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {93.0, 116.0, 93.0, 93.0, 93.0, 116.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)91;
      shortArray0[3] = (short)91;
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short) (-1), (short)91, (short)91, (short)0, (short) (-1)}, shortArray0);
      
      Integer integer0 = new Integer((short)91);
      assertNotNull(integer0);
      assertEquals(91, (int)integer0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (short)91;
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = (long) (short) (-1);
      longArray0[4] = (long) (short) (-1);
      longArray0[5] = (long) (short)91;
      longArray0[6] = (long) (short) (-1);
      longArray0[7] = (long) (short) (-1);
      longArray0[8] = (long) (short)91;
      ArrayUtils.swap(longArray0, 17, (-36), (-1373));
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 91L, (-1L), (-1L), (-1L), 91L, (-1L), (-1L), 91L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Boolean[] booleanArray1 = new Boolean[5];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray1[2] = boolean1;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(5, booleanArray2.length);
      assertEquals(5, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-65);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte) (-36), Integer.MAX_VALUE, 913);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (byte) (-16), (int) (byte) (-11), 1018.3154139999999);
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, Float.NaN, 17);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 6L;
      longArray0[1] = (long) 17;
      longArray0[2] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 59L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {6L, 17L, (-1L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {6L, 17L, (-1L), 0L, 0L}, longArray1);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, 599.0F);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      int int2 = ArrayUtils.lastIndexOf(charArray0, ' ', 128);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'m', 'm', 'm', 'm'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short)457;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)457, (short)0, (short)0, (short) (-1), (short)0, (short) (-1)}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = 2978;
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)457;
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (byte) (-1);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1), 2978, (-1), (-1), 0, 457, 0, (-1)}, intArray0);
      
      Integer integer0 = new Integer(2978);
      assertNotNull(integer0);
      assertEquals(2978, (int)integer0);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) integer0, 1379);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1), 2978, (-1), (-1), 0, 457, 0, (-1)}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte) (-1), (-1121));
      assertNotNull(bitSet0);
      assertEquals(8, intArray0.length);
      assertEquals(8, bitSet0.length());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 2, 3, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {(-1), 2978, (-1), (-1), 0, 457, 0, (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse((byte[]) null, (int) (byte) (-1), 84);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)2460;
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) 84;
      doubleArray0[3] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, 61, 0, (-724));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2460.0, (-1.0), 84.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)0;
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((short)2460);
      assertNotNull(integer0);
      assertEquals(2460, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (-724);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray0, 84, (int) 2460);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertEquals(0, integerArray2.length);
      assertEquals(0, integerArray0.length);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      
      short[] shortArray3 = ArrayUtils.clone(shortArray2);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertEquals(1, shortArray3.length);
      assertEquals(1, shortArray2.length);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray3);
      assertArrayEquals(new short[] {(short)0}, shortArray3);
      assertArrayEquals(new short[] {(short)0}, shortArray2);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (int) (short)0, (int) (short)0, 9);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.swap((byte[]) null, (-2147164467), (int) (short)0);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (int) (short)0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1256);
      assertNotNull(integer0);
      assertEquals(1256, (int)integer0);
      
      integerArray0[0] = integer0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      ArrayUtils.swap(byteArray0, (-3526), 2010, (-1073741823));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-80);
      intArray0[1] = (-790);
      intArray0[2] = (-3526);
      intArray0[4] = 1256;
      intArray0[5] = 22;
      intArray0[6] = 22;
      intArray0[7] = (-790);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-80), (-790), (-3526), 0, 1256, 22, 22, (-790)}, intArray1);
      assertArrayEquals(new int[] {(-80), (-790), (-3526), 0, 1256, 22, 22, (-790)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      long[] longArray0 = new long[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (byte) (-24));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-24);
      floatArray0[1] = (float) (-663L);
      floatArray0[2] = (float) (-663L);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-24));
      assertEquals(3, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-24.0F), (-663.0F), (-663.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'm', (-1210));
      assertFalse(int1 == int0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'m', 'm', 'm', 'm'}, charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-45.0);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-24);
      shortArray0[1] = (short) (byte) (-24);
      shortArray0[2] = (short) (byte) (-24);
      shortArray0[3] = (short) (byte) (-24);
      shortArray0[4] = (short) (byte) (-24);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-24), (short) (-24), (short) (-24), (short) (-24), (short) (-24)}, shortArray0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      ArrayUtils.swap(byteArray0, (int) (short) (-24), 9);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-24), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2143347034;
      intArray0[1] = (int) (short) (-24);
      intArray0[2] = 50;
      intArray0[3] = 0;
      int int2 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(4, intArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new int[] {2143347034, (-24), 50, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.subarray((double[]) null, (int) (byte)0, 450);
      assertNull(doubleArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Character character0 = Character.valueOf('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      Character character1 = new Character('[');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('[', (char)character1);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      ArrayUtils.shift((long[]) null, 664, (-1474), (-449));
      ArrayUtils.swap(byteArray0, 3003, 420);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-59), (-6043));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) (-2844);
      longArray0[2] = (long) (-6043);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-53);
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)48, (byte) (-53), (byte) (-53), (byte) (-53)}, byteArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-841.0);
      doubleArray0[1] = (double) (byte)48;
      doubleArray0[2] = (double) (-59);
      doubleArray0[3] = (double) (-6043L);
      doubleArray0[4] = (double) (byte) (-53);
      doubleArray0[5] = (double) (byte)48;
      doubleArray0[6] = (double) (-3122);
      doubleArray0[7] = (double) (-2844L);
      doubleArray0[8] = (double) (byte)48;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2523.050213723434, (-1));
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-841.0), 48.0, (-59.0), (-6043.0), (-53.0), 48.0, (-3122.0), (-2844.0), 48.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (int) (byte)0);
      assertFalse(int1 == int0);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, int1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ArrayUtils.swap(byteArray0, (int) (byte)100, (-1), (-481));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-720.0F);
      floatArray0[1] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 6);
      assertEquals(2, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-720.0F), 1.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[6] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[2] = (long) 6;
      longArray0[3] = (long) 6;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 6;
      longArray0[6] = (long) 1;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-663L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 6L, 6L, 6L, 1L, 6L, 1L}, longArray0);
      assertArrayEquals(new long[] {0L, 6L, 6L, 6L, 1L, 6L, 1L}, longArray1);
      
      float[] floatArray1 = new float[18];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = (-720.0F);
      floatArray1[4] = (float) 6L;
      floatArray1[5] = (float) 1;
      floatArray1[6] = (float) 6L;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 6);
      assertFalse(int1 == int0);
      assertEquals(3, booleanArray0.length);
      assertEquals((-1), int1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) 1L;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "#");
      assertNotNull(stringArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      ArrayUtils.swap(charArray0, 1, (-1377));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {':'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      char[] charArray0 = new char[8];
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-1411.432F), 6);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-663L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {6L, 6L, (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {6L, 6L, (-1L), (-1L), (-1L)}, longArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 5628);
      assertFalse(int1 == int0);
      assertEquals(8, booleanArray0.length);
      assertEquals(3, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false, false, false}, booleanArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "#");
      assertNull(stringArray0);
      
      ArrayUtils.swap(charArray0, 127, (-4692));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2815.7;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-6231.275942);
      doubleArray0[3] = 2815.7;
      doubleArray0[4] = (-1730.0);
      doubleArray0[5] = (-3344.061885844);
      doubleArray0[6] = (-1730.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1730.0), (-1730.0));
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {2815.7, (-1.0), (-6231.275942), 2815.7, (-1730.0), (-3344.061885844), (-1730.0), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-348);
      intArray0[1] = (-1651);
      intArray0[2] = 34;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-348), (-1651), 34}, intArray0);
      
      Integer[] integerArray0 = new Integer[1];
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) null);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, bitSet1.length());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{0}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) null, (-1651));
      assertEquals(1, integerArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1L;
      longArray0[4] = 1L;
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 1L, 1L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 1L, 1L}, longArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-483);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-483);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1193);
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 1470, 3238);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer((-2011));
      assertNotNull(integer0);
      assertEquals((-2011), (int)integer0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)79;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-31));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)6, (byte)57, (byte) (-106), (byte)79}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-31), (byte) (-44), (byte)6, (byte)57, (byte) (-106), (byte)79}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(Double.NaN);
      assertNotNull(float0);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(Double.NaN);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(Float.NaN, (float)float1, 0.01F);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 2522, 50);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-499);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      long[] longArray0 = new long[5];
      longArray0[0] = 2578L;
      longArray0[1] = (-663L);
      longArray0[2] = (long) 97;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) 97;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-663L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2578L, (-663L), 97L, 0L, 97L}, longArray0);
      assertArrayEquals(new long[] {2578L, 97L, 0L, 97L}, longArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (byte)0);
      assertEquals(4, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1904));
      assertNotNull(integer0);
      assertEquals((-1904), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      assertEquals((-1904), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(968);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(968, (int)integer2);
      
      integerArray0[2] = integer2;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)44);
      assertNull(byteArray0);
      
      ArrayUtils.shift((Object[]) integerArray0, (-1904), Integer.MAX_VALUE, (-1904));
      assertEquals(3, integerArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'y';
      longArray0[1] = (long) (int)integerArray0[1];
      longArray0[2] = (long) 'y';
      longArray0[3] = (long) (byte)44;
      longArray0[4] = (long) 968;
      longArray0[5] = (long) (int)integerArray0[0];
      ArrayUtils.reverse(longArray0, (int) (byte) (-98), (int) integerArray0[1]);
      assertEquals(3, integerArray0.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {121L, (-1904L), 121L, 44L, 968L, 968L}, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'y';
      intArray0[1] = (-1904);
      intArray0[2] = (-1904);
      intArray0[3] = (int) (byte)44;
      int int0 = ArrayUtils.indexOf(intArray0, 53, 121);
      assertEquals(4, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {121, (-1904), (-1904), 44}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 97;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) 2;
      ArrayUtils.swap(floatArray0, 97, 97);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {97.0F, 0.0F, 0.0F, 2.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short)115;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)0);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)115, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      
      ArrayUtils.swap(booleanArray1, 1, (-2146242326), 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)46;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-17), (byte)76, (byte)6, (byte)46}, byteArray0);
      
      Character character0 = Character.valueOf('r');
      assertNotNull(character0);
      assertEquals('r', (char)character0);
      
      Character character1 = new Character('m');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('m', (char)character1);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(characterArray0);
      assertNotNull(map0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((short[]) null, (short) (-438));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = (-663L);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-663L);
      ArrayUtils.shift(doubleArray1, (-1259), (-1259), (-1259));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-663.0)}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = 'S';
      charArray0[2] = 'N';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'N';
      ArrayUtils.reverse((long[]) null, 1273, 33);
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'G');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(10, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'G', 'N', 'S', 'N', 'n', 'n', 'N', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'N', 'S', 'N', 'n', 'n', 'N', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'N';
      floatArray0[1] = 1758.0F;
      floatArray0[2] = (float) (-663L);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {78.0F, 1758.0F, (-663.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift(charArray0, (-1259), (-94), 33);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(9, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'N', 'S', 'N', 'n', 'n', 'N', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift((char[]) null, (-2638), (-2638), (-2638));
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Integer integer0 = new Integer(101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      Integer integer1 = new Integer(101);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(101, (int)integer1);
      
      Integer integer2 = new Integer((-945));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-945), (int)integer2);
      
      Integer integer3 = Integer.getInteger((String) null);
      assertNull(integer3);
      
      ArrayUtils.reverse((byte[]) null, 101, 2144525681);
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[1] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1212);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true}, booleanArray0));
      
      short[] shortArray1 = ArrayUtils.insert(2144525681, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) true;
      objectArray0[1] = null;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer2;
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      Integer integer4 = ArrayUtils.get(integerArray0, 2728, (Integer) null);
      assertNull(integer4);
      assertEquals(6, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertNotNull(bitSet0);
      assertEquals(5, objectArray0.length);
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1}", bitSet0.toString());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray1, (short) (-222));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(bitSet1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short)2732, 2);
      assertFalse(int1 == int0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      double[] doubleArray0 = null;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      double[] doubleArray1 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray1);
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((short)2732);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2732, (int)integer1);
      
      Integer integer2 = new Integer((-1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, (-1112), integer2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1112, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1426);
      int[] intArray1 = ArrayUtils.add(intArray0, 303);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1426)}, intArray0);
      assertArrayEquals(new int[] {(-1426), 303}, intArray1);
      
      Integer integer0 = new Integer((-1426));
      assertNotNull(integer0);
      assertEquals((-1426), (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1426);
      longArray0[1] = (long) (-1426);
      longArray0[2] = (long) (-1426);
      int int0 = ArrayUtils.indexOf(longArray0, (-1426L));
      assertEquals(3, longArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {(-1426L), (-1426L), (-1426L)}, longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-6);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-6)}, byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-6), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -6, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      ArrayUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, true}, booleanArray0));
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-2177));
      assertNotNull(integer0);
      assertEquals((-2177), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("java.lang.Long", 1273);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1273, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(4);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(4, (int)integer2);
      
      integerArray0[2] = integer2;
      MutableInt mutableInt0 = new MutableInt();
      assertNotNull(mutableInt0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      
      Integer integer3 = mutableInt0.toInteger();
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(4, integerArray1.length);
      assertEquals(4, integerArray0.length);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      Integer integer1 = new Integer((short)1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1175));
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
      
      boolean boolean1 = ArrayUtils.contains((int[]) null, (-3382));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 0.0;
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = '5';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'K';
      charArray1[1] = '5';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(1, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'K', 'K', '5'}, charArray0);
      assertArrayEquals(new char[] {'K', '5'}, charArray1);
      assertArrayEquals(new char[] {'K'}, charArray2);
      
      int int0 = 571;
      ArrayUtils.shift(doubleArray0, 571, 571, 167);
      assertEquals(12, doubleArray0.length);
      
      Integer integer0 = new Integer(78);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(78, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      float[] floatArray0 = new float[2];
      ArrayUtils.shift(floatArray0, 150);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray1[1] = object1;
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      assertSame(object1, object2);
      assertNotSame(object1, object0);
      assertSame(object2, object1);
      assertNotSame(object2, object0);
      
      objectArray1[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray1[3] = object3;
      Object object4 = ArrayUtils.get(objectArray1, 4776, object1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(object1.equals((Object)object3));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      assertEquals(4, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
      assertSame(object1, object2);
      assertNotSame(object1, object3);
      assertSame(object1, object4);
      assertNotSame(object1, object0);
      assertSame(object4, object2);
      assertNotSame(object4, object3);
      assertNotSame(object4, object0);
      assertSame(object4, object1);
      
      objectArray0[0] = object4;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 968.0;
      doubleArray0[1] = 1.5;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 4776, 57);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {968.0, 1.5}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      
      Integer integer0 = new Integer(57);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(57, (int)integer0);
      
      BitSet bitSet0 = null;
      try {
        bitSet0 = new BitSet((-6));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -6
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-1);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.shift(floatArray0, (int) (byte)0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray0, 0.01F);
      
      Character character0 = Character.valueOf('5');
      assertNotNull(character0);
      assertEquals('5', (char)character0);
      
      Character character1 = Character.valueOf('5');
      assertNotNull(character1);
      assertEquals('5', (char)character1);
      
      Character character2 = Character.valueOf('\\');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('\\', (char)character2);
      
      char char0 = 'X';
      Character character3 = Character.valueOf('X');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('X', (char)character3);
      
      Character character4 = new Character('\\');
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('\\', (char)character4);
      
      Character character5 = Character.valueOf('~');
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertNotNull(character5);
      assertEquals('~', (char)character5);
      
      Character character6 = new Character('+');
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character3));
      assertNotNull(character6);
      assertEquals('+', (char)character6);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'X'}, charArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3278.0);
      doubleArray0[1] = (double) '+';
      doubleArray0[2] = (double) '~';
      doubleArray0[3] = (double) '+';
      doubleArray0[4] = (double) 'X';
      doubleArray0[5] = 968.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) char0, (int) char0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-3278.0), 43.0, 126.0, 43.0, 88.0, 968.0}, doubleArray0, 0.01);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'X'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = ';';
      Integer integer0 = new Integer(1853);
      assertNotNull(integer0);
      assertEquals(1853, (int)integer0);
      
      Integer integer1 = new Integer(';');
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(59, (int)integer1);
      
      Integer integer2 = new Integer(1853);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1853, (int)integer2);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer2;
      integerArray0[4] = integer0;
      Integer integer3 = new Integer((-1644));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-1644), (int)integer3);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (int)integerArray0[1];
      doubleArray0[1] = (double) 1853;
      doubleArray0[2] = (double) (int)integerArray0[0];
      doubleArray0[3] = (double) ';';
      doubleArray0[4] = 156.8;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 'r';
      doubleArray0[8] = (-1823.22535526);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (int) integerArray0[2], 0.0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(5, integerArray0.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(7, int0);
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new double[] {59.0, 1853.0, 1853.0, 59.0, 156.8, 0.0, 114.0, 0.0, (-1823.22535526)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(5, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertFalse(boolean0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2815.7;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-6231.275942);
      doubleArray0[3] = 2815.7;
      doubleArray0[4] = (-1730.0);
      doubleArray0[6] = (-1730.0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-6231.275942), 2815.7, (-1730.0), 0.0, (-1730.0), 0.0, 2815.7}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray1));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) ';';
      doubleArray0[1] = (-2947.229714);
      doubleArray0[2] = (double) 'r';
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {59.0, (-2947.229714), 114.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {59.0, (-2947.229714), 114.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.insert(0, doubleArray0, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {59.0, (-2947.229714), 114.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {59.0, (-2947.229714), 114.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {59.0, (-2947.229714), 114.0, 59.0, (-2947.229714), 114.0}, doubleArray2, 0.01);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = new Integer(5);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(5, (int)integer1);
      
      Integer integer2 = new Integer(5);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(5, (int)integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      short[] shortArray2 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shuffle((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean1 = ArrayUtils.contains(arrayUtils0.EMPTY_INT_ARRAY, (int) (short) (-1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 2401L);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-770);
      intArray0[1] = (-663);
      intArray0[2] = 2146340530;
      intArray0[3] = (-1);
      intArray0[4] = (-770);
      intArray0[5] = 0;
      intArray0[6] = 1033;
      intArray0[7] = 1033;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 174, 0);
      assertTrue(int1 == int0);
      assertEquals(8, intArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {(-770), (-663), 2146340530, (-1), (-770), 0, 1033, 1033}, intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      ArrayUtils.shift(floatArray0, 2);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      ArrayUtils.reverse((boolean[]) null, 4117, 58);
      Random.setNextRandom(0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(5, classArray1.length);
      assertEquals(5, classArray0.length);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray1, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) null);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-2579));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift(booleanArray0, (-1946));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-2580));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 3554;
      longArray0[1] = 9L;
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, 54);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((short[]) null, 2, 299);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short)99);
      assertNull(shortArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 3554L;
      objectArray0[1] = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      MutableInt mutableInt0 = new MutableInt(3554L);
      assertNotNull(mutableInt0);
      assertEquals(3554.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-30), mutableInt0.byteValue());
      assertEquals(3554, (int)mutableInt0.getValue());
      assertEquals("3554", mutableInt0.toString());
      assertEquals(3554, (int)mutableInt0.toInteger());
      assertEquals(3554, mutableInt0.intValue());
      assertEquals((short)3554, mutableInt0.shortValue());
      assertEquals(3554.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3554L, mutableInt0.longValue());
      
      Integer integer0 = mutableInt0.getValue();
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(3554.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-30), mutableInt0.byteValue());
      assertEquals(3554, (int)mutableInt0.getValue());
      assertEquals("3554", mutableInt0.toString());
      assertEquals(3554, (int)mutableInt0.toInteger());
      assertEquals(3554, mutableInt0.intValue());
      assertEquals((short)3554, mutableInt0.shortValue());
      assertEquals(3554.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3554L, mutableInt0.longValue());
      assertEquals(3554, (int)integer0);
      
      int int1 = mutableInt0.getAndDecrement();
      assertFalse(int1 == int0);
      assertEquals(3553.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3553, (int)mutableInt0.toInteger());
      assertEquals((byte) (-31), mutableInt0.byteValue());
      assertEquals(3553, (int)mutableInt0.getValue());
      assertEquals((short)3553, mutableInt0.shortValue());
      assertEquals("3553", mutableInt0.toString());
      assertEquals(3553, mutableInt0.intValue());
      assertEquals(3553L, mutableInt0.longValue());
      assertEquals(3553.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3554, int1);
      
      Integer integer1 = Integer.getInteger("u;", (-184));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals((-184), (int)integer1);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertEquals(3553.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3553, (int)mutableInt0.toInteger());
      assertEquals((byte) (-31), mutableInt0.byteValue());
      assertEquals(3553, (int)mutableInt0.getValue());
      assertEquals((short)3553, mutableInt0.shortValue());
      assertEquals("3553", mutableInt0.toString());
      assertEquals(3553, mutableInt0.intValue());
      assertEquals(3553L, mutableInt0.longValue());
      assertEquals(3553.0F, mutableInt0.floatValue(), 0.01F);
      assertFalse(boolean0);
      
      ArrayUtils.swap((short[]) null, (-1147), (-1319), 3554);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-2630L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {3554L, 9L, 0L}, longArray0);
      assertArrayEquals(new long[] {3554L, 9L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "eVqcSU?");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-6);
      byteArray1[1] = (byte) (-6);
      byteArray1[2] = (byte) (-6);
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray1, (byte)126);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-6), (byte) (-6), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-6), (byte) (-6), (byte)0}, byteArray2);
      
      ArrayUtils.shift((Object[]) byteArray0, (-4288), (int) (byte) (-6), (-1039));
      assertEquals(6, byteArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (int) byte0, 1044);
      assertNull(integerArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)0, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(4, byteArray1.length);
      assertEquals(3, int0);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-6), (byte) (-6), (byte)0}, byteArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      
      Integer integer0 = new Integer((-1662));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1662), (int)integer0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "{Q_e=gQ-");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      Short short0 = new Short((byte) (-6));
      assertNotNull(short0);
      assertEquals((short) (-6), (short)short0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, (boolean[]) null);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (-1384));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      Byte byte0 = new Byte((byte) (-81));
      assertNotNull(byte0);
      assertEquals((byte) (-81), (byte)byte0);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      
      ArrayUtils.reverse((long[]) null, (-1384), 657);
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '*');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'*'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-564L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-564L), (long)long2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)36;
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short)114;
      shortArray0[3] = (short) (byte) (-116);
      shortArray0[5] = (short) (byte)36;
      boolean boolean0 = ArrayUtils.isSameType(long0, (short) (-116));
      assertTrue(long0.equals((Object)long1));
      assertFalse(long0.equals((Object)long2));
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-711), (int) (byte)0);
      assertFalse(int1 == int0);
      assertEquals(6, shortArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)114, (short) (-116), (short)0, (short)36}, shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 88, (-2146015215));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(boolean1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(shortArray0);
      assertNotNull(map0);
      assertEquals(0, shortArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 38.0, (-1420));
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte) (-50), (int) (byte) (-50));
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.subarray((double[]) null, (int) (byte)12, 450);
      assertNull(doubleArray1);
      
      ArrayUtils.shift(byteArray0, 512, 3199, (-2797));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte)12, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      int int0 = ArrayUtils.indexOf(charArray0, '@');
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'@'}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom(1076L);
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)12;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) (byte)12;
      objectArray0[3] = (Object) mockRandom0;
      objectArray0[4] = (Object) (byte)12;
      objectArray0[5] = (Object) (byte)12;
      ArrayUtils.shuffle(objectArray0, (java.util.Random) mockRandom0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 3281L);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {3281L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1470;
      shortArray0[1] = (short)841;
      shortArray0[2] = (short) (-1238);
      shortArray0[3] = (short)6472;
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '.');
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'G'}, charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'G';
      doubleArray0[1] = (double) (short) (-1238);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {71.0, (-1238.0)}, doubleArray0, 0.01);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-126), (int) (short) (-1238));
      assertTrue(int1 == int0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-126)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      Integer integer1 = new Integer(101);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(101, (int)integer1);
      
      Integer integer2 = new Integer(124);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(124, (int)integer2);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-945));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      short[] shortArray1 = ArrayUtils.insert((-2146179771), shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      boolean[] booleanArray2 = ArrayUtils.insert(1, booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray2));
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) (-663));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray3 = ArrayUtils.addAll(booleanArray2, booleanArray1);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      assertEquals(9, booleanArray3.length);
      assertEquals(1, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, false, true, true}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray2));
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-663);
      intArray0[1] = 0;
      intArray0[2] = (-2146179771);
      intArray0[3] = 124;
      int[] intArray1 = ArrayUtils.add(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-663), 0, (-2146179771), 124}, intArray0);
      assertArrayEquals(new int[] {(-663), 0, (-2146179771), 124, 0}, intArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)58;
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 1045);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(9, byteArray0.length);
      assertEquals(1, int2);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-1), (byte)43, (byte) (-109), (byte) (-17), (byte) (-123), (byte) (-109), (byte)2, (byte)58}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '3');
      assertNull(charArray0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-2802.3915451903));
      assertNotNull(double0);
      assertEquals((-2802.3915451903), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2802.3915451903));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2802.3915451903), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 0.0F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (-3094));
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 0.0F;
      doubleArray2[1] = (double) doubleArray0[0];
      doubleArray2[2] = (double) 0.0F;
      doubleArray2[3] = 2842.44857463869;
      doubleArray2[4] = (double) (-1);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) ';';
      doubleArray0[1] = (double) ';';
      doubleArray0[2] = (double) 'r';
      doubleArray0[3] = (double) 'r';
      doubleArray0[4] = (double) 'r';
      doubleArray0[5] = (double) ';';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, 1);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 53;
      intArray0[1] = 2586;
      intArray0[2] = (int) ';';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 109);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {53, 2586, 59}, intArray0);
      assertArrayEquals(new int[] {109, 53, 2586, 59}, intArray1);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 109);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {59.0, 59.0, 114.0, 114.0, 114.0, 59.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {59.0, 59.0, 114.0, 114.0, 114.0, 59.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray2 = ArrayUtils.clone(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {53, 2586, 59}, intArray0);
      assertArrayEquals(new int[] {53, 2586, 59}, intArray2);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = ';';
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)964;
      intArray0[2] = (int) (short)964;
      intArray0[3] = 2142601671;
      intArray0[4] = 2142601671;
      intArray0[5] = (int) ';';
      ArrayUtils.shift(intArray0, 1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {59, 1, 964, 964, 2142601671, 2142601671}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1128), 2142601671);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int0 = ArrayUtils.indexOf(shortArray1, (short)964, 59);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      assertEquals((-1), int0);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 964;
      int int1 = ArrayUtils.indexOf(longArray0, (long) (short)1, 2012);
      assertTrue(int1 == int0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {964L}, longArray0);
      
      int int2 = ArrayUtils.lastIndexOf(longArray0, (long) 59, 2520);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new long[] {964L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1330.34672425;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 425.005839274);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1330.34672425}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1330.34672425, 425.005839274}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false}, booleanArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = 698L;
      longArray0[1] = (long) 0;
      longArray0[2] = 698L;
      ArrayUtils.shuffle(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 698L, 698L}, longArray0);
      
      ArrayUtils.shuffle(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 1330.34672425, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {0L, 698L, 698L}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-2621L));
      assertNotNull(bitSet0);
      assertEquals(3, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {0L, 698L, 698L}, longArray0);
      
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 698L;
      longArray1[1] = (-2621L);
      longArray1[2] = 6L;
      longArray1[3] = (-2621L);
      longArray1[4] = (-1417L);
      longArray1[5] = (long) 0;
      longArray1[6] = (-2621L);
      long[] longArray2 = ArrayUtils.remove(longArray1, 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(7, longArray1.length);
      assertEquals(6, longArray2.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {698L, (-2621L), 6L, (-2621L), (-1417L), 0L, (-2621L)}, longArray1);
      assertArrayEquals(new long[] {(-2621L), 6L, (-2621L), (-1417L), 0L, (-2621L)}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray1));
      
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {1L}, longArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) ';';
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 6;
      floatArray0[4] = (float) 458;
      floatArray0[5] = (float) (-766L);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 6, (float) 1L);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {59.0F, 0.0F, 0.0F, 6.0F, 458.0F, (-766.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {59.0F, 0.0F, 0.0F, 6.0F, 458.0F, (-766.0F), 1.0F}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)4, (byte)4}, byteArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = 1749.70498;
      doubleArray0[3] = (double) 458;
      doubleArray0[4] = (double) (byte)4;
      doubleArray0[5] = (double) (byte)5;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 'r';
      doubleArray0[8] = (double) (-766L);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (byte)4);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {6.0, 0.0, 1749.70498, 458.0, 5.0, 0.0, 114.0, (-766.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.0, 0.0, 1749.70498, 458.0, 4.0, 5.0, 0.0, 114.0, (-766.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1193.5F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1193.5F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1193.5F);
      doubleArray0[1] = (double) (-1193.5F);
      doubleArray0[2] = (double) (-1193.5F);
      doubleArray0[3] = (double) (-1193.5F);
      doubleArray0[4] = (double) (-1193.5F);
      doubleArray0[5] = (double) (-1193.5F);
      doubleArray0[6] = (double) (-1193.5F);
      doubleArray0[7] = (double) (-1193.5F);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (-1193.5F));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1193.5), (-1193.5), (-1193.5), (-1193.5), (-1193.5), (-1193.5), (-1193.5), (-1193.5)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = (-663L);
      longArray0[1] = 0L;
      ArrayUtils.shift(doubleArray0, 0, 2, 1693);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-70);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)5);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-70), (byte) (-70), (byte) (-70), (byte) (-70)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-70), (byte) (-70), (byte) (-70), (byte) (-70)}, byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 513.70432843, 2134851391, (double) 0L);
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(longArray0, 56, (int) (byte) (-70));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-663L), 0L, 0L, 0L}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-663L), 0L, 0L, 0L}, longArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = '#';
      charArray0[2] = 'T';
      charArray0[3] = '-';
      charArray0[4] = ';';
      charArray0[5] = 'c';
      charArray0[6] = 'X';
      charArray0[7] = ' ';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'X', 0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'3', '#', 'T', '-', ';', 'c', 'X', ' '}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[3] = (-646);
      intArray0[4] = (-1);
      intArray0[5] = 0;
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1958L));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, 2146340530, (-770));
      assertTrue(int1 == int0);
      assertEquals(8, intArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {0, 0, 0, (-646), (-1), 0, 0, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray1 = ArrayUtils.add(intArray0, 0, (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, (-646), (-1), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, (-646), (-1), 0, 0, 0}, intArray1);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2146340530;
      floatArray0[1] = (float) 635;
      ArrayUtils.shift(floatArray0, 2144249485, 5, 4358);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2.14634048E9F, 635.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte) (-38);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-38));
      assertEquals(8, byteArray0.length);
      assertEquals(7, int0);
      assertArrayEquals(new byte[] {(byte) (-38), (byte) (-38), (byte) (-38), (byte) (-38), (byte) (-38), (byte) (-38), (byte) (-38), (byte) (-38)}, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '/';
      floatArray0[1] = (float) (byte) (-38);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {47.0F, (-38.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-38);
      doubleArray0[1] = (double) 'E';
      int int1 = ArrayUtils.indexOf(doubleArray0, (-38.0), (double) 7);
      assertFalse(int1 == int0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new double[] {(-38.0), 69.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((byte) (-38));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-38), (int)integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer1 = new Integer(1212);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(1212, (int)integer1);
      
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1648.524);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1L, 1L}, longArray0);
      assertArrayEquals(new long[] {1L, 1L}, longArray1);
      
      ArrayUtils.swap(longArray1, 1, (-387), (-387));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1L, 1L}, longArray0);
      assertArrayEquals(new long[] {1L, 1L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      float[] floatArray0 = new float[24];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-611.09F));
      assertEquals(24, floatArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 41L;
      longArray0[1] = (-1L);
      ArrayUtils.swap(longArray0, (-3484), (-3484), (-2862));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {41L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)84}, byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)84}, byteArray0);
      
      MockRandom mockRandom0 = new MockRandom((byte)84);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)84;
      intArray0[2] = (int) (byte)84;
      intArray0[3] = (int) (byte)84;
      intArray0[4] = (int) (byte)84;
      intArray0[5] = (int) (byte)84;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 84, (int) (byte)84);
      assertFalse(int1 == int0);
      assertEquals(6, intArray0.length);
      assertEquals(5, int1);
      assertArrayEquals(new int[] {0, 84, 84, 84, 84, 84}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[7] = (byte)12;
      int int0 = 71;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)12, 71);
      assertNotNull(bitSet0);
      assertEquals(8, byteArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)0, (byte)12}, byteArray0);
      
      Integer integer0 = new Integer(71);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(71, (int)integer0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) int0;
      integerArray0[3] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(71, (int)integer1);
      
      integerArray0[5] = integer1;
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray1, integerArray0);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)8);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)0, (byte)12}, byteArray0);
      
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      
      Integer integer3 = ArrayUtils.get(integerArray0, int0, (Integer) int0);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(integer3);
      assertEquals(6, integerArray0.length);
      assertEquals(71, (int)integer3);
      assertNotSame(integerArray0, integerArray1);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-84));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(8, byteArray0.length);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)0, (byte)12}, byteArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = int0;
      intArray0[3] = (int) (byte)12;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)12;
      int[] intArray1 = ArrayUtils.remove(intArray0, 3);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(5, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1), 0, 71, 0, 12}, intArray1);
      assertArrayEquals(new int[] {(-1), 0, 71, 12, 0, 12}, intArray0);
      
      int int1 = ArrayUtils.lastIndexOf(intArray1, (int) (byte)12, 71);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(5, intArray1.length);
      assertEquals(6, intArray0.length);
      assertEquals(4, int1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1), 0, 71, 0, 12}, intArray1);
      assertArrayEquals(new int[] {(-1), 0, 71, 12, 0, 12}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-53);
      doubleArray0[1] = 268.315414;
      doubleArray0[2] = (double) (byte)0;
      ArrayUtils.shift(doubleArray0, 0, (int) (byte)0, 750);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-53.0), 268.315414, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 2401L;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte) (-53);
      longArray0[3] = (long) 0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-75));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(13, byteArray0.length);
      assertEquals(13, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 2401L;
      objectArray0[1] = (Object) 2401L;
      objectArray0[2] = (Object) (-53.0);
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) 268.315414;
      ArrayUtils.shift(objectArray0, (int) (byte)44, 0, Integer.MAX_VALUE);
      assertEquals(6, objectArray0.length);
      
      ArrayUtils.reverse(longArray0, 0, 750);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, (-53L), 0L, 2401L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 'Z';
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 90.0F);
      assertFalse(int1 == int0);
      assertEquals(7, floatArray0.length);
      assertEquals(1, int1);
      assertArrayEquals(new float[] {0.0F, 90.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int2 = ArrayUtils.indexOf((double[]) null, (double) 2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = ArrayUtils.lastIndexOf(longArray2, (-2630L));
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertEquals((-1), int3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long(0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Long long2 = new Long((-606L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-606L), (long)long2);
      
      Long long3 = new Long(1940L);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(1940L, (long)long3);
      
      Long long4 = new Long((-96L));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      assertEquals((-96L), (long)long4);
      
      Long[] longArray0 = new Long[7];
      longArray0[0] = long1;
      Long long5 = new Long((long) longArray0[0]);
      assertTrue(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long4));
      assertNotNull(long5);
      assertEquals(7, longArray0.length);
      assertEquals(0L, (long)long5);
      
      longArray0[1] = long5;
      longArray0[2] = long0;
      longArray0[3] = long4;
      Integer integer0 = new Integer((-4930));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-4930), (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integerArray1);
      assertEquals(2, integerArray1.length);
      assertEquals(1, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      ArrayUtils.shift((boolean[]) null, 298, (-4930), 298);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 55, 55, (-2140));
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '/';
      longArray0[1] = (long) 'E';
      longArray0[2] = (long) 'E';
      longArray0[3] = (long) '/';
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1758L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {47L, 69L, 69L, 47L}, longArray0);
      assertArrayEquals(new long[] {47L, 69L, 69L, 47L}, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1758L;
      longArray1[3] = 69L;
      floatArray0[2] = (float) (-663L);
      floatArray0[3] = (float) (-663L);
      floatArray0[4] = (float) '/';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 1758L);
      assertEquals(5, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {1758.0F, 0.0F, (-663.0F), (-663.0F), 47.0F}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (-1.0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(4, longArray2.length);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {47L, 69L, 69L, 47L}, longArray0);
      assertArrayEquals(new long[] {47L, 69L, 69L, 69L}, longArray1);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 47L);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1758.0F, 0.0F, (-663.0F), (-663.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1758.0F, 0.0F, (-663.0F), (-663.0F), 47.0F}, floatArray0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom((-2065L));
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      ArrayUtils.shuffle(longArray0, (java.util.Random) mockRandom0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(4, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {47L, 69L, 47L, 69L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MAX_VALUE;
      int int0 = 2940;
      intArray0[1] = 2940;
      int int1 = (-1993);
      intArray0[2] = (-1993);
      int int2 = 0;
      intArray0[3] = 0;
      int int3 = 57;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2940, 57);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 2940, (-1993), 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1663);
      short short0 = (short)2314;
      shortArray0[1] = (short)2314;
      shortArray0[2] = (short)1484;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1993), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1993, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'Z';
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (int) 'Z';
      intArray0[4] = (int) 'Z';
      intArray0[5] = (int) 'Z';
      int[] intArray1 = ArrayUtils.subarray(intArray0, 90, 90);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {90, 0, 0, 90, 90, 90}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Short short0 = new Short((short) (-49));
      assertNotNull(short0);
      assertEquals((short) (-49), (short)short0);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, 728, (long) 54);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 728, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'a';
      charArray0[1] = '<';
      charArray0[2] = 'o';
      charArray0[3] = '3';
      charArray0[4] = 'r';
      charArray0[5] = 'z';
      charArray0[6] = '^';
      charArray0[7] = ')';
      charArray0[8] = '?';
      int int0 = ArrayUtils.indexOf(charArray0, '^');
      assertEquals(9, charArray0.length);
      assertEquals(6, int0);
      assertArrayEquals(new char[] {'a', '<', 'o', '3', 'r', 'z', '^', ')', '?'}, charArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'r';
      intArray0[1] = (int) '?';
      intArray0[2] = (int) '<';
      intArray0[3] = (int) '<';
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(4, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {114, 63, 60, 60, 114, 63, 60, 60}, intArray1);
      assertArrayEquals(new int[] {114, 63, 60, 60}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      Integer integer1 = new Integer((-663));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-663), (int)integer1);
      
      Integer integer2 = new Integer(124);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(124, (int)integer2);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-945));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      short[] shortArray1 = ArrayUtils.insert((-2146179771), shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      boolean[] booleanArray2 = ArrayUtils.insert(1, booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray2));
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (-47.214687F));
      assertNull(floatArray0);
      
      ArrayUtils.reverse(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-663);
      longArray0[1] = (long) 101;
      longArray0[2] = (long) (-663);
      longArray0[3] = (long) 101;
      longArray0[4] = (long) (-663);
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1646L);
      longArray1[1] = (long) (-945);
      longArray1[2] = (long) 101;
      longArray1[3] = (-1L);
      longArray1[4] = (long) (-2146179771);
      longArray1[5] = (long) (-2146179771);
      longArray1[6] = (long) (-1);
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(12, longArray2.length);
      assertEquals(5, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-663L), 101L, (-663L), 101L, (-663L)}, longArray0);
      assertArrayEquals(new long[] {(-1646L), (-945L), 101L, (-1L), (-2146179771L), (-2146179771L), (-1L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = (-663L);
      longArray0[1] = 0L;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-663L);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) (-663L);
      floatArray0[4] = (float) (-663L);
      floatArray0[5] = (float) 0L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 90.0F);
      assertEquals(6, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-663.0F), 0.0F, 0.0F, (-663.0F), (-663.0F), 0.0F}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (-1.0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {(-663L), 0L, 0L, 0L}, longArray0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-663.0F), 0.0F, 0.0F, (-663.0F), (-663.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-663.0F), 0.0F, (-663.0F), (-663.0F), 0.0F}, floatArray1, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (float) (-663), (-1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(bitSet0);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-663.0F), 0.0F, 0.0F, (-663.0F), (-663.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-663.0F), 0.0F, (-663.0F), (-663.0F), 0.0F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-663);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {(-1), (-663)}, intArray0);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(0, floatArray2.length);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-663.0F), 0.0F, 0.0F, (-663.0F), (-663.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-663.0F), 0.0F, (-663.0F), (-663.0F), 0.0F}, floatArray1, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (-663));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -663, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer('y');
      assertNotNull(integer0);
      assertEquals(121, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      assertEquals(121, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(968);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(968, (int)integer2);
      
      integerArray0[2] = integer2;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)44);
      assertNull(byteArray0);
      
      ArrayUtils.shift((Object[]) integerArray0, (int) 'y', Integer.MAX_VALUE, (int) 'y');
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-720.0F);
      floatArray0[1] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 6);
      assertEquals(2, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-720.0F), 1.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[2] = (long) 6;
      longArray0[3] = (long) 6;
      longArray0[4] = (long) 6;
      longArray0[5] = (long) 6;
      longArray0[6] = (long) 1;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-663L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 6L, 6L, 6L, 1L}, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 6L, 6L, 6L, 1L}, longArray1);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-663L);
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = (-720.0F);
      floatArray1[4] = (float) 6L;
      floatArray1[5] = (float) 1;
      floatArray1[6] = (float) 6L;
      int int1 = ArrayUtils.lastIndexOf(floatArray1, (float) (-663L));
      assertFalse(int1 == int0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(7, floatArray1.length);
      assertEquals(0, int1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-663.0F), 1.0F, 1.0F, (-720.0F), 6.0F, 1.0F, 6.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      charArray0[5] = 'm';
      charArray0[6] = 'm';
      int int2 = ArrayUtils.lastIndexOf(charArray0, 'm', 6);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(7, charArray0.length);
      assertEquals(6, int2);
      assertArrayEquals(new char[] {'m', 'm', 'm', 'm', 'm', 'm', 'm'}, charArray0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, object1, (-1));
      assertEquals(5, objectArray0.length);
      assertEquals(0, int0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.valueOf("org.apache.commons.lang3.ArrayUtils");
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      
      Integer integer0 = new Integer((-1541));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1541), (int)integer0);
      
      Integer integer1 = new Integer(884);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(884, (int)integer1);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 0;
      ArrayUtils.swap(doubleArray0, (-695), (-695));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-53);
      doubleArray0[1] = 268.315414;
      doubleArray0[2] = (double) (byte)0;
      ArrayUtils.shift(doubleArray0, 0, (int) (byte)0, 750);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-53.0), 268.315414, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 2401L;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte) (-53);
      longArray0[3] = (long) 0;
      longArray0[4] = 2401L;
      longArray0[5] = (long) '-';
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (-1141L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1646L), 1);
      assertNotNull(bitSet0);
      assertEquals(8, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new long[] {2401L, 0L, (-53L), 0L, 2401L, 45L, 0L, (-1141L)}, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'t'}, charArray0);
      
      ArrayUtils.swap(doubleArray0, 52, 111);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-53.0), 268.315414, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 't';
      charArray1[1] = '-';
      char[] charArray2 = ArrayUtils.addAll(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(3, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'t'}, charArray0);
      assertArrayEquals(new char[] {'t', '-'}, charArray1);
      assertArrayEquals(new char[] {'t', 't', '-'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = '!';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = '8';
      charArray0[7] = 'G';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'G');
      assertEquals(8, charArray0.length);
      assertEquals(7, int0);
      assertArrayEquals(new char[] {'G', '!', 'G', 'G', 'G', 'G', '8', 'G'}, charArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '!';
      doubleArray0[1] = (double) 'G';
      doubleArray0[2] = (double) 'G';
      doubleArray0[3] = (double) 'G';
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {33.0, 71.0, 71.0, 71.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      int int1 = ArrayUtils.indexOf(longArray0, 11L, (-122));
      assertFalse(int1 == int0);
      assertEquals(9, longArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      
      boolean boolean2 = ArrayUtils.contains(charArray0, '!');
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(8, charArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'G', '!', 'G', 'G', 'G', 'G', '8', 'G'}, charArray0);
      
      int int2 = ArrayUtils.indexOf((boolean[]) null, false, 1102);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-601.0);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-601.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-601.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.subarray((double[]) null, (int) (byte)0, 450);
      assertNull(doubleArray1);
      
      ArrayUtils.shift(byteArray0, (int) (byte)0, 3199, (-2797));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      ArrayUtils.shift(booleanArray0, 3199);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(2437.2466443);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2437.2466F, (float)float1, 0.01F);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      ArrayUtils.reverse(objectArray0, (-1651), 121);
      assertEquals(5, objectArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1651);
      intArray0[1] = (-1786);
      intArray0[2] = 121;
      intArray0[3] = (-1651);
      intArray0[4] = 121;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1651), (-1786), 121, (-1651), 121}, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 121;
      longArray0[1] = (long) 802;
      ArrayUtils.reverse(longArray0, (-1651), 354);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {802L, 121L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1651), 46);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = null;
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1431655765);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2225);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      
      short[] shortArray1 = new short[8];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte)0;
      shortArray1[1] = (short) (byte)0;
      shortArray1[2] = (short)495;
      shortArray1[3] = (short) (byte)0;
      shortArray1[4] = (short) (byte)0;
      shortArray1[5] = (short) (byte)0;
      shortArray1[6] = (short) (byte)0;
      shortArray1[7] = (short) (byte)0;
      short[] shortArray2 = ArrayUtils.insert(0, shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(12, shortArray2.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)495, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(807, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 807, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-53);
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, (-1));
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1018));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1501);
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = bitSet0.previousClearBit(1501);
      assertEquals(8, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(1501, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      bitSet0.set(1501, true);
      assertEquals(8, doubleArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1536, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1502, bitSet0.length());
      assertEquals("{1501}", bitSet0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 1501, 1501);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '/';
      longArray0[1] = (long) 'E';
      longArray0[2] = (long) 'E';
      longArray0[3] = (long) '/';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '/';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '/';
      intArray0[1] = (int) '/';
      ArrayUtils.shuffle(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {47, 47}, intArray0);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 47, 47);
      assertNull(shortArray0);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'/', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'/', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-646);
      intArray0[4] = (-1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-646);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) (-1);
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      Float float0 = new Float(901.6382F);
      assertNotNull(float0);
      assertEquals(901.6382F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) (-646));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-646.0F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(18, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, (-646.0), (-1.0), 0.0, (-1.0), (-1.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      
      ArrayUtils.reverse((Object[]) doubleArray1, 2144635526, (-2064888122));
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      long[] longArray0 = new long[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)121;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)121, 1212);
      assertNotNull(bitSet0);
      assertEquals(8, byteArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new byte[] {(byte) (-24), (byte) (-36), (byte) (-122), (byte) (-16), (byte) (-65), (byte) (-11), (byte)88, (byte)121}, byteArray0);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-108));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray1[1] = object1;
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      assertNotSame(object1, object0);
      assertSame(object1, object2);
      assertSame(object2, object1);
      assertNotSame(object2, object0);
      
      objectArray1[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray1[3] = object3;
      Object object4 = ArrayUtils.get(objectArray1, 4776, object1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object3));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      assertEquals(4, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(object1, object0);
      assertSame(object1, object2);
      assertNotSame(object1, object3);
      assertSame(object1, object4);
      assertNotSame(object4, object3);
      assertSame(object4, object2);
      assertNotSame(object4, object0);
      assertSame(object4, object1);
      
      objectArray0[0] = object4;
      Object object5 = ArrayUtils.toPrimitive(object3);
      assertFalse(object3.equals((Object)object4));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertNotNull(object5);
      assertNotSame(object3, object4);
      assertSame(object3, object5);
      assertNotSame(object3, object1);
      assertNotSame(object3, object2);
      assertNotSame(object3, object0);
      assertNotSame(object5, object2);
      assertNotSame(object5, object0);
      assertSame(object5, object3);
      assertNotSame(object5, object1);
      assertNotSame(object5, object4);
      
      objectArray0[1] = object5;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'java.lang.Object@b1514e6', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = null;
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1431655765);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2225);
      assertEquals(7, booleanArray0.length);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false}, booleanArray0));
      
      short[] shortArray1 = new short[8];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte)0;
      shortArray1[1] = (short) (byte)0;
      shortArray1[2] = (short)495;
      shortArray1[3] = (short) (byte)0;
      shortArray1[4] = (short) (byte)0;
      shortArray1[5] = (short) (byte)0;
      shortArray1[6] = (short) (byte)0;
      shortArray1[7] = (short) (byte)0;
      short[] shortArray2 = ArrayUtils.insert(1, shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(12, shortArray2.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)495, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(807, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 807, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = 'a';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(14, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'9', 'a', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true, true, false, true}, booleanArray1));
      
      ArrayUtils.reverse((int[]) null, (-2650), (-1523));
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1758L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(1, longArray1.length);
      assertEquals(0, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {1758L}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      
      char[] charArray2 = new char[4];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'a';
      charArray2[1] = 'a';
      charArray2[2] = 'a';
      charArray2[3] = 'r';
      ArrayUtils.shift(charArray2, (-1523), 2108438490, (-2650));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(4, charArray2.length);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'a', 'r', 'a', 'a'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-2349), 2468, (-147));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ArrayUtils.shift(charArray0, (-14));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2726L;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2460, (short)0, (short)0}, shortArray2);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertFalse(boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2460, (short)0, (short)0}, shortArray2);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1789;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, Double.NaN, (-216), 1743.0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1789.0, 0.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = new BitSet(11);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)2460;
      doubleArray0[1] = (double) (byte)42;
      doubleArray0[2] = (double) 84;
      doubleArray0[3] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, 61, 0, (-724));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2460.0, 42.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)0;
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((short)2460);
      assertNotNull(integer0);
      assertEquals(2460, (int)integer0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)42);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)42}, byteArray0);
      
      Integer integer1 = new Integer((-1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer0));
      assertNotNull(object0);
      assertEquals((-1), object0);
      
      ArrayUtils.swap((Object[]) integerArray0, 6, (int) (byte)42);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      ArrayUtils.shift(byteArray0, 76);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)99, (byte) (-53), (byte)99}, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short)1902;
      shortArray0[1] = (short) (byte)99;
      shortArray0[2] = (short) (byte) (-53);
      shortArray0[3] = (short) (byte)99;
      shortArray0[4] = (short) (byte)99;
      shortArray0[5] = (short) (byte)99;
      ArrayUtils.swap((int[]) null, (int) (short)0, (int) (short)99);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)99;
      longArray0[1] = 236L;
      longArray0[2] = (long) (short)99;
      longArray0[3] = (long) (byte)99;
      longArray0[4] = (long) (short)99;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 657, (int) (short)0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Integer integer0 = new Integer((short)99);
      assertNotNull(integer0);
      assertEquals(99, (int)integer0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte) (-53), (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)99, (byte) (-53), (byte)99}, byteArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 99L;
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(99, object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 99L;
      objectArray0[3] = (Object) (byte)99;
      ArrayUtils.swap(objectArray0, 88, 1679);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      ArrayUtils.shift(byteArray0, 76);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)99, (byte) (-53), (byte)99}, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short)1902;
      shortArray0[1] = (short) (byte)99;
      shortArray0[2] = (short) (byte) (-53);
      shortArray0[3] = (short) (byte)99;
      shortArray0[5] = (short) (byte)99;
      ArrayUtils.swap((int[]) null, (int) (short)0, (int) (short)99);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)99;
      longArray0[2] = (long) (short)99;
      longArray0[3] = (long) (byte)99;
      longArray0[4] = (long) (short)0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 657, (int) (short)0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte) (-53), (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)99, (byte) (-53), (byte)99}, byteArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 99L;
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 99L;
      objectArray0[3] = (Object) (byte)99;
      ArrayUtils.swap(objectArray0, 88, 1679);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(object0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)67;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)42;
      shortArray0[1] = (short) (byte)67;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)42, (short)67}, shortArray0);
      assertArrayEquals(new short[] {(short)42, (short)67, (short)42, (short)67}, shortArray1);
      
      ArrayUtils.reverse((Object[]) integerArray0);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = 'o';
      charArray0[2] = '_';
      charArray0[3] = 'X';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o', (int) (byte)2);
      assertEquals(6, charArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'_', 'o', '_', 'X', '\u0000', '\u0000'}, charArray0);
      
      MutableInt mutableInt0 = new MutableInt((-504));
      assertNotNull(mutableInt0);
      assertEquals((byte)8, mutableInt0.byteValue());
      assertEquals((-504.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-504), (int)mutableInt0.getValue());
      assertEquals((-504.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-504", mutableInt0.toString());
      assertEquals((-504), (int)mutableInt0.toInteger());
      assertEquals((-504L), mutableInt0.longValue());
      assertEquals((-504), mutableInt0.intValue());
      assertEquals((short) (-504), mutableInt0.shortValue());
      
      int int1 = mutableInt0.decrementAndGet();
      assertFalse(int1 == int0);
      assertEquals((-505.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-505), (int)mutableInt0.getValue());
      assertEquals((short) (-505), mutableInt0.shortValue());
      assertEquals((-505.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-505), (int)mutableInt0.toInteger());
      assertEquals("-505", mutableInt0.toString());
      assertEquals((byte)7, mutableInt0.byteValue());
      assertEquals((-505L), mutableInt0.longValue());
      assertEquals((-505), mutableInt0.intValue());
      assertEquals((-505), int1);
      
      Integer integer0 = mutableInt0.toInteger();
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-505.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-505), (int)mutableInt0.getValue());
      assertEquals((short) (-505), mutableInt0.shortValue());
      assertEquals((-505.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-505), (int)mutableInt0.toInteger());
      assertEquals("-505", mutableInt0.toString());
      assertEquals((byte)7, mutableInt0.byteValue());
      assertEquals((-505L), mutableInt0.longValue());
      assertEquals((-505), mutableInt0.intValue());
      assertEquals((-505), (int)integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (int) 2, integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals(0, integerArray0.length);
      assertEquals((-505.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-505), (int)mutableInt0.getValue());
      assertEquals((short) (-505), mutableInt0.shortValue());
      assertEquals((-505.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-505), (int)mutableInt0.toInteger());
      assertEquals("-505", mutableInt0.toString());
      assertEquals((byte)7, mutableInt0.byteValue());
      assertEquals((-505L), mutableInt0.longValue());
      assertEquals((-505), mutableInt0.intValue());
      assertEquals((-505), (int)integer1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) null, (Object) integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      Integer integer0 = new Integer(1853);
      assertNotNull(integer0);
      assertEquals(1853, (int)integer0);
      
      Integer integer1 = new Integer((-1644));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1644), (int)integer1);
      
      Integer integer2 = new Integer(1853);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1853, (int)integer2);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer2;
      integerArray0[4] = integer0;
      Integer integer3 = new Integer((-1644));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-1644), (int)integer3);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      ArrayUtils.shift(booleanArray0, 1827, 0, (int) integerArray0[1]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(5, integerArray0.length);
      assertNotSame(integerArray0, integerArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (int)integerArray0[1];
      doubleArray0[1] = (double) 1853;
      doubleArray0[2] = (double) (int)integerArray0[0];
      doubleArray0[3] = (double) ';';
      doubleArray0[4] = 156.8;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 'r';
      doubleArray0[8] = (-1823.2253552578156);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (int) integerArray0[2], 0.0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(5, integerArray0.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(7, int0);
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new double[] {(-1644.0), 1853.0, 1853.0, 59.0, 156.8, 0.0, 114.0, 0.0, (-1823.2253552578156)}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(charArray0, 6, 46);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1789;
      ArrayUtils.shift(doubleArray0, (-447), 1789, 1505);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1789.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse((Object[]) null);
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, 0);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 1789, (double) (-447));
      assertFalse(int1 == int0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {0.0, 1789.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)48;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-38));
      assertEquals(6, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte) (-53), (byte)48, (byte)0}, byteArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)48;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte) (-53);
      floatArray0[3] = (float) (byte) (-1);
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte) (-53);
      floatArray0[6] = (float) (byte) (-1);
      floatArray0[7] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {48.0F, 0.0F, (-53.0F), (-1.0F), 0.0F, (-53.0F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (byte)48;
      doubleArray0[2] = (double) (byte) (-53);
      int int1 = ArrayUtils.indexOf(doubleArray0, (-59.0), 1.0);
      assertTrue(int1 == int0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-1.0), 48.0, (-53.0)}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(1212);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1212, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short)457;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)457, (short)0, (short)0, (short) (-1), (short)0, (short) (-1)}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.insert((int) (short)0, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)453, (int) (short) (-1));
      assertEquals(8, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)457, (short)0, (short)0, (short) (-1), (short)0, (short) (-1)}, shortArray0);
      
      ArrayUtils.swap(doubleArray0, (-556), (-1), (int) (byte) (-1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = 1414.045174081;
      doubleArray0[1] = 1601.3390395;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(21, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-5672));
      assertEquals(8, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, true, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1));
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (long)longArray0[1];
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (long)longArray0[1];
      doubleArray0[4] = (double) (long)longArray0[1];
      ArrayUtils.reverse(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-5672);
      intArray0[2] = (-5672);
      intArray0[3] = (-1);
      intArray0[4] = (-5672);
      intArray0[5] = (-5672);
      intArray0[6] = (-5672);
      intArray0[7] = (-1);
      int int1 = ArrayUtils.indexOf(intArray0, (-1), (-1));
      assertFalse(int1 == int0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {(-1), (-5672), (-5672), (-1), (-5672), (-5672), (-5672), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1530;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1530L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1530L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1815.3392F);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = '=';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '~', 1033);
      assertTrue(int1 == int0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'m', '=', 'm', 'm'}, charArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) '=';
      doubleArray0[2] = (double) 1815.3392F;
      int int2 = ArrayUtils.indexOf(doubleArray0, 0.0, 1530);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {Double.NaN, 61.0, 1815.3392333984375}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)54;
      shortArray0[1] = (short) (-248);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)48;
      shortArray0[4] = (short)122;
      short[] shortArray1 = new short[8];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)54;
      shortArray1[1] = (short)54;
      shortArray1[2] = (short)122;
      shortArray1[3] = (short)48;
      shortArray1[4] = (short)54;
      shortArray1[5] = (short)0;
      shortArray1[6] = (short)48;
      shortArray1[7] = (short)48;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertEquals(8, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertEquals(5, shortArray0.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)54, (short)54, (short)122, (short)48, (short)54, (short)0, (short)48, (short)48}, shortArray1);
      assertArrayEquals(new short[] {(short) (-248)}, shortArray2);
      assertArrayEquals(new short[] {(short)54, (short) (-248), (short)0, (short)48, (short)122}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)2;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = 2179;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short)0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertArrayEquals(new int[] {0, 2, 0, 0, 2179, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4051);
      shortArray0[1] = (short) (byte)76;
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-4051);
      shortArray1[1] = (short) (-4051);
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short) (-4051), (short)76}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4051), (short) (-4051)}, shortArray1);
      assertArrayEquals(new short[] {(short)76}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)2460;
      doubleArray0[1] = (double) (byte)42;
      doubleArray0[2] = (double) 84;
      doubleArray0[3] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, 61, 0, (-724));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2460.0, 42.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)0;
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((short)2460);
      assertNotNull(integer0);
      assertEquals(2460, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray1, (-964), 2789);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertEquals(1, integerArray2.length);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)42}, byteArray1);
      assertArrayEquals(new byte[] {(byte)42}, byteArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)2460;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = 2246;
      intArray0[5] = (int) (short)0;
      intArray0[6] = 84;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2460, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      Long long0 = new Long((byte) (-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-170);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1801), 2146336255);
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1666), (short) (-170)}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short) (-170), (-43));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray1, true, 759);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(int1 == int0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals((-1), int1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false, true}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      int int0 = ArrayUtils.indexOf(charArray0, ')');
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {')'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1253.1;
      doubleArray0[2] = (-2795.462509321963);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 1253.1, (-2795.462509321963), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 1253.1, (-2795.462509321963), 0.0, (-1.0), 1253.1, (-2795.462509321963), 0.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, (-1055), (-1055), 1340);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-58);
      intArray0[4] = (-58);
      intArray0[5] = (-58);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-1));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '|', 2);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short)0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 8);
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) 1, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry2);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry3;
      Integer integer1 = new Integer(46);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(46, (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) (-58), integer1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry4);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry3);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry6;
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer2);
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntry7);
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry7;
      Integer integer3 = new Integer(2);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int1));
      assertNotNull(integer3);
      assertEquals(2, (int)integer3);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry8 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) 1, integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertNotNull(abstractMap_SimpleImmutableEntry8);
      
      abstractMap_SimpleImmutableEntryArray0[7] = abstractMap_SimpleImmutableEntry8;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.clone(abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(8, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(8, abstractMap_SimpleImmutableEntryArray0.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Long long0 = new Long((-96L));
      assertNotNull(long0);
      assertEquals((-96L), (long)long0);
      
      Integer integer0 = new Integer((-878));
      assertNotNull(integer0);
      assertEquals((-878), (int)integer0);
      
      Integer integer1 = new Integer((-878));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-878), (int)integer1);
      
      Integer integer2 = Integer.getInteger(" h[Tx", 1511);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1511, (int)integer2);
      
      Integer integer3 = new Integer(1767);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(1767, (int)integer3);
      
      Integer integer4 = Integer.valueOf(2);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(2, (int)integer4);
      
      Integer integer5 = new Integer((-1640));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals((-1640), (int)integer5);
      
      Integer integer6 = new Integer(2);
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals(2, (int)integer6);
      
      Integer[] integerArray1 = new Integer[0];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean boolean1 = ArrayUtils.isArrayIndexValid(integerArray1, (-815));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, integerArray1.length);
      assertFalse(boolean1);
      assertNotSame(integerArray1, integerArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-2397));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1511;
      int int0 = ArrayUtils.indexOf((char[]) null, 'V');
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertTrue(int1 == int0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-95);
      boolean boolean2 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)57, (byte) (-85), (byte)60, (byte)2, (byte) (-81), (byte)76, (byte)0, (byte) (-95)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)114;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)114, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[5];
      byteArray0[2] = (byte) (-1);
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-1), 2883, (int) (byte)0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertEquals(8, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true, false, true}, booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 1;
      intArray0[2] = 84;
      intArray0[3] = (-2146984596);
      intArray0[4] = 84;
      intArray0[5] = (int) (short)2460;
      intArray0[6] = (-1);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1), 1, 84, (-2146984596), 84, 2460, (-1)}, intArray1);
      assertArrayEquals(new int[] {(-1), 1, 84, (-2146984596), 84, 2460, (-1)}, intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = '}';
      charArray0[2] = 'u';
      charArray0[3] = 'w';
      charArray0[4] = '}';
      charArray0[5] = '5';
      charArray0[6] = '%';
      charArray0[7] = '$';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {':', '}', 'u', 'w', '}', '5', '%', '$'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      
      ArrayUtils.swap(booleanArray1, 1, (-2146242326), 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)46;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-17), (byte)76, (byte)6, (byte)46}, byteArray0);
      
      Character character0 = Character.valueOf('r');
      assertNotNull(character0);
      assertEquals('r', (char)character0);
      
      Character character1 = new Character('m');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('m', (char)character1);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(boolean1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)46;
      doubleArray0[1] = (double) 'r';
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte)6;
      int int1 = ArrayUtils.indexOf(doubleArray0, 2962.44144606864, (int) (byte)76);
      assertFalse(int1 == int0);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {46.0, 114.0, 0.0, 0.0, 6.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift(booleanArray0, 309);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = (-663L);
      longArray0[1] = 0L;
      longArray0[2] = (-1730L);
      longArray0[3] = 9L;
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'S';
      charArray0[4] = 'A';
      charArray0[5] = 'b';
      charArray0[6] = 'e';
      charArray0[7] = 'A';
      ArrayUtils.shift(charArray0, 0, 0, 1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'A', 'A', 'A', 'S', 'A', 'b', 'e', 'A'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2022);
      shortArray0[1] = (short)76;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2022), (short)76}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-14), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -14, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      ArrayUtils.shift(byteArray0, 76);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)99, (byte) (-53), (byte)99}, byteArray0);
      
      ArrayUtils.swap((int[]) null, (int) (byte)99, (int) (byte)99);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)99;
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (byte)99;
      longArray1[1] = (long) (byte)99;
      longArray1[2] = 2401L;
      longArray1[3] = (long) (byte)99;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (-164L), 1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(bitSet0);
      assertEquals(4, longArray1.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {99L, 99L, 2401L, 99L}, longArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)99;
      intArray0[1] = (int) (byte)99;
      intArray0[2] = (int) (byte) (-53);
      intArray0[3] = 109;
      intArray0[4] = (int) (byte)99;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (byte)99);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {99, 99, 99, (-53), 109, 99}, intArray1);
      assertArrayEquals(new int[] {99, 99, (-53), 109, 99}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)99;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-528), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -528, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 0.0;
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.shift(doubleArray0, 0, 750, (int) (byte) (-53));
      assertEquals(12, doubleArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'G';
      charArray0[2] = 'n';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'-', 'G', 'n'}, charArray0);
      
      Integer integer0 = new Integer((byte) (-53));
      assertNotNull(integer0);
      assertEquals((-53), (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) integer0, 0);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, 0.0);
      assertEquals(12, doubleArray0.length);
      assertEquals(11, int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-34.626F);
      floatArray0[1] = 2657.032F;
      floatArray0[2] = (float) (byte) (-53);
      floatArray0[3] = (float) '-';
      floatArray0[4] = (float) 11;
      floatArray0[5] = (float) 'n';
      floatArray0[6] = (float) '-';
      floatArray0[7] = (float) 'G';
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = (-34.626F);
      floatArray1[2] = (float) 0;
      floatArray1[3] = (float) 'n';
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(12, floatArray2.length);
      assertEquals(8, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-34.626F), 2657.032F, (-53.0F), 45.0F, 11.0F, 110.0F, 45.0F, 71.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-34.626F), 0.0F, 110.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, object1);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertSame(object0, object1);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, 0, (-2134), (-2134));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)46;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)6, (byte)46}, byteArray0);
      
      Character character0 = Character.valueOf('j');
      assertNotNull(character0);
      assertEquals('j', (char)character0);
      
      Character character1 = new Character(';');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals(';', (char)character1);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) 1853L, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = '4';
      charArray0[2] = '|';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'J';
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {74.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {74.0, 74.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {74.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 2485, (-2544));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {74.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {74.0, 74.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      ArrayUtils.shift(byteArray0, (-1944), (int) (byte)76, (int) (byte)76);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76}, byteArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'W');
      assertEquals(3, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'J', '4', '|'}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom(524L);
      assertNotNull(mockRandom0);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, '\'', (-1944));
      assertTrue(int1 == int0);
      assertEquals(3, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'J', '4', '|'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ArrayUtils.shift(byteArray0, 17);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ArrayUtils.shift(byteArray0, 2, 2, 17);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      int int0 = 78;
      Integer integer0 = new Integer(78);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(78, (int)integer0);
      
      Integer integer1 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, 78, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-2059), (-1915), (-2059));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-201));
      assertNotNull(integer0);
      assertEquals((-201), (int)integer0);
      
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, 6, integerArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (short)0;
      ArrayUtils.swap((char[]) null, 78, (-1), 78);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) 78;
      floatArray0[4] = (float) 78;
      floatArray0[5] = (float) (short) (-1);
      floatArray0[6] = (float) (short) (-1);
      floatArray0[7] = (float) (-1);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 78.0F, 78.0F, (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 78.0F, 78.0F, (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, (-1.0), (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, (-1.0), (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-2103));
      assertNotNull(integer0);
      assertEquals((-2103), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(78);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(78, (int)integer1);
      
      integerArray0[1] = integer1;
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, (-3399), integerArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3399, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1948;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 1948;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0]);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
      
      int int1 = ArrayUtils.indexOf(floatArray0, (float) 0, 4562);
      assertFalse(int1 == int0);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      Integer integer0 = new Integer(1052);
      assertNotNull(integer0);
      assertEquals(1052, (int)integer0);
      
      ArrayUtils.reverse((char[]) null);
      int int0 = ArrayUtils.indexOf((Object[]) booleanArray1, (Object) integer0);
      assertEquals(0, booleanArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = 'e';
      charArray0[2] = 'g';
      ArrayUtils.reverse(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'g', 'e', 'E'}, charArray0);
      
      short[] shortArray0 = new short[2];
      short short0 = (short)2289;
      shortArray0[0] = (short)2289;
      shortArray0[1] = (short)110;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2289);
      assertEquals(2, shortArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)2289, (short)110}, shortArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'e';
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {101L}, longArray0);
      assertArrayEquals(new long[] {101L}, longArray1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 101L;
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[2] = '~';
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.reverse(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'~', '\u0000', 'x'}, charArray0);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) null);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "");
      assertNotNull(stringArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, stringArray0.length);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) (-1));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1530);
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-170);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1530;
      doubleArray0[1] = (-3278.0);
      doubleArray0[2] = (double) 1530;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1530.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1530.0, 1530.0, (-3278.0), 1530.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1530.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1530.0, 1530.0, (-3278.0), 1530.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, 33, (int) (short)0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1530.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1801), 2146336255);
      assertEquals(6, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1666), (short) (-170), (short)0, (short)0, (short)0}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 1530.0;
      Integer integer0 = new Integer(14);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(14, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      ArrayUtils.shift(objectArray0, (-368));
      assertEquals(1, objectArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 33;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 114L);
      assertTrue(int1 == int0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {33L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-1347), 1922, (-1347));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) ';';
      doubleArray0[1] = (double) ';';
      doubleArray0[2] = (double) 'r';
      doubleArray0[3] = (double) 'r';
      doubleArray0[4] = (double) 'r';
      doubleArray0[5] = (double) ';';
      doubleArray0[6] = (double) ';';
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (double) 'r';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {59.0, 59.0, 114.0, 114.0, 114.0, 59.0, 59.0, (-1.0), 114.0}, doubleArray0, 0.01);
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((-1.0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {59.0, 59.0, 114.0, 114.0, 114.0, 59.0, 59.0, (-1.0), 114.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse((Object[]) floatArray0, 802, 0);
      assertEquals(3, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 802;
      intArray0[1] = (int) ';';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {802, 59}, intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 802;
      longArray0[1] = (long) ';';
      longArray0[2] = 0L;
      ArrayUtils.reverse(longArray0, 59, 59);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {802L, 59L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0, 0, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {1L}, longArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) ';';
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 488;
      floatArray0[5] = (float) (-766L);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (float) 1L);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1.0F, 59.0F, 0.0F, 0.0F, 0.0F, 488.0F, (-766.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {59.0F, 0.0F, 0.0F, 0.0F, 488.0F, (-766.0F)}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf(booleanArray1, true);
      assertTrue(int1 == int0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(0, int1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-29);
      int int2 = ArrayUtils.indexOf(byteArray0, (byte)21, 56);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-71), (byte)21, (byte) (-29)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 3554;
      longArray0[2] = (long) 1211;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 1211;
      longArray0[6] = (long) 3554;
      longArray0[7] = (long) 2;
      longArray0[8] = (long) 3554;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 115, 22);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2L, 3554L, 1211L, 2L, 1211L, 0L, 3554L, 2L, 3554L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = ArrayUtils.insert(1211, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.swap((boolean[]) null, 0, 418, (-439));
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {2L, 3554L, 1211L, 2L, 1211L, 0L, 3554L, 2L, 3554L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      Integer integer0 = new Integer(968);
      assertNotNull(integer0);
      assertEquals(968, (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Integer integer0 = new Integer((-1537));
      assertNotNull(integer0);
      assertEquals((-1537), (int)integer0);
      
      Integer integer1 = new Integer((-1537));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1537), (int)integer1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Integer[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-5672));
      assertEquals(9, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true, false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Long long0 = new Long(1980L);
      assertNotNull(long0);
      assertEquals(1980L, (long)long0);
      
      Long long1 = new Long(1980L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1980L, (long)long1);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long1;
      longArray0[1] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (long)longArray0[1];
      doubleArray0[1] = (double) (-5672);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-5672.0), 1980.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = new short[8];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)2336;
      shortArray2[1] = (short)6264;
      shortArray2[2] = (short)112;
      shortArray2[3] = (short) (-1);
      shortArray2[4] = (short)10;
      shortArray2[5] = (short)98;
      shortArray2[6] = (short) (-1);
      shortArray2[7] = (short)1880;
      short[] shortArray3 = ArrayUtils.addAll(shortArray1, shortArray2);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray3);
      assertEquals(8, shortArray3.length);
      assertEquals(8, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2336, (short)6264, (short)112, (short) (-1), (short)10, (short)98, (short) (-1), (short)1880}, shortArray3);
      assertArrayEquals(new short[] {(short)2336, (short)6264, (short)112, (short) (-1), (short)10, (short)98, (short) (-1), (short)1880}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-564L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-564L), (long)long2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 4388L, (-1909));
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {1L, 0L}, longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)39;
      intArray0[1] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 39);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {39, 0}, intArray0);
      assertArrayEquals(new int[] {39, 39, 0}, intArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1853L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 4388L;
      doubleArray0[3] = (double) (-164L);
      doubleArray0[4] = (double) (byte)39;
      doubleArray0[5] = (double) ';';
      doubleArray0[6] = (double) (-1909);
      doubleArray0[7] = (double) ';';
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (-1909));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1853.0, 0.0, 4388.0, (-164.0), 39.0, 59.0, 59.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1853.0, 0.0, 4388.0, (-164.0), 39.0, 59.0, (-1909.0), 59.0}, doubleArray0, 0.01);
      
      int[] intArray2 = ArrayUtils.clone(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertEquals(2, intArray2.length);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {39, 0}, intArray2);
      assertArrayEquals(new int[] {39, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      ArrayUtils.shift(byteArray0, 76);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)99, (byte) (-53), (byte)99}, byteArray0);
      
      ArrayUtils.swap((int[]) null, (int) (byte)99, (int) (byte)99);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)99;
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (byte)99;
      longArray1[1] = (long) (byte)99;
      longArray1[2] = 2401L;
      longArray1[3] = (long) (byte)99;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (-164L), 1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(bitSet0);
      assertEquals(4, longArray1.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {99L, 99L, 2401L, 99L}, longArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)99;
      intArray0[1] = (int) (byte)99;
      intArray0[2] = (int) (byte)99;
      intArray0[3] = 109;
      intArray0[4] = (int) (byte)99;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (byte)99);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {99, 99, 99, 99, 109, 99}, intArray1);
      assertArrayEquals(new int[] {99, 99, 99, 109, 99}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 109;
      doubleArray0[2] = (double) 99;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1616.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 109.0, 99.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 109.0, 99.0}, doubleArray1, 0.01);
      
      int[] intArray2 = ArrayUtils.clone(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertEquals(5, intArray2.length);
      assertEquals(5, intArray0.length);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {99, 99, 99, 109, 99}, intArray2);
      assertArrayEquals(new int[] {99, 99, 99, 109, 99}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(114);
      assertNotNull(long0);
      assertEquals(114L, (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {114L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-564L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-564L), (long)long2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)36;
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short)118;
      shortArray0[3] = (short) (byte) (-116);
      shortArray0[5] = (short) (byte)36;
      boolean boolean0 = ArrayUtils.isSameType(long0, (short) (-116));
      assertFalse(long0.equals((Object)long2));
      assertTrue(long0.equals((Object)long1));
      assertFalse(boolean0);
      
      Long long3 = new Long(0L);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      Long long4 = new Long(1L);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertNotNull(long4);
      assertEquals(1L, (long)long4);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 1273L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-798L));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {(-798L), (-798L), (-798L), (-798L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)22);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)22}, byteArray0);
      
      Long[] longArray1 = new Long[9];
      longArray1[0] = (Long) (-1L);
      long long0 = 33L;
      Long long1 = new Long(33L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(33L, (long)long1);
      
      longArray1[1] = long1;
      Long long2 = new Long((-1132L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-1132L), (long)long2);
      
      longArray1[2] = long2;
      longArray1[3] = (Long) (-1L);
      longArray1[4] = (Long) (-1L);
      longArray1[5] = (Long) (-1L);
      longArray1[6] = (Long) (-1L);
      longArray1[7] = (Long) (-1L);
      longArray1[8] = (Long) (-1L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, long0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(9, longArray2.length);
      assertEquals(9, longArray1.length);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {(-1L), 33L, (-1132L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1159L);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((Object[]) null, 48, 48, 2);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = 1018L;
      ArrayUtils.swap(longArray0, (-5160), 1134, 89);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 1018L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1431655765);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom((-2745L));
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 59;
      longArray0[1] = (long) 2;
      longArray0[2] = (-2745L);
      ArrayUtils.swap(longArray0, (-415), 59, (-415));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {59L, 2L, (-2745L)}, longArray0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, (-1571), (-415), (-415));
      assertEquals(0, objectArray0.length);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, 1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertEquals(3, intArray2.length);
      assertEquals(3, intArray0.length);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray2);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      Integer integer0 = Integer.getInteger(")KtlN", (-1571));
      assertNotNull(integer0);
      assertEquals((-1571), (int)integer0);
      
      int int0 = ArrayUtils.indexOf((Object[]) byteArray0, (Object) integer0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      assertNotSame(byteArray0, byteArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) 59;
      floatArray0[2] = (float) 2L;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) (-1);
      int int1 = ArrayUtils.indexOf(floatArray0, (-2339.7F), 4562);
      assertTrue(int1 == int0);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {0.0F, 59.0F, 2.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-58);
      intArray0[1] = (-58);
      intArray0[2] = (-58);
      intArray0[3] = (-58);
      intArray0[4] = (-58);
      intArray0[5] = (-58);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2, (-58));
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {(-58), (-58), (-58), (-58), (-58), (-58)}, intArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.junitpioneer.jupiter.RepeatFailedTestExtension";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-58);
      floatArray0[1] = (-1.0F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-58.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-58.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-58);
      longArray0[1] = (long) (-58);
      longArray0[3] = (long) (-58);
      longArray0[4] = (long) 2;
      longArray0[5] = (long) (-58);
      longArray0[6] = (long) (-58);
      longArray0[7] = (long) (-58);
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-58);
      longArray1[1] = (long) (-58);
      ArrayUtils.shuffle(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-58L), (-58L)}, longArray1);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(9, longArray0.length);
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-58L), (-58L), 0L, (-58L), 2L, (-58L), (-58L), (-58L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 549);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {549}, intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, 1032, (-149));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {549}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift(booleanArray0, (-1989));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1555, 1555, 1033);
      int int0 = 1853;
      Integer integer0 = new Integer(1853);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1853, (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      Integer integer2 = new Integer((-89));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-89), (int)integer2);
      
      Integer integer3 = new Integer(1555);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(1555, (int)integer3);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = ';';
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)964;
      intArray0[2] = (int) (short)964;
      intArray0[3] = 2142601671;
      intArray0[4] = 2142601671;
      intArray0[5] = (int) ';';
      ArrayUtils.shift(intArray0, 1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {59, 1, 964, 964, 2142601671, 2142601671}, intArray0);
      
      ArrayUtils.shift(intArray0, 670);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {964, 964, 2142601671, 2142601671, 59, 1}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'\u0000', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, 102);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      
      char[] charArray0 = new char[15];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(15, charArray0.length);
      assertEquals(15, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-646);
      intArray0[4] = (-1);
      ArrayUtils.shuffle(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-646), (-1), 0, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-646), 102);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'f';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'i', 'f'}, charArray0);
      assertArrayEquals(new char[] {'i', 'f'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      Integer integer0 = new Integer(1968526677);
      assertNotNull(integer0);
      assertEquals(1968526677, (int)integer0);
      
      int int0 = (-70);
      int int1 = (-2533);
      Integer integer1 = new Integer((-2533));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2533), (int)integer1);
      
      Integer[] integerArray0 = null;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray1.length);
      
      int int2 = 6;
      String string0 = null;
      try { 
        Integer.valueOf((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(59);
      assertNotNull(integer0);
      assertEquals(59, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1872));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1872), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1968526677);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1968526677, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-70));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-70), (int)integer3);
      
      integerArray0[3] = integer3;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      int int0 = 6;
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) integer1, 6);
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(int1 == int0);
      assertEquals(4, integerArray0.length);
      assertEquals((-1), int1);
      assertSame(integerArray0, integerArray1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fyeT[2nC]48jup  ";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray1, integerArray0[1]);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertEquals(5, integerArray2.length);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      
      Integer integer4 = new Integer((-2869));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals((-2869), (int)integer4);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, integer4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 150;
      floatArray0[1] = (float) 150;
      Long long0 = new Long(150);
      assertNotNull(long0);
      assertEquals(150L, (long)long0);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, (float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {150.0F, 150.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {150.0F, 150.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      Integer integer0 = new Integer((byte)42);
      assertNotNull(integer0);
      assertEquals(42, (int)integer0);
      
      Integer[] integerArray0 = new Integer[3];
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '\'';
      intArray0[1] = 8;
      intArray0[2] = (int) (byte)42;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 42, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      Short short0 = new Short((short)283);
      assertNotNull(short0);
      assertEquals((short)283, (short)short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)56);
      assertNull(shortArray0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(524);
      assertNotNull(integer0);
      assertEquals(524, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short)56);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(56, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(1478);
      assertNotNull(integer0);
      assertEquals(1478, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1478);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1478, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1478);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1478, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(6, integerArray0.length);
      assertEquals(1478, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals((-1), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1478);
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals(1478, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[1]);
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(6, integerArray0.length);
      assertEquals(1478, (int)integer6);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(6, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Integer[] integerArray2 = new Integer[1];
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      integerArray2[0] = integer1;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) integerArray0[2];
      intArray0[1] = (int) integerArray0[2];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1478, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '/';
      longArray0[1] = (long) 'E';
      Integer integer0 = new Integer((-1068));
      assertNotNull(integer0);
      assertEquals((-1068), (int)integer0);
      
      Integer integer1 = new Integer(1058);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1058, (int)integer1);
      
      Integer integer2 = new Integer((-1068));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1068), (int)integer2);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1068);
      doubleArray0[1] = 2572.1278686523438;
      doubleArray0[2] = (double) '/';
      doubleArray0[3] = (double) '/';
      doubleArray0[4] = (double) '/';
      doubleArray0[5] = (double) 1058;
      doubleArray0[6] = (double) (-1);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1068.0), 2572.1278686523438, 47.0, 47.0, 47.0, 1058.0, (-1.0)}, doubleArray0, 0.01);
      
      Float float0 = new Float((float) 772);
      assertNotNull(float0);
      assertEquals(772.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(47.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(47.0F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {47.0F}, floatArray1, 0.01F);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(14, doubleArray2.length);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-1068.0), 2572.1278686523438, 47.0, 47.0, 47.0, 1058.0, (-1.0)}, doubleArray0, 0.01);
      
      ArrayUtils.reverse((Object[]) doubleArray1, (-2143), (-1068));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-1068.0), 2572.1278686523438, 47.0, 47.0, 47.0, 1058.0, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer integer0 = new Integer((-2146962159));
      assertNotNull(integer0);
      assertEquals((-2146962159), (int)integer0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-1079), (Object) integer0);
      assertNotNull(object0);
      assertEquals(1, objectArray0.length);
      assertEquals((-2146962159), object0);
      
      objectArray0[0] = object0;
      ArrayUtils.reverse(objectArray0, (-2146962159), 3434);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1079);
      doubleArray0[1] = 2233.25;
      doubleArray0[2] = (double) 3434;
      doubleArray0[3] = (double) 3434;
      ArrayUtils.shift(doubleArray0, 2, 3434, (-2146962159));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1079.0), 2233.25, 3434.0, 3434.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-2146749841), (-2146749841), 2);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      ArrayUtils.shift(charArray0, (-1));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'k'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = (-663L);
      longArray0[1] = 0L;
      ArrayUtils.shift(doubleArray0, 0, 2, 1693);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-70);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)5);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-70), (byte) (-70), (byte) (-70), (byte) (-70)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-70), (byte) (-70), (byte) (-70), (byte) (-70)}, byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 513.70432843, 2134851391, (double) 0L);
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(longArray0, 56, (int) (byte) (-70));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-663L), 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = ';';
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(';');
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(59L, (long)long1);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertEquals(8, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = ';';
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1407.0), (-1407.0));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      Integer integer0 = new Integer((-545));
      assertNotNull(integer0);
      assertEquals((-545), (int)integer0);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-720.0F);
      floatArray0[1] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 6);
      assertEquals(2, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-720.0F), 1.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[2] = (long) 6;
      longArray0[4] = (long) 6;
      longArray0[5] = (long) 6;
      longArray0[6] = (long) 1;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-663L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 0L, 6L, 6L, 1L}, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 0L, 6L, 6L, 1L}, longArray1);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-663L);
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = (-720.0F);
      floatArray1[4] = (float) 6L;
      floatArray1[5] = (float) 1;
      floatArray1[6] = (float) 6L;
      int int1 = ArrayUtils.lastIndexOf(floatArray1, (float) (-663L));
      assertFalse(int1 == int0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(7, floatArray1.length);
      assertEquals(0, int1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-663.0F), 1.0F, 1.0F, (-720.0F), 6.0F, 1.0F, 6.0F}, floatArray1, 0.01F);
      
      int int2 = ArrayUtils.indexOf((double[]) null, (double) 6);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {6L, 6L, 6L, 0L, 6L, 6L, 1L}, longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)4;
      ArrayUtils.reverse((double[]) null);
      boolean[] booleanArray0 = new boolean[0];
      int int3 = ArrayUtils.indexOf(booleanArray0, false);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int3);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 6L, Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      int[] intArray0 = new int[0];
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)2460;
      doubleArray0[1] = (double) (byte)42;
      doubleArray0[2] = (double) 84;
      doubleArray0[3] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, 61, 0, (-724));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2460.0, 42.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)0;
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((short)2460);
      assertNotNull(integer0);
      assertEquals(2460, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (-724);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2086.243F;
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray0, 84, (int) 2460);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertEquals(0, integerArray2.length);
      assertEquals(0, integerArray0.length);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(12, byteArray0.length);
      assertEquals(11, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.shift((boolean[]) null, 68);
      Integer integer0 = new Integer(1072);
      assertNotNull(integer0);
      assertEquals(1072, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((byte) (-113));
      assertNotNull(mockRandom0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)44);
      assertNull(byteArray0);
      
      ArrayUtils.shift((Object[]) integerArray0, (-2397), 594, (-2397));
      assertEquals(0, integerArray0.length);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)44);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0);
      assertNotNull(stringArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, 594);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = 'O';
      charArray0[2] = '|';
      charArray0[3] = '\'';
      charArray0[4] = 'T';
      charArray0[5] = 'X';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '9', (-2397));
      assertTrue(int1 == int0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'-', 'O', '|', '\'', 'T', 'X'}, charArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)44;
      shortArray0[1] = (short) (byte)44;
      shortArray0[2] = (short) (byte)44;
      shortArray0[3] = (short) (byte)44;
      shortArray0[4] = (short) (byte)44;
      shortArray0[5] = (short) (byte)44;
      shortArray0[6] = (short) (byte)44;
      shortArray0[7] = (short) (byte)44;
      shortArray0[8] = (short) (byte)44;
      int int2 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(9, shortArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new short[] {(short)44, (short)44, (short)44, (short)44, (short)44, (short)44, (short)44, (short)44, (short)44}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '|';
      ArrayUtils.swap(charArray0, (-1), 158, 612);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'|', '|', '|', '|'}, charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '|';
      floatArray0[1] = (float) 612;
      floatArray0[2] = (float) '|';
      floatArray0[3] = (float) 612;
      floatArray0[4] = (float) '|';
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) '|';
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {124.0F, 612.0F, 124.0F, 612.0F, 124.0F, 0.0F, 124.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {124.0F, 612.0F, 124.0F, 612.0F, 124.0F, 0.0F, 124.0F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '|';
      doubleArray0[1] = (double) 124.0F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 612;
      doubleArray0[4] = (double) '|';
      doubleArray0[5] = (double) 158;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {124.0, 124.0, 0.0, 612.0, 124.0, 158.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {124.0, 124.0, 0.0, 612.0, 124.0, 158.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift(booleanArray0, (-1936));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      ArrayUtils.swap(charArray0, (-1504), 1470, 2146753955);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'n'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, 2883, 2501, 2501);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)11;
      ArrayUtils.shift(byteArray0, (int) (byte) (-99), 1789, 531);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)2, (byte)11, (byte)0}, byteArray0);
      
      Byte[] byteArray1 = new Byte[3];
      byteArray1[0] = (Byte) (byte)2;
      byteArray1[1] = (Byte) (byte)2;
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      byteArray1[2] = byte0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-99));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2}, byteArray2);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-1883), (-2211));
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences((float[]) null, (float) 0);
      assertNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, 2883, (int) (byte) (-1), Integer.MAX_VALUE);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 897.413F, 583);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'H';
      charArray0[2] = 'K';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'W');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'d', 'H', 'K'}, charArray0);
      assertArrayEquals(new char[] {'d', 'H', 'K'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      Object object1 = ArrayUtils.get(objectArray0, 1478);
      assertNull(object1);
      assertEquals(5, objectArray0.length);
      
      Object object2 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object2);
      assertSame(object0, object2);
      assertSame(object2, object0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, object2, (-1));
      assertEquals(5, objectArray0.length);
      assertEquals(0, int0);
      assertSame(object0, object2);
      assertSame(object2, object0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.valueOf("org.apache.commons.lang3.ArrayUtils");
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      
      Integer integer0 = new Integer((-1537));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1537), (int)integer0);
      
      Integer integer1 = new Integer(884);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(884, (int)integer1);
      
      boolean boolean4 = ArrayUtils.isNotEmpty((Integer[]) null);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(59);
      assertNotNull(integer0);
      assertEquals(59, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1854));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1854), (int)integer1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, 59);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true}, booleanArray0));
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.addFirst((boolean[]) null, false);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.get(objectArray0, 6188);
      assertNull(object2);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, object1, 0);
      assertFalse(object1.equals((Object)object0));
      assertEquals(3, objectArray0.length);
      assertEquals(1, int0);
      assertNotSame(object1, object0);
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean boolean1 = true;
      Boolean boolean2 = Boolean.valueOf(true);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(boolean1);
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf("");
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[3] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean1);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray1));
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-853));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-853), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      boolean boolean5 = ArrayUtils.isNotEmpty(integerArray0);
      assertTrue(boolean5 == boolean1);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean5);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      float[] floatArray0 = new float[13];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(13, floatArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[2] = 3519L;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short) (-21957));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-21957)}, shortArray2);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray2.length);
      assertFalse(boolean1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-21957)}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1555, 1555, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)964;
      intArray0[1] = (int) (short)1;
      intArray0[2] = 1555;
      intArray0[3] = (int) (short)964;
      intArray0[4] = 1033;
      intArray0[5] = 2142601671;
      intArray0[6] = 1033;
      intArray0[7] = (int) (short)1;
      intArray0[8] = 1033;
      ArrayUtils.shift(intArray0, 1555);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1555, 964, 1033, 2142601671, 1033, 1, 1033, 964, 1}, intArray0);
      
      ArrayUtils.shift(intArray0, (int) (short)964);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1, 1555, 964, 1033, 2142601671, 1033, 1, 1033, 964}, intArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)114;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-34));
      assertEquals(6, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)114, (byte)114, (byte)1, (byte)114}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      longArray0[8] = 2401L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L), 1);
      assertNotNull(bitSet0);
      assertEquals(9, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.cardinality());
      assertEquals("{1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), 2401L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-58);
      intArray0[4] = (-58);
      intArray0[5] = (-58);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2, 1);
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new int[] {1, 1, 1, (-58), (-58), (-58)}, intArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.junitpioneer.jupiter.RepeatFailedTestExtension";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-58);
      floatArray0[1] = (-1.0F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-58.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-58.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-58);
      longArray0[1] = (long) (-58);
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) (-58);
      longArray0[8] = (long) 1;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(18, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-58L), (-58L), 0L, 1L, 2L, 1L, 1L, (-58L), 1L}, longArray0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-58);
      integerArray0[1] = (Integer) 1;
      integerArray0[2] = (Integer) (-58);
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-2054114792), 584);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)67;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)42;
      shortArray0[1] = (short) (byte)67;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)42, (short)67}, shortArray0);
      assertArrayEquals(new short[] {(short)42, (short)67, (short)42, (short)67}, shortArray1);
      
      ArrayUtils.reverse((Object[]) integerArray0);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = 'o';
      charArray0[2] = '_';
      charArray0[3] = 'X';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o', (int) (byte)2);
      assertEquals(6, charArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'_', 'o', '_', 'X', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray2);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)42;
      intArray0[1] = 68;
      intArray0[2] = (int) (short)2460;
      intArray0[3] = 84;
      intArray0[4] = (int) (byte)42;
      intArray0[5] = (int) (short)964;
      ArrayUtils.shift(intArray0, (int) (byte)42);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {42, 68, 2460, 84, 42, 964}, intArray0);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 411;
      intArray1[1] = (-2855);
      intArray1[2] = (int) (short)2460;
      intArray1[3] = (-2855);
      intArray1[4] = (int) (byte)42;
      intArray1[5] = (int) (byte)42;
      intArray1[6] = (int) (short)964;
      intArray1[7] = (int) (short)964;
      intArray1[8] = (int) (short)964;
      ArrayUtils.shift(intArray1, (-2855));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(9, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2460, (-2855), 42, 42, 964, 964, 964, 411, (-2855)}, intArray1);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)114);
      assertEquals((-1), int0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean1 = Boolean.valueOf("n");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean("{1P");
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf("n");
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.valueOf("n");
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.valueOf(true);
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean4));
      assertNotNull(boolean6);
      assertTrue(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = Boolean.valueOf((boolean) boolean2);
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean3));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean6));
      assertTrue(boolean2.equals((Object)boolean4));
      assertTrue(boolean2.equals((Object)boolean5));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean3));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = Boolean.TRUE;
      assertFalse(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean5));
      assertFalse(boolean8.equals((Object)boolean4));
      assertNotNull(boolean8);
      assertTrue(boolean8);
      
      booleanArray0[7] = boolean8;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      float[] floatArray0 = new float[2];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray1);
      assertNotNull(stringArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(2, stringArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = Integer.valueOf(1211);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1211, (int)integer1);
      
      MutableInt mutableInt0 = new MutableInt();
      assertNotNull(mutableInt0);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      
      Integer integer2 = mutableInt0.toInteger();
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer(2);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(2, (int)integer3);
      
      Integer[] integerArray1 = ArrayUtils.insert(2, integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      Integer integer0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'T';
      charArray0[2] = 'B';
      charArray0[3] = 'z';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '`', 0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'n', 'T', 'B', 'z'}, charArray0);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'B');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'n', 'T', 'B', 'z'}, charArray0);
      assertArrayEquals(new char[] {'B', 'n', 'T', 'B', 'z'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short)457;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)457, (short)0, (short)0, (short) (-1), (short)0, (short) (-1)}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.insert((int) (short)0, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)0, (int) (short) (-1));
      assertEquals(8, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)457, (short)0, (short)0, (short) (-1), (short)0, (short) (-1)}, shortArray0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0);
      assertNotNull(stringArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
      
      Byte[] byteArray2 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)12, (int) (byte)12);
      assertEquals(13, byteArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)12;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {12, (-1), (-1)}, intArray0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 12, (-1), (int) (byte)0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(13, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {12, (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {12, (-1), (-1), 12, (-1), (-1)}, intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray1, (int) (byte)12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-17), 5110);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (byte) (-17);
      intArray0[2] = (-2146951540);
      intArray0[3] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {2, (-17), (-2146951540), (-1)}, intArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) (-2146951540);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, (-2.14695155E9F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (int) (short)2, 1136, (-17));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-17);
      byteArray1[1] = (byte) (-17);
      byteArray1[2] = (byte) (-17);
      byteArray1[3] = (byte) (-17);
      byteArray1[4] = (byte) (-17);
      byteArray1[5] = (byte) (-17);
      byteArray1[6] = (byte) (-17);
      byteArray1[7] = (byte) (-17);
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-17), (byte) (-17), (byte) (-17), (byte) (-17), (byte) (-17), (byte) (-17)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-17), (byte) (-17), (byte) (-17), (byte) (-17), (byte) (-17), (byte) (-17)}, byteArray2);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, (-17), (-2146951540), (-1)}, intArray0);
      assertArrayEquals(new int[] {2, (-17), (-2146951540), (-1), 2, (-17), (-2146951540), (-1)}, intArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray1);
      assertNotNull(stringArray0);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertEquals(5, stringArray0.length);
      assertArrayEquals(new float[] {2.0F, (-2.14695155E9F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '/';
      longArray0[1] = (long) 'E';
      Integer integer0 = new Integer((-1068));
      assertNotNull(integer0);
      assertEquals((-1068), (int)integer0);
      
      Integer integer1 = new Integer(1058);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1058, (int)integer1);
      
      Integer integer2 = new Integer((-1068));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1068), (int)integer2);
      
      Integer integer3 = new Integer((-1068));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-1068), (int)integer3);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer4 = Integer.valueOf((-466));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals((-466), (int)integer4);
      
      integerArray0[0] = integer4;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer3);
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, 772, (-1297), (-1));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1297);
      intArray0[1] = (-1297);
      intArray0[2] = (-466);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1297), (-1297), (-466)}, intArray0);
      assertArrayEquals(new int[] {(-1297), (-1297), (-466), (-1297), (-1297), (-466)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      short[] shortArray0 = new short[2];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertSame(shortArray0, shortArray2);
      assertSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray2);
      
      ArrayUtils.swap(shortArray2, (-4437), 497, 4117);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertSame(shortArray0, shortArray2);
      assertSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) shortArray0, (Object) null);
      assertNotNull(bitSet0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte)0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (byte) (-1);
      floatArray0[6] = (float) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertEquals(7, floatArray0.length);
      assertEquals(6, int0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1590.71453));
      assertFalse(int1 == int0);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-1);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ArrayUtils.swap(floatArray1, Integer.MAX_VALUE, (int) (byte) (-1), (-925));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(6, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)714);
      assertNotNull(short0);
      assertEquals((short)714, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)7);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)7, (short)short1);
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = 9L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 9L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 54;
      intArray0[1] = 54;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[7] = 0;
      intArray0[6] = Integer.MAX_VALUE;
      intArray0[7] = 0;
      ArrayUtils.reverse(intArray0, 0, (-956));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {54, 54, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, 0, Integer.MAX_VALUE, 0}, intArray0);
      
      long[] longArray2 = ArrayUtils.addFirst(longArray1, (long) Integer.MAX_VALUE);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {0L, 9L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {2147483647L}, longArray2);
      
      ArrayUtils.swap(longArray1, 0, Integer.MAX_VALUE);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 9L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[3] = (long) 2;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 2L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {2L, 0L, 0L, 0L, 2L, 0L, 0L}, longArray1);
      
      ArrayUtils.swap(longArray0, 0, 681);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(6, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 2L, 0L, 0L}, longArray0);
      
      int[] intArray0 = new int[0];
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 549);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {549}, intArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 549;
      longArray0[1] = (long) 549;
      longArray0[2] = (long) 549;
      longArray0[3] = (long) 549;
      ArrayUtils.swap(longArray0, 549, 549, 549);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {549L, 549L, 549L, 549L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)2460;
      doubleArray0[2] = (double) 84;
      doubleArray0[3] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, 61, 0, (-724));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2460.0, 0.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)0;
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((short)2460);
      assertNotNull(integer0);
      assertEquals(2460, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (-724);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2086.243F;
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-70));
      assertNull(byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-438.88), (-3291), 0.0);
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {2460.0, 0.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-724);
      longArray0[1] = (long) 61;
      longArray0[2] = (long) (byte) (-70);
      ArrayUtils.swap(longArray0, 2064888123, 426);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-724L), 61L, (-70L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[1] = ';';
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-564L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-564L), (long)long2);
      
      Long long3 = new Long((-96L));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals((-96L), (long)long3);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertEquals(8, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      long[] longArray0 = new long[5];
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, false, true}, booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 84;
      intArray0[3] = (-2146984596);
      intArray0[4] = 84;
      intArray0[5] = (int) (short)2460;
      intArray0[6] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 1, 84, (-2146984596), 84, 2460, 0}, intArray1);
      assertArrayEquals(new int[] {0, 1, 84, (-2146984596), 84, 2460, 0}, intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = '}';
      charArray0[2] = '|';
      charArray0[3] = 'w';
      charArray0[4] = 'R';
      charArray0[5] = '5';
      charArray0[6] = '%';
      charArray0[7] = '$';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {':', '}', '|', 'w', 'R', '5', '%', '$'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[13];
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(13, byteArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)2460}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (-260), (int) (byte)0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      
      ArrayUtils.shift(shortArray2, 9, (-1840700268), 2146053898);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 9, 2146053898);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(13, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1948;
      Object[] objectArray0 = new Object[1];
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 1948);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2658;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)2883;
      shortArray0[6] = (short) (-334);
      shortArray0[7] = (short)2883;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)2883, (int) (short)2883);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)2658, (short) (-1), (short)2, (short)2, (short)2883, (short) (-334), (short)2883}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-114), (int) (byte) (-114));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      char[] charArray0 = new char[0];
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2995, 16);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-646);
      intArray0[4] = (-1);
      intArray0[7] = 1211;
      ArrayUtils.shuffle(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-646), (-1), 0, 0, 1211, 0}, intArray0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 12, 102);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 11L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 11L);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 11L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertEquals(8, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'r';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 'r';
      longArray0[3] = 1758L;
      longArray0[4] = (-2630L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-1958L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {114L, (-1L), 114L, 1758L, (-2630L)}, longArray0);
      assertArrayEquals(new long[] {114L, (-1L), 114L, 1758L, (-2630L)}, longArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1758L;
      floatArray0[1] = (float) 1758L;
      floatArray0[2] = (float) 'r';
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 733.4F);
      assertTrue(int1 == int0);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {1758.0F, 1758.0F, 114.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) 1758L);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(5, longArray2.length);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {114L, (-1L), 114L, 1758L, (-2630L)}, longArray0);
      assertArrayEquals(new long[] {114L, (-1L), 114L, 1758L, (-2630L)}, longArray1);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 3173.9062F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1758.0F, 1758.0F, 114.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1758.0F, 1758.0F, 114.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      
      boolean boolean2 = ArrayUtils.contains(longArray0, 1758L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(5, longArray0.length);
      assertTrue(boolean2);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {114L, (-1L), 114L, 1758L, (-2630L)}, longArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(objectArray0);
      assertEquals(5, longArray2.length);
      assertEquals(5, longArray0.length);
      assertEquals(5, objectArray0.length);
      assertEquals(5, longArray1.length);
      assertSame(longArray2, objectArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {114L, (-1L), 114L, 1758L, (-2630L)}, longArray0);
      assertArrayEquals(new long[] {114L, (-1L), 114L, 1758L, (-2630L)}, longArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-334);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-2297);
      shortArray0[4] = (short) (-1887);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)2883;
      shortArray0[7] = (short)2658;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)2, (int) (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-334), (short)2, (short) (-2297), (short) (-1887), (short) (-1), (short)2883, (short)2658}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.insert(14, (Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (-1384));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1431655765);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom((-2745L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Integer integer0 = new Integer(1823);
      assertNotNull(integer0);
      assertEquals(1823, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.insert(33, (Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Long long0 = new Long((-96L));
      assertNotNull(long0);
      assertEquals((-96L), (long)long0);
      
      Integer integer0 = new Integer((-878));
      assertNotNull(integer0);
      assertEquals((-878), (int)integer0);
      
      Integer integer1 = new Integer((-878));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-878), (int)integer1);
      
      Integer integer2 = Integer.getInteger(" h[Tx", 1540);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1540, (int)integer2);
      
      Integer integer3 = new Integer(1767);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(1767, (int)integer3);
      
      Integer integer4 = Integer.valueOf(2);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(2, (int)integer4);
      
      Integer integer5 = new Integer((-1640));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals((-1640), (int)integer5);
      
      Integer integer6 = new Integer(2);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      assertEquals(2, (int)integer6);
      
      Integer[] integerArray1 = new Integer[0];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean boolean1 = ArrayUtils.isArrayIndexValid(integerArray1, (-815));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, integerArray1.length);
      assertFalse(boolean1);
      assertNotSame(integerArray1, integerArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-2397));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1540;
      floatArray0[1] = (float) (-1640);
      floatArray0[2] = (float) 1767;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) (-1640);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 27.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1540.0F, (-1640.0F), 1767.0F, 2.0F, (-1640.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1540.0F, (-1640.0F), 1767.0F, 2.0F, (-1640.0F)}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray1, (Object) integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer6));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray1.length);
      assertEquals((-1), int0);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      int[] intArray0 = new int[4];
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)100;
      ArrayUtils.reverse(byteArray0);
      assertEquals(11, byteArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) (byte)100;
      floatArray0[2] = (float) (byte)100;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) 22;
      floatArray0[6] = (float) (byte)100;
      floatArray0[7] = (float) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 100.0F, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(8, floatArray0.length);
      assertEquals("{1, 2, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertArrayEquals(new float[] {0.0F, 100.0F, 100.0F, 1.0F, 22.0F, 0.0F, 100.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, (-305));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray2);
      
      Object[] objectArray0 = new Object[0];
      Integer integer0 = new Integer((-305));
      assertNotNull(integer0);
      assertEquals((-305), (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, (int) (byte)100);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray3 = ArrayUtils.removeAll(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray3);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray3.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray3);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      ArrayUtils.swap(floatArray0, 126, 126, 0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-170);
      doubleArray0[1] = 84.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 126;
      doubleArray0[4] = (double) (short) (-170);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-170.0), 84.0, 0.0, 126.0, (-170.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-170.0), 84.0, 0.0, 126.0, (-170.0), (-170.0), 84.0, 0.0, 126.0, (-170.0)}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-170.0), 84.0, 0.0, 126.0, (-170.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-170.0), 84.0, 0.0, 126.0, (-170.0), (-170.0), 84.0, 0.0, 126.0, (-170.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 126, 33);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-170.0), 84.0, 0.0, 126.0, (-170.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-170.0), 84.0, 0.0, 126.0, (-170.0), (-170.0), 84.0, 0.0, 126.0, (-170.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)126, 594);
      assertFalse(int1 == int0);
      assertEquals(2, shortArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)1, (short)0}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((long[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (int) (short)126, (long) (short) (-170));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 126, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-611.09F));
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-37);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-37)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Integer integer0 = new Integer(101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      Integer integer1 = new Integer(101);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(101, (int)integer1);
      
      Integer integer2 = new Integer((-945));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-945), (int)integer2);
      
      Integer integer3 = Integer.getInteger((String) null);
      assertNull(integer3);
      
      ArrayUtils.reverse((byte[]) null, 101, 2144525681);
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[1] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1212);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true}, booleanArray0));
      
      short[] shortArray1 = ArrayUtils.insert(2144525681, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2144525681;
      doubleArray0[1] = (double) 2144525681;
      doubleArray0[2] = (double) (-945);
      doubleArray0[3] = (double) 1212;
      doubleArray0[4] = (double) 2144525681;
      doubleArray0[5] = (double) 5;
      boolean[] booleanArray1 = ArrayUtils.insert(5, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(12, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true}, booleanArray0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2144525681;
      floatArray0[1] = (float) 5;
      floatArray0[2] = (float) 5;
      floatArray0[3] = (float) (-945);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 5);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.1445257E9F, 5.0F, 5.0F, (-945.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.1445257E9F, (-945.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-96.0F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-96.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = (-415);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-415);
      doubleArray0[1] = (double) (-415);
      int int1 = 1569;
      ArrayUtils.shift(doubleArray0, 1569, (-2266), (-2823));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-415.0), (-415.0)}, doubleArray0, 0.01);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      
      float[] floatArray0 = new float[0];
      int int2 = ArrayUtils.lastIndexOf(floatArray0, (float) (-2266));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int int3 = ArrayUtils.indexOf(doubleArray0, 878.814842933);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int3);
      assertArrayEquals(new double[] {(-415.0), (-415.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = (long) (-415);
      longArray0[2] = (long) (-2823);
      longArray0[0] = (long) (-2266);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-2266L), (-415L), (-2823L), 0L}, longArray0);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-2266L);
      floatArray1[1] = (float) (-415L);
      floatArray1[2] = (float) (-1);
      floatArray1[3] = (float) (-1L);
      boolean boolean0 = ArrayUtils.isSorted(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertTrue(boolean0);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-2266.0F), (-415.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray1, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      long[] longArray0 = new long[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-11);
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-65));
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) (byte) (-36));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, (long) (byte) (-36));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {}, longArray0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-316), (float) (-316));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -316, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte byte0 = new Byte((byte) (-81));
      assertNotNull(byte0);
      assertEquals((byte) (-81), (byte)byte0);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      ArrayUtils.reverse((long[]) null, (-1384), (-2243));
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '*');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'*'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = (Byte) (byte) (-1);
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2192;
      intArray0[1] = (int) (byte) (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)1, (-2243));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {2192, (-1)}, intArray0);
      
      ArrayUtils.reverse((long[]) null, (int) (byte)0, 2143997473);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) 2143997473;
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (byte) (-1);
      floatArray0[6] = (float) (-2243);
      floatArray0[7] = (float) (byte)0;
      floatArray0[8] = (float) (-2243);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2.14399744E9F, (-1.0F), (-1.0F), (-2243.0F), 0.0F, (-2243.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-170);
      Integer integer0 = new Integer((short) (-1666));
      assertNotNull(integer0);
      assertEquals((-1666), (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (-3278.0);
      doubleArray0[2] = (double) 1033;
      doubleArray0[3] = (double) (short) (-170);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0), 1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0), 1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 98, (-1128));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0), 1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-170), 2146336255);
      assertEquals(6, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1, (short) (-1666), (short) (-170), (short)0, (short)0, (short)0}, shortArray0);
      
      long[] longArray0 = new long[1];
      int int1 = ArrayUtils.indexOf(longArray0, (long) 1530, (-6));
      assertTrue(int1 == int0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-58);
      intArray0[1] = (-58);
      intArray0[2] = (-58);
      intArray0[3] = (-58);
      intArray0[4] = (-58);
      intArray0[5] = (-58);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2, (-58));
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {(-58), (-58), (-58), (-58), (-58), (-58)}, intArray0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-58);
      Long long0 = new Long((-58));
      assertNotNull(long0);
      assertEquals((-58L), (long)long0);
      
      Long[] longArray0 = new Long[6];
      Long long1 = new Long((-122L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-122L), (long)long1);
      
      longArray0[0] = long1;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      longArray0[5] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-122L), (-58L), (-58L), (-58L), (-58L), (-58L)}, longArray1);
      
      ArrayUtils.shift((Object[]) integerArray0, (-58));
      assertEquals(2, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-58), (-58), (-58), (-58), (-58), (-58)}, intArray0);
      
      short[] shortArray0 = ArrayUtils.insert((-2146875984), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.shift((short[]) null, 2389);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[1] = ';';
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-564L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-564L), (long)long2);
      
      Long long3 = new Long((-96L));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-96L), (long)long3);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-878));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-878), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(7, integerArray0.length);
      assertEquals((-878), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("&G8j1$|U3f'+;%v", 1540);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1540, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(7, integerArray0.length);
      assertEquals((-878), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.valueOf((int) integerArray0[0]);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(7, integerArray0.length);
      assertEquals((-878), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-4377));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals((-4377), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-2397));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      assertEquals((-2397), (int)integer6);
      
      integerArray0[6] = integer6;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (int) integerArray0[5]);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-4377));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)87);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.shift(objectArray0, (-249), (int) (byte)57, (-249));
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (-1384));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1431655765);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1431655765;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (-1384);
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (-2745L);
      floatArray0[7] = (float) (-1384);
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, (float) (short)0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(8, floatArray0.length);
      assertEquals(4, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{1, 2, 3, 5}", bitSet1.toString());
      assertEquals(6, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new float[] {1.43165581E9F, 0.0F, 0.0F, 0.0F, (-1384.0F), 0.0F, (-2745.0F), (-1384.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-1));
      assertNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      ArrayUtils.swap((Object[]) shortArray0, (int) (short) (-2366), 6, 835);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-99.34498F));
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-99.34498F);
      doubleArray0[2] = (double) 'E';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-3344.061885844), 1);
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {0.0, (-99.34497833251953), 69.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)2460;
      doubleArray0[1] = (double) (byte)42;
      doubleArray0[2] = (double) 84;
      doubleArray0[3] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, 61, 0, (-724));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2460.0, 42.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)0;
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((short)2460);
      assertNotNull(integer0);
      assertEquals(2460, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (-724);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2086.243F;
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-70));
      assertNull(byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-438.88), (-3291), 42.0);
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {2460.0, 42.0, 84.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, 3287, (byte)14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3287, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      Double double0 = new Double((-1854.79557168485));
      assertNotNull(double0);
      assertEquals((-1854.79557168485), (double)double0, 0.01);
      
      Double double1 = new Double((-3786.955136));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-3786.955136), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 0.0F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 1L, (-1759));
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-1759));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1759), (int)integer0);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-1404L));
      assertNull(longArray0);
      
      Long long0 = new Long((-1404L));
      assertNotNull(long0);
      assertEquals((-1404L), (long)long0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = Double.valueOf(314.77);
      assertNotNull(double0);
      assertEquals(314.77, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1758L;
      longArray0[1] = 1758L;
      longArray0[2] = 1758L;
      longArray0[3] = 1758L;
      longArray0[4] = 1758L;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1940L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 1758L, 1758L, 1758L}, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 1758L, 1758L, 1758L}, longArray1);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf((double[]) null, 5780.6419189);
      assertEquals((-1), int0);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {1758L, 1758L, 1758L, 1758L, 1758L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertTrue(boolean0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 1758L, 1758L, 1758L}, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 1758L, 1758L, 1758L}, longArray1);
      
      long[] longArray3 = ArrayUtils.subarray(longArray0, 728, 8);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertNotNull(longArray3);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray3.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 1758L, 1758L, 1758L}, longArray0);
      assertArrayEquals(new long[] {}, longArray3);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), 36);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true}, booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray1, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertEquals(6, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true}, booleanArray0));
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(495.984816);
      assertNotNull(double0);
      assertEquals(495.984816, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-709.6862651));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-709.6862651), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-1717.0));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-1717.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-4266));
      assertNotNull(bitSet0);
      assertEquals(0, booleanArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      byte[] byteArray0 = bitSet0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, byteArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1758L;
      longArray0[1] = 1758L;
      longArray0[2] = 1758L;
      longArray0[3] = 1758L;
      longArray0[4] = 1758L;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1940L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 1758L, 1758L, 1758L}, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 1758L, 1758L, 1758L}, longArray1);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1531.51F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 5780.6419189);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {1758L, 1758L, 1758L, 1758L, 1758L}, longArray0);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      boolean boolean0 = ArrayUtils.isSameType(integer1, integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertTrue(boolean0);
      
      ArrayUtils.reverse((double[]) null, 728, (-1));
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertTrue(boolean1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 1758L, 1758L, 1758L}, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 1758L, 1758L, 1758L}, longArray1);
      
      long[] longArray3 = ArrayUtils.subarray(longArray0, 728, 8);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertEquals(0, longArray3.length);
      assertEquals(5, longArray0.length);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray3);
      assertArrayEquals(new long[] {1758L, 1758L, 1758L, 1758L, 1758L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), 36);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray1, false);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray2));
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(495.984816);
      assertNotNull(double0);
      assertEquals(495.984816, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-709.6862651));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-709.6862651), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-1717.0));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-1717.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-4085));
      assertNotNull(integer0);
      assertEquals((-4085), (int)integer0);
      
      Integer integer1 = new Integer((-4085));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-4085), (int)integer1);
      
      Integer integer2 = new Integer(1212);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1212, (int)integer2);
      
      Integer integer3 = new Integer((byte)0);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Integer integer4 = new Integer((-945));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals((-945), (int)integer4);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte)0, (-1), (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = false;
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray1, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(7, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray2));
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-2146243045), (-2637), (-824));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-824);
      intArray0[1] = (-2637);
      intArray0[2] = (-2637);
      intArray0[3] = 16;
      intArray0[4] = (-1652);
      int int0 = ArrayUtils.indexOf(intArray0, (-2637));
      assertEquals(5, intArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {(-824), (-2637), (-2637), 16, (-1652)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      short[] shortArray0 = new short[18];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(18, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertEquals(18, shortArray0.length);
      assertEquals(18, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertSame(shortArray0, shortArray2);
      assertSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 635;
      intArray0[3] = (-646);
      intArray0[4] = (-1);
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (-646));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (-1));
      assertFalse(int1 == int0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-646);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-646);
      longArray0[4] = (long) 635;
      longArray0[5] = 2855L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-646L), 0L, (-646L), 635L, 2855L}, longArray0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (-1L));
      assertNull(floatArray0);
      
      ArrayUtils.swap((float[]) null, (-1), (-1), 635);
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'T';
      charArray0[2] = '`';
      charArray0[3] = 'd';
      charArray0[4] = '-';
      charArray0[5] = ']';
      charArray0[6] = 'T';
      charArray0[7] = 'w';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'T');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'v', 'T', '`', 'd', '-', ']', 'T', 'w'}, charArray0);
      assertArrayEquals(new char[] {'v', '`', 'd', '-', ']', 'w'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-270));
      assertNotNull(integer0);
      assertEquals((-270), (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-270)}, intArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-270);
      longArray0[1] = (long) (-270);
      longArray0[2] = (long) (int)integerArray0[0];
      longArray0[3] = (long) (-270);
      longArray0[4] = (long) (-270);
      longArray0[5] = 0L;
      longArray0[6] = (long) (int)integerArray0[0];
      longArray0[7] = (long) (int)integerArray0[0];
      longArray0[8] = (long) (-270);
      long[] longArray1 = ArrayUtils.add(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-270L), (-270L), (-270L), (-270L), (-270L), 0L, (-270L), (-270L), (-270L)}, longArray0);
      assertArrayEquals(new long[] {(-270L), (-270L), (-270L), (-270L), (-270L), 0L, (-270L), (-270L), (-270L), 1L}, longArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) integerArray0);
      assertNotNull(objectArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, objectArray0.length);
      assertSame(integerArray0, objectArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)11;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-29));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)11}, byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)11}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (byte) (-74);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-74), (int) (byte) (-74), 0.0);
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {0.0, (-74.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4553.419159977641);
      doubleArray0[1] = 457.755655;
      doubleArray0[2] = (-2708.3891766408);
      doubleArray0[3] = 1161.0;
      doubleArray0[4] = (-3278.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-4553.419159977641), (-2646), 2369.060120608797);
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertEquals("{0, 2, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertArrayEquals(new double[] {(-4553.419159977641), 457.755655, (-2708.3891766408), 1161.0, (-3278.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Integer[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-125);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-125));
      assertEquals(10, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      char[] charArray0 = new char[2];
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 'E';
      longArray0[2] = (long) 'E';
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1758L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 69L, 69L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 69L, 69L, 0L}, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1758L;
      floatArray0[1] = (float) 69L;
      floatArray0[2] = (float) (-647L);
      floatArray0[3] = (float) (-647L);
      floatArray0[4] = (float) '\u0000';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 1758L);
      assertEquals(5, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {1758.0F, 69.0F, (-647.0F), (-647.0F), 0.0F}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (-1.0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 69L, 69L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 69L, 69L, 0L}, longArray1);
      
      Integer integer0 = new Integer(728);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(728, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(boolean0);
      
      ArrayUtils.reverse((double[]) null, 728, (-1));
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(4, longArray0.length);
      assertTrue(boolean1);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 69L, 69L, 0L}, longArray0);
      
      long[] longArray3 = ArrayUtils.subarray(longArray0, 3073, 2146340530);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray3.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertArrayEquals(new long[] {0L, 69L, 69L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray3);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 728, Integer.MAX_VALUE);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray1, true);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1948;
      intArray0[1] = (-707);
      int int0 = ArrayUtils.indexOf(intArray0, (-707), 2);
      assertEquals(2, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {1948, (-707)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-170);
      byte byte0 = (byte)11;
      Byte byte1 = new Byte((byte)11);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)11, (byte)byte1);
      
      Byte byte2 = new Byte((byte)11);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)11, (byte)byte2);
      
      Byte[] byteArray0 = new Byte[9];
      byteArray0[0] = byte2;
      byteArray0[1] = byte2;
      byteArray0[2] = byte2;
      byteArray0[3] = byte1;
      byteArray0[4] = byte2;
      byteArray0[5] = byte1;
      byteArray0[6] = byte2;
      byteArray0[7] = byte1;
      byteArray0[8] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)11, (byte)11, (byte)11, (byte)11, (byte)11, (byte)11, (byte)11}, byteArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) byte0;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) byte0);
      assertEquals(2, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {0.0F, 11.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) (short)1;
      longArray0[3] = (long) 1;
      longArray0[4] = 17L;
      longArray0[5] = (long) byte0;
      longArray0[6] = (long) (short) (-1666);
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-179L));
      assertFalse(int1 == int0);
      assertEquals(7, longArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {1L, 11L, 1L, 1L, 17L, 11L, (-1666L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(7, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {1L, 11L, 1L, 1L, 17L, 11L, (-1666L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)51;
      shortArray0[1] = (short) (-2372);
      shortArray0[2] = (short) (-711);
      shortArray0[3] = (short)21845;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short) (-711), (short)21845}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short) (-711), (short)21845}, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short) (-711), (short)21845, (short)51, (short) (-2372), (short) (-711), (short)21845}, shortArray2);
      
      ArrayUtils.reverse((Object[]) shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short) (-711), (short)21845}, shortArray0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (int) (short)51);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray1.length);
      assertFalse(boolean0);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-711);
      doubleArray0[1] = (double) (short)51;
      doubleArray0[2] = 1195.0;
      doubleArray0[3] = (double) (short) (-2372);
      doubleArray0[4] = (double) (short) (-711);
      doubleArray0[5] = (double) (short)21845;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) (-711), (int) (short) (-2372), (-1872.0));
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-711.0), 51.0, 1195.0, (-2372.0), (-711.0), 21845.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = '%';
      charArray0[2] = '?';
      charArray0[3] = '.';
      charArray0[4] = 'm';
      charArray0[5] = 'r';
      charArray0[6] = '%';
      charArray0[7] = 'w';
      charArray0[8] = 'u';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'N', '%', '?', '.', 'm', 'r', '%', 'w', 'u'}, charArray1);
      assertArrayEquals(new char[] {'N', '%', '?', '.', 'm', 'r', '%', 'w', 'u'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 't';
      charArray0[2] = '~';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'b', (-1216));
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new char[] {'x', 't', '~'}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-11);
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)12, (int) (byte)12);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(4, byteArray0.length);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte)41, (byte)2, (byte)12, (byte) (-11)}, byteArray0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((byte)12);
      assertNotNull(integer0);
      assertEquals(12, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)94);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)41, (byte)2, (byte)12, (byte) (-11)}, byteArray0);
      
      Integer integer1 = new Integer(91);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(91, (int)integer1);
      
      BitSet bitSet2 = ArrayUtils.indexesOf((Object[]) integerArray1, (Object) integer1);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(bitSet2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(0, bitSet2.length());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.cardinality());
      assertTrue(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Byte[] byteArray1 = new Byte[5];
      byteArray1[0] = (Byte) (byte)41;
      Byte byte0 = new Byte((byte)12);
      assertNotNull(byte0);
      assertEquals((byte)12, (byte)byte0);
      
      byteArray1[1] = byte0;
      byteArray1[2] = (Byte) (byte)2;
      byteArray1[3] = (Byte) (byte)41;
      byteArray1[4] = (Byte) (byte) (-11);
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)12, (byte)2, (byte)41, (byte) (-11)}, byteArray2);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'G', 1073741824);
      assertEquals(3, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'x', 't', '~'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-2351L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-2351L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-2351L), 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-2351L);
      floatArray0[2] = 2007.2179F;
      floatArray0[3] = (float) (-2351L);
      floatArray0[4] = (float) 0L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 602.0F);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, (-2351.0F), 2007.2179F, (-2351.0F), 0.0F}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) 0.0F);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-2351L), 0L, 0L, 0L, 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.swap(floatArray0, 2407, 33);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-2351.0F), 2007.2179F, (-2351.0F), 0.0F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(33);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(33, (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2351L), (-1), (double) (-2351L));
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, 1602);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((short)0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer((-1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer3 = new Integer((-1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1), (int)integer3);
      
      Integer integer4 = new Integer(1205);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(1205, (int)integer4);
      
      Integer integer5 = new Integer(1212);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals(1212, (int)integer5);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      Integer integer6 = new Integer((short)0);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      assertEquals(0, (int)integer6);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = ';';
      charArray0[3] = ';';
      charArray0[4] = ';';
      charArray0[5] = ';';
      charArray0[6] = ';';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ';');
      assertNotNull(bitSet0);
      assertEquals(7, charArray0.length);
      assertEquals(7, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {';', ';', ';', ';', ';', ';', ';'}, charArray0);
      
      Integer integer7 = new Integer(531);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertNotNull(integer7);
      assertEquals(531, (int)integer7);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer7, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      ArrayUtils.shift((long[]) null, 2036);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-59), (-6043));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) (-2844);
      longArray0[2] = (long) (-6043);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) (byte) (-53);
      floatArray0[2] = (float) (-2844);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2.14748365E9F, (-53.0F), (-2844.0F)}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-2844L);
      floatArray1[1] = (float) (byte)0;
      floatArray1[2] = (float) (byte) (-53);
      floatArray1[3] = 1871.62F;
      floatArray1[4] = 1.0F;
      floatArray1[5] = (float) (byte)48;
      floatArray1[6] = 1.0F;
      floatArray1[7] = (float) (-6043L);
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, (-53.0F));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(9, floatArray2.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-53.0F), (-2844.0F), 0.0F, (-53.0F), 1871.62F, 1.0F, 48.0F, 1.0F, (-6043.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-2844.0F), 0.0F, (-53.0F), 1871.62F, 1.0F, 48.0F, 1.0F, (-6043.0F)}, floatArray1, 0.01F);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)0;
      boolean boolean2 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean2);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)112;
      byteArray2[1] = (byte)48;
      byteArray2[2] = (byte) (-53);
      byteArray2[3] = (byte)48;
      byteArray2[4] = (byte)0;
      byte[] byteArray3 = ArrayUtils.add(byteArray2, (int) (byte)0, (byte)112);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertEquals(6, byteArray3.length);
      assertEquals(5, byteArray2.length);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)48, (byte) (-53), (byte)48, (byte)0}, byteArray3);
      assertArrayEquals(new byte[] {(byte)112, (byte)48, (byte) (-53), (byte)48, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      short[] shortArray0 = new short[18];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-2549));
      assertEquals(18, shortArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short) (-2549), (short) (-2549));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2549, Length: 18
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      char[] charArray0 = new char[1];
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 114);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Long long0 = new Long(114);
      assertNotNull(long0);
      assertEquals(114L, (long)long0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'x';
      longArray0[1] = (long) 'x';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 120L, 114);
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {120L, 120L}, longArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[5] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-1);
      char[] charArray0 = new char[24];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'j';
      charArray0[6] = 'j';
      char[] charArray1 = ArrayUtils.add(charArray0, '\'');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(24, charArray0.length);
      assertEquals(25, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (int) (short) (-1));
      assertNull(intArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'j';
      objectArray0[3] = (Object) 'j';
      objectArray0[4] = (Object) (short)1;
      objectArray0[5] = (Object) (short) (-1);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(24, charArray0.length);
      assertEquals(25, charArray1.length);
      assertFalse(boolean1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift(booleanArray1, (-610), 1378, (int) (short)1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      ArrayUtils.shift((Object[]) booleanArray0, (-910), (-2382), (-910));
      assertEquals(1, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[3];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      ArrayUtils.shift(booleanArray1, (-910), 418, 525);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      ArrayUtils.shift(booleanArray0, (-1036), 155, 1235);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1215);
      shortArray0[3] = (short)517;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short) (-1215), (short)517}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)0, (short) (-1215), (short)517}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short)457;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)457, (short)0, (short)0, (short) (-1), (short)0, (short) (-1)}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      boolean boolean1 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)0, (int) (short) (-1));
      assertEquals(8, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)457, (short)0, (short)0, (short) (-1), (short)0, (short) (-1)}, shortArray0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0);
      assertNotNull(stringArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (-1);
      intArray0[4] = (int) (byte) (-1);
      intArray0[5] = (-1);
      intArray0[6] = 4181;
      intArray0[7] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4181, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 635;
      intArray0[3] = (-646);
      intArray0[4] = (-1);
      intArray0[5] = 0;
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1958L));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, 2146340530, (-798));
      assertTrue(int1 == int0);
      assertEquals(8, intArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {0, 0, 635, (-646), (-1), 0, 0, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray1 = ArrayUtils.add(intArray0, 0, (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 635, (-646), (-1), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1), 0, 0, 635, (-646), (-1), 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-116), (int) (short) (-116));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((long[]) null, (long) (short) (-116), 2080);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.lastIndexOf((long[]) null, (long) (short) (-116), (int) (short) (-116));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1.0, (-262));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = 'b';
      charArray0[2] = 'w';
      charArray0[3] = 'Y';
      charArray0[4] = '4';
      charArray0[5] = 'g';
      charArray0[6] = 'B';
      charArray0[7] = 'h';
      char[] charArray1 = ArrayUtils.add(charArray0, 'I');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'k', 'b', 'w', 'Y', '4', 'g', 'B', 'h'}, charArray0);
      assertArrayEquals(new char[] {'k', 'b', 'w', 'Y', '4', 'g', 'B', 'h', 'I'}, charArray1);
      
      char[] charArray2 = ArrayUtils.clone(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'k', 'b', 'w', 'Y', '4', 'g', 'B', 'h'}, charArray0);
      assertArrayEquals(new char[] {'k', 'b', 'w', 'Y', '4', 'g', 'B', 'h', 'I'}, charArray1);
      assertArrayEquals(new char[] {'k', 'b', 'w', 'Y', '4', 'g', 'B', 'h', 'I'}, charArray2);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1352);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'h';
      floatArray0[1] = (float) 'g';
      floatArray0[2] = (float) 'g';
      floatArray0[3] = (float) 'w';
      floatArray0[4] = (float) 'g';
      floatArray0[5] = (float) 'k';
      floatArray0[6] = (float) 'h';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 107.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {107.0F, 104.0F, 103.0F, 103.0F, 119.0F, 103.0F, 107.0F, 104.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {104.0F, 103.0F, 103.0F, 119.0F, 103.0F, 107.0F, 104.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Integer[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(79);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(79, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2144022198);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(2144022198, (int)integer3);
      
      integerArray0[3] = integer3;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      int[] intArray2 = ArrayUtils.removeAllOccurrences(intArray1, 453);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      int[] intArray0 = new int[15];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(15, intArray0.length);
      assertEquals(15, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotNull(integerArray0);
      assertEquals(15, intArray0.length);
      assertEquals(15, intArray1.length);
      assertEquals(15, integerArray0.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false, true}, booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 84;
      intArray0[3] = (-2146984596);
      intArray0[4] = 84;
      intArray0[5] = (int) (short)2460;
      intArray0[6] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 1, 84, (-2146984596), 84, 2460, 0}, intArray1);
      assertArrayEquals(new int[] {0, 1, 84, (-2146984596), 84, 2460, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1150);
      intArray0[1] = (-2146284750);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1150), (-2146284750)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (byte) (-70);
      shortArray0[3] = (short) (byte) (-70);
      shortArray0[4] = (short) (byte)116;
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-70), (short) (-70), (short)116}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-70), (short) (-70), (short)116, (short) (-1), (short) (-70), (short) (-70), (short)116}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      ArrayUtils.shift((Object[]) longArray0, (-1771));
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[5] = 0;
      intArray0[3] = 0;
      intArray0[3] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Random.setNextRandom(0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0;
      ArrayUtils.shift(objectArray0, 0, 1748, 0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ArrayUtils.shift((Object[]) integerArray0, (-520), 1802, 63);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long(0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Long long2 = new Long((-606L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-606L), (long)long2);
      
      Long long3 = new Long(1940L);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(1940L, (long)long3);
      
      Long long4 = new Long((-96L));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertNotNull(long4);
      assertEquals((-96L), (long)long4);
      
      Long[] longArray0 = new Long[7];
      longArray0[0] = long1;
      Long long5 = new Long((long) longArray0[0]);
      assertTrue(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long2));
      assertNotNull(long5);
      assertEquals(7, longArray0.length);
      assertEquals(0L, (long)long5);
      
      longArray0[1] = long5;
      longArray0[2] = long0;
      longArray0[3] = long4;
      longArray0[4] = long3;
      longArray0[5] = long2;
      longArray0[6] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-96L), 1940L, (-606L), 1940L}, longArray1);
      
      ArrayUtils.shift((Object[]) longArray0, (-280));
      assertEquals(7, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-280);
      intArray0[1] = (-280);
      intArray0[2] = (-280);
      intArray0[3] = (-280);
      intArray0[4] = 5;
      intArray0[5] = (-280);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-280), (-280), (-280), (-280), 5, (-280)}, intArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2690;
      shortArray0[1] = (short) (-7160);
      shortArray0[2] = (short)1036;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (-498);
      short[] shortArray1 = ArrayUtils.insert(5, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2690, (short) (-7160), (short)1036, (short)1, (short) (-498)}, shortArray0);
      assertArrayEquals(new short[] {(short)2690, (short) (-7160), (short)1036, (short)1, (short) (-498), (short)2690, (short) (-7160), (short)1036, (short)1, (short) (-498)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1718L;
      longArray0[1] = (-1L);
      longArray0[2] = (-4113L);
      longArray0[3] = (-285L);
      longArray0[4] = 1L;
      longArray0[5] = 0L;
      longArray0[6] = 1940L;
      ArrayUtils.shift(longArray0, 0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1718L, (-1L), (-4113L), (-285L), 1L, 0L, 1940L}, longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 1940L;
      floatArray0[2] = (float) (-1L);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 1L, 0);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 1940.0F, (-1.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = 'J';
      charArray0[2] = '+';
      charArray0[3] = 'q';
      int int1 = ArrayUtils.indexOf(charArray0, 'J', (-1));
      assertFalse(int1 == int0);
      assertEquals(4, charArray0.length);
      assertEquals(1, int1);
      assertArrayEquals(new char[] {'h', 'J', '+', 'q'}, charArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1718L, (-1L), (-4113L), (-285L), 1L, 0L, 1940L}, longArray0);
      assertArrayEquals(new long[] {1718L, (-1L), (-4113L), (-285L), 1L, 0L, 1940L}, longArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 1L;
      objectArray0[1] = (Object) 'J';
      objectArray0[2] = (Object) 1940L;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, stringArray0.length);
      
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(4, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'h', 'J', '+', 'q', 'h', 'J', '+', 'q'}, charArray1);
      assertArrayEquals(new char[] {'h', 'J', '+', 'q'}, charArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = (-663L);
      longArray0[1] = 0L;
      longArray0[2] = (-1730L);
      longArray0[3] = 9L;
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      ArrayUtils.reverse((Object[]) null);
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 498);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {498}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 498;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 3554;
      floatArray0[3] = (float) (-663L);
      floatArray0[4] = 22.70949F;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 3058;
      floatArray0[7] = (float) 3058;
      floatArray0[8] = (float) 9L;
      ArrayUtils.shift(floatArray0, 3058);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {3554.0F, (-663.0F), 22.70949F, 0.0F, 3058.0F, 3058.0F, 9.0F, 498.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shift(floatArray0, 44);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '/';
      longArray0[1] = (long) 'E';
      longArray0[2] = (long) 'E';
      longArray0[3] = (long) '/';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '/';
      doubleArray0[1] = (double) (-663L);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {47.0, (-663.0)}, doubleArray0, 0.01);
      
      Float float0 = new Float(901.6382F);
      assertNotNull(float0);
      assertEquals(901.6382F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[6];
      Float float1 = new Float((double) 69L);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(69.0F, (float)float1, 0.01F);
      
      floatArray0[0] = float1;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {69.0F, 901.6382F, 901.6382F, 901.6382F, 901.6382F, 901.6382F}, floatArray1, 0.01F);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray2.length);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {47.0, (-663.0), 47.0, (-663.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {47.0, (-663.0)}, doubleArray0, 0.01);
      
      ArrayUtils.reverse((Object[]) floatArray0, 0, 0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = Integer.valueOf(1211);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1211, (int)integer1);
      
      MutableInt mutableInt0 = new MutableInt();
      assertNotNull(mutableInt0);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 1211;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 1211;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {2L, 1211L, 2L, 1211L}, longArray0);
      
      MockRandom mockRandom0 = new MockRandom(1211L);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1211L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle((Object[]) integerArray0, (java.util.Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0, integerArray0.length);
      assertNotSame(mockRandom1, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 3554;
      longArray0[1] = 9L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 3554, 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {3554L, 9L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, 54);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((short[]) null, 2, 299);
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertFalse(int1 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short)99);
      assertNull(shortArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 3554L;
      objectArray0[1] = null;
      objectArray0[2] = null;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)67;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)42;
      shortArray0[1] = (short) (byte)67;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)42, (short)67}, shortArray0);
      assertArrayEquals(new short[] {(short)42, (short)67, (short)42, (short)67}, shortArray1);
      
      ArrayUtils.reverse((Object[]) integerArray0);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = 'o';
      charArray0[2] = '_';
      charArray0[3] = 'X';
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) 'o';
      floatArray2[1] = (float) 'X';
      floatArray2[2] = (float) (byte)67;
      byteArray0[3] = (byte)2;
      floatArray2[4] = (float) (byte) (-47);
      floatArray2[5] = 1316.0F;
      floatArray2[6] = 2.14748365E9F;
      ArrayUtils.reverse(floatArray2, 509, 509);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(7, floatArray2.length);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {111.0F, 88.0F, 67.0F, 0.0F, (-47.0F), 1316.0F, 2.14748365E9F}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-58);
      intArray0[4] = (-58);
      intArray0[5] = (-58);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2, 1);
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new int[] {1, 1, 1, (-58), (-58), (-58)}, intArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.junitpioneer.jupiter.RepeatFailedTestExtension";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-58);
      floatArray0[1] = (-1.0F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-58.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-58.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-58);
      longArray0[1] = (long) (-58);
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) (-58);
      longArray0[8] = (long) 1;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(18, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-58L), (-58L), 0L, 1L, 2L, 1L, 1L, (-58L), 1L}, longArray0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-58);
      integerArray0[1] = (Integer) 1;
      integerArray0[2] = (Integer) (-58);
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-2054114792), (-3529));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, (int) (byte)60, 84);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((byte)60);
      assertNotNull(integer0);
      assertEquals(60, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray0, (int) 0, (-1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray2.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 1038, 1038);
      int int0 = 61;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 61;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 84;
      doubleArray0[3] = (double) 61;
      ArrayUtils.shift(doubleArray0, (int) (short)0, (int) (short)0, 84);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {61.0, 0.0, 84.0, 61.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(61);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(61, (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, (Integer) int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray0, (-3941), 1038);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray2.length);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      long[] longArray0 = new long[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-36);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 925L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte) (-24));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 0.0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-24);
      floatArray0[1] = (float) 925L;
      floatArray0[2] = (float) (byte) (-24);
      floatArray0[3] = (float) (byte) (-36);
      floatArray0[4] = (float) (-1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-24);
      doubleArray0[1] = (double) (byte) (-24);
      doubleArray0[2] = 451.694;
      doubleArray0[3] = (-360.9576);
      doubleArray0[4] = (double) (-24.0F);
      doubleArray0[5] = (double) (-1.0F);
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) 925L, 642, (double) (-24.0F));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {(-24.0), (-24.0), 451.694, (-360.9576), (-24.0), (-1.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertTrue(boolean0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) (byte) (-24), (-1), 56);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.contains(charArray0, '(');
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 57;
      intArray0[1] = (-53);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {57, (-53)}, intArray0);
      assertArrayEquals(new int[] {57, (-53)}, intArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(38);
      assertEquals(0, int0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      ArrayUtils.shift((short[]) null, 57, (-1006), (int) (short) (-713));
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertNotNull(intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray2.length);
      assertSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray2);
      assertSame(intArray1, intArray0);
      assertSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      assertArrayEquals(new int[] {57, (-53)}, intArray0);
      assertArrayEquals(new int[] {57, (-53)}, intArray1);
      assertArrayEquals(new int[] {57, (-53)}, intArray2);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 57;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-42), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -42, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      short[] shortArray0 = new short[9];
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, '!');
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      longArray0[1] = 1758L;
      longArray0[2] = 1758L;
      longArray0[3] = (long) '!';
      longArray0[4] = (long) '!';
      longArray0[5] = (long) '!';
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-756L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1L, 1758L, 1758L, 33L, 33L, 33L}, longArray0);
      assertArrayEquals(new long[] {1L, 1758L, 1758L, 33L, 33L, 33L}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) 1L);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 0.0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1L, 1758L, 1758L, 33L, 33L, 33L}, longArray0);
      assertArrayEquals(new long[] {1L, 1758L, 1758L, 33L, 33L, 33L}, longArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 602.0F);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1530;
      intArray0[1] = (-1);
      intArray0[2] = 1530;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (int) '!';
      intArray0[6] = (int) '!';
      intArray0[7] = (-1);
      intArray0[8] = 1256;
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, intArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {1530, (-1), 1530, (-1), (-1), 33, 33, (-1), 1256}, intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)522;
      shortArray0[2] = (short) (-2087);
      ArrayUtils.shift(shortArray0, 5, (int) (short) (-2087), (-270));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)522, (short) (-2087)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      float[] floatArray0 = new float[13];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(13, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1071);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1408), 0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1071)}, intArray0);
      
      ArrayUtils.shift(floatArray0, (-1));
      assertEquals(13, floatArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1071)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      ArrayUtils.swap(charArray0, (-2061584302), (-2061584302), (-2061584302));
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(1, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2144292736);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-270));
      assertNotNull(integer0);
      assertEquals((-270), (int)integer0);
      
      integerArray0[0] = integer0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-270);
      floatArray0[1] = (float) (int)integerArray0[0];
      floatArray0[2] = (float) (int)integerArray0[0];
      floatArray0[3] = (float) (int)integerArray0[0];
      floatArray0[4] = (float) '~';
      ArrayUtils.swap(floatArray0, (-2144254348), (-2144254348), (-2144254348));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-270.0F), (-270.0F), (-270.0F), (-270.0F), 126.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '~';
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (-270.0F);
      doubleArray0[3] = (double) (-270);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) integerArray0[0];
      intArray0[3] = (int) (short) (-1);
      intArray0[4] = (int) (short) (-1);
      intArray0[5] = (int) (short) (-1);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1669));
      assertEquals(6, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1), (-1), (-270), (-1), (-1), (-1)}, intArray0);
      
      Double[] doubleArray2 = new Double[6];
      Double double0 = new Double((-270));
      assertNotNull(double0);
      assertEquals((-270.0), (double)double0, 0.01);
      
      doubleArray2[0] = double0;
      doubleArray2[1] = (Double) (-270.0);
      doubleArray2[2] = (Double) (-1.0);
      doubleArray2[3] = (Double) (-1.0);
      doubleArray2[4] = (Double) (-270.0);
      doubleArray2[5] = (Double) 126.0;
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2, (double) doubleArray2[0]);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertEquals(6, doubleArray3.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-270.0), (-270.0), (-1.0), (-1.0), (-270.0), 126.0}, doubleArray3, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      ArrayUtils.swap(charArray0, (-625), (-951), 69);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'~', '~', '~'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '/';
      longArray0[1] = (long) 'E';
      longArray0[2] = (long) 'E';
      longArray0[3] = (long) '/';
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1758L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {47L, 69L, 69L, 47L}, longArray0);
      assertArrayEquals(new long[] {47L, 69L, 69L, 47L}, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1758L;
      floatArray0[1] = (float) 69L;
      floatArray0[2] = (float) (-663L);
      floatArray0[3] = (float) (-663L);
      floatArray0[4] = (float) '/';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 1758L);
      assertEquals(5, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {1758.0F, 69.0F, (-663.0F), (-663.0F), 47.0F}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (-1.0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(4, longArray2.length);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {47L, 69L, 69L, 47L}, longArray0);
      assertArrayEquals(new long[] {47L, 69L, 69L, 47L}, longArray1);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 47L);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1758.0F, 69.0F, (-663.0F), (-663.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1758.0F, 69.0F, (-663.0F), (-663.0F), 47.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F), (-663));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(bitSet0);
      assertEquals(5, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1758.0F, 69.0F, (-663.0F), (-663.0F), 47.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'E';
      intArray0[1] = (int) 'E';
      intArray0[2] = (int) 'E';
      intArray0[3] = (-663);
      intArray0[4] = (int) '/';
      intArray0[5] = (-663);
      intArray0[6] = 0;
      intArray0[7] = (-663);
      intArray0[8] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, integerArray0.length);
      assertArrayEquals(new int[] {69, 69, 69, (-663), 47, (-663), 0, (-663), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      int int0 = 14;
      Integer integer0 = new Integer(14);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(14, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals(14, object0);
      
      objectArray1[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 14;
      floatArray0[1] = (float) 14;
      floatArray0[2] = (float) 14;
      floatArray0[3] = (float) 14;
      floatArray0[4] = (float) 14;
      floatArray0[5] = (float) 14;
      floatArray0[6] = (float) 14;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 14.0F, 14);
      assertNotNull(bitSet0);
      assertEquals(7, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {14.0F, 14.0F, 14.0F, 14.0F, 14.0F, 14.0F, 14.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = '.';
      ArrayUtils.swap(charArray0, 2, 2, 3909);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'Q', '.'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = '4';
      charArray0[2] = '|';
      ArrayUtils.swap(charArray0, 158, 158, (-1));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'J', '4', '|'}, charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'J';
      floatArray0[1] = (float) 'J';
      floatArray0[2] = (float) 'J';
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) '|';
      floatArray0[5] = (float) 'J';
      floatArray0[6] = (float) 'J';
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {74.0F, 74.0F, 74.0F, (-1.0F), 124.0F, 74.0F, 74.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {74.0F, 74.0F, 74.0F, (-1.0F), 124.0F, 74.0F, 74.0F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'J';
      doubleArray0[1] = (double) 74.0F;
      doubleArray0[2] = (double) 'J';
      doubleArray0[3] = (double) '4';
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {74.0, 74.0, 74.0, 52.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {74.0, 74.0, 74.0, 52.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-603);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-603)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-603)}, shortArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-603);
      doubleArray0[1] = (double) (short) (-603);
      doubleArray0[2] = 1201.0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-603.0), (-603.0), 1201.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-603.0), (-603.0), 1201.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 27.0F;
      floatArray0[1] = (float) (short) (-603);
      floatArray0[2] = (float) (short) (-603);
      floatArray0[3] = (float) (short) (-603);
      floatArray0[4] = (float) (short) (-603);
      floatArray0[5] = (float) (short) (-603);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (short) (-603));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {27.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {27.0F, (-603.0F), (-603.0F), (-603.0F), (-603.0F), (-603.0F)}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) null);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-270));
      assertNotNull(integer0);
      assertEquals((-270), (int)integer0);
      
      integerArray0[0] = integer0;
      boolean boolean0 = ArrayUtils.contains((char[]) null, '\u008B');
      assertFalse(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-270);
      longArray0[1] = (long) (-270);
      longArray0[2] = (long) (int)integerArray0[0];
      longArray0[3] = 1758L;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-270L), (-270L), (-270L), 1758L}, longArray0);
      assertArrayEquals(new long[] {(-270L), (-270L), (-270L), 1758L}, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (int)integerArray0[0];
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) (-270L);
      floatArray0[3] = (float) (-270L);
      floatArray0[4] = (float) (-270);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 602.0F);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-270.0F), 1.0F, (-270.0F), (-270.0F), (-270.0F)}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 0.0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(4, longArray2.length);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-270L), (-270L), (-270L), 1758L}, longArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.swap(floatArray0, 33, (-270));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-270.0F), 1.0F, (-270.0F), (-270.0F), (-270.0F)}, floatArray0, 0.01F);
      
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, integerArray0.length);
      assertEquals((-270), (int)integer1);
      
      int int2 = ArrayUtils.lastIndexOf((Object[]) longArray2, (Object) integer1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, integerArray0.length);
      assertEquals(4, longArray2.length);
      assertEquals(4, longArray0.length);
      assertEquals((-1), int2);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-270L), (-270L), (-270L), 1758L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, object0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.indexOf(floatArray0, (float) (-1), 0);
      assertTrue(int1 == int0);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (byte) (-36));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte) (-36));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-36));
      assertTrue(int1 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Short short0 = new Short((byte) (-36));
      assertNotNull(short0);
      assertEquals((short) (-36), (short)short0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2147483637;
      ArrayUtils.reverse(intArray0, 1, 2147483637);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2147483637}, intArray0);
      
      long[] longArray3 = ArrayUtils.addFirst(longArray0, (long) (byte) (-36));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray3.length);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-36L)}, longArray3);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray1, longArray3);
      assertFalse(longArray0.equals((Object)longArray3));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray3));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray3.length);
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-36L)}, longArray3);
      
      long[] longArray4 = ArrayUtils.subarray(longArray0, (-246), (-246));
      assertFalse(longArray0.equals((Object)longArray3));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray0));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertNotNull(longArray4);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray4.length);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray4);
      assertNotSame(longArray4, longArray0);
      assertNotSame(longArray4, longArray3);
      assertNotSame(longArray4, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray4);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-36));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-36)}, byteArray0);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 112.0F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {112.0F}, floatArray0, 0.01F);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0, (-1), 6);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {1L}, longArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) ';';
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 6;
      floatArray0[4] = (float) 458;
      floatArray0[5] = (float) (-766L);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 6, (float) 1L);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {59.0F, 0.0F, 0.0F, 6.0F, 458.0F, (-766.0F), 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {59.0F, 0.0F, 0.0F, 6.0F, 458.0F, (-766.0F)}, floatArray0, 0.01F);
      
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-766L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(1, longArray2.length);
      assertEquals(0, longArray0.length);
      assertFalse(boolean0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-766L)}, longArray2);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 2, 2349, (-1284));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((byte) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-70));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2876;
      ArrayUtils.swap(longArray0, (-2146875984), (int) (byte) (-1));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2876L}, longArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2876;
      intArray0[1] = (int) (byte) (-70);
      intArray0[2] = (-1284);
      intArray0[3] = (int) (byte) (-70);
      intArray0[4] = (int) (byte) (-1);
      ArrayUtils.swap(intArray0, 4, (-1337), 2223);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-70), (-1284), (-70), 2876}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = 'I';
      charArray0[2] = 'G';
      charArray0[3] = 'N';
      charArray0[4] = '1';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'s', 'I', 'G', 'N', '1'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[7] = (byte)12;
      int int0 = 71;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)12, 71);
      assertNotNull(bitSet0);
      assertEquals(8, byteArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)0, (byte)12}, byteArray0);
      
      Integer integer0 = new Integer(71);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(71, (int)integer0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(71, (int)integer1);
      
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, (Integer) int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)8);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)0, (byte)12}, byteArray0);
      
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      
      Integer integer3 = ArrayUtils.get(integerArray0, int0, (Integer) int0);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(integer3);
      assertEquals(6, integerArray0.length);
      assertEquals(71, (int)integer3);
      assertNotSame(integerArray0, integerArray1);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-84));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(8, byteArray0.length);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)0, (byte)12}, byteArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = int0;
      intArray0[3] = (int) (byte)12;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)12;
      int[] intArray1 = ArrayUtils.remove(intArray0, 3);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(5, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1), 0, 71, 0, 12}, intArray1);
      assertArrayEquals(new int[] {(-1), 0, 71, 12, 0, 12}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)12;
      int int0 = 71;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)12, 71);
      assertNotNull(bitSet0);
      assertEquals(8, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12}, byteArray0);
      
      Integer integer0 = new Integer(71);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(71, (int)integer0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(71, (int)integer1);
      
      integerArray0[4] = integer1;
      Integer integer2 = Integer.getInteger("", (int) (byte)12);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(12, (int)integer2);
      
      integerArray0[5] = integer2;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, (Integer) int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)8);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12}, byteArray0);
      
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      
      Integer integer4 = ArrayUtils.get(integerArray0, int0, integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(integer4);
      assertEquals(6, integerArray0.length);
      assertEquals(12, (int)integer4);
      assertNotSame(integerArray0, integerArray1);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) integerArray1, (Object) integer4);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(bitSet1);
      assertEquals(1, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(integerArray0, integerArray1);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(byteArray0, (byte) (-84));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertNotNull(bitSet2);
      assertEquals(8, byteArray0.length);
      assertEquals(0, bitSet2.cardinality());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.length());
      assertEquals("{}", bitSet2.toString());
      assertEquals(64, bitSet2.size());
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12}, byteArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte)12;
      intArray0[2] = int0;
      intArray0[3] = (int) (byte) (-84);
      intArray0[4] = (int) (byte)12;
      intArray0[5] = (int) (byte)12;
      int[] intArray1 = ArrayUtils.remove(intArray0, 3);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(5, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1), 12, 71, 12, 12}, intArray1);
      assertArrayEquals(new int[] {(-1), 12, 71, (-84), 12, 12}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-53);
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-53);
      doubleArray0[1] = 268.315414;
      doubleArray0[2] = (double) (byte)0;
      ArrayUtils.shift(doubleArray0, 0, (int) (byte)0, 750);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-53.0), 268.315414, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = 'G';
      charArray0[2] = 'f';
      charArray0[3] = 'G';
      charArray0[4] = '8';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'-', 'G', 'f', 'G', '8'}, charArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)0;
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 268.315414, (double) 750);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {(-53.0), 268.315414, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0, 2621);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (float) (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[0];
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) (-1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray1 = ArrayUtils.removeElement((float[]) null, 1.0F);
      assertNull(floatArray1);
      
      boolean boolean1 = ArrayUtils.isSorted((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.swap((float[]) null, (-44), (-1), (-44));
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '/';
      longArray0[1] = (long) 'E';
      longArray0[2] = (long) 'E';
      longArray0[3] = (long) '/';
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1758L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {47L, 69L, 69L, 47L}, longArray0);
      assertArrayEquals(new long[] {47L, 69L, 69L, 47L}, longArray1);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      ArrayUtils.shift(byteArray0, 907, (-925), (-1454));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-76)}, byteArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-76);
      doubleArray0[1] = 2.147483647E9;
      doubleArray0[2] = (double) 47L;
      doubleArray0[3] = (double) 1758L;
      doubleArray0[4] = (double) (-925);
      doubleArray0[5] = (double) 47L;
      doubleArray0[6] = (double) 69L;
      doubleArray0[7] = (double) (byte) (-76);
      doubleArray0[8] = (double) 69L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1470, (-925));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-76.0), 2.147483647E9, 47.0, 1758.0, (-925.0), 47.0, 69.0, (-76.0), 69.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2361);
      intArray0[1] = 1357;
      intArray0[2] = 52;
      intArray0[3] = 1202;
      intArray0[4] = (-960);
      intArray0[5] = 5403;
      boolean boolean0 = ArrayUtils.contains(intArray0, 5403);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-2361), 1357, 52, 1202, (-960), 5403}, intArray0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 1357;
      integerArray0[1] = (Integer) (-2361);
      integerArray0[2] = (Integer) (-2361);
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) 5403;
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      integerArray0[5] = integer1;
      Integer integer2 = new Integer(263);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(263, (int)integer2);
      
      integerArray0[6] = integer2;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(7, integerArray1.length);
      assertEquals(7, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-18));
      assertNotNull(byte0);
      assertEquals((byte) (-18), (byte)byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-18)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Double double0 = new Double((-3460.0));
      assertNotNull(double0);
      assertEquals((-3460.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)51;
      shortArray0[1] = (short) (-2372);
      shortArray0[3] = (short)21845;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short)0, (short)21845}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short)0, (short)21845}, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short)0, (short)21845, (short)51, (short) (-2372), (short)0, (short)21845}, shortArray2);
      
      ArrayUtils.reverse((Object[]) shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short)0, (short)21845}, shortArray0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (short)21845);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {21845}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (int) (short)51);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray1.length);
      assertFalse(boolean0);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 44);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      int[] intArray0 = new int[1];
      intArray0[0] = 59;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-5672));
      assertEquals(8, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Integer integer0 = new Integer((-5672));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-5672), (int)integer0);
      
      Integer integer1 = Integer.getInteger("Index: ", integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-5672), (int)integer1);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) longArray0, (Object) integer1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean1);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-3257), (-1));
      assertTrue(int1 == int0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int1);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-918));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-5672);
      intArray0[2] = (int) (short) (-3257);
      intArray0[3] = (-5672);
      intArray0[4] = (-5672);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[0];
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 101;
      Integer integer0 = new Integer(101);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1212);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1212, (int)integer1);
      
      Integer integer2 = new Integer((-945));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-945), (int)integer2);
      
      integerArray0[2] = integer2;
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (-945));
      assertFalse(int1 == int0);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 101;
      doubleArray0[1] = (double) (-945);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) '9';
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 'k';
      doubleArray0[7] = (double) 'y';
      doubleArray0[8] = (-4603.839236980946);
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) integerArray0[2]);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(7, integerArray0.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, int2);
      assertArrayEquals(new double[] {101.0, (-945.0), (-1.0), 57.0, (-1.0), 107.0, 0.0, 121.0, (-4603.839236980946)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-30);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(int0, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 101, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      Integer integer0 = new Integer(2596);
      assertNotNull(integer0);
      assertEquals(2596, (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.insert((int) 0, integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)2460;
      doubleArray0[1] = (double) (byte)42;
      doubleArray0[2] = (double) 84;
      doubleArray0[3] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, 61, 0, (-724));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2460.0, 42.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)0;
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((short)2460);
      assertNotNull(integer0);
      assertEquals(2460, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (-724);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2086.243F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertNotNull(bitSet0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {(-1.0F), (-724.0F), 0.0F, 2086.243F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '#';
      charArray0[1] = '~';
      charArray0[2] = 'i';
      charArray0[3] = ':';
      charArray0[4] = '-';
      charArray0[5] = 'T';
      charArray0[6] = 'W';
      charArray0[7] = 'S';
      charArray0[8] = '\"';
      MockRandom mockRandom0 = new MockRandom((short)0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'~', 'i', ':', '-', 'T', 'W', 'S', '\"', '#'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = '+';
      ArrayUtils.shuffle(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'+', 'I'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shuffle(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2815.7;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-6231.275942);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1730.0);
      doubleArray0[5] = (-3344.061885844);
      doubleArray0[6] = 842.1278686523438;
      doubleArray0[7] = 3750.254313861894;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 842.1278686523438, (-1730.0));
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {2815.7, (-1.0), (-6231.275942), 1.0, (-1730.0), (-3344.061885844), 842.1278686523438, 3750.254313861894}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-348);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-4341), 283);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      Integer integer0 = new Integer((-348));
      assertNotNull(integer0);
      assertEquals((-348), (int)integer0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-3344.061885844);
      objectArray0[1] = (Object) (-1730.0);
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1], (-348));
      assertEquals(2, objectArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1431655765);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom((-2745L));
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[3];
      byte[] byteArray2 = new byte[1];
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) Integer.MAX_VALUE);
      assertNull(doubleArray0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      
      ArrayUtils.reverse(shortArray0, (-1665), (-1665));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)21;
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-463);
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = '^';
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '^';
      charArray1[1] = '^';
      charArray1[2] = '^';
      charArray1[3] = 'm';
      charArray1[4] = '^';
      charArray1[5] = '^';
      charArray1[6] = '^';
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = '^';
      charArray0[2] = '9';
      charArray0[3] = 'k';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'y', '^', '9', 'k'}, charArray0);
      
      Integer[] integerArray0 = new Integer[7];
      int int0 = 101;
      Integer integer0 = new Integer(101);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1212);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1212, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer('9');
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(57, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger((String) null);
      assertNull(integer3);
      
      integerArray0[3] = null;
      Integer integer4 = new Integer('9');
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(57, (int)integer4);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      ArrayUtils.reverse(byteArray0, (int) (short) (-197), (int) (byte)1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'y';
      floatArray0[1] = (float) (int)integerArray0[1];
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) '9';
      floatArray0[5] = (-3997.3945F);
      ArrayUtils.reverse(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-3997.3945F), 57.0F, 101.0F, 0.0F, 1212.0F, 121.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = '^';
      charArray0[2] = '9';
      charArray0[3] = 'k';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'y', '^', '9', 'k'}, charArray0);
      
      Integer[] integerArray0 = new Integer[7];
      int int0 = 101;
      Integer integer0 = new Integer(101);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1212);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1212, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer('9');
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(57, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger((String) null);
      assertNull(integer3);
      
      integerArray0[3] = null;
      Integer integer4 = new Integer('9');
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(57, (int)integer4);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-197);
      shortArray0[1] = (short) (-2966);
      ArrayUtils.reverse(shortArray0, 6, (int) integerArray0[1]);
      assertEquals(2, shortArray0.length);
      assertEquals(7, integerArray0.length);
      assertArrayEquals(new short[] {(short) (-197), (short) (-2966)}, shortArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      ArrayUtils.reverse(byteArray0, (int) (short) (-197), (int) (byte)1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'y';
      floatArray0[1] = (float) (int)integerArray0[1];
      floatArray0[2] = (float) '^';
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) '9';
      floatArray0[5] = (-3997.3945F);
      ArrayUtils.reverse(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-3997.3945F), 57.0F, 101.0F, 94.0F, 1212.0F, 121.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)964;
      intArray0[2] = (int) (short)964;
      intArray0[3] = 2142601671;
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) 964;
      floatArray0[2] = (float) 964;
      ArrayUtils.reverse(floatArray0, 2142601671, Integer.MAX_VALUE);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 964.0F, 964.0F}, floatArray0, 0.01F);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)579);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      String string0 = ArrayUtils.toString((Object) null, "r.+w:*4d'");
      assertNotNull(string0);
      assertEquals("r.+w:*4d'", string0);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2815.7;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2815.7, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = null;
      ArrayUtils.swap((float[]) null, (int) (byte)0, (-1));
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 2815.7;
      int[] intArray0 = new int[7];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-1);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2111085620, Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertEquals(7, intArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, (-1), 0, Integer.MAX_VALUE, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte) (-77);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)57, (byte)52, (byte)0, (byte)76, (byte) (-8), (byte) (-77)}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '{', (-1139));
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'/', '\u0000'}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom((byte)52);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Integer integer0 = new Integer((-1417));
      assertNotNull(integer0);
      assertEquals((-1417), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals((-1417), object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
      assertEquals("-1417", string0);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      Integer integer0 = new Integer((-59));
      assertNotNull(integer0);
      assertEquals((-59), (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertNotNull(string0);
      assertEquals("-59", string0);
      
      String string1 = ArrayUtils.toString((Object) integer0, "*B3L");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-59", string1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-59);
      longArray0[1] = (long) (-59);
      longArray0[2] = (long) (-59);
      longArray0[3] = (long) (-59);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-59L), (-59L), (-59L), (-59L)}, longArray0);
      assertArrayEquals(new long[] {(-59L), (-59L), (-59L), (-59L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-270));
      assertNotNull(integer0);
      assertEquals((-270), (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-270)}, intArray0);
      
      ArrayUtils.reverse((long[]) null);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-270);
      ArrayUtils.reverse((boolean[]) null);
      ArrayUtils.shift(floatArray0, (int) integerArray0[0], (int) integerArray0[0], (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-270.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-270.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-270.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-270.0F), 0.0F, 0.0F, (-270.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(623);
      assertNotNull(integer0);
      assertEquals(623, (int)integer0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1.0, 623, 1990.497781901636);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-720.0F);
      floatArray0[1] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 6);
      assertEquals(2, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-720.0F), 1.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[2] = (long) 6;
      longArray0[3] = (long) 6;
      longArray0[4] = (long) 6;
      longArray0[5] = (long) 6;
      longArray0[6] = (long) 1;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-663L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 6L, 6L, 6L, 1L}, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 6L, 6L, 6L, 1L}, longArray1);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-663L);
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = (-720.0F);
      floatArray1[4] = (float) 6L;
      floatArray1[5] = (float) 1;
      floatArray1[6] = (float) 6L;
      int int1 = ArrayUtils.lastIndexOf(floatArray1, (float) (-663L));
      assertFalse(int1 == int0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(7, floatArray1.length);
      assertEquals(0, int1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-663.0F), 1.0F, 1.0F, (-720.0F), 6.0F, 1.0F, 6.0F}, floatArray1, 0.01F);
      
      int int2 = ArrayUtils.indexOf((double[]) null, (double) 6);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {6L, 6L, 6L, 6L, 6L, 6L, 1L}, longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)9;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)4);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)111, (byte)4, (byte)9}, byteArray0);
      assertArrayEquals(new byte[] {(byte)111, (byte)4, (byte)9, (byte)4}, byteArray1);
      
      int int3 = ArrayUtils.lastIndexOf((double[]) null, 770.0226554212671, (double) 1.0F);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 0.0, 17.541234964545616);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-33);
      intArray0[1] = (int) (byte) (-33);
      intArray0[2] = (int) (byte) (-33);
      intArray0[3] = (int) (byte) (-33);
      intArray0[4] = (int) (byte) (-33);
      intArray0[5] = (int) (byte) (-33);
      intArray0[6] = (int) (byte) (-33);
      intArray0[7] = (int) (byte) (-33);
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, intArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {(-33), (-33), (-33), (-33), (-33), (-33), (-33), (-33)}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-33), (double) (-33));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      boolean boolean0 = ArrayUtils.contains((Object[]) floatArray0, (Object) null);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-59), (-6043));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) (-2844);
      longArray0[2] = (long) (-6043);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) (byte) (-53);
      floatArray0[2] = (float) (-2844);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2.14748365E9F, (-53.0F), (-2844.0F)}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-2844L);
      floatArray1[1] = (float) (byte)0;
      floatArray1[2] = (float) (byte) (-53);
      floatArray1[3] = 1871.62F;
      floatArray1[4] = 1.0F;
      floatArray1[5] = (float) (byte)48;
      floatArray1[6] = 1.0F;
      ArrayUtils.shift(byteArray0, 2);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)50;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)50}, shortArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2844L);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (-53.0F);
      doubleArray0[4] = (double) (short)50;
      doubleArray0[5] = (double) (-53.0F);
      doubleArray0[6] = (double) (short)50;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, (-53.0), 50.0, (-53.0), 50.0, (-2844.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MockRandom mockRandom0 = new MockRandom(4813L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      float[] floatArray0 = new float[13];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(13, floatArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.insert(8, integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-191L);
      longArray0[1] = (-191L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, (long[]) null);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-191L), (-191L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-191L), (-191L), 0L}, longArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'E';
      charArray0[1] = 'J';
      charArray0[2] = '?';
      charArray0[3] = '';
      charArray0[4] = 'Z';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'E', 'J', '?', '', 'Z'}, charArray0);
      assertArrayEquals(new char[] {'E', 'J', '?', '', 'Z', 'E', 'J', '?', '', 'Z'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.insert(0, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = (-663L);
      longArray0[1] = 0L;
      longArray0[2] = (-1730L);
      longArray0[3] = 9L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 3554, 3554);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-663L), 0L, (-1730L), 9L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = ArrayUtils.insert(0, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-1073), (-439), (-5));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {(-663L), 0L, (-1730L), 9L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (-1384));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1431655765);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom((-2745L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ArrayUtils.swap(booleanArray0, (int) (short)0, 42, (int) (byte)0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 42;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-1521);
      int int0 = ArrayUtils.indexOf(intArray0, (-2144936604));
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {42, 0, (-1521)}, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      ArrayUtils.reverse(floatArray0, (-2011), 42);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (short) (-1);
      doubleArray0[7] = (double) (short)0;
      doubleArray0[8] = (double) (short) (-1);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, (-1.0), (-1.0), 0.0, (-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, (-1.0), (-1.0), 0.0, (-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, (int) (short)0, 2485);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, (-1.0), (-1.0), 0.0, (-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, (-1.0), (-1.0), 0.0, (-1.0), 0.0, (-1.0)}, doubleArray2, 0.01);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (short) (-181), (int) (short) (-181), 2485);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      int int0 = ArrayUtils.indexOf(charArray0, '4');
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'@'}, charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) 2485;
      longArray0[2] = (long) (short) (-181);
      longArray0[3] = (long) (short) (-181);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) '@';
      longArray0[6] = (long) '@';
      boolean boolean2 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(7, longArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new long[] {(-1L), 2485L, (-181L), (-181L), (-1L), 64L, 64L}, longArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) (-1L);
      objectArray0[3] = (Object) (-1.0);
      objectArray0[5] = (Object) (-1.0);
      objectArray0[6] = (Object) 2485L;
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(objectArray0, (java.util.Random) mockRandom0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)269);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      ArrayUtils.swap(shortArray0, (int) (short)269, 2147187804, 3218);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(4, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 0.0, 1.0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-33);
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte) (-33)}, byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-33)}, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = '/';
      charArray0[2] = '{';
      charArray0[3] = '&';
      charArray0[4] = '[';
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3860;
      shortArray0[1] = (short) (byte) (-33);
      shortArray0[2] = (short)74;
      shortArray0[3] = (short) (byte) (-33);
      shortArray0[4] = (short)1005;
      ArrayUtils.swap(shortArray0, (int) '&', 98);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)3860, (short) (-33), (short)74, (short) (-33), (short)1005}, shortArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (byte) (-33));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-3856);
      intArray0[1] = (-742);
      intArray0[2] = (-3856);
      intArray0[3] = 2;
      intArray0[4] = (-742);
      intArray0[5] = (-3856);
      intArray0[6] = (-742);
      intArray0[7] = (-1021);
      intArray0[8] = (-742);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3856), (-742), (-3856), 2, (-742), (-3856), (-742), (-1021), (-742)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-742);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-742);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) (-742);
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, intArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(0, intArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new int[] {(-3856), (-742), (-3856), 2, (-742), (-3856), (-742), (-1021), (-742)}, intArray0);
      assertArrayEquals(new double[] {(-742.0), 2.0, (-742.0), 2.0, (-742.0)}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new double[] {(-742.0), 2.0, (-742.0), 2.0, (-742.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      int[] intArray0 = new int[15];
      intArray0[2] = (int) '>';
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeAll(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertEquals(15, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(15, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 59;
      longArray0[1] = (long) (byte)0;
      ArrayUtils.reverse(longArray0, 1, 1);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {59L, 0L, 0L}, longArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'B');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'B'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, 59, 59);
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, 1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(3, booleanArray0.length);
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals(3, bitSet1.length());
      assertEquals("{2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(1, intArray0.length);
      assertEquals(3, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new long[] {59L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[2] = (short) (-170);
      Integer integer0 = new Integer((short) (-1666));
      assertNotNull(integer0);
      assertEquals((-1666), (int)integer0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (-3278.0);
      doubleArray0[2] = (double) 1033;
      doubleArray0[3] = (double) (short) (-170);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0), 1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0), 1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 98, (-1128));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0), 1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-170), 2146336255);
      assertEquals(6, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1, (short)0, (short) (-170), (short)0, (short)0, (short)0}, shortArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1033;
      ArrayUtils.reverse(longArray0, (int) (short)1, 12);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1033L}, longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-119);
      int[] intArray0 = new int[0];
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte)6, (byte) (-68), (byte)127, (byte)121, (byte) (-119)}, byteArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte)6, (byte) (-68), (byte)127, (byte)121, (byte) (-119)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      Integer integer0 = new Integer(1853);
      assertNotNull(integer0);
      assertEquals(1853, (int)integer0);
      
      Integer integer1 = new Integer((-1644));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1644), (int)integer1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer integer2 = new Integer((-1644));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1644), (int)integer2);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      ArrayUtils.shift(booleanArray0, 1827, 0, (int) integerArray0[1]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(5, integerArray0.length);
      assertNotSame(integerArray0, integerArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (int)integerArray0[1];
      doubleArray0[1] = (double) ';';
      doubleArray0[2] = (double) (int)integerArray0[0];
      doubleArray0[3] = (double) ';';
      doubleArray0[4] = 156.8;
      MockRandom mockRandom0 = new MockRandom((long) integerArray0[2]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(mockRandom0);
      assertEquals(5, integerArray0.length);
      
      IntStream intStream0 = mockRandom0.ints((-1), 1212);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(intStream0);
      assertEquals(5, integerArray0.length);
      assertNotSame(integerArray0, integerArray1);
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(2, charArray0.length);
      assertEquals(5, integerArray0.length);
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new char[] {';', '\u0000'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1644.0), 59.0, 1853.0, 59.0, 156.8, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, 102);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      
      char[] charArray0 = new char[15];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(15, charArray0.length);
      assertEquals(15, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[10];
      charArray0[0] = 'Z';
      charArray0[6] = ';';
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[3];
      int int1 = ArrayUtils.indexOf(shortArray0, (short)0, 0);
      assertTrue(int1 == int0);
      assertEquals(9, shortArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      int int2 = 1405;
      ArrayUtils.swap(doubleArray0, 1405, (int) (short)0, (int) (short)0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-67);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)17, (byte) (-67)}, byteArray0);
      
      ArrayUtils.swap((Object[]) shortArray1, 114, 1889, 0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(2);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short)0);
      assertFalse(integer1.equals((Object)int2));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      try { 
        Integer.valueOf("fV$a");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fV$a\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      char[] charArray0 = new char[7];
      ArrayUtils.shift(charArray0, (int) '');
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      ArrayUtils.shift((double[]) null, 1992, 457, 52);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3905;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (-2130);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)3905, (short)0, (short) (-2130), (short)1, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)3905, (short)0, (short) (-2130), (short)1, (short)0, (short)3905, (short)0, (short) (-2130), (short)1, (short)0}, shortArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = ';';
      charArray0[2] = 'N';
      charArray0[3] = 'S';
      ArrayUtils.shift(charArray0, (int) (short)0, 1273, (int) (short)1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'S', 'n', ';', 'N'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      char[] charArray0 = new char[3];
      ArrayUtils.shift(charArray0, 20);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      Byte byte0 = new Byte((byte)100);
      assertNotNull(byte0);
      assertEquals((byte)100, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)100);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)100, (byte)100}, byteArray1);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (-1416.84F));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1203));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = '*';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '&');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'3', '*'}, charArray0);
      assertArrayEquals(new char[] {'3', '*'}, charArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '3';
      longArray0[1] = (long) (byte)100;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 100L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {51L, 100L}, longArray0);
      assertArrayEquals(new long[] {51L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte) (-11));
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(2800);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2800, (int)integer0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1337L;
      longArray0[1] = (long) (-1);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {1337L, (-1L)}, longArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, 1337L);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {1337L, (-1L)}, longArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray1);
      assertNotNull(stringArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(2, stringArray0.length);
      assertArrayEquals(new long[] {1337L, (-1L)}, longArray0);
      
      boolean boolean2 = ArrayUtils.contains((double[]) null, (-3480.788241015777));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-1446), 1);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = '_';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\"', '_'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (byte)2);
      assertNull(longArray0);
      
      Long long0 = new Long((byte)2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, 2147483610L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 35.99314179645;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[9];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2032), (-2032));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 0.0, 1.0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-33);
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte) (-33)}, byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-33)}, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = '/';
      charArray0[2] = '{';
      charArray0[3] = '&';
      charArray0[4] = '[';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'z', (int) (byte) (-33));
      assertEquals(5, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'X', '/', '{', '&', '['}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom((byte) (-33));
      assertNotNull(mockRandom0);
      
      Integer integer0 = new Integer((byte) (-33));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-33), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals((-33), object0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 1.0);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) '/';
      characterArray0[1] = (Character) 'X';
      characterArray0[2] = (Character) '&';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'X');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'/', 'X', '&'}, charArray1);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-1254L));
      assertNull(longArray0);
      
      char[] charArray2 = new char[4];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = (char) characterArray0[2];
      charArray2[1] = 'X';
      charArray2[2] = '&';
      charArray2[3] = (char) characterArray0[0];
      char[] charArray3 = ArrayUtils.subarray(charArray2, (int) characterArray0[0], (-72));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertNotNull(charArray3);
      assertEquals(3, characterArray0.length);
      assertEquals(4, charArray2.length);
      assertEquals(0, charArray3.length);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertArrayEquals(new char[] {'&', 'X', '&', '/'}, charArray2);
      assertArrayEquals(new char[] {}, charArray3);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short)2732, 2);
      assertFalse(int1 == int0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      ArrayUtils.swap((double[]) null, 0, 3084, 2);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ArrayUtils.swap((Object[]) integerArray0, (int) (byte) (-59), 73, 73);
      assertEquals(1, integerArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer integer0 = new Integer(73);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(73, (int)integer0);
      
      Integer integer1 = new Integer((byte)22);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals(22, (int)integer1);
      
      try { 
        Integer.valueOf("fV$a");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fV$a\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[6] = ';';
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (-415);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (short)0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-415)}, intArray0);
      assertArrayEquals(new int[] {(-415)}, intArray1);
      
      ArrayUtils.swap(longArray1, 59, 59, (int) (short)0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      ArrayUtils.swap((Object[]) shortArray1, 1225, (int) (short)0, (int) (short)0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray1, 521);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, (-415)}, intArray0);
      assertArrayEquals(new int[] {(-415)}, intArray1);
      assertArrayEquals(new int[] {(-415)}, intArray2);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short)2732, 2);
      assertFalse(int1 == int0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      ArrayUtils.swap((double[]) null, 0, 3084, 2);
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ArrayUtils.swap((Object[]) integerArray0, (int) (byte) (-59), (int) (byte) (-59), (int) (byte) (-59));
      assertEquals(1, integerArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer integer0 = new Integer((byte)22);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(22, (int)integer0);
      
      Integer integer1 = new Integer((byte)22);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(22, (int)integer1);
      
      try { 
        Integer.valueOf("fV$a");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fV$a\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-1404L));
      assertNull(longArray0);
      
      Long long0 = new Long((-1404L));
      assertNotNull(long0);
      assertEquals((-1404L), (long)long0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) long0;
      ArrayUtils.swap(objectArray0, 57, 57, 57);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-270));
      assertNotNull(integer0);
      assertEquals((-270), (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (int)integerArray0[0];
      longArray0[1] = (long) (-270);
      longArray0[2] = (long) (-270);
      longArray0[3] = 723L;
      longArray0[4] = (long) (-270);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-270L), (-270L), (-270L), 723L, (-270L)}, longArray0);
      assertArrayEquals(new long[] {(-270L), (-270L), (-270L), 723L, (-270L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)99;
      ArrayUtils.shift(byteArray0, 76);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99}, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1902;
      shortArray0[1] = (short) (byte)99;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)99;
      shortArray0[4] = (short) (byte)99;
      shortArray0[5] = (short) (byte)99;
      Long long0 = new Long((byte)99);
      assertNotNull(long0);
      assertEquals(99L, (long)long0);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {99L, 99L, 99L, 99L}, longArray1);
      
      MutableInt mutableInt0 = new MutableInt((int) (short)99);
      assertNotNull(mutableInt0);
      assertEquals(99.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)99, mutableInt0.byteValue());
      assertEquals("99", mutableInt0.toString());
      assertEquals((short)99, mutableInt0.shortValue());
      assertEquals(99, mutableInt0.intValue());
      assertEquals(99L, mutableInt0.longValue());
      assertEquals(99.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(99, (int)mutableInt0.toInteger());
      assertEquals(99, (int)mutableInt0.getValue());
      
      Integer integer0 = mutableInt0.toInteger();
      assertNotNull(integer0);
      assertEquals(99.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)99, mutableInt0.byteValue());
      assertEquals("99", mutableInt0.toString());
      assertEquals((short)99, mutableInt0.shortValue());
      assertEquals(99, mutableInt0.intValue());
      assertEquals(99L, mutableInt0.longValue());
      assertEquals(99.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(99, (int)mutableInt0.toInteger());
      assertEquals(99, (int)mutableInt0.getValue());
      assertEquals(99, (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertEquals(99.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)99, mutableInt0.byteValue());
      assertEquals("99", mutableInt0.toString());
      assertEquals((short)99, mutableInt0.shortValue());
      assertEquals(99, mutableInt0.intValue());
      assertEquals(99L, mutableInt0.longValue());
      assertEquals(99.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(99, (int)mutableInt0.toInteger());
      assertEquals(99, (int)mutableInt0.getValue());
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertEquals(99.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)99, mutableInt0.byteValue());
      assertEquals("99", mutableInt0.toString());
      assertEquals((short)99, mutableInt0.shortValue());
      assertEquals(99, mutableInt0.intValue());
      assertEquals(99L, mutableInt0.longValue());
      assertEquals(99.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(99, (int)mutableInt0.toInteger());
      assertEquals(99, (int)mutableInt0.getValue());
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 6);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry1;
      int int0 = mutableInt0.addAndGet((int) (byte)99);
      assertEquals(198.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-58), mutableInt0.byteValue());
      assertEquals(198, (int)mutableInt0.getValue());
      assertEquals(198, (int)mutableInt0.toInteger());
      assertEquals(198, mutableInt0.intValue());
      assertEquals((short)198, mutableInt0.shortValue());
      assertEquals("198", mutableInt0.toString());
      assertEquals(198.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(198L, mutableInt0.longValue());
      assertEquals(198, int0);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 3);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      
      abstractMap_SimpleImmutableEntryArray1[0] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray1[1] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray1[2] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray2 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertFalse(abstractMap_SimpleImmutableEntryArray0.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray2);
      assertEquals(3, abstractMap_SimpleImmutableEntryArray2.length);
      assertEquals(6, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(3, abstractMap_SimpleImmutableEntryArray1.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray2);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('B');
      assertNotNull(character0);
      assertEquals('B', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('M');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('M', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'B', 'M'}, charArray0);
      
      Integer integer0 = new Integer((-3755));
      assertNotNull(integer0);
      assertEquals((-3755), (int)integer0);
      
      Integer integer1 = Integer.getInteger("-G1&hPa$`PWM", integer0);
      assertNotNull(integer1);
      assertEquals((-3755), (int)integer1);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer1);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, (Integer[]) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-929));
      assertNotNull(integer0);
      assertEquals((-929), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(5, integerArray0.length);
      assertEquals((-929), (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray2 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertFalse(abstractMap_SimpleImmutableEntryArray0.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertNotNull(abstractMap_SimpleImmutableEntryArray2);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray2.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (-2429));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2429, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-439.7819543925));
      assertNotNull(double0);
      assertEquals((-439.7819543925), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-439.7819543925));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-439.7819543925)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-439.7819543925));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-439.7819543925), (-439.7819543925), (-439.7819543925), (-439.7819543925), (-439.7819543925), (-439.7819543925)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-439.7819543925));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Double[] doubleArray0 = new Double[11];
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-59.0));
      assertNotNull(doubleArray1);
      assertEquals(11, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      ArrayUtils.swap(charArray0, 1561, (-1), 2283);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'>'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = (-663L);
      longArray0[1] = 0L;
      longArray0[2] = (-1730L);
      longArray0[3] = 9L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 3554, 3554);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-663L), 0L, (-1730L), 9L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.shift(doubleArray0, 1211, 652, (-1615));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = 'G';
      charArray0[2] = 'f';
      charArray0[3] = '8';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'-', 'G', 'f', '8'}, charArray1);
      assertArrayEquals(new char[] {'-', 'G', 'f', '8'}, charArray0);
      
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      Double double0 = new Double((-1615));
      assertNotNull(double0);
      assertEquals((-1615.0), (double)double0, 0.01);
      
      doubleArray1[2] = double0;
      doubleArray1[3] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) doubleArray1[0]);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1615.0), 0.0}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 9L;
      floatArray0[1] = (float) (-663L);
      floatArray0[2] = (float) 'f';
      floatArray0[3] = (float) '8';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 1405);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1405, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      ArrayUtils.swap(booleanArray1, 1, (-2146242326), 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)46;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-17), (byte)76, (byte)6, (byte)46}, byteArray0);
      
      Character character0 = Character.valueOf('r');
      assertNotNull(character0);
      assertEquals('r', (char)character0);
      
      Character character1 = new Character('m');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('m', (char)character1);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(characterArray0);
      assertNotNull(map0);
      assertEquals(0, characterArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 781);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 781;
      doubleArray0[1] = (double) 781;
      doubleArray0[2] = (double) 781;
      ArrayUtils.swap(doubleArray0, 781, 781, 7);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {781.0, 781.0, 781.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[5] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-1);
      char[] charArray0 = new char[24];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'j';
      charArray0[6] = 'j';
      char[] charArray1 = ArrayUtils.add(charArray0, '\'');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(24, charArray0.length);
      assertEquals(25, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (int) (short) (-1));
      assertNull(intArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'j';
      objectArray0[3] = (Object) 'j';
      objectArray0[4] = (Object) (short)1;
      objectArray0[5] = (Object) (short) (-1);
      objectArray0[6] = (Object) 'j';
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'j', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 114);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-6);
      byteArray1[1] = (byte) (-6);
      byteArray1[2] = (byte) (-6);
      byteArray1[3] = (byte)0;
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray1, (byte)126);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-6), (byte) (-6), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-6), (byte) (-6), (byte)0}, byteArray2);
      
      ArrayUtils.shift((Object[]) byteArray0, (-4288), (int) (byte) (-6), (-1039));
      assertEquals(6, byteArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (int) byte0, 1044);
      assertNull(integerArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)0, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(4, byteArray1.length);
      assertEquals(3, int0);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-6), (byte) (-6), (byte)0}, byteArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      
      Integer integer0 = new Integer((-1662));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1662), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isEquals(integer0, object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-564L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-564L), (long)long2);
      
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short)1608, (int) (short)6472);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((short)1608);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1608, (int)integer1);
      
      Integer integer2 = Integer.getInteger("");
      assertNull(integer2);
      
      Integer integer3 = new Integer((-2395));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-2395), (int)integer3);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = null;
      integerArray0[1] = integer3;
      integerArray0[2] = null;
      Integer integer4 = new Integer((-1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals((-1), (int)integer4);
      
      integerArray0[3] = integer4;
      integerArray0[4] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1662), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1662, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)804, (int) (short)804);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)21;
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-463);
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = '^';
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '^';
      charArray1[1] = '^';
      charArray1[2] = '^';
      charArray1[3] = 'm';
      charArray1[4] = '^';
      charArray1[5] = '^';
      charArray1[6] = '^';
      int int0 = ArrayUtils.lastIndexOf(charArray1, '^', 9);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray1.length);
      assertEquals(6, int0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'^', '^', '^', 'm', '^', '^', '^'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      Integer integer0 = new Integer((-1073741823));
      assertNotNull(integer0);
      assertEquals((-1073741823), (int)integer0);
      
      Integer integer1 = new Integer(2383);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2383, (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3253.75305;
      doubleArray0[1] = 2849.8154224;
      doubleArray0[2] = (-3278.0);
      doubleArray0[3] = (-3278.0);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3253.75305, 2849.8154224, (-3278.0), (-3278.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3253.75305, 2849.8154224, (-3278.0), (-3278.0), 3253.75305, 2849.8154224, (-3278.0), (-3278.0)}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3253.75305, 2849.8154224, (-3278.0), (-3278.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3253.75305, 2849.8154224, (-3278.0), (-3278.0), 3253.75305, 2849.8154224, (-3278.0), (-3278.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, 98, (-1073741823));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {3253.75305, 2849.8154224, (-3278.0), (-3278.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1976, (int) (short)1976);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)1976;
      longArray0[1] = (long) 2146336255;
      longArray0[2] = (long) (short)1976;
      longArray0[3] = (long) 2146336255;
      longArray0[4] = (long) (short)1976;
      longArray0[5] = (long) 2383;
      longArray0[6] = (long) 2146336255;
      longArray0[7] = (long) 2146336255;
      longArray0[8] = (long) (-1128);
      ArrayUtils.reverse(longArray0, (-1649), 812);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-1128L), 2146336255L, 2146336255L, 2383L, 1976L, 2146336255L, 1976L, 2146336255L, 1976L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-564L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-564L), (long)long2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)36;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-711);
      shortArray0[1] = (short) (byte)39;
      shortArray0[2] = (short)114;
      shortArray0[3] = (short) (byte) (-116);
      shortArray0[5] = (short) (byte)36;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (byte)0, 0);
      assertFalse(int1 == int0);
      assertEquals(6, shortArray0.length);
      assertEquals(4, int1);
      assertArrayEquals(new short[] {(short) (-711), (short)39, (short)114, (short) (-116), (short)0, (short)36}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      ArrayUtils.swap(doubleArray0, (int) (short) (-711), (int) (short) (-116), 2146229276);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte) (-116), (byte)36}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      Double double0 = new Double((byte) (-40));
      assertNotNull(double0);
      assertEquals((-40.0), (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '\\';
      floatArray0[1] = (float) '\\';
      floatArray0[2] = (float) '\\';
      floatArray0[3] = (float) '\\';
      ArrayUtils.swap(floatArray0, (int) (byte) (-40), 129, (int) (byte) (-40));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {92.0F, 92.0F, 92.0F, 92.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      byte byte0 = (byte)99;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)99;
      ArrayUtils.shift(byteArray0, 76);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)99}, byteArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)99;
      floatArray0[1] = (float) (byte)99;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = 2885.444F;
      floatArray0[4] = (float) 76;
      floatArray0[5] = (float) (byte)99;
      floatArray0[6] = (float) 76;
      floatArray0[7] = (float) (byte)99;
      floatArray0[8] = (float) (byte)99;
      ArrayUtils.swap(floatArray0, (-1801), 56, 56);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {99.0F, 99.0F, 0.0F, 2885.444F, 76.0F, 99.0F, 76.0F, 99.0F, 99.0F}, floatArray0, 0.01F);
      
      short short0 = (short) (-1);
      short short1 = (short) (-711);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 76;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)99;
      intArray0[1] = (-1801);
      intArray0[2] = (int) (short) (-711);
      intArray0[3] = (int) (short) (-1);
      intArray0[4] = (int) (byte)99;
      intArray0[5] = (int) (short) (-711);
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1298.26429884898, 0, (double) 0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[6];
      intArray0[1] = 0;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertNull(object0);
      assertEquals(6, objectArray0.length);
      
      objectArray0[2] = (Object) 0;
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-711);
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 1033;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1033, Integer.MAX_VALUE, (-1529.0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 1033.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1743.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1286.3502181334256, 2159, (double) 2159);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {1743.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(2159);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2159, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals(2159, object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertFalse(object1.equals((Object)int0));
      assertNotNull(object1);
      assertEquals(2159, object1);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-1009));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      Integer integer0 = new Integer(1853);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1853, (int)integer0);
      
      Integer integer1 = new Integer((-1644));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-1644), (int)integer1);
      
      Integer integer2 = new Integer(1853);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1853, (int)integer2);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer2;
      integerArray0[4] = integer0;
      Integer integer3 = new Integer((-1644));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-1644), (int)integer3);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      ArrayUtils.shift(booleanArray0, 1827, 0, (int) integerArray0[1]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(5, integerArray0.length);
      assertNotSame(integerArray0, integerArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (int)integerArray0[1];
      doubleArray0[1] = (double) 1853;
      doubleArray0[2] = (double) (int)integerArray0[0];
      doubleArray0[3] = (double) ';';
      doubleArray0[4] = 156.8;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 'r';
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (-1823.2253552578156);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (int) integerArray0[2], 0.0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(int1 == int0);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, integerArray0.length);
      assertEquals(7, int1);
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new double[] {(-1644.0), 1853.0, 1853.0, 59.0, 156.8, 0.0, 114.0, 0.0, (-1823.2253552578156)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)67;
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte)42);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (byte)2);
      assertTrue(int1 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (byte)2;
      longArray0[2] = (long) (byte)42;
      longArray0[3] = (long) (byte)67;
      longArray0[4] = (long) (byte) (-47);
      longArray0[5] = (long) (byte)67;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 2L, 42L, 67L, (-47L), 67L}, longArray0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 1212.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-1743));
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-1743), (-1743), (-1743));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      Integer integer0 = new Integer((-219));
      assertNotNull(integer0);
      assertEquals((-219), (int)integer0);
      
      Integer integer1 = new Integer((-219));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-219), (int)integer1);
      
      Integer integer2 = new Integer((-219));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-219), (int)integer2);
      
      Integer integer3 = new Integer(4035);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(4035, (int)integer3);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      integerArray0[6] = integer1;
      integerArray0[7] = integer2;
      Integer integer4 = new Integer((int) integerArray0[4]);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(8, integerArray0.length);
      assertEquals((-219), (int)integer4);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-1068), (-1649), (int) integerArray0[0]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(8, integerArray0.length);
      assertNotSame(integerArray0, integerArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)6;
      ArrayUtils.shift(byteArray0, (int) (byte) (-1), 2883, (int) (byte)0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)6, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (-634);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short)54;
      shortArray0[6] = (short) (byte) (-1);
      shortArray0[7] = (short)457;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short) (-634), (short) (-1), (short)0, (short) (-1), (short)54, (short) (-1), (short)457}, shortArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)54;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = 1462.7742F;
      float[] floatArray1 = ArrayUtils.insert((int) (short)0, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(10, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 54.0F, 0.0F, 1462.7742F, 0.0F, 0.0F, 54.0F, 0.0F, 1462.7742F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 54.0F, 0.0F, 1462.7742F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = (long) (short)54;
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1294L), (int) (short)0);
      assertNotNull(bitSet0);
      assertEquals(5, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new long[] {1L, 54L, (-1L), 0L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      int[] intArray0 = new int[20];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(20, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '~');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'~'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-61);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)86);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)86, (byte)31, (byte) (-50), (byte)0, (byte)48, (byte) (-61)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)86, (byte)31, (byte) (-50), (byte)0, (byte)48, (byte) (-61), (byte)86}, byteArray1);
      
      ArrayUtils.swap((double[]) null, (-2147120725), (int) (byte)48, (-263));
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = '?';
      charArray0[2] = 'K';
      charArray0[3] = 'q';
      charArray0[4] = '.';
      char[] charArray1 = ArrayUtils.add(charArray0, 'j');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(5, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'K', '?', 'K', 'q', '.', 'j'}, charArray1);
      assertArrayEquals(new char[] {'K', '?', 'K', 'q', '.'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)31;
      intArray0[1] = (int) 'K';
      intArray0[2] = (int) 'q';
      intArray0[3] = (int) (byte)48;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)31;
      intArray0[6] = (int) (byte)86;
      intArray0[7] = (-3772);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 31);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {31, 75, 113, 48, 0, 31, 86, (-3772)}, intArray0);
      assertArrayEquals(new int[] {75, 113, 48, 0, 31, 86, (-3772)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1709);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1709));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1709)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      char[] charArray0 = new char[11];
      boolean boolean0 = ArrayUtils.contains(charArray0, '^');
      assertEquals(11, charArray0.length);
      assertFalse(boolean0);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '^';
      charArray1[1] = '7';
      charArray1[2] = '7';
      charArray1[3] = '7';
      charArray1[4] = '^';
      charArray1[5] = '7';
      charArray1[6] = '^';
      ArrayUtils.shift(charArray1, 510);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'7', '7', '7', '^', '7', '^', '^'}, charArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '^';
      longArray0[1] = (long) 510;
      longArray0[2] = (long) '^';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 510);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 510, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      ArrayUtils.shift((double[]) null, (int) (short)2460, 2250, (-2855));
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2460, (short)0, (short)0}, shortArray2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'b';
      charArray0[2] = 'A';
      charArray0[3] = 'S';
      ArrayUtils.shift(charArray0, 0, 2250, 0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'n', 'b', 'A', 'S'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      ArrayUtils.shift((double[]) null, 20, 20, 20);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)51;
      shortArray0[1] = (short) (-2372);
      shortArray0[2] = (short) (-711);
      shortArray0[3] = (short)21845;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short) (-711), (short)21845}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short) (-711), (short)21845}, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short) (-711), (short)21845, (short)51, (short) (-2372), (short) (-711), (short)21845}, shortArray2);
      
      ArrayUtils.reverse((Object[]) shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)51, (short) (-2372), (short) (-711), (short)21845}, shortArray0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (short)21845);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {21845}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (int) (short)51);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray1.length);
      assertFalse(boolean0);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = (-663L);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-711);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-711)}, shortArray0);
      
      ArrayUtils.shift(doubleArray0, (int) (short) (-711), (int) (short) (-711), 1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short) (-711)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-711), (short) (-711)}, shortArray2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 2122);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2122}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2122;
      floatArray0[1] = (float) (short) (-711);
      floatArray0[2] = (float) 2122;
      floatArray0[3] = (float) 2122;
      floatArray0[4] = (float) (-663L);
      floatArray0[5] = (float) (short) (-711);
      floatArray0[6] = (float) 1;
      floatArray0[7] = 0.0F;
      ArrayUtils.shift(floatArray0, 1);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2122.0F, (-711.0F), 2122.0F, 2122.0F, (-663.0F), (-711.0F), 1.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) null, (-2796));
      assertNotNull(bitSet0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      ArrayUtils.shift(byteArray0, 76);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)99, (byte) (-53), (byte)99}, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1902;
      shortArray0[1] = (short) (byte)99;
      shortArray0[2] = (short) (byte) (-53);
      shortArray0[3] = (short) (byte)99;
      shortArray0[4] = (short) (byte)99;
      shortArray0[5] = (short) (byte)99;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)1902, (short)99, (short) (-53), (short)99, (short)99, (short)99}, shortArray0);
      
      ArrayUtils.swap((int[]) null, (int) (short)1902, (int) (short)99);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)99;
      longArray0[1] = 208L;
      longArray0[2] = (long) (short)99;
      longArray0[3] = (long) (byte)99;
      longArray0[4] = (long) (short)99;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 657, (int) (short)1902);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Integer integer0 = new Integer((short)99);
      assertNotNull(integer0);
      assertEquals(99, (int)integer0);
      
      int int0 = ArrayUtils.indexOf((Object[]) shortArray1, (Object) integer0, (int) (byte) (-53));
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1902, (short)99, (short) (-53), (short)99, (short)99, (short)99}, shortArray0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte) (-53), (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)99, (byte) (-53), (byte)99}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-170);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1530;
      doubleArray0[1] = (-3278.0);
      doubleArray0[2] = (double) 1033;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1033.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1033.0, 1530.0, (-3278.0), 1033.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1033.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1033.0, 1530.0, (-3278.0), 1033.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, 33, (int) (short)1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1033.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1801), 2146336255);
      assertEquals(6, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1, (short) (-1666), (short) (-170), (short)0, (short)0, (short)0}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (-70), (long) (short) (-170));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -70, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'n');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'n';
      ArrayUtils.swap(floatArray0, (-478), (-478), (-478));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {110.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (-230.6F);
      floatArray0[2] = (float) 1033;
      floatArray0[3] = (float) (short) (-1);
      floatArray0[4] = (float) (short) (-1);
      floatArray0[5] = (float) 1033;
      floatArray0[6] = (float) 1530;
      ArrayUtils.swap(floatArray0, (int) (short) (-1), (-1084), 1033);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-230.6F), 1033.0F, (-1.0F), (-1.0F), 1033.0F, 1530.0F}, floatArray0, 0.01F);
      
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-1), (byte)byte1);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      Byte byte2 = new Byte((byte)78);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)78, (byte)byte2);
      
      byteArray0[7] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)78);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)78}, byteArray1);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) byte0);
      assertEquals(7, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-1.0F), (-230.6F), 1033.0F, (-1.0F), (-1.0F), 1033.0F, 1530.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2815.7;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-6231.275942);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1730.0);
      doubleArray0[5] = (-3344.061885844);
      doubleArray0[6] = 842.1278686523438;
      doubleArray0[7] = 3750.254313861894;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 842.1278686523438, (-1730.0));
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {2815.7, (-1.0), (-6231.275942), 1.0, (-1730.0), (-3344.061885844), 842.1278686523438, 3750.254313861894}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-348);
      intArray0[1] = (-1651);
      intArray0[2] = 34;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-348), (-1651), 34}, intArray0);
      
      Integer[] integerArray0 = new Integer[1];
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) null);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)67;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)42;
      shortArray0[1] = (short) (byte)67;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)42, (short)67}, shortArray0);
      assertArrayEquals(new short[] {(short)42, (short)67, (short)42, (short)67}, shortArray1);
      
      ArrayUtils.reverse((Object[]) integerArray0);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = 'o';
      charArray0[2] = '_';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      charArray0[5] = 'S';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'_', 'o', '_', 'X', 'X', 'S'}, charArray1);
      assertArrayEquals(new char[] {'_', 'o', '_', 'X', 'X', 'S'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = ArrayUtils.subarray(doubleArray2, 450, 450);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)1;
      ArrayUtils.shift(byteArray0, (int) (byte) (-80), 512, (int) (byte) (-80));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-80), (byte)1}, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      int int0 = ArrayUtils.indexOf(charArray0, '@');
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'@', '@', '@'}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom(450);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, object0);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-6));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      objectArray0[5] = (Object) byte0;
      objectArray0[6] = (Object) byte0;
      ArrayUtils.shift(objectArray0, (-4288), 1104, (-2397));
      assertEquals(7, objectArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, 2773, 207);
      assertNull(integerArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 207;
      longArray0[2] = (-1333L);
      longArray0[3] = (long) (-2397);
      longArray0[4] = (long) 207;
      longArray0[5] = (long) (byte) (-6);
      longArray0[6] = (long) 1104;
      long[] longArray1 = ArrayUtils.add(longArray0, 1, (-3787L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, (-3787L), 207L, (-1333L), (-2397L), 207L, (-6L), 1104L}, longArray1);
      assertArrayEquals(new long[] {0L, 207L, (-1333L), (-2397L), 207L, (-6L), 1104L}, longArray0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, objectArray0[1]);
      assertEquals(7, objectArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 2828;
      doubleArray0[3] = (double) 2828;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 2828;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 2828.0, 2828.0, 0.0, 0.0, 0.0, 2828.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, Integer.MAX_VALUE, 2828);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(2828);
      assertNotNull(integer0);
      assertEquals(2828, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 2193, (-1353), 2193);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[6] = ';';
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, (int) (short)0, (-415), (int) (short)0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(18, shortArray2.length);
      assertEquals(9, shortArray0.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (-415);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (short)0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-415)}, intArray0);
      assertArrayEquals(new int[] {(-415)}, intArray1);
      
      ArrayUtils.swap(longArray1, 59, 59, (int) (short)0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      int int0 = (-2144278447);
      ArrayUtils.shift(byteArray0, (-2144278447));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)99, (byte)99}, byteArray0);
      
      char[] charArray0 = new char[3];
      char char0 = '\\';
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      char char1 = '\\';
      charArray0[2] = '\\';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\\', '\\', '\\'}, charArray0);
      
      String string0 = "";
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.swap(booleanArray0, (-3197), (-3197), (-3197));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, 1188.5262804264);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-1L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (-1L));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) 925L);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (byte) (-1));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = '@';
      charArray0[2] = '&';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l', '@', '&'}, charArray0);
      
      Integer integer0 = new Integer(72);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(72, (int)integer0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-59);
      longArray0[2] = (long) (-59);
      longArray0[3] = (long) (-59);
      Integer integer0 = new Integer((-59));
      assertNotNull(integer0);
      assertEquals((-59), (int)integer0);
      
      Integer integer1 = new Integer((-59));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-59), (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer0));
      assertNotNull(object0);
      assertEquals((-59), object0);
      
      Object[] objectArray0 = new Object[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0, (-59));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer0));
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)122;
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-61), (byte)4, (byte) (-33), (byte)114, (byte)126, (byte)122}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-61), (byte)4, (byte) (-33), (byte)114, (byte)126, (byte)122}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 97;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)81}, byteArray0);
      assertArrayEquals(new byte[] {(byte)81, (byte)81}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((short)0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      int int0 = (-1);
      Integer integer2 = new Integer((-1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer3 = new Integer(772);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(772, (int)integer3);
      
      integerArray0[0] = integer3;
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer2);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer3));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(4, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-1846.9573F));
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1846.9573F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) integerArray0, (Object) int0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(4, integerArray0.length);
      assertTrue(boolean0);
      assertNotSame(integerArray0, integerArray1);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-2855), (int) (short)0);
      assertTrue(int1 == int0);
      assertEquals(9, shortArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, (-918));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Integer integer0 = new Integer(101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      Integer integer1 = new Integer(101);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(101, (int)integer1);
      
      Integer integer2 = new Integer((-945));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-945), (int)integer2);
      
      Integer integer3 = Integer.getInteger((String) null);
      assertNull(integer3);
      
      ArrayUtils.reverse((byte[]) null, 101, 2144525681);
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[1] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1212);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true}, booleanArray0));
      
      short[] shortArray1 = ArrayUtils.insert(2144525681, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2144525681;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)848, 1212);
      assertFalse(int1 == int0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int1);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift(doubleArray0, (-945));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.144525681E9, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2815.7;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-6231.275942);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1730.0);
      doubleArray0[5] = (-3344.061885844);
      doubleArray0[6] = 842.1278686523438;
      doubleArray0[7] = 3750.254313861894;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 842.1278686523438, (-1730.0));
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {2815.7, (-1.0), (-6231.275942), 1.0, (-1730.0), (-3344.061885844), 842.1278686523438, 3750.254313861894}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-348);
      intArray0[1] = (-1651);
      intArray0[2] = 34;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-348), (-1651), 34}, intArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-5));
      assertNotNull(integer0);
      assertEquals((-5), (int)integer0);
      
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-80));
      assertNull(byteArray0);
      
      Integer integer0 = new Integer(873);
      assertNotNull(integer0);
      assertEquals(873, (int)integer0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) integer0);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(873, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 873, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)25452);
      assertNotNull(bitSet0);
      assertEquals(0, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-4341);
      shortArray0[1] = (short) (-1193);
      shortArray0[2] = (short) (-2114);
      shortArray0[3] = (short) (-2114);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2114));
      assertNotNull(bitSet0);
      assertEquals(4, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertArrayEquals(new short[] {(short) (-4341), (short) (-1193), (short) (-2114), (short) (-2114)}, shortArray0);
      
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray2.length);
      assertEquals(6, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      
      Integer[] integerArray0 = new Integer[2];
      int int0 = 32;
      Integer integer0 = new Integer(32);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(32, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.valueOf(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(32, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = new Integer[6];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer1;
      integerArray1[1] = integer0;
      MutableInt mutableInt0 = new MutableInt();
      assertNotNull(mutableInt0);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      
      Integer integer2 = mutableInt0.toInteger();
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, (int)integer2);
      
      integerArray1[2] = integer2;
      integerArray1[3] = integer1;
      integerArray1[4] = integer1;
      Integer integer3 = new Integer((-1877));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1877), (int)integer3);
      
      integerArray1[5] = integer3;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2150, integerArray0, integerArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2150, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)124;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(3, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)124, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(13, byteArray0.length);
      assertEquals(0, int0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 695, (int) (byte) (-96));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(13, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      ArrayUtils.shift(doubleArray0, (-19), (-19), (-2748));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3431);
      shortArray0[1] = (short) (byte) (-96);
      shortArray0[2] = (short) (byte) (-96);
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-3431), (short) (-96), (short) (-96), (short)0, (short)0}, shortArray0);
      
      float[] floatArray1 = ArrayUtils.insert((-454), (float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = 'b';
      charArray0[2] = 'p';
      charArray0[3] = '\"';
      ArrayUtils.shuffle(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'b', 'p', '\"', '\''}, charArray0);
      
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'b', 'p', '\"', '\''}, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'b', 'p', '\"', '\''}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      short[] shortArray0 = ArrayUtils.insert(0, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.insert((-234), (short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray((short[]) null, 0, 2019);
      assertNull(shortArray2);
      
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      short[] shortArray0 = new short[18];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(18, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = 'a';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(14, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'9', 'a', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true, true, false, true}, booleanArray1));
      
      ArrayUtils.reverse((int[]) null, (-2650), (-1523));
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1758L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {1758L}, longArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-712);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)603;
      shortArray0[3] = (short)13;
      shortArray0[4] = (short) (-404);
      shortArray0[5] = (short) (-2855);
      shortArray0[6] = (short)3469;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(7, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-712), (short) (-1), (short)603, (short)13, (short) (-404), (short) (-2855), (short)3469}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = '^';
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '^';
      doubleArray0[1] = (double) 'y';
      doubleArray0[2] = 2561.6147133167265;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) '^';
      ArrayUtils.shift(doubleArray0, (-2275), (-236), (-236));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {94.0, 121.0, 2561.6147133167265, 0.0, 94.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      ArrayUtils.shift(charArray0, 7, 5, (-267));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'y', '^', '\u0000', '\u0000'}, charArray0);
      
      Short[] shortArray2 = new Short[4];
      Short short0 = new Short((byte)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      shortArray2[0] = short0;
      Short short1 = new Short((byte)0);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      
      shortArray2[1] = short1;
      try { 
        Short.decode("G ^tB[F-U");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"G ^tB[F-U\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-4895), (-4895), 1677);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-4895);
      intArray0[1] = 16;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1055);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-4895), 16}, intArray0);
      assertArrayEquals(new int[] {1055, (-4895), 16}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (-1384));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      Byte byte0 = new Byte((byte) (-81));
      assertNotNull(byte0);
      assertEquals((byte) (-81), (byte)byte0);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      
      ArrayUtils.shift((char[]) null, 932, 3908, 2144635526);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      char[] charArray0 = new char[2];
      ArrayUtils.shift(charArray0, 0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      char[] charArray0 = new char[1];
      ArrayUtils.shift(charArray0, (int) '\u0000');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-564L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-564L), (long)long2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      ArrayUtils.shift(doubleArray0, (-2855), (int) (byte)39, (int) (byte)39);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2130);
      shortArray0[1] = (short) (-2130);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)39;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)39;
      shortArray0[6] = (short) (-2130);
      shortArray0[7] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(16, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-2130), (short) (-2130), (short)0, (short)39, (short)0, (short)39, (short) (-2130), (short)0}, shortArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[1] = '7';
      charArray0[2] = 'b';
      charArray0[3] = 'S';
      charArray0[4] = ';';
      charArray0[5] = 'k';
      ArrayUtils.shift(charArray0, (-267), (-1450), (int) (short)39);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'n', '7', 'b', 'S', ';', 'k'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-742);
      intArray0[1] = (-3856);
      intArray0[2] = 0;
      intArray0[3] = 2828;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-742), (-3856), 0, 2828}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-742);
      doubleArray0[1] = (double) (-742);
      doubleArray0[2] = (double) (-742);
      doubleArray0[3] = (double) (-3856);
      doubleArray0[4] = (-1.0);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-742.0), (-742.0), (-742.0), (-3856.0), (-1.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2828;
      floatArray0[1] = (float) (-3856);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-742);
      ArrayUtils.swap(floatArray0, 9, 0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {2828.0F, (-3856.0F), 0.0F, (-742.0F)}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2290);
      shortArray0[1] = (short)10;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(2, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-2290), (short)10}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, 32);
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {(-742.0), (-742.0), (-742.0), (-3856.0), (-1.0)}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new short[] {(short) (-2290), (short)10}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.shift(longArray0, 3554);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 3554;
      intArray0[1] = 3554;
      intArray0[2] = 1086;
      intArray0[3] = 3554;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3554, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (-1384));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1431655765);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom((-2745L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ArrayUtils.swap(booleanArray0, (int) (short)0, 42, (int) (byte)0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 42;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-1521);
      int int0 = ArrayUtils.indexOf(intArray0, (-2144936604));
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {42, 0, (-1521)}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 2432L;
      longArray0[1] = (long) (-1521);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) 1431655765;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 42, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-2101.5F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2101.5F)}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayUtils.shift(doubleArray0, (-1), 32, (-1581));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float((-3596.2924451108393));
      assertNotNull(float0);
      assertEquals((-3596.2925F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) 1.0F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) (float)floatArray0[1];
      doubleArray0[1] = (double) (float)floatArray0[1];
      doubleArray0[2] = (double) (float)floatArray0[0];
      doubleArray0[3] = (double) (float)floatArray0[1];
      doubleArray0[4] = (double) (-2266);
      doubleArray0[5] = (double) (-2823);
      doubleArray0[6] = (double) 1.0F;
      ArrayUtils.shift(doubleArray0, (-2823), 1233, (-2989));
      assertEquals(14, doubleArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-156);
      shortArray0[2] = (short)731;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short) (-156), (short)731, (short)2, (short) (-156), (short)731}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short) (-156), (short)731}, shortArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)32;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)49);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)32}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)32}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-415);
      Float float0 = new Float((double) 1569);
      assertNotNull(float0);
      assertEquals(1569.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(0.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      Float float2 = new Float(0.0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '@';
      charArray0[1] = 'k';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      charArray0[4] = '@';
      charArray0[5] = '@';
      charArray0[6] = 'p';
      charArray0[7] = 'Y';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'@', 'k', 'p', 'p', '@', '@', 'p', 'Y'}, charArray0);
      
      try { 
        Integer.decode("g");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"g\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MAX_VALUE;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)100;
      shortArray0[2] = (short) (byte)100;
      shortArray0[3] = (short)1190;
      shortArray0[4] = (short) (byte)100;
      shortArray0[5] = (short) (byte)100;
      shortArray0[6] = (short) (byte)100;
      ArrayUtils.swap(shortArray0, (-2144249485), 2159, (int) (short)1190);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)100, (short)0, (short)100, (short)1190, (short)100, (short)100, (short)100}, shortArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Short short0 = new Short((short) (-1155));
      assertNotNull(short0);
      assertEquals((short) (-1155), (short)short0);
      
      Short short1 = new Short((short)100);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)100, (short)short1);
      
      Short[] shortArray1 = new Short[1];
      shortArray1[0] = (Short) (short)100;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (byte)100);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(1, shortArray2.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)100}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      float[] floatArray0 = new float[3];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertNotNull(objectArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(3, objectArray0.length);
      assertNotSame(floatArray0, floatArray2);
      assertSame(floatArray1, objectArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-59), (-6043));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) (-2844);
      longArray0[2] = (long) (-6043);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) (-2844);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2.14748365E9F, 0.0F, (-2844.0F)}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-2844L);
      floatArray1[1] = (float) (byte)0;
      floatArray1[3] = 1871.62F;
      floatArray1[4] = 1.0F;
      floatArray1[6] = 1.0F;
      floatArray1[7] = (float) (-6043L);
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, 0.0F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(9, floatArray2.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-2844.0F), 0.0F, 0.0F, 1871.62F, 1.0F, 0.0F, 1.0F, (-6043.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-2844.0F), 0.0F, 0.0F, 1871.62F, 1.0F, 0.0F, 1.0F, (-6043.0F)}, floatArray1, 0.01F);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)0;
      boolean boolean2 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean2);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean3 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean3);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (-1404L));
      assertNull(longArray0);
      
      Long long0 = new Long((-1404L));
      assertNotNull(long0);
      assertEquals((-1404L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      Byte byte0 = new Byte((byte)100);
      assertNotNull(byte0);
      assertEquals((byte)100, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)100);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)100, (byte)100}, byteArray1);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (-1416.84F));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) 1033;
      longArray0[2] = (long) (-1);
      longArray0[3] = (-3010L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (short)1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1L, 1033L, (-1L), (-3010L)}, longArray0);
      assertArrayEquals(new long[] {1033L, (-1L), (-3010L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-170);
      Byte byte0 = new Byte((byte)11);
      assertNotNull(byte0);
      assertEquals((byte)11, (byte)byte0);
      
      Byte byte1 = new Byte((byte)92);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)92, (byte)byte1);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (byte)byte0;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) byte0);
      assertFalse(byte0.equals((Object)byte1));
      assertEquals(2, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {0.0F, 11.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) (byte)byte0;
      longArray0[2] = (long) (short)1;
      longArray0[3] = (long) 1;
      longArray0[4] = 17L;
      longArray0[5] = (long) (byte)byte0;
      longArray0[6] = (long) (short) (-1666);
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-179L));
      assertFalse(int1 == int0);
      assertEquals(7, longArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {1L, 11L, 1L, 1L, 17L, 11L, (-1666L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-720.0F);
      floatArray0[1] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 6);
      assertEquals(2, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-720.0F), 1.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[2] = (long) 6;
      longArray0[3] = (long) 6;
      longArray0[4] = (long) 6;
      longArray0[6] = (long) 1;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-663L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 6L, 6L, 0L, 1L}, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 6L, 6L, 0L, 1L}, longArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1449;
      shortArray0[1] = (short)1449;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)1449, (short)1449}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 6L;
      doubleArray0[1] = (double) 6L;
      ArrayUtils.shift(doubleArray0, 1, 0, (int) (short)1449);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {6.0, 6.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)1449;
      short[] shortArray3 = ArrayUtils.addAll(shortArray0, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertNotNull(shortArray3);
      assertEquals(1, shortArray2.length);
      assertEquals(3, shortArray3.length);
      assertEquals(2, shortArray0.length);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray3);
      assertArrayEquals(new short[] {(short)1449}, shortArray2);
      assertArrayEquals(new short[] {(short)1449, (short)1449, (short)1449}, shortArray3);
      assertArrayEquals(new short[] {(short)1449, (short)1449}, shortArray0);
      
      ArrayUtils.reverse((Object[]) shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray3));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray3);
      assertArrayEquals(new short[] {(short)1449, (short)1449}, shortArray0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-720.0F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-720.0F), 1.0F, (-720.0F), 1.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = 'X';
      charArray0[2] = '/';
      charArray0[3] = '_';
      charArray0[4] = 'S';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {')', 'X', '/', '_', 'S'}, charArray0);
      assertArrayEquals(new char[] {')', 'X', '/', '_', 'S'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, (Integer) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)2460;
      doubleArray0[1] = (double) (byte)42;
      doubleArray0[2] = (double) 84;
      doubleArray0[3] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, 61, 0, (-724));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2460.0, 42.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)0;
      short[] shortArray3 = ArrayUtils.addAll(shortArray1, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertEquals(4, shortArray3.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray2);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0, (short)0}, shortArray3);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((short)2460);
      assertNotNull(integer0);
      assertEquals(2460, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (-724);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2086.243F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertNotNull(bitSet0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {(-1.0F), (-724.0F), 0.0F, 2086.243F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.insert((-1), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = '8';
      charArray0[2] = 'G';
      charArray0[3] = 'f';
      charArray0[4] = 'G';
      charArray0[5] = 'f';
      charArray0[6] = 'G';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'G', '8', 'G', 'f', 'G', 'f', 'G'}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'G');
      assertEquals(7, charArray0.length);
      assertEquals(6, int0);
      assertArrayEquals(new char[] {'G', '8', 'G', 'f', 'G', 'f', 'G'}, charArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'f';
      doubleArray0[1] = (double) '-';
      doubleArray0[2] = (double) 'G';
      doubleArray0[3] = (double) '!';
      doubleArray0[4] = (double) 'G';
      doubleArray0[5] = (double) '8';
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {102.0, 45.0, 71.0, 33.0, 71.0, 56.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'G';
      floatArray0[1] = (float) 'G';
      floatArray0[2] = (float) '!';
      floatArray0[3] = (float) '8';
      floatArray0[4] = (float) '8';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {71.0F, 71.0F, 33.0F, 56.0F, 56.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.insert(2925, shortArray1, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(101);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(101, (int)integer1);
      
      Integer integer2 = new Integer(1483);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1483, (int)integer2);
      
      Integer integer3 = Integer.getInteger((String) null);
      assertNull(integer3);
      
      ArrayUtils.reverse((byte[]) null, 8, 116);
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (-890));
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, ".DFvw!'T(SO#w");
      assertNotNull(stringArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(1, stringArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, (String) null);
      assertNotNull(stringArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[5] = (double) (short)0;
      ArrayUtils.swap((char[]) null, 78, (-1), 78);
      ArrayUtils.shift(doubleArray0, 78, (-1), 64);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      
      ArrayUtils.shift(doubleArray0, (-1), (-1), 78);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      
      ArrayUtils.swap(shortArray2, (int) (short) (-1), (int) (short) (-1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      
      short[] shortArray3 = new short[0];
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      
      short[] shortArray4 = ArrayUtils.removeElement(shortArray3, (short)8);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray3));
      assertFalse(shortArray4.equals((Object)shortArray0));
      assertFalse(shortArray4.equals((Object)shortArray2));
      assertNotNull(shortArray4);
      assertEquals(0, shortArray3.length);
      assertEquals(0, shortArray4.length);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray4);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray4, shortArray1);
      assertNotSame(shortArray4, shortArray3);
      assertNotSame(shortArray4, shortArray0);
      assertNotSame(shortArray4, shortArray2);
      assertArrayEquals(new short[] {}, shortArray3);
      assertArrayEquals(new short[] {}, shortArray4);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ArrayUtils.shift(objectArray0, (-249), (int) (byte)57, 114);
      assertEquals(7, objectArray0.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 114;
      ArrayUtils.swap(doubleArray0, (-1), 114, 3725);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {114.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Long long0 = new Long((-663L));
      assertNotNull(long0);
      assertEquals((-663L), (long)long0);
      
      Long long1 = new Long(1711L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1711L, (long)long1);
      
      Long long2 = new Long(1711L);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(1711L, (long)long2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-711);
      shortArray0[1] = (short)114;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte) (-116);
      shortArray0[4] = (short) (byte)39;
      shortArray0[5] = (short) (byte)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)115, (int) (byte)0);
      assertEquals(6, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-711), (short)114, (short)0, (short) (-116), (short)39, (short)0}, shortArray0);
      
      ArrayUtils.swap(doubleArray0, (int) (short) (-711), 1472, Integer.MAX_VALUE);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '3');
      assertNull(charArray0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-2802.3915451903));
      assertNotNull(double0);
      assertEquals((-2802.3915451903), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2802.3915451903));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2802.3915451903), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 0.0F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-75L), 17);
      assertEquals((-1), int0);
      
      int int1 = new Integer('3');
      assertFalse(int1 == int0);
      assertEquals(51, int1);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1874);
      intArray0[1] = (-3278);
      intArray0[2] = (-3278);
      intArray0[3] = 2;
      intArray0[4] = (-1874);
      intArray0[5] = (-3278);
      intArray0[6] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, (-2079));
      assertEquals(7, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1874), (-3278), (-3278), 2, (-1874), (-3278), 0}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[2] = (double) (-2079);
      doubleArray0[3] = (double) (-1874);
      doubleArray0[4] = (double) (-3278);
      doubleArray0[6] = (double) (-1874);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1));
      assertTrue(int1 == int0);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {2.0, 0.0, (-2079.0), (-1874.0), (-3278.0), 0.0, (-1874.0)}, doubleArray0, 0.01);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift(intArray0, 1, (-2011), 128);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1874), (-3278), (-3278), 2, (-1874), (-3278), 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) classArray0, (Object) integer0, 2);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(bitSet0);
      assertEquals(0, classArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(11.0F);
      assertNotNull(float0);
      assertEquals(11.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (-1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-726.904F));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-726.904F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {11.0F, (-1.0F), (-726.904F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-53);
      ArrayUtils.shift(byteArray0, 76);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-53), (byte) (-53)}, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1902;
      shortArray0[1] = (short) (byte) (-53);
      shortArray0[2] = (short) (byte) (-53);
      shortArray0[3] = (short) (byte) (-53);
      shortArray0[4] = (short) (byte) (-53);
      shortArray0[5] = (short) (byte) (-53);
      Long long0 = new Long((byte) (-53));
      assertNotNull(long0);
      assertEquals((-53L), (long)long0);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-53L), (-53L), (-53L), (-53L)}, longArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) null, 76);
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1874);
      intArray0[1] = (-3278);
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = (-1874);
      intArray0[5] = 1;
      intArray0[6] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, (-2079));
      assertEquals(7, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1874), (-3278), 0, 2, (-1874), 1, 0}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-2079);
      doubleArray0[3] = (double) (-1874);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-1874);
      doubleArray0[6] = (double) (-1874);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1));
      assertTrue(int1 == int0);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {2.0, 2.0, (-2079.0), (-1874.0), 1.0, (-1874.0), (-1874.0)}, doubleArray0, 0.01);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift(intArray0, 1, (-2011), 128);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1874), (-3278), 0, 2, (-1874), 1, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-550), booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = (-1666L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-1L), (-1666L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.shift(doubleArray0, 1930, 2414, 29);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = '9';
      charArray0[3] = 'k';
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '9';
      doubleArray0[1] = (double) '9';
      doubleArray0[2] = (double) 'y';
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 'y';
      doubleArray0[5] = (double) 801;
      ArrayUtils.shift(doubleArray0, (-1061), 102, 1789);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {801.0, 57.0, 57.0, 121.0, 0.0, 121.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 801;
      floatArray0[1] = (float) '9';
      boolean boolean0 = ArrayUtils.contains(floatArray0, 801.0F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {801.0F, 57.0F}, floatArray0, 0.01F);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1061);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 102;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (double) '9';
      doubleArray1[5] = (double) 57.0F;
      doubleArray1[6] = (double) 801.0F;
      doubleArray1[7] = (double) 102;
      doubleArray1[8] = (double) 'y';
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1061.0), 0.0, 102.0, 1.0, 57.0, 57.0, 801.0, 102.0, 121.0}, doubleArray1, 0.01);
      
      Integer integer0 = new Integer(102);
      assertNotNull(integer0);
      assertEquals(102, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) doubleArray2, (Object) integer0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1061.0), 0.0, 102.0, 1.0, 57.0, 57.0, 801.0, 102.0, 121.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.subarray((double[]) null, (int) (byte)0, 450);
      assertNull(doubleArray1);
      
      ArrayUtils.shift(byteArray0, (int) (byte)0, 3199, (-2797));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      int int0 = ArrayUtils.indexOf(charArray0, '@');
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'@'}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(173.0, (double) 1076L);
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)12;
      ArrayUtils.reverse(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte)112}, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = '\u0087';
      charArray0[2] = '@';
      charArray0[3] = 'E';
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)12;
      shortArray0[1] = (short) (byte)12;
      shortArray0[2] = (short) (byte)112;
      shortArray0[3] = (short) (byte)12;
      shortArray0[4] = (short) (byte)112;
      shortArray0[5] = (short) (byte)112;
      shortArray0[6] = (short) (byte)12;
      shortArray0[7] = (short) (byte)12;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1);
      assertNotNull(bitSet0);
      assertEquals(8, shortArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new short[] {(short)12, (short)12, (short)112, (short)12, (short)112, (short)112, (short)12, (short)12}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)112, (byte)12}, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)12;
      floatArray0[1] = (float) '@';
      floatArray0[2] = (float) (short)12;
      floatArray0[3] = (float) ';';
      floatArray0[4] = (float) (short)112;
      floatArray0[5] = (float) '\u0087';
      floatArray0[6] = (float) (byte)12;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 114.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {114.0F, 12.0F, 64.0F, 12.0F, 59.0F, 112.0F, 135.0F, 12.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {12.0F, 64.0F, 12.0F, 59.0F, 112.0F, 135.0F, 12.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      short[] shortArray0 = new short[2];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)42;
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)42, (byte)42, (byte)42, (byte)42, (byte)42, (byte) (-97)}, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte) (-97));
      assertNotNull(bitSet0);
      assertEquals(2, shortArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true}, booleanArray0));
      
      ArrayUtils.shuffle(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)42, (byte)42, (byte)42, (byte)42, (byte) (-97), (byte)42}, byteArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '\u0087';
      floatArray0[1] = (float) '\u0087';
      floatArray0[2] = (-333.0F);
      Integer integer0 = new Integer(1136);
      assertNotNull(integer0);
      assertEquals(1136, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 3271L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 728, 728);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {3271L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 728;
      doubleArray0[1] = (double) 3271L;
      ArrayUtils.shift(doubleArray0, (int) (short)0, (int) (short)0, (int) (short)0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {728.0, 3271.0}, doubleArray0, 0.01);
      
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)0;
      shortArray1[1] = (short)0;
      shortArray1[2] = (short) (-2130);
      shortArray1[3] = (short)0;
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-53);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte) (-53), (byte) (-53));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -53, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1874);
      intArray0[1] = (-3278);
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = (-1874);
      intArray0[5] = 1;
      intArray0[6] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, (-2079));
      assertEquals(7, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1874), (-3278), 0, 2, (-1874), 1, 0}, intArray0);
      
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-1874);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-1874);
      doubleArray0[6] = (double) (-1874);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1));
      assertTrue(int1 == int0);
      assertEquals(14, doubleArray0.length);
      assertEquals((-1), int1);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift(intArray0, 1, (-2011), 128);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1874), (-3278), 0, 2, (-1874), 1, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 3, 159, (-129));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 1;
      longArray0[2] = 0L;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 128;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 1L, 0L, 1L, 128L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 30096, 65, 30096);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[16];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)14;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(16, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[21];
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(21, booleanArray0.length);
      assertEquals((-1), int0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3945);
      longArray0[2] = (long) '|';
      boolean[] booleanArray0 = new boolean[9];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 2);
      assertEquals(9, booleanArray0.length);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-742);
      intArray0[1] = (-3826);
      intArray0[2] = 0;
      intArray0[3] = 2828;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-742), (-3826), 0, 2828}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-742);
      doubleArray0[1] = (double) (-742);
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) (-3826);
      doubleArray0[4] = (-1.0);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-742.0), (-742.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2828;
      floatArray0[1] = (float) (-3826);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-742);
      ArrayUtils.swap(floatArray0, 9, 0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {2828.0F, (-3826.0F), 0.0F, (-742.0F)}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-111);
      byteArray0[7] = (byte)27;
      byteArray0[8] = (byte) (-54);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)79);
      assertEquals(9, byteArray0.length);
      assertEquals(5, int0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)121, (byte)35, (byte)85, (byte)49, (byte)79, (byte) (-111), (byte)27, (byte) (-54)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-27);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-27), (-27));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-27)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-27);
      doubleArray0[1] = (double) (-27);
      doubleArray0[2] = (double) (-27);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-27.0), (-27.0), (-27.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-27.0), (-27.0), (-27.0), (-27.0), (-27.0), (-27.0)}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-27.0), (-27.0), (-27.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-27.0), (-27.0), (-27.0), (-27.0), (-27.0), (-27.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, (-234), 9);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-27.0), (-27.0), (-27.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-27.0), (-27.0), (-27.0)}, doubleArray2, 0.01);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-49), 54);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSorted((long[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (-1), 114L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-170);
      Integer integer0 = new Integer((short) (-1666));
      assertNotNull(integer0);
      assertEquals((-1666), (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (-3278.0);
      doubleArray0[2] = (double) 1033;
      doubleArray0[3] = (double) (short) (-170);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0), 1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0), 1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 98, (-1128));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0), 1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-170), 2146336255);
      assertEquals(6, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1, (short) (-1666), (short) (-170), (short)0, (short)0, (short)0}, shortArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1033;
      ArrayUtils.reverse(longArray0, (int) (short)1, 12);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1033L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[4]);
      assertEquals(5, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.junitpioneer.jupiter.ReportEntryExtension";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "org.junitpioneer.jupiter.ReportEntryExtension");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Integer integer0 = Integer.valueOf((-3647));
      assertNotNull(integer0);
      assertEquals((-3647), (int)integer0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) byteArray0, (Object) integer0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 35.99314179645;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 35.99314179645}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 35.99314179645, 0.0}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)112);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)112, (byte) (-86), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-86), (byte)0}, byteArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)112;
      floatArray0[1] = (float) (byte)112;
      floatArray0[2] = (float) (byte) (-86);
      floatArray0[3] = (float) (byte) (-6);
      floatArray0[4] = (float) (byte) (-86);
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte) (-6);
      floatArray0[7] = 1.0F;
      floatArray0[8] = (float) (byte) (-6);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1871.62F);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {112.0F, 112.0F, (-86.0F), (-6.0F), (-86.0F), 0.0F, (-6.0F), 1.0F, (-6.0F)}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)112, (byte) (-86), (byte)0}, byteArray0);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-6.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(10, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-6.0F), 112.0F, 112.0F, (-86.0F), (-6.0F), (-86.0F), 0.0F, (-6.0F), 1.0F, (-6.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {112.0F, 112.0F, (-86.0F), (-6.0F), (-86.0F), 0.0F, (-6.0F), 1.0F, (-6.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift(doubleArray1, (int) (byte)0, (int) (byte)112, (int) (byte)112);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 35.99314179645}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 35.99314179645}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte) (-6);
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) (-6.0F);
      objectArray0[3] = (Object) (-86.0F);
      objectArray0[4] = (Object) 1.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertNotNull(bitSet0);
      assertEquals(5, objectArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) null);
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 0.0F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((int) (short)6, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1452);
      shortArray0[1] = (short)1;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1452), (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'b';
      charArray0[2] = '~';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'b', (-1216));
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertArrayEquals(new char[] {'x', 'b', '~'}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-11);
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)12, (int) (byte)12);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(4, byteArray0.length);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte)41, (byte)2, (byte)12, (byte) (-11)}, byteArray0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((byte)12);
      assertNotNull(integer0);
      assertEquals(12, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)94);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)41, (byte)2, (byte)12, (byte) (-11)}, byteArray0);
      
      Integer integer1 = new Integer(91);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(91, (int)integer1);
      
      BitSet bitSet2 = ArrayUtils.indexesOf((Object[]) integerArray1, (Object) integer1);
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(bitSet2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.cardinality());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.length());
      assertEquals("{}", bitSet2.toString());
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'~', 'b', 'x'}, charArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)2, (byte)12, (byte) (-11)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)2, (byte)12, (byte) (-11)}, byteArray0);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) null);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(0, integerArray0.length);
      assertEquals((-1), int0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, object0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1243), 1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-170);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1530;
      doubleArray0[1] = (-3278.0);
      doubleArray0[2] = (double) 1033;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1033.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1033.0, 1530.0, (-3278.0), 1033.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1033.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1033.0, 1530.0, (-3278.0), 1033.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, 33, (int) (short)1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1033.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1801), 2146336255);
      assertEquals(6, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1, (short) (-1666), (short) (-170), (short)0, (short)0, (short)0}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short) (-170), 1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short) (-170);
      Integer integer0 = new Integer((short) (-170));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-170), (int)integer0);
      
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) integer0, (int) (short)1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals(1, objectArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1470;
      shortArray0[1] = (short)841;
      shortArray0[2] = (short)1470;
      shortArray0[3] = (short)6472;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short)1470);
      assertEquals(5, shortArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new short[] {(short)1470, (short)841, (short)1470, (short)6472, (short)0}, shortArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(2);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[1] = integer0;
      Integer integer1 = Integer.getInteger("");
      assertNull(integer1);
      
      integerArray0[2] = null;
      Integer[] integerArray1 = new Integer[6];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[1] = integer0;
      Integer integer2 = new Integer((short)1470);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(1470, (int)integer2);
      
      integerArray1[4] = integer2;
      Integer[] integerArray2 = ArrayUtils.insert((int) 2, integerArray0, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertEquals(3, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertEquals(9, integerArray2.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-86);
      ArrayUtils.reverse((boolean[]) null, 1067, (int) (short)1470);
      Random.setNextRandom(18688);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-49), (-2145167052));
      assertNull(intArray0);
      
      short[] shortArray0 = ArrayUtils.insert((-2145167052), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.insert((-939), (short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray((short[]) null, (-49), 1731);
      assertNull(shortArray2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)17;
      DoubleStream doubleStream1 = mockRandom0.doubles();
      assertFalse(doubleStream1.equals((Object)doubleStream0));
      assertNotNull(doubleStream1);
      assertNotSame(doubleStream1, doubleStream0);
      
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)33;
      ArrayUtils.reverse((boolean[]) null, (int) (byte) (-20), (int) (byte)17);
      Random.setNextRandom((byte)17);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-9);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)55, 2144289888);
      assertEquals(7, byteArray0.length);
      assertEquals(5, int0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-16), (byte) (-102), (byte) (-104), (byte)18, (byte)55, (byte) (-9)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte)98;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)4);
      assertEquals(8, byteArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-127), (byte)4, (byte) (-17), (byte)117, (byte)12, (byte) (-6), (byte)98}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift((Object[]) null, 7);
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = '$';
      charArray0[2] = '!';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'f');
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'f', '$', '!'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '7';
      floatArray0[1] = (float) 'G';
      floatArray0[2] = (float) 7;
      floatArray0[3] = (float) 7;
      floatArray0[4] = (float) '7';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {55.0F, 71.0F, 7.0F, 7.0F, 55.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-126);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)59, 0);
      assertFalse(int1 == int0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-126), (byte) (-126), (byte) (-126), (byte) (-126)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[5];
      longArray0[2] = 3533L;
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)65);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Long[] longArray1 = new Long[1];
      longArray1[0] = (Long) 3533L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, 3533L);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {3533L}, longArray2);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals((-1), object0);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      Double double0 = new Double(2.147483647E9);
      assertNotNull(double0);
      assertEquals(2.147483647E9, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 4418.238261876294);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (int) (byte) (-1));
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)13);
      assertEquals((-1), int0);
      
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) ';';
      ArrayUtils.reverse(intArray0, 0, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {59}, intArray0);
      
      Integer integer0 = new Integer((-1012));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1012), (int)integer0);
      
      Integer integer1 = new Integer(59);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(59, (int)integer1);
      
      Integer integer2 = new Integer(123);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(123, (int)integer2);
      
      Integer integer3 = new Integer(4794);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(4794, (int)integer3);
      
      Integer integer4 = new Integer(235);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(235, (int)integer4);
      
      Integer integer5 = new Integer(0);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer5;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte) (-36);
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)61);
      assertFalse(int1 == int0);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-39), (byte)37, (byte) (-1), (byte)109, (byte) (-36), (byte) (-26), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-74);
      floatArray0[1] = (float) (byte) (-74);
      floatArray0[2] = (float) (byte) (-74);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, (int) (byte) (-74));
      assertNotNull(bitSet0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {(-74.0F), (-74.0F), (-74.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      Short short0 = new Short((short) (-1928));
      assertNotNull(short0);
      assertEquals((short) (-1928), (short)short0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-393), 3627);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 2401L);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-770);
      intArray0[1] = (-663);
      intArray0[2] = 2146340530;
      intArray0[3] = (-1);
      intArray0[4] = (-770);
      intArray0[5] = 0;
      intArray0[6] = 1033;
      intArray0[7] = 1033;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 174, 0);
      assertTrue(int1 == int0);
      assertEquals(8, intArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {(-770), (-663), 2146340530, (-1), (-770), 0, 1033, 1033}, intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 96, 127);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 96, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-564L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-564L), (long)long2);
      
      Long long3 = new Long((-96L));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-96L), (long)long3);
      
      Long long4 = new Long(2709L);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals(2709L, (long)long4);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 1223L);
      assertFalse(int1 == int0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'r';
      intArray0[1] = (int) ';';
      int int2 = ArrayUtils.lastIndexOf(intArray0, (-4027), (-4027));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2, intArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new int[] {114, 59}, intArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2199.937F);
      floatArray0[2] = 0.0F;
      ArrayUtils.shift(floatArray0, (-969), 2, (-969));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-2199.937F), 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (short)0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 2146340530;
      floatArray0[2] = (float) (short)0;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 5;
      floatArray0[7] = (float) 5;
      floatArray0[8] = (float) (-1);
      ArrayUtils.shift(floatArray0, (-1), 667, (int) (short)0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2.14634048E9F, 0.0F, 0.0F, (-1.0F), 5.0F, 0.0F, 5.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(12, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'k', 'k', 'k', 'k', 'k'}, charArray0);
      
      Integer integer0 = new Integer(52);
      assertNotNull(integer0);
      assertEquals(52, (int)integer0);
      
      Integer integer1 = new Integer(1212);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1212, (int)integer1);
      
      Integer integer2 = new Integer((-2063));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-2063), (int)integer2);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Integer integer3 = new Integer(0);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '<');
      assertNotNull(bitSet0);
      assertEquals(5, charArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new char[] {'k', 'k', 'k', 'k', 'k'}, charArray0);
      
      byte[] byteArray0 = bitSet0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(5, charArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new char[] {'k', 'k', 'k', 'k', 'k'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer3, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = '9';
      charArray0[3] = 'k';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'y', 'y', '9', 'k'}, charArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1212);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1212, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-945));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-945), (int)integer2);
      
      integerArray0[2] = integer2;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      Integer integer3 = new Integer(101);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(101, (int)integer3);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ';');
      assertNotNull(bitSet0);
      assertEquals(4, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'y', 'y', '9', 'k'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1431655765);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom((-2745L));
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 42;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-1521);
      int int0 = ArrayUtils.indexOf(intArray0, (-2144936604));
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {42, 0, (-1521)}, intArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-720.0F);
      floatArray0[1] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 6);
      assertEquals(2, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-720.0F), 1.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[2] = (long) 6;
      longArray0[3] = (long) 6;
      longArray0[4] = (long) 6;
      longArray0[5] = (long) 6;
      longArray0[6] = (long) 1;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-663L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 6L, 6L, 6L, 1L}, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 6L, 6L, 6L, 1L}, longArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1449;
      shortArray0[1] = (short)2;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1449, (short)2}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 6L;
      doubleArray0[1] = (double) 6L;
      ArrayUtils.shift(doubleArray0, (-2397), 0, (int) (short)2);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {6.0, 6.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)1449;
      short[] shortArray3 = ArrayUtils.addAll(shortArray0, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertNotNull(shortArray3);
      assertEquals(1, shortArray2.length);
      assertEquals(3, shortArray3.length);
      assertEquals(2, shortArray0.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)1449}, shortArray2);
      assertArrayEquals(new short[] {(short)1449, (short)2, (short)1449}, shortArray3);
      assertArrayEquals(new short[] {(short)1449, (short)2}, shortArray0);
      
      ArrayUtils.reverse((Object[]) shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray3));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)1449, (short)2}, shortArray0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-720.0F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-720.0F), 1.0F, (-720.0F), 1.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = 'X';
      charArray0[2] = '/';
      charArray0[3] = '_';
      charArray0[4] = 'S';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {')', 'X', '/', '_', 'S'}, charArray1);
      assertArrayEquals(new char[] {')', 'X', '/', '_', 'S'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[1] = ';';
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2146850518);
      intArray0[2] = (int) ';';
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2192;
      intArray0[7] = 2192;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 59, (-2146850518));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2146850518), 0, 59, 0, 0, 2192, 0, 2192}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      ArrayUtils.reverse((long[]) null, 0, (-1914));
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short)457;
      shortArray0[6] = (short) (-634);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)0, (short) (-1), (short) (-1), (short)457, (short) (-634)}, shortArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((int) (short)457, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)579, 889);
      assertEquals(7, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)0, (short) (-1), (short) (-1), (short)457, (short) (-634)}, shortArray0);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray1);
      assertNotNull(stringArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-1));
      assertEquals(2, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      ArrayUtils.shift((Object[]) null, 1);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(69, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 69, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 771);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)801;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)801, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)801;
      doubleArray0[2] = (double) (short)801;
      doubleArray0[3] = (double) (short)801;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)801;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) (short)0;
      doubleArray0[8] = (double) (short)801;
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(7, shortArray0.length);
      assertEquals(14, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)801, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      ArrayUtils.reverse((Object[]) shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)801, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 2502L;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)801;
      longArray0[4] = (long) (short)801;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) 0;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, longArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {2502L, 0L, 0L, 801L, 801L, 0L, 0L}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (int) (short)0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 5254.679F);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = (-663L);
      longArray0[1] = 0L;
      longArray0[2] = (-1730L);
      longArray0[3] = 9L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 3554, 3554);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-663L), 0L, (-1730L), 9L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.shift(doubleArray0, 1211, 652, (-1615));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2202, (-1615));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray2 = new short[3];
      shortArray2[0] = (short)3860;
      shortArray2[1] = (short)1087;
      shortArray2[2] = (short)74;
      ArrayUtils.swap(shortArray2, 0, (-1219));
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short)3860, (short)1087, (short)74}, shortArray2);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 2814.6345F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short) (byte)1;
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte)1;
      ArrayUtils.reverse(shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short) (-1), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)0, (short)0, (short)0, (short)0, (short)1}, shortArray0);
      
      Integer integer1 = new Integer((-1990));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1990), (int)integer1);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (byte) (-1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 35.99314179645;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 35.99314179645}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 35.99314179645, 0.0}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)112);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)112, (byte) (-86), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-86), (byte)0}, byteArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)112;
      floatArray0[1] = (float) (byte)112;
      floatArray0[2] = (float) (byte) (-86);
      floatArray0[3] = (float) (byte) (-6);
      floatArray0[4] = (float) (byte) (-86);
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte) (-6);
      floatArray0[7] = 1.0F;
      floatArray0[8] = (float) (byte) (-6);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1871.62F);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {112.0F, 112.0F, (-86.0F), (-6.0F), (-86.0F), 0.0F, (-6.0F), 1.0F, (-6.0F)}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)112, (byte) (-86), (byte)0}, byteArray0);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-6.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(10, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-6.0F), 112.0F, 112.0F, (-86.0F), (-6.0F), (-86.0F), 0.0F, (-6.0F), 1.0F, (-6.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {112.0F, 112.0F, (-86.0F), (-6.0F), (-86.0F), 0.0F, (-6.0F), 1.0F, (-6.0F)}, floatArray0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(9, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {112.0F, (-86.0F), (-6.0F), (-86.0F), 0.0F, (-6.0F), 1.0F, (-6.0F), 112.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-1384));
      assertNotNull(integer0);
      assertEquals((-1384), (int)integer0);
      
      Integer integer1 = new Integer((-4085));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-4085), (int)integer1);
      
      Integer integer2 = new Integer((-4085));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-4085), (int)integer2);
      
      Integer integer3 = new Integer(1212);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(1212, (int)integer3);
      
      Integer integer4 = new Integer((byte)0);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      Integer integer5 = new Integer((-945));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals((-945), (int)integer5);
      
      Integer integer6 = new Integer(0);
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals(0, (int)integer6);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 101;
      floatArray0[1] = (float) (-1384);
      floatArray0[2] = (float) 1212;
      boolean boolean1 = ArrayUtils.contains(floatArray0, 655.0327F);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {101.0F, (-1384.0F), 1212.0F}, floatArray0, 0.01F);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)579;
      shortArray0[1] = (short) (-3477);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)0, 101);
      assertEquals(2, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)579, (short) (-3477)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('O');
      assertNotNull(character0);
      assertEquals('O', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'O'}, charArray0);
      
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (-1384));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.swap(booleanArray0, (int) (short)0, (int) (short)0, (-2146242326));
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('J');
      assertNotNull(character0);
      assertEquals('J', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('O');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('O', (char)character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = '9';
      charArray0[3] = 'k';
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '9';
      doubleArray0[1] = (double) '9';
      doubleArray0[2] = (double) 'y';
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 'y';
      doubleArray0[5] = (double) 801;
      ArrayUtils.shift(doubleArray0, (-1061), 102, 1789);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {801.0, 57.0, 57.0, 121.0, 0.0, 121.0}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1789;
      ArrayUtils.shift(doubleArray0, (-447), 1789, 1505);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1789.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      float[] floatArray0 = new float[24];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-611.09F));
      assertEquals(24, floatArray0.length);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(4600);
      assertNotNull(integer0);
      assertEquals(4600, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 4600);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4600, Length: 24
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2934.08F);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-1925));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1925, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\\', 1189);
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'b');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertArrayEquals(new char[] {'b', '\\'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte) (-43);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)118);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)14, (byte)111, (byte) (-1), (byte)118, (byte) (-31), (byte) (-24), (byte)122, (byte) (-43)}, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)14;
      doubleArray0[1] = (double) (byte)14;
      doubleArray0[2] = (double) (byte)118;
      doubleArray0[3] = (double) (byte) (-31);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {14.0, 14.0, 118.0, (-31.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = (-663L);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-711);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-711)}, shortArray0);
      
      ArrayUtils.shift(doubleArray0, (int) (short) (-711), (int) (short) (-711), 1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short) (-711)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-711), (short) (-711)}, shortArray2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      ArrayUtils.shift(doubleArray0, (int) (short) (-711), 1, 1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray3 = ArrayUtils.addAll(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertNotNull(shortArray3);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertEquals(3, shortArray3.length);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertArrayEquals(new short[] {(short) (-711)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-711), (short) (-711)}, shortArray2);
      assertArrayEquals(new short[] {(short) (-711), (short) (-711), (short) (-711)}, shortArray3);
      
      ArrayUtils.swap(shortArray3, 2, 2);
      assertFalse(shortArray0.equals((Object)shortArray3));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray3));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertEquals(3, shortArray3.length);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertArrayEquals(new short[] {(short) (-711)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-711), (short) (-711)}, shortArray2);
      assertArrayEquals(new short[] {(short) (-711), (short) (-711), (short) (-711)}, shortArray3);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1817.7);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray4 = ArrayUtils.removeElement(shortArray3, (short)8);
      assertFalse(shortArray0.equals((Object)shortArray3));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray3));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray4.equals((Object)shortArray0));
      assertFalse(shortArray4.equals((Object)shortArray2));
      assertFalse(shortArray4.equals((Object)shortArray3));
      assertNotNull(shortArray4);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertEquals(3, shortArray3.length);
      assertEquals(3, shortArray4.length);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray4);
      assertNotSame(shortArray2, shortArray4);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray4);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray4, shortArray0);
      assertNotSame(shortArray4, shortArray2);
      assertNotSame(shortArray4, shortArray3);
      assertArrayEquals(new short[] {(short) (-711)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-711), (short) (-711)}, shortArray2);
      assertArrayEquals(new short[] {(short) (-711), (short) (-711), (short) (-711)}, shortArray3);
      assertArrayEquals(new short[] {(short) (-711), (short) (-711), (short) (-711)}, shortArray4);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-564L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-564L), (long)long2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      ArrayUtils.shift(doubleArray0, (-2855), (int) (byte)39, (int) (byte)39);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2130);
      shortArray0[1] = (short) (-2130);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)39;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)39;
      shortArray0[6] = (short) (-2130);
      shortArray0[7] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(16, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-2130), (short) (-2130), (short)0, (short)39, (short)0, (short)39, (short) (-2130), (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1874);
      intArray0[1] = (-3278);
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = (-197);
      intArray0[5] = 1;
      intArray0[6] = 2;
      int int0 = new Integer((-197));
      assertEquals((-197), int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-2079);
      doubleArray0[3] = (double) (-1874);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-1874);
      doubleArray0[6] = (double) (-197);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-197));
      assertFalse(int1 == int0);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, int1);
      assertArrayEquals(new double[] {2.0, 2.0, (-2079.0), (-1874.0), 1.0, (-1874.0), (-197.0)}, doubleArray0, 0.01);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift(intArray0, 1, (-2011), 128);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1874), (-3278), 0, 2, (-197), 1, 2}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2;
      floatArray0[2] = 229.9F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, Integer.MAX_VALUE);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 2.0F, 229.9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 2.0F, 229.9F}, floatArray1, 0.01F);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) Integer.MAX_VALUE;
      doubleArray1[1] = (double) (-3278);
      doubleArray1[2] = (double) (-197);
      int int2 = ArrayUtils.indexOf(doubleArray1, (double) 2, (-2079), (double) (-1874));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(3, doubleArray1.length);
      assertEquals((-1), int2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.147483647E9, (-3278.0), (-197.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      int[] intArray2 = ArrayUtils.addFirst(intArray1, 2135);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(2, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {2135, 0}, intArray2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2135;
      doubleArray0[1] = 973.34041;
      doubleArray0[2] = (double) 2135;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2135.0, 2135);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {2135.0, 973.34041, 2135.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (-1384));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (short)0);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1384);
      intArray0[1] = 2451;
      intArray0[2] = (int) (short)0;
      ArrayUtils.swap(intArray0, 117, (int) (short)0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1384), 2451, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-53);
      byteArray0[2] = (byte) (-53);
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)0, (byte) (-53)}, byteArray0);
      
      short[] shortArray0 = new short[17];
      shortArray0[1] = (short) (byte)99;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)99;
      shortArray0[5] = (short) (byte)99;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(17, shortArray0.length);
      assertEquals(17, shortArray1.length);
      
      ArrayUtils.swap((int[]) null, (int) (short)0, (int) (short)99);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-53);
      longArray0[1] = 208L;
      longArray0[2] = (long) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)99;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {99.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {99.0F}, floatArray1, 0.01F);
      
      Random.setNextRandom((byte) (-53));
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-53);
      ArrayUtils.shift(byteArray0, 76);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-53), (byte)99}, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1902;
      shortArray0[1] = (short) (byte)99;
      shortArray0[2] = (short) (byte) (-53);
      shortArray0[3] = (short) (byte)99;
      shortArray0[4] = (short) (byte)99;
      shortArray0[5] = (short) (byte)99;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)1902, (short)99, (short) (-53), (short)99, (short)99, (short)99}, shortArray0);
      
      ArrayUtils.swap((int[]) null, (int) (short)1902, (int) (short)99);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-53);
      longArray0[1] = 208L;
      longArray0[2] = (long) (short)99;
      longArray0[3] = (long) (byte) (-53);
      longArray0[4] = (long) (short)99;
      longArray0[5] = (long) (byte)99;
      longArray0[6] = 3045L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (int) (short)99, (-1333L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 1033, 2136582715, (-1));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1801);
      shortArray0[1] = (short) (-1801);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-209);
      shortArray0[4] = (short) (-1666);
      shortArray0[5] = (short) (-1666);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-4288), 33);
      assertEquals(6, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-1801), (short) (-1801), (short)1, (short) (-209), (short) (-1666), (short) (-1666)}, shortArray0);
      
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-96L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-96L), (long)long2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1316;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1316}, shortArray0);
      assertArrayEquals(new short[] {(short)1316, (short)1316}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 0, (int) ';');
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      Random.setNextRandom((-1046));
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)1316;
      floatArray0[1] = (float) 'r';
      floatArray0[2] = (float) (-1046);
      floatArray0[3] = (float) ';';
      floatArray0[4] = (float) (short)1316;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1316.0F, 1316.0F, 59.0F, (-1046.0F), 114.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 1853L);
      assertNotNull(bitSet0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {1316.0F, 1316.0F, 59.0F, (-1046.0F), 114.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-6));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      objectArray0[5] = (Object) byte0;
      objectArray0[6] = (Object) byte0;
      ArrayUtils.shift(objectArray0, (-4288), (int) (byte)0, (-2397));
      assertEquals(7, objectArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (-2397), 207);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-2347);
      ArrayUtils.reverse(intArray0, (-2144249462), (-2144249462));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-2347), 0, 0}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '8';
      longArray0[1] = (long) '8';
      longArray0[2] = (long) (-956);
      longArray0[3] = (long) '8';
      longArray0[4] = (long) (-956);
      longArray0[5] = (long) (-956);
      longArray0[6] = (long) (-956);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1755L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {56L, 56L, (-956L), 56L, (-956L), (-956L), (-956L)}, longArray0);
      assertArrayEquals(new long[] {(-1755L), 56L, 56L, (-956L), 56L, (-956L), (-956L), (-956L)}, longArray1);
      
      ArrayUtils.swap(longArray1, (-1406), (-2144249462));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {56L, 56L, (-956L), 56L, (-956L), (-956L), (-956L)}, longArray0);
      assertArrayEquals(new long[] {(-1755L), 56L, 56L, (-956L), 56L, (-956L), (-956L), (-956L)}, longArray1);
      
      long[] longArray2 = ArrayUtils.removeAllOccurences(longArray0, (-956L));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(7, longArray0.length);
      assertEquals(3, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {56L, 56L, (-956L), 56L, (-956L), (-956L), (-956L)}, longArray0);
      assertArrayEquals(new long[] {56L, 56L, 56L}, longArray2);
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.swap(booleanArray0, (-3137), 2, (-707));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-1620));
      assertNotNull(bitSet0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      ArrayUtils.swap(booleanArray1, 0, (int) (byte) (-1), (int) (byte) (-1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '.');
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new char[] {'.'}, charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) '.';
      objectArray0[1] = object0;
      objectArray0[3] = (Object) bitSet0;
      objectArray0[4] = (Object) bitSet0;
      BitSet bitSet1 = (BitSet)bitSet0.clone();
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(1, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      
      objectArray0[6] = (Object) '.';
      objectArray0[7] = (Object) '.';
      Integer integer0 = new Integer(103);
      assertNotNull(integer0);
      assertEquals(103, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0);
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '.');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'.'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 3293L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 4830L);
      assertNotNull(bitSet0);
      assertEquals(3, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {(-1L), 3293L, 0L}, longArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 4830L;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 842.12787F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), 0.0F, 4830.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), 0.0F, 4830.0F, 0.0F}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[1];
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'O');
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 842.12787F;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 4787.928935;
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) (-1.0F);
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 'O';
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{7}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new double[] {842.1278686523438, (-1.0), 2.0, 4787.928935, (-1.0), (-1.0), (-1.0), 0.0, 79.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      long[] longArray0 = new long[5];
      Integer[] integerArray0 = new Integer[1];
      MutableInt mutableInt0 = new MutableInt(0L);
      assertNotNull(mutableInt0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.getValue());
      
      Integer integer0 = mutableInt0.getValue();
      assertNotNull(integer0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-170);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1530;
      doubleArray0[1] = (-3278.0);
      doubleArray0[2] = (double) 1033;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1033.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1033.0, 1530.0, (-3278.0), 1033.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1033.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1033.0, 1530.0, (-3278.0), 1033.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, 33, (int) (short)1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1530.0, (-3278.0), 1033.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1801), 2146336255);
      assertEquals(6, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1, (short) (-1666), (short) (-170), (short)0, (short)0, (short)0}, shortArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1530;
      longArray0[1] = (long) 2146336255;
      longArray0[2] = (long) (short)1;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 2146336255;
      longArray0[5] = (-179L);
      ArrayUtils.reverse(longArray0, 12, 3143);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {1530L, 2146336255L, 1L, (-1L), 2146336255L, (-179L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      Byte byte0 = new Byte((byte)100);
      assertNotNull(byte0);
      assertEquals((byte)100, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)100);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)100, (byte)100}, byteArray1);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (-1416.84F));
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = Character.valueOf('\'');
      assertNotNull(character0);
      assertEquals('\'', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('u');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('u', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('6');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('6', (char)character2);
      
      characterArray0[2] = character2;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(3, characterArray1.length);
      assertEquals(3, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      ArrayUtils.swap((Object[]) null, 15, 15, 1);
      Integer[] integerArray2 = ArrayUtils.nullToEmpty(integerArray1);
      assertNotNull(integerArray2);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertEquals(1, integerArray2.length);
      assertSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertSame(integerArray2, integerArray1);
      assertSame(integerArray2, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1718L;
      longArray0[1] = (-1L);
      longArray0[2] = (-4113L);
      longArray0[3] = (-285L);
      longArray0[5] = 0L;
      longArray0[6] = 1940L;
      ArrayUtils.shift(longArray0, 0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1718L, (-1L), (-4113L), (-285L), 0L, 0L, 1940L}, longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 1940L;
      floatArray0[2] = (float) (-1L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1718L, (-1L), (-4113L), (-285L), 0L, 0L, 1940L}, longArray0);
      assertArrayEquals(new long[] {1718L, (-1L), (-4113L), (-285L), 1940L}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1775.3F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 1940.0F, (-1.0F)}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 0.0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {1718L, (-1L), (-4113L), (-285L), 0L, 0L, 1940L}, longArray0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 1940.0F, (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1940.0F, (-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.reverse((double[]) null, (-625), 9);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(102);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(102, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(102);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals(102, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1380));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertNotNull(integer2);
      assertEquals((-1380), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(102);
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(102, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals((-1), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      short[] shortArray0 = ArrayUtils.insert(0, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertTrue(boolean0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      short[] shortArray1 = ArrayUtils.insert((-234), (short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray((short[]) null, 0, 2019);
      assertNull(shortArray2);
      
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = '^';
      charArray0[2] = '9';
      charArray0[3] = 'k';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'y', '^', '9', 'k'}, charArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1212);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1212, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-945));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-945), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger((String) null);
      assertNull(integer3);
      
      integerArray0[3] = null;
      ArrayUtils.reverse((byte[]) null, 8, (int) integerArray0[2]);
      assertEquals(7, integerArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-354);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, 101);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(8, shortArray1, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, 120);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-564L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-564L), (long)long2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)36;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-711);
      shortArray0[1] = (short) (byte)39;
      shortArray0[2] = (short)114;
      shortArray0[3] = (short) (byte) (-116);
      shortArray0[5] = (short) (byte)36;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (byte)0, 0);
      assertFalse(int1 == int0);
      assertEquals(6, shortArray0.length);
      assertEquals(4, int1);
      assertArrayEquals(new short[] {(short) (-711), (short)39, (short)114, (short) (-116), (short)0, (short)36}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      ArrayUtils.swap(doubleArray0, (int) (short) (-711), (int) (short) (-116), 2146229276);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2146229276;
      longArray0[1] = (long) (short)36;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 4;
      longArray0[4] = (long) (short) (-116);
      longArray0[5] = (long) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (int) (short)36);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      long[] longArray0 = new long[18];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(18, longArray0.length);
      assertEquals(17, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-96L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-96L), (long)long2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1316;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1316}, shortArray0);
      assertArrayEquals(new short[] {(short)1316, (short)1316}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 0, (int) ';');
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      Random.setNextRandom((-1046));
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)1316;
      floatArray0[1] = (float) 'r';
      floatArray0[2] = (float) (-1046);
      floatArray0[3] = (float) ';';
      floatArray0[4] = (float) (short)1316;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1316.0F, 1316.0F, 59.0F, (-1046.0F), 114.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1046);
      longArray0[1] = (long) ';';
      longArray0[2] = (long) 0;
      longArray0[3] = (long) ';';
      longArray0[4] = 2675L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-1046L), 59L, 0L, 59L, 2675L}, longArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-96L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-96L), (long)long2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1316;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1316}, shortArray0);
      assertArrayEquals(new short[] {(short)1316, (short)1316}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.reverse(booleanArray0, 0, (int) ';');
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Random.setNextRandom((-1046));
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)1316;
      floatArray0[1] = (float) 'r';
      floatArray0[2] = (float) (-1046);
      floatArray0[3] = (float) ';';
      floatArray0[4] = (float) (short)1316;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) ';';
      longArray0[2] = (long) 0;
      longArray0[3] = (long) ';';
      longArray0[4] = 2675L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {59L, 0L, 0L, 59L, 2675L}, longArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 991.2011F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-478);
      intArray0[1] = 1;
      intArray0[2] = 2241;
      intArray0[3] = (-1970);
      intArray0[4] = 53;
      intArray0[5] = (-1216);
      intArray0[6] = 1189;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-478), 1, 2241, (-1970), 53, (-1216), 1189}, intArray0);
      
      ArrayUtils.reverse(floatArray1, 1, 1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1216);
      doubleArray0[1] = (-502.2384174070886);
      doubleArray0[2] = (double) (-1970);
      doubleArray0[3] = (double) 2241;
      doubleArray0[4] = (double) 53;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2241.0, (-1970.0), (-502.2384174070886), (-1216.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 863, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 863, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 50, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-2942.845F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-1));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)57;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)57;
      objectArray0[1] = (Object) (byte)57;
      objectArray0[4] = (Object) (byte)5;
      objectArray0[5] = (Object) (byte)57;
      ArrayUtils.shift(objectArray0, (-249), (int) (byte)5, 114);
      assertEquals(6, objectArray0.length);
      
      byteArray0[2] = (byte) (-70);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-70));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)57, (byte) (-70)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)5, (byte)57, (byte) (-70)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-6));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      objectArray0[5] = (Object) byte0;
      objectArray0[6] = (Object) byte0;
      ArrayUtils.shift(objectArray0, (-4288), 1104, (-2397));
      assertEquals(7, objectArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, 2773, 207);
      assertNull(integerArray0);
      
      boolean boolean1 = ArrayUtils.contains((float[]) null, 0.0F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      int int0 = 1033;
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      short short0 = (short) (-170);
      shortArray0[2] = (short) (-170);
      shortArray0[3] = (short) (-1);
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = 'a';
      charArray0[2] = 'i';
      charArray0[3] = '6';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 3281L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {3281L, 0L, 0L, 0L}, longArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {3281L, 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 35.99314179645;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(12, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = 698L;
      longArray0[1] = (long) (byte)112;
      ArrayUtils.shuffle(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {112L, 698L}, longArray0);
      
      ArrayUtils.shuffle(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(12, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {112L, 698L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 'Z';
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 90.0F);
      assertFalse(int1 == int0);
      assertEquals(7, floatArray0.length);
      assertEquals(1, int1);
      assertArrayEquals(new float[] {0.0F, 90.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(9, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(1120);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(1120, (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Integer integer2 = ArrayUtils.get(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, 1120);
      assertNull(integer2);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray2);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertTrue(boolean1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      long[] longArray0 = new long[3];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ArrayUtils.shift(objectArray0, (-249), (int) (byte)57, (-249));
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-270));
      assertNotNull(integer0);
      assertEquals((-270), (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-270)}, intArray0);
      
      ArrayUtils.reverse((long[]) null);
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Integer[] integerArray2 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertEquals(0, integerArray2.length);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      
      MockRandom mockRandom0 = new MockRandom((-270));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) integerArray0, (java.util.Random) mockRandom0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertEquals(1, integerArray0.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1193.5F);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-1193.5F);
      objectArray0[1] = (Object) (-1193.5F);
      objectArray0[2] = (Object) (-1193.5F);
      objectArray0[3] = (Object) (-1193.5F);
      Object object0 = ArrayUtils.get(objectArray0, 121);
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[4] = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(objectArray0, (java.util.Random) mockRandom0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = (double) (short) (-1);
      doubleArray0[7] = (double) (short) (-1);
      doubleArray0[8] = (double) (short) (-1);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, (int) (short) (-1), 2485);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray2, 0.01);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (short) (-181), (int) (short) (-181), 2485);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      int int0 = ArrayUtils.indexOf(charArray0, '4');
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'@'}, charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) 2485;
      longArray0[2] = (long) (short) (-181);
      longArray0[3] = (long) (short) (-181);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) '@';
      longArray0[6] = (long) '@';
      boolean boolean2 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(7, longArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new long[] {(-1L), 2485L, (-181L), (-181L), (-1L), 64L, 64L}, longArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) (-1L);
      objectArray0[3] = (Object) (-1.0);
      objectArray0[4] = (Object) 2485L;
      objectArray0[5] = (Object) (-1.0);
      objectArray0[6] = (Object) 2485L;
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(objectArray0, (java.util.Random) mockRandom0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)59);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte)59}, byteArray0);
      assertArrayEquals(new byte[] {(byte)59}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-415);
      ArrayUtils.shift(doubleArray0, 1569, (-2266), (-2823));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-415.0)}, doubleArray0, 0.01);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)49;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte)2, (byte)2, (byte)49}, byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte)2, (byte)2, (byte)49}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1470;
      shortArray0[1] = (short)841;
      shortArray0[2] = (short) (-1238);
      shortArray0[3] = (short)6472;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short)1470);
      assertEquals(5, shortArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new short[] {(short)1470, (short)841, (short) (-1238), (short)6472, (short)0}, shortArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(2);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[1] = integer0;
      Integer integer1 = Integer.getInteger("");
      assertNull(integer1);
      
      integerArray0[2] = null;
      Integer[] integerArray1 = new Integer[6];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[1] = integer0;
      Integer integer2 = new Integer((short)1470);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1470, (int)integer2);
      
      integerArray1[4] = integer2;
      Integer[] integerArray2 = ArrayUtils.insert((int) 2, integerArray0, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertEquals(3, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertEquals(9, integerArray2.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)49;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-63), (byte)79, (byte) (-86), (byte)2, (byte)32, (byte)49}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte)79, (byte) (-86), (byte)2, (byte)32, (byte)49}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)743;
      shortArray0[1] = (short) (-2274);
      shortArray0[2] = (short) (-394);
      shortArray0[3] = (short) (-6);
      shortArray0[4] = (short)1796;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)743, (short) (-2274), (short) (-394), (short) (-6), (short)1796}, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)57;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-25));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte) (-25), (byte)100, (byte)57}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)8, (byte)8, (byte) (-25), (byte)100, (byte)57}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-6);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)1, (byte)112, (byte)112, (byte) (-6), (byte)112, (byte) (-6)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)112, (byte)112, (byte) (-6), (byte)112, (byte) (-6)}, byteArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = 'X';
      charArray0[2] = 'B';
      charArray0[3] = 'w';
      charArray0[4] = 'X';
      charArray0[5] = 's';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'S', 'X', 'B', 'w', 'X', 's'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-1007), floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-2583L), (-927));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(bitSet0);
      assertEquals(5, longArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray1, (long) (-927));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(0, longArray1.length);
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(longArray1, longArray0);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short)457;
      shortArray0[6] = (short) (-634);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)0, (short) (-1), (short) (-1), (short)457, (short) (-634)}, shortArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((int) (short)457, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)457;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = 1L;
      longArray0[4] = (long) (short) (-1);
      longArray0[5] = (long) (short) (-634);
      longArray0[6] = (long) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1730L), (int) (byte) (-1));
      assertNotNull(bitSet0);
      assertEquals(7, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new long[] {0L, 457L, 0L, 1L, (-1L), (-634L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      ArrayUtils.swap(booleanArray1, 2, (-3197), (-3197));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ArrayUtils.reverse(byteArray0, 1211, (int) (byte)0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Byte[] byteArray1 = new Byte[6];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)0;
      byteArray1[2] = (Byte) (byte)0;
      byteArray1[3] = (Byte) (byte)0;
      byteArray1[4] = (Byte) (byte)0;
      byteArray1[5] = (Byte) (byte)0;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      
      ArrayUtils.swap((char[]) null, 2144939621, 1211);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 97, (-1384), (int) byte0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      
      ArrayUtils.reverse((int[]) null, (-1523), 1231);
      long[] longArray0 = new long[2];
      longArray0[1] = (-2244L);
      longArray0[1] = (long) 'a';
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (-1523));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 97L}, longArray0);
      assertArrayEquals(new long[] {(-1523L), 0L, 97L}, longArray1);
      
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) (-1523);
      longArray2[1] = (long) 1231;
      longArray2[2] = (-2244L);
      long[] longArray3 = ArrayUtils.addAll(longArray1, longArray2);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotNull(longArray3);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      assertEquals(6, longArray3.length);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertArrayEquals(new long[] {0L, 97L}, longArray0);
      assertArrayEquals(new long[] {(-1523L), 0L, 97L}, longArray1);
      assertArrayEquals(new long[] {(-1523L), 1231L, (-2244L)}, longArray2);
      assertArrayEquals(new long[] {(-1523L), 0L, 97L, (-1523L), 1231L, (-2244L)}, longArray3);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = (double) (short) (-1);
      doubleArray0[7] = (double) (short) (-1);
      doubleArray0[8] = (double) (short) (-1);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(53);
      assertNotNull(integer0);
      assertEquals(53, (int)integer0);
      
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer integer2 = ArrayUtils.get(integerArray0, int0, (Integer) int0);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(5, integerArray0.length);
      assertEquals((-1), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-564L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-564L), (long)long2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)36;
      ArrayUtils.reverse(byteArray0, (int) (byte)39, 1472);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte) (-116), (byte)36}, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-711);
      shortArray0[1] = (short) (byte)39;
      shortArray0[2] = (short)114;
      shortArray0[3] = (short) (byte) (-116);
      shortArray0[4] = (short) (byte)39;
      shortArray0[5] = (short) (byte)36;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (byte)0, 0);
      assertFalse(int1 == int0);
      assertEquals(6, shortArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short) (-711), (short)39, (short)114, (short) (-116), (short)39, (short)36}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      ArrayUtils.swap(doubleArray0, (int) (short) (-711), (int) (short) (-116), 2146229276);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte) (-116);
      floatArray0[1] = (float) 'r';
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 'r';
      floatArray0[4] = (float) (byte)36;
      floatArray0[5] = (float) (byte)36;
      floatArray0[6] = (float) 'r';
      floatArray0[7] = (float) (byte)0;
      floatArray0[8] = (float) (byte)39;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-116.0F), 114.0F, (-1.0F), 114.0F, 36.0F, 36.0F, 114.0F, 0.0F, 39.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-116.0F), 114.0F, (-1.0F), 114.0F, 36.0F, 36.0F, 114.0F, 0.0F, 39.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      ArrayUtils.swap((double[]) null, (-219), (-219), 216);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)42;
      shortArray0[1] = (short) (byte)42;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)42, (short)42}, shortArray0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)42);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)42}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'i');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-720.0F);
      floatArray0[1] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 6);
      assertEquals(2, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-720.0F), 1.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[2] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[4] = (long) 6;
      longArray0[5] = (long) 6;
      longArray0[6] = (long) 1;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-663L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 0L, 6L, 6L, 1L}, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 0L, 6L, 6L, 1L}, longArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1449;
      short short0 = (short)2;
      shortArray0[1] = (short)2;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1449, (short)2}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 6L;
      doubleArray0[1] = (double) 6L;
      ArrayUtils.shift(doubleArray0, (-2397), 0, (int) (short)2);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {6.0, 6.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)1449;
      short[] shortArray3 = ArrayUtils.addAll(shortArray0, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertNotNull(shortArray3);
      assertEquals(1, shortArray2.length);
      assertEquals(3, shortArray3.length);
      assertEquals(2, shortArray0.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray3);
      assertArrayEquals(new short[] {(short)1449}, shortArray2);
      assertArrayEquals(new short[] {(short)1449, (short)2, (short)1449}, shortArray3);
      assertArrayEquals(new short[] {(short)1449, (short)2}, shortArray0);
      
      ArrayUtils.reverse((Object[]) shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray3));
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray3);
      assertArrayEquals(new short[] {(short)1449, (short)2}, shortArray0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-720.0F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-720.0F), 1.0F, (-720.0F), 1.0F}, floatArray1, 0.01F);
      
      int int1 = ArrayUtils.indexOf((char[]) null, '`', 932);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((short)1449);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1449, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short)2);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2971);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2971, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(94);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(94, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((short)1449);
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(1449, (int)integer4);
      
      integerArray0[4] = integer4;
      int int2 = 2;
      Integer integer5 = Integer.valueOf(2);
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(2, (int)integer5);
      
      integerArray0[5] = integer5;
      try { 
        Integer.valueOf("P");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"P\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.insert((int) (short)0, (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = 'a';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(14, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'9', 'a', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true, true, false, true}, booleanArray1));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-12);
      ArrayUtils.shift(byteArray0, 3, 3, (int) (byte)89);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-98), (byte)89, (byte) (-12)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1653;
      shortArray0[1] = (short)2;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)1653, (short)2}, shortArray0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      ArrayUtils.shift((byte[]) null, (-2144249484), (-826), (int) (short)1653);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)964;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)964}, shortArray0);
      assertArrayEquals(new short[] {(short)964}, shortArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)964;
      doubleArray0[1] = (double) (short)964;
      doubleArray0[2] = (double) (short)964;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {964.0, 964.0, 964.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {964.0, 964.0, 964.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)964}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 269.0, 269.0);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) '~';
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) '~';
      doubleArray0[5] = (double) '~';
      doubleArray0[6] = (double) 'b';
      doubleArray0[7] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 2145154490);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 126.0, (-1.0), (-1.0), 126.0, 126.0, 98.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 126.0, (-1.0), (-1.0), 126.0, 126.0, 98.0, (-1.0)}, doubleArray1, 0.01);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), (-775));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = (double) (short) (-1);
      doubleArray0[7] = (double) (short) (-1);
      doubleArray0[8] = (double) (short) (-1);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, (int) (short) (-1), 2485);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray2, 0.01);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-181), 50);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 6445, (int) (byte) (-70));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      float[] floatArray0 = new float[33];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 943.31366F);
      assertNotNull(bitSet0);
      assertEquals(33, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 3293L;
      longArray0[2] = 4830L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 4830L);
      assertNotNull(bitSet0);
      assertEquals(3, longArray0.length);
      assertEquals(3, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{2}", bitSet0.toString());
      assertArrayEquals(new long[] {(-1L), 3293L, 4830L}, longArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) 4830L;
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) 4830L;
      floatArray0[4] = (float) 4830L;
      floatArray0[5] = (float) (-1L);
      float float0 = 842.12787F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 842.12787F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 4830.0F, (-1.0F), 4830.0F, 4830.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 4830.0F, (-1.0F), 4830.0F, 4830.0F, (-1.0F)}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) (short) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      charArray0[2] = 'K';
      charArray0[3] = '\"';
      charArray0[4] = '4';
      charArray0[5] = 'L';
      charArray0[6] = '`';
      charArray0[7] = '2';
      boolean boolean0 = ArrayUtils.contains(charArray0, '4');
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'r', ';', 'K', '\"', '4', 'L', '`', '2'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-136.334958));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-136.33496F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) floatArray0[1]);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(3, floatArray0.length);
      assertEquals((-136.33496F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 0, '`');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'r', ';', 'K', '\"', '4', 'L', '`', '2'}, charArray0);
      assertArrayEquals(new char[] {'`', 'r', ';', 'K', '\"', '4', 'L', '`', '2'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      ArrayUtils.shift((Object[]) doubleArray0, (-2645), (-2645), (-2645));
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ArrayUtils.shift(objectArray0, (int) (byte)36, (int) (byte)36, (int) (byte)36);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)44);
      assertNull(byteArray0);
      
      ArrayUtils.shift((Object[]) integerArray0, (-2397), 594, (-2258));
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.subarray((Integer[]) null, 2143980407, 2143980407);
      assertNull(integerArray1);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) 1104);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      Float float0 = new Float((-1325.63803352));
      assertNotNull(float0);
      assertEquals((-1325.6381F), (float)float0, 0.01F);
      
      Float float1 = new Float(569.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(569.0F, (float)float1, 0.01F);
      
      Float float2 = new Float(1.0);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      Float float3 = new Float(1.0F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals(1.0F, (float)float3, 0.01F);
      
      Float float4 = new Float((double) 569.0F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      assertEquals(569.0F, (float)float4, 0.01F);
      
      Integer integer0 = new Integer(2146596990);
      assertNotNull(integer0);
      assertEquals(2146596990, (int)integer0);
      
      Integer integer1 = new Integer(2146340530);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2146340530, (int)integer1);
      
      Integer integer2 = new Integer(2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      Integer integer3 = new Integer(925);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(925, (int)integer3);
      
      Integer integer4 = new Integer((-1071));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals((-1071), (int)integer4);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer4;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integerArray0[0]);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = '~';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'j', (-1111));
      assertNotNull(bitSet0);
      assertEquals(2, charArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'~', '~'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      int int0 = (-661);
      Integer integer0 = new Integer((-661));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-661), (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      int[] intArray0 = new int[2];
      float[] floatArray0 = new float[3];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1666);
      Float float0 = new Float((double) (short)1);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(2963.071F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2963.071F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float1;
      Float float2 = new Float((-2325.19F));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals((-2325.19F), (float)float2, 0.01F);
      
      floatArray0[1] = float2;
      floatArray0[2] = float0;
      floatArray0[3] = float1;
      floatArray0[4] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-1666);
      intArray0[1] = 1033;
      intArray0[2] = 1530;
      intArray0[3] = (int) (short) (-1666);
      intArray0[4] = (int) (short) (-1666);
      intArray0[5] = 1530;
      intArray0[6] = 1033;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1530, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-170);
      Byte byte0 = new Byte((byte) (-95));
      assertNotNull(byte0);
      assertEquals((byte) (-95), (byte)byte0);
      
      byte byte1 = (byte)108;
      Byte byte2 = new Byte((byte)108);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)108, (byte)byte2);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-95), (byte)108}, byteArray1);
      
      int int0 = ArrayUtils.indexOf((float[]) null, 1288.45F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-2942.845F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-564L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-564L), (long)long2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)36;
      ArrayUtils.reverse(byteArray0, (int) (byte)39, 1472);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte) (-116), (byte)36}, byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)4963;
      shortArray0[1] = (short) (byte)39;
      shortArray0[2] = (short) (byte)39;
      shortArray0[3] = (short) (byte) (-116);
      shortArray0[4] = (short) (byte)36;
      shortArray0[5] = (short) (byte) (-116);
      shortArray0[6] = (short) (byte)0;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (byte)11, (int) (short)36);
      assertFalse(int1 == int0);
      assertEquals(7, shortArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)4963, (short)39, (short)39, (short) (-116), (short)36, (short) (-116), (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)17;
      ArrayUtils.shift(byteArray0, 3738);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-93), (byte)17, (byte)0, (byte)0, (byte)99, (byte)99, (byte)0, (byte)48}, byteArray0);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-646);
      intArray0[1] = (int) (byte)99;
      intArray0[2] = (int) (byte) (-93);
      intArray0[3] = (-1);
      intArray0[4] = 128;
      intArray0[5] = (int) (byte)17;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte) (-93);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 128, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)11;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)11, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)11;
      doubleArray0[2] = (double) (short)11;
      doubleArray0[3] = (double) (short)11;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)11;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) (short)0;
      doubleArray0[8] = (double) (short)11;
      ArrayUtils.shift(doubleArray0, 0, 801, (int) (short)11);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 11.0, 0.0, 11.0, 11.0, 11.0, 0.0, 11.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(7, shortArray0.length);
      assertEquals(14, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)11, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      ArrayUtils.reverse((Object[]) shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)11, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 3271L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 728, 728);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {3271L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-711), (int) (short)0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[3] = (double) 3271L;
      ArrayUtils.swap(doubleArray0, Integer.MAX_VALUE, 4, 1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 3271.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayUtils.swap(doubleArray0, (-45), (-45), (-45));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = '9';
      charArray0[3] = 'k';
      Long long0 = new Long(27L);
      assertNotNull(long0);
      assertEquals(27L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long(1853L);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1853L, (long)long2);
      
      Long long3 = new Long(2249L);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(2249L, (long)long3);
      
      Long long4 = new Long(2249L);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals(2249L, (long)long4);
      
      Long[] longArray0 = new Long[8];
      longArray0[0] = long4;
      longArray0[1] = long3;
      longArray0[2] = long0;
      longArray0[3] = long3;
      longArray0[4] = long0;
      Long long5 = new Long(2249L);
      assertFalse(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long3));
      assertNotNull(long5);
      assertEquals(2249L, (long)long5);
      
      longArray0[5] = long5;
      longArray0[6] = long2;
      longArray0[7] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {2249L, 2249L, 27L, 2249L, 27L, 2249L, 1853L, 2249L}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (long) longArray0[6]);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertEquals(6, int0);
      assertArrayEquals(new long[] {2249L, 2249L, 27L, 2249L, 27L, 2249L, 1853L, 2249L}, longArray1);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-1376), (short)52);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1376, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      long[] longArray0 = new long[4];
      longArray0[1] = 1L;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 115;
      int int0 = ArrayUtils.indexOf(longArray0, 115L, (-1));
      assertEquals(4, longArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new long[] {0L, 1L, (-1L), 115L}, longArray0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, 115L, 1);
      assertFalse(int1 == int0);
      assertEquals(4, longArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {0L, 1L, (-1L), 115L}, longArray0);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "A4m{[");
      assertNotNull(stringArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 1;
      intArray0[3] = 115;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1), (-1), 1, 115}, intArray1);
      assertArrayEquals(new int[] {(-1), (-1), 1, 115}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      float[] floatArray0 = new float[13];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(13, floatArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      int int0 = ArrayUtils.indexOf(longArray0, (long) (short)1046, (int) (short)1046);
      assertEquals(4, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (short)1046, 880);
      assertTrue(int1 == int0);
      assertEquals(4, longArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 2387L);
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) (-770));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      long[] longArray0 = new long[7];
      int int0 = ArrayUtils.indexOf(longArray0, 0L, (int) (byte)100);
      assertEquals(7, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)100, (-1));
      assertTrue(int1 == int0);
      assertEquals(7, longArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-170);
      byte byte0 = (byte)11;
      Byte byte1 = new Byte((byte)11);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)11, (byte)byte1);
      
      byte byte2 = (byte)92;
      Byte byte3 = new Byte((byte)92);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte)92, (byte)byte3);
      
      Byte[] byteArray0 = new Byte[9];
      byteArray0[0] = byte3;
      byteArray0[1] = byte3;
      byteArray0[2] = byte3;
      byteArray0[3] = byte1;
      byteArray0[4] = byte3;
      byteArray0[5] = byte1;
      byteArray0[6] = byte3;
      byteArray0[7] = byte1;
      byteArray0[8] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertFalse(byte0 == byte2);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)11, (byte)92, (byte)11, (byte)92, (byte)11, (byte)11}, byteArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) byte2;
      floatArray0[1] = (float) byte2;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) byte0);
      assertFalse(byte0 == byte2);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {92.0F, 92.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) byte2;
      longArray0[2] = (long) (short)1;
      longArray0[3] = (long) (-1);
      longArray0[4] = 17L;
      longArray0[5] = (long) byte0;
      longArray0[6] = (long) (short) (-1666);
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-179L));
      assertTrue(int1 == int0);
      assertEquals(7, longArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {(-1L), 92L, 1L, (-1L), 17L, 11L, (-1666L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[6] = ';';
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, (int) (short)0, (-415), (int) (short)0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      long[] longArray2 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long(0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Long long2 = new Long(1853L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1853L, (long)long2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1316;
      shortArray0[1] = (short)1316;
      shortArray0[2] = (short)1316;
      shortArray0[3] = (short)1316;
      shortArray0[4] = (short)1316;
      shortArray0[5] = (short)1316;
      shortArray0[6] = (short)1316;
      shortArray0[7] = (short)1316;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(16, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1316, (short)1316, (short)1316, (short)1316, (short)1316, (short)1316, (short)1316, (short)1316}, shortArray0);
      
      Random.setNextRandom(97);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)100;
      ArrayUtils.reverse(byteArray0);
      assertEquals(11, byteArray0.length);
      
      float[] floatArray0 = new float[8];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-947.1646F));
      assertEquals(8, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '/';
      longArray0[1] = (long) 'E';
      longArray0[2] = (long) 'E';
      longArray0[3] = (long) '/';
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1758L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {47L, 69L, 69L, 47L}, longArray0);
      assertArrayEquals(new long[] {47L, 69L, 69L, 47L}, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1758L;
      floatArray0[1] = (float) 69L;
      floatArray0[2] = (float) (-663L);
      floatArray0[3] = (float) (-663L);
      floatArray0[4] = (float) '/';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 1758L);
      assertEquals(0, int0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1758.0F, 69.0F, (-663.0F), (-663.0F), 47.0F}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (-1.0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertEquals(4, longArray2.length);
      assertArrayEquals(new long[] {47L, 69L, 69L, 47L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {47L, 69L, 69L, 47L}, longArray0);
      
      Integer integer0 = new Integer(728);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(728, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean0);
      
      ArrayUtils.reverse((double[]) null, 728, (-1));
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {47L, 69L, 69L, 47L}, longArray0);
      
      long[] longArray3 = ArrayUtils.subarray(longArray0, 3073, 2146340530);
      assertEquals(0, longArray3.length);
      assertNotNull(longArray3);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {47L, 69L, 69L, 47L}, longArray0);
      assertArrayEquals(new long[] {}, longArray3);
      
      int int2 = ArrayUtils.indexOf(floatArray0, (float) (-663L), (-1));
      assertEquals(2, int2);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = (-663L);
      longArray0[1] = 0L;
      longArray0[2] = (-1730L);
      longArray0[3] = 9L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 3554, 3554);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-663L), 0L, (-1730L), 9L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.shift(doubleArray0, 1211, 652, (-1615));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = 'G';
      charArray0[2] = 'f';
      charArray0[3] = '8';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'-', 'G', 'f', '8'}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '!');
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'-', 'G', 'f', '8'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-663L);
      floatArray0[1] = (float) 3554;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-663.0F), 3554.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 35.99314179645;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 35.99314179645}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 35.99314179645, 0.0}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)112);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)112, (byte) (-86), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-86), (byte)0}, byteArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)112;
      floatArray0[1] = (float) (byte)112;
      floatArray0[2] = (float) (byte) (-86);
      floatArray0[3] = (float) (byte) (-6);
      floatArray0[4] = (float) (byte) (-86);
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte) (-6);
      floatArray0[7] = 1.0F;
      floatArray0[8] = (float) (byte) (-6);
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Integer integer1 = ArrayUtils.get((Integer[]) null, (int)  (-86), integer0);
      assertNotNull(integer1);
      assertEquals(5, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      Integer integer0 = ArrayUtils.get((Integer[]) null, 61);
      assertNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      Short short0 = new Short((short) (-1932));
      assertNotNull(short0);
      assertEquals((short) (-1932), (short)short0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-633), (-572));
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Integer integer0 = new Integer((-2295));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2295), (int)integer0);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '|');
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = '^';
      charArray0[2] = '9';
      charArray0[3] = 'k';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'y', '^', '9', 'k'}, charArray0);
      
      Integer[] integerArray0 = new Integer[7];
      int int0 = 101;
      Integer integer0 = new Integer(101);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1212);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1212, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-945));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-945), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger((String) null);
      assertNull(integer3);
      
      integerArray0[3] = null;
      Integer integer4 = new Integer((-945));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals((-945), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(6);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals(6, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(101, (int)integer6);
      
      integerArray0[6] = integer6;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) (int)integerArray0[1];
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) integerArray0[2]);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, floatArray0.length);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {101.0F, 1212.0F}, floatArray0, 0.01F);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((byte[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3147);
      shortArray0[1] = (short) (-3469);
      shortArray0[2] = (short)579;
      shortArray0[3] = (short)0;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3147), (-1801));
      assertFalse(int1 == int0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short) (-3147), (short) (-3469), (short)579, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (-1384));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-711);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (short) (-170);
      doubleArray0[3] = (double) (short)0;
      int[] intArray0 = new int[8];
      intArray0[0] = (-3686);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-1384);
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (-1384);
      intArray0[6] = (-1084);
      intArray0[7] = (-1209);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1084, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1530;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 35.99314179645;
      doubleArray0[3] = (double) 1530;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 462.83;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) 1530);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1530.0, 0.0, 35.99314179645, 1530.0, 0.0, 462.83}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1530.0, 0.0, 35.99314179645, 1530.0, 0.0, 462.83, 1530.0}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-6);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)121);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)112, (byte)0, (byte)0, (byte) (-86), (byte) (-6), (byte)112, (byte) (-6)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)112, (byte)0, (byte)0, (byte) (-86), (byte) (-6), (byte)112, (byte) (-6)}, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, (float) (byte) (-6));
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(7, byteArray0.length);
      assertTrue(boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)112, (byte)0, (byte)0, (byte) (-86), (byte) (-6), (byte)112, (byte) (-6)}, byteArray0);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte) (-6));
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-6.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 0.0, 1.0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-33);
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte) (-33)}, byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-33)}, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = '\u0084';
      charArray0[3] = '&';
      charArray0[4] = '[';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'z', (int) (byte) (-33));
      assertEquals(5, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'X', 'X', '\u0084', '&', '['}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom((byte) (-33));
      assertNotNull(mockRandom0);
      
      Integer integer0 = new Integer((byte) (-33));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-33), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals((-33), object0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 1.0);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) 'X';
      characterArray0[1] = (Character) 'X';
      characterArray0[2] = (Character) '&';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'X');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'X', 'X', '&'}, charArray1);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-33)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-33)}, byteArray2);
      
      ArrayUtils.shift((double[]) null, 1805);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 0.0, 1.0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-33);
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte) (-33)}, byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-33)}, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = '/';
      charArray0[2] = '{';
      charArray0[3] = '&';
      charArray0[4] = '[';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'z', (int) (byte) (-33));
      assertEquals(5, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'X', '/', '{', '&', '['}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom((byte) (-33));
      assertNotNull(mockRandom0);
      
      Integer integer0 = new Integer((byte) (-33));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-33), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals((-33), object0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 1.0);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) '/';
      characterArray0[1] = (Character) 'X';
      characterArray0[2] = (Character) '&';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'X');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'/', 'X', '&'}, charArray1);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-33)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-33)}, byteArray2);
      
      ArrayUtils.shift((double[]) null, 1805);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-1989));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      ArrayUtils.swap((float[]) null, (int) (byte)0, (-1));
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-742);
      intArray0[1] = (-3856);
      intArray0[2] = 0;
      intArray0[3] = 2828;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-742), (-3856), 0, 2828}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-742);
      doubleArray0[1] = (double) (-742);
      doubleArray0[2] = (double) (-742);
      doubleArray0[3] = (double) (-3856);
      doubleArray0[4] = (-1.0);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-742.0), (-742.0), (-742.0), (-3856.0), (-1.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2828;
      floatArray0[1] = (float) (-3856);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-742);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1668);
      shortArray0[1] = (short) (-1577);
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2436, (int) (short) (-1577));
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-1668), (short) (-1577), (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      short[] shortArray0 = new short[5];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2, 0);
      assertEquals(5, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(2369);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2369, (int)integer1);
      
      Integer integer2 = Integer.getInteger("");
      assertNull(integer2);
      
      Integer integer3 = new Integer((byte)0);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = null;
      integerArray0[1] = integer1;
      integerArray0[2] = integer3;
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.insert(1, integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-564L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-564L), (long)long2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)36;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-711);
      shortArray0[1] = (short) (byte)39;
      shortArray0[2] = (short)114;
      shortArray0[3] = (short) (byte) (-116);
      shortArray0[5] = (short) (byte)36;
      boolean boolean0 = ArrayUtils.isSameType(long0, (short) (-116));
      assertFalse(long0.equals((Object)long2));
      assertTrue(long0.equals((Object)long1));
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-711), (int) (byte)0);
      assertTrue(int1 == int0);
      assertEquals(6, shortArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new short[] {(short) (-711), (short)39, (short)114, (short) (-116), (short)0, (short)36}, shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)6;
      shortArray0[2] = (short)6;
      shortArray0[3] = (short)6;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)6, (int) (short)6);
      assertEquals(4, shortArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new short[] {(short)6, (short)6, (short)6, (short)6}, shortArray0);
      
      Integer integer0 = new Integer((short)6);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      Integer integer1 = new Integer((-508));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-508), (int)integer1);
      
      Integer integer2 = new Integer((-804));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-804), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)42;
      Integer integer0 = new Integer((-1403));
      assertNotNull(integer0);
      assertEquals((-1403), (int)integer0);
      
      Integer integer1 = new Integer((-2117));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2117), (int)integer1);
      
      Integer integer2 = new Integer(2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1403);
      floatArray0[1] = (float) 6;
      floatArray0[2] = (float) (byte) (-47);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-857.53F));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-1403.0F), 6.0F, (-47.0F)}, floatArray0, 0.01F);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {(byte)2, (byte)42, (byte)0, (byte)0}, byteArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)42;
      shortArray0[1] = (short) (byte)42;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3138), 3626);
      assertEquals(2, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)42, (short)42}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, (Integer) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      short[] shortArray0 = new short[1];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)6, (int) (short)2);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      Integer integer0 = new Integer(1387);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1387, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1470;
      shortArray0[1] = (short)841;
      shortArray0[2] = (short) (-1238);
      shortArray0[3] = (short)6472;
      shortArray0[4] = (short)2;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2, (int) (short)1470);
      assertEquals(5, shortArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new short[] {(short)1470, (short)841, (short) (-1238), (short)6472, (short)2}, shortArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("");
      assertNull(integer2);
      
      integerArray0[2] = null;
      Integer[] integerArray1 = new Integer[6];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      integerArray1[1] = integer1;
      integerArray1[2] = integer0;
      integerArray1[3] = integer0;
      Integer integer3 = new Integer((short)1470);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(1470, (int)integer3);
      
      integerArray1[4] = integer3;
      integerArray1[5] = integer0;
      Integer[] integerArray2 = ArrayUtils.insert((int) 2, integerArray0, integerArray1);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertEquals(9, integerArray2.length);
      assertEquals(3, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      int int0 = 1501;
      Integer integer0 = new Integer(1501);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1501, (int)integer0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1501);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = false;
      long[] longArray0 = new long[2];
      int int1 = bitSet0.previousClearBit(1501);
      assertTrue(int1 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1501, int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      longArray0[0] = (long) 1501;
      longArray0[1] = (long) 1501;
      BitSet bitSet1 = BitSet.valueOf(longArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(2, longArray0.length);
      assertEquals(16, bitSet1.cardinality());
      assertEquals(75, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(128, bitSet1.size());
      assertEquals("{0, 2, 3, 4, 6, 7, 8, 10, 64, 66, 67, 68, 70, 71, 72, 74}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {1501L, 1501L}, longArray0);
      
      bitSet0.set(1501, false);
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertEquals(0, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(bitSet0, bitSet1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2849.8154224;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1560.8931396845;
      int int0 = 4117;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 4117);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4117, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 128);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 128, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 32;
      ArrayUtils.shift(doubleArray0, (-1335), 32, 32);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {32.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayUtils.shift(doubleArray0, (-1319), 32, 32);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)801;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)801, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)801;
      doubleArray0[2] = (double) (short)801;
      doubleArray0[3] = (double) (short)801;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)801;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) (short)0;
      doubleArray0[8] = (double) (short)801;
      ArrayUtils.shift(doubleArray0, 0, 801, (int) (short)801);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 801.0, 801.0, 801.0, 0.0, 801.0, 0.0, 0.0, 801.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(7, shortArray0.length);
      assertEquals(14, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)801, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      ArrayUtils.reverse((Object[]) shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)801, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 85;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0, 598, 598);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 85.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.shift(doubleArray0, (-1815), 85, (-1815));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 2, 2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = '=';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'n', '='}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)12;
      ArrayUtils.reverse(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte)112}, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = '\u0087';
      charArray0[2] = '@';
      charArray0[3] = 'E';
      charArray0[4] = 'p';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {';', '\u0087', '@', 'E', 'p'}, charArray0);
      
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (-1384);
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) (-1384);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, (-1384.0F), 1.0F, (-1384.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-1384.0F);
      doubleArray0[4] = (-3344.061885844);
      doubleArray0[5] = (double) (-1384.0F);
      doubleArray0[6] = (double) (-1384.0F);
      doubleArray0[7] = (double) (-1384.0F);
      doubleArray0[8] = (double) 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray0.length);
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2, 8}", bitSet0.toString());
      assertEquals(9, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, (-1384.0), (-3344.061885844), (-1384.0), (-1384.0), (-1384.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 3485;
      longArray0[1] = 9L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 3485, (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {3485L, 9L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, false, Integer.MAX_VALUE);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3271L;
      doubleArray0[1] = 35.99314179645;
      doubleArray0[2] = (double) 728;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 35.99314179645;
      doubleArray0[5] = 35.99314179645;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-4872.660342));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3271.0, 35.99314179645, 728.0, 0.0, 35.99314179645, 35.99314179645, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3271.0, 35.99314179645, 728.0, 0.0, 35.99314179645, 35.99314179645, 0.0, (-4872.660342)}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-86));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-105);
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '9';
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      ArrayUtils.shift(byteArray0, (-24), (int) (byte) (-96), (-24));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-96), (byte) (-96)}, byteArray0);
      
      ArrayUtils.swap(shortArray0, (int) (byte) (-96), (int) (short) (-105), (int) (short) (-105));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short) (-105), (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)3944);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)3944}, shortArray1);
      
      ArrayUtils.swap(shortArray1, (-2157), (-2157), 102);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)3944}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 41, 2146799132);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      short[] shortArray0 = new short[3];
      ArrayUtils.shuffle(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1431655765), (-1431655765));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 1, 1, 1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = (-663L);
      longArray0[1] = 0L;
      longArray0[2] = (-1730L);
      longArray0[3] = (-1L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 3554, 3554);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-663L), 0L, (-1730L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.shift(doubleArray0, 1211, 652, (-1615));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2202, (-1615));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray2 = new short[3];
      shortArray2[0] = (short)3860;
      shortArray2[1] = (short)1087;
      shortArray2[2] = (short)74;
      ArrayUtils.swap(shortArray2, 0, (-1219));
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short)3860, (short)1087, (short)74}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1431655765), (-1431655765));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[3];
      longArray0[0] = (-694L);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-711);
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shift(doubleArray0, (int) (short) (-711), (int) (short) (-711), 1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short) (-711)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-711), (short) (-711)}, shortArray2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      ArrayUtils.shift(doubleArray0, (int) (short) (-711), 1, 1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray3 = ArrayUtils.addAll(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertNotNull(shortArray3);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertEquals(3, shortArray3.length);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertArrayEquals(new short[] {(short) (-711)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-711), (short) (-711)}, shortArray2);
      assertArrayEquals(new short[] {(short) (-711), (short) (-711), (short) (-711)}, shortArray3);
      
      ArrayUtils.swap(shortArray3, 2, (int) (short) (-711));
      assertFalse(shortArray0.equals((Object)shortArray3));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray3));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertEquals(3, shortArray3.length);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertArrayEquals(new short[] {(short) (-711)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-711), (short) (-711)}, shortArray2);
      assertArrayEquals(new short[] {(short) (-711), (short) (-711), (short) (-711)}, shortArray3);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1817.7);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray4 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray4.equals((Object)shortArray3));
      assertFalse(shortArray4.equals((Object)shortArray2));
      assertFalse(shortArray4.equals((Object)shortArray0));
      assertNotNull(shortArray4);
      assertEquals(0, shortArray4.length);
      assertNotSame(shortArray4, shortArray3);
      assertNotSame(shortArray4, shortArray2);
      assertNotSame(shortArray4, shortArray0);
      assertArrayEquals(new short[] {}, shortArray4);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1758L;
      longArray0[1] = 1758L;
      longArray0[2] = 1758L;
      longArray0[3] = 1758L;
      longArray0[4] = 1758L;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1940L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 1758L, 1758L, 1758L}, longArray0);
      assertArrayEquals(new long[] {1758L, 1758L, 1758L, 1758L, 1758L}, longArray1);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1531.51F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 5780.6419189);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {1758L, 1758L, 1758L, 1758L, 1758L}, longArray0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, false, 2142601671);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      short[] shortArray1 = ArrayUtils.insert(92, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3072, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3072, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)964;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)964}, shortArray0);
      assertArrayEquals(new short[] {(short)964}, shortArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)964;
      doubleArray0[1] = (double) (short)964;
      doubleArray0[2] = (double) (short)964;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {964.0, 964.0, 964.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {964.0, 964.0, 964.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray2 = ArrayUtils.insert((-1015), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray2);
      
      boolean[] booleanArray3 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray3);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-170);
      Integer integer0 = new Integer((short) (-1666));
      assertNotNull(integer0);
      assertEquals((-1666), (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      Integer integer1 = Integer.valueOf(1033);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1033, (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry4);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry3);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertNotNull(abstractMap_SimpleImmutableEntry7);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry8 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry6);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertTrue(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertNotNull(abstractMap_SimpleImmutableEntry8);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry9 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry9.equals((Object)abstractMap_SimpleImmutableEntry8));
      assertTrue(abstractMap_SimpleImmutableEntry9.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry9.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry9.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry9.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertFalse(abstractMap_SimpleImmutableEntry9.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry9.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry9);
      
      Long long0 = new Long((short)1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      Long long1 = new Long(1033);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1033L, (long)long1);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[1] = long1;
      longArray0[2] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {1L, 1033L, 1033L}, longArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1203, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1203, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[6] = ';';
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(7, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte) (-1);
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, (int) (byte)39);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      MockRandom mockRandom0 = new MockRandom((byte) (-1));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      mockRandom1.nextBytes(byteArray0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(5, byteArray0.length);
      assertNotSame(mockRandom1, mockRandom0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1}, byteArray0);
      
      mockRandom1.setSeed((-1L));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, (boolean[]) null);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[5] = false;
      boolean[] booleanArray1 = new boolean[10];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-564L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-564L), (long)long2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)36;
      ArrayUtils.reverse(byteArray0, (int) (byte)39, 1472);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte) (-116), (byte)36}, byteArray0);
      
      Byte byte0 = new Byte((byte)11);
      assertNotNull(byte0);
      assertEquals((byte)11, (byte)byte0);
      
      Byte[] byteArray1 = new Byte[3];
      byteArray1[0] = (Byte) (byte)39;
      Byte byte1 = new Byte((byte) (-13));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-13), (byte)byte1);
      
      byteArray1[1] = byte1;
      byteArray1[2] = (Byte) (byte)39;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)36);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-13), (byte)39}, byteArray2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1472;
      int int1 = ArrayUtils.indexOf(floatArray0, 1288.45F);
      assertFalse(int1 == int0);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {1472.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)76);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-962);
      intArray0[1] = 1381;
      intArray0[2] = 635;
      intArray0[3] = (-646);
      intArray0[4] = (-1);
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = 8;
      intArray0[7] = 1211;
      ArrayUtils.shuffle(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1381, 635, (-646), (-1), Integer.MAX_VALUE, 8, 1211, (-962)}, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1197;
      shortArray0[1] = (short)0;
      ArrayUtils.reverse(shortArray0, 8, 1211);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1197, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      ArrayUtils.reverse(byteArray0, 4, 4);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = (Byte) (byte)1;
      byte byte1 = (byte)9;
      Byte byte2 = new Byte((byte)9);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)9, (byte)byte2);
      
      byteArray1[1] = byte2;
      byteArray1[2] = (Byte) (byte)1;
      byteArray1[3] = (Byte) (byte)1;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)9, (byte)1, (byte)1}, byteArray2);
      
      byte[] byteArray3 = ArrayUtils.add(byteArray2, byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byte0 == byte1);
      assertNotNull(byteArray3);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertEquals(5, byteArray3.length);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)9, (byte)1, (byte)1}, byteArray2);
      assertArrayEquals(new byte[] {(byte)1, (byte)9, (byte)1, (byte)1, (byte)1}, byteArray3);
      
      int int0 = ArrayUtils.indexOf(intArray0, 3615);
      assertEquals(8, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {1381, 635, (-646), (-1), Integer.MAX_VALUE, 8, 1211, (-962)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, 128);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)4275);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0, 2621);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, (-1297), 1, 2);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2;
      intArray1[1] = 1;
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertEquals(2, intArray1.length);
      assertEquals(4, intArray2.length);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {2, 1}, intArray1);
      assertArrayEquals(new int[] {2, 1, 2, 1}, intArray2);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((short)0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      int int0 = (-1);
      Integer integer2 = new Integer((-1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      Integer integer3 = new Integer((-435));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-435), (int)integer3);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer4 = new Integer(772);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(772, (int)integer4);
      
      integerArray0[0] = integer4;
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer2);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer2.equals((Object)integer4));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer3));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(4, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.shift(booleanArray0, (int) (short)0, 772, int0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-170);
      Integer integer0 = new Integer((short) (-1666));
      assertNotNull(integer0);
      assertEquals((-1666), (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (-3278.0);
      doubleArray0[2] = (double) 1033;
      doubleArray0[3] = (double) (short) (-170);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0), 1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0), 1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 98, (-1128));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-3278.0), 1033.0, (-170.0), 1.0, (-3278.0), 1033.0, (-170.0)}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-170), 2146336255);
      assertEquals(6, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1, (short) (-1666), (short) (-170), (short)0, (short)0, (short)0}, shortArray0);
      
      long[] longArray0 = new long[1];
      int int1 = ArrayUtils.indexOf(longArray0, (long) 1530, (-6));
      assertTrue(int1 == int0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      long[] longArray0 = new long[0];
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-107);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-14);
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)0);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) (byte)0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (byte)0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) (byte) (-107));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) (byte) (-14));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      
      short[] shortArray0 = new short[0];
      boolean boolean2 = ArrayUtils.contains(shortArray0, (short) (-1291));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 3281L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {3281L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short)1;
      floatArray0[2] = (float) (short)1;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 84.0F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse((int[]) null, (-1), 2);
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) (byte) (-17));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-17L)}, longArray0);
      
      ArrayUtils.swap((long[]) null, (int) (short)1, 2);
      Integer[] integerArray1 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-1));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-5672));
      assertEquals(8, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[0] = long0;
      long long1 = 0L;
      Long long2 = new Long(0L);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      longArray0[1] = long2;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) long1;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) long1;
      doubleArray0[4] = (double) long1;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 1);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'p');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      float[] floatArray0 = new float[13];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(13, floatArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      Character[] characterArray0 = new Character[1];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '');
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {''}, charArray0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 677L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {''}, charArray0);
      assertArrayEquals(new char[] {'', ''}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = '^';
      charArray0[2] = '9';
      charArray0[3] = 'k';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'y', '^', '9', 'k'}, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '9';
      intArray0[1] = (int) '^';
      intArray0[2] = (int) 'y';
      intArray0[3] = (-2477);
      intArray0[4] = 101;
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {57, 94, 121, (-2477), 101}, intArray0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) null);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1086, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1086, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-36);
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte)0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) 925L;
      floatArray0[3] = (float) (byte) (-36);
      floatArray0[4] = (float) (-1);
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) (byte) (-36);
      doubleArray0[3] = (-360.9576);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[3] = (double) (-1.0F);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 925L, (int) (byte) (-36), (double) 0.0F);
      assertTrue(int1 == int0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {0.0, 0.0, (-36.0), (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '(');
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2818));
  }

  @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0, 2621);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      
      ArrayUtils.shift((float[]) null, Integer.MAX_VALUE);
      Character[] characterArray0 = new Character[7];
      char char0 = '5';
      Character character0 = Character.valueOf('5');
      assertNotNull(character0);
      assertEquals('5', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('5');
      assertNotNull(character1);
      assertEquals('5', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('5');
      assertNotNull(character2);
      assertEquals('5', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('4');
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('4', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(char0);
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('5', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('5');
      assertTrue(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertNotNull(character5);
      assertEquals('5', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('&');
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertNotNull(character6);
      assertEquals('&', (char)character6);
      
      characterArray0[6] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      assertArrayEquals(new char[] {'5', '5', '5', '4', '5', '5', '&'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-170);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-711);
      shortArray0[5] = (short)4963;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-711), (int) (short) (-1666));
      assertEquals(6, shortArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new short[] {(short)1, (short) (-1666), (short) (-170), (short) (-1), (short) (-711), (short)4963}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (int) (short)4963);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4963, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, (-2088L));
      assertEquals(0, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 7;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)59);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray0 = new int[0];
      byte[] byteArray2 = ArrayUtils.removeAll(byteArray1, intArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-962);
      intArray0[1] = 1381;
      intArray0[2] = 635;
      intArray0[3] = (-646);
      intArray0[4] = (-1);
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = 8;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      ArrayUtils.shift(byteArray0, 12);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)99, (byte)48, (byte)48}, byteArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)48;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)99;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)48, (short)0, (short)99}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      
      ArrayUtils.swap(booleanArray0, (-1), (-2146242326), 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-93);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-93)}, byteArray0);
      
      Character character0 = Character.valueOf(';');
      assertNotNull(character0);
      assertEquals(';', (char)character0);
      
      Character character1 = new Character('r');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('r', (char)character1);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (byte)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1431655765);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      
      Integer integer0 = new Integer(57);
      assertNotNull(integer0);
      assertEquals(57, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (-1384));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte)0, (int) (byte)0, (int) (short)0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-161));
      assertNotNull(integer0);
      assertEquals((-161), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-161));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-161), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1335));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1335), (int)integer2);
      
      integerArray0[2] = integer2;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float((-3624.146963241367));
      assertNotNull(float0);
      assertEquals((-3624.147F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) 1.0F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals(7, floatArray0.length);
      assertEquals(1.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(0.0);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      assertEquals(0.0F, (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-1172.47663));
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotNull(float5);
      assertEquals((-1172.4767F), (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float(1089.0);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotNull(float6);
      assertEquals(1089.0F, (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      Integer[] integerArray0 = new Integer[7];
      int int0 = 52;
      Integer integer0 = new Integer(52);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(52, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1222));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1222), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(52, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1763));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1763), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1763));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals((-1763), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(5046);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(5046, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1122));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      assertEquals((-1122), (int)integer6);
      
      integerArray0[6] = integer6;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1355()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = 'a';
      charArray0[2] = '_';
      charArray0[3] = '[';
      charArray0[4] = '5';
      charArray0[5] = 'J';
      charArray0[6] = 't';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(14, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'9', 'a', '_', '[', '5', 'J', 't'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      
      int[] intArray0 = new int[15];
      intArray0[0] = 488;
      intArray0[1] = (int) 'J';
      intArray0[2] = (int) 'a';
      intArray0[3] = (int) 'a';
      intArray0[4] = (int) '9';
      intArray0[5] = (int) '[';
      ArrayUtils.reverse(intArray0, 0, 123);
      assertEquals(15, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 't';
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-766L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 116L}, longArray0);
      assertArrayEquals(new long[] {(-766L), 0L, 116L}, longArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) '[';
      floatArray0[2] = (float) 123;
      floatArray0[3] = (float) '_';
      floatArray0[4] = (float) '_';
      floatArray0[5] = (float) 0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (float) 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 91.0F, 123.0F, 95.0F, 95.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 91.0F, 123.0F, 95.0F, 95.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1356()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-67L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-67L));
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertArrayEquals(new long[] {(-67L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1357()  throws Throwable  {
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float((-3624.146963241367));
      assertNotNull(float0);
      assertEquals((-3624.147F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) 1.0F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(7, floatArray0.length);
      assertEquals(1.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(0.0);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals(0.0F, (float)float4, 0.01F);
      
      Integer integer0 = new Integer(2146340530);
      assertNotNull(integer0);
      assertEquals(2146340530, (int)integer0);
      
      int int0 = 10;
      Integer integer1 = new Integer(10);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(10, (int)integer1);
      
      Integer integer2 = new Integer(925);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(925, (int)integer2);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer2;
      Integer integer3 = new Integer((-449));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-449), (int)integer3);
      
      integerArray0[5] = integer3;
      integerArray0[6] = integer2;
      integerArray0[7] = integer0;
      integerArray0[8] = integer2;
      Integer integer4 = new Integer(int0);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(10, (int)integer4);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(10, integerArray1.length);
      assertEquals(9, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = '2';
      charArray0[2] = '(';
      charArray0[3] = '~';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Y', (int) integerArray0[6]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(bitSet0);
      assertEquals(4, charArray0.length);
      assertEquals(9, integerArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new char[] {'U', '2', '(', '~'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1358()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) 1033;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1L, 1033L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1033L, 0L, 0L}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) 1L);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (-1.0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {1L, 1033L, 0L, 0L}, longArray0);
      
      Integer integer0 = new Integer(1033);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1033, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean0);
      
      ArrayUtils.reverse((double[]) null, 1033, (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test1359()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1360()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (-1L));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) 925L);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte) (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 16;
      ArrayUtils.reverse(intArray0, (-1), 44);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {16, (-1)}, intArray0);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1551L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1551L), (-1L)}, longArray1);
      
      ArrayUtils.swap(longArray1, 44, (-2617));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1551L), (-1L)}, longArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {16, (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1361()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 488;
      ArrayUtils.reverse(intArray0, 0, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {488}, intArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {1L}, longArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) ';';
      floatArray0[1] = (float) 123;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 488;
      floatArray0[5] = (float) (-766L);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (float) 1L);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1.0F, 59.0F, 123.0F, 0.0F, 0.0F, 488.0F, (-766.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {59.0F, 123.0F, 0.0F, 0.0F, 488.0F, (-766.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {488}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1362()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (-1);
      intArray0[2] = 51;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-3302);
      ArrayUtils.shift(intArray0, (-839));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {51, 0, 0, 0, (-1), (-1), (-3302), 0, (-1)}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      boolean[] booleanArray2 = new boolean[3];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-86);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-86), (byte)0, (byte) (-86)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-86)}, byteArray1);
      
      ArrayUtils.reverse(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, (-3302), (-1), (-1), 0, 0, 0, 51}, intArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-1);
      objectArray0[1] = (Object) (byte) (-86);
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      Integer integer0 = new Integer(51);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(51, (int)integer0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = 'M';
      charArray0[2] = '$';
      charArray0[3] = '`';
      charArray0[4] = '';
      charArray0[5] = 'j';
      charArray0[6] = '4';
      charArray0[7] = 'C';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '\'');
      assertNotNull(bitSet0);
      assertEquals(8, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new char[] {'}', 'M', '$', '`', '', 'j', '4', 'C'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1363()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)65);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)65}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1364()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2853);
      shortArray0[1] = (short) (-2605);
      shortArray0[2] = (short)1410;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-21957));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2853), (short) (-2605), (short)1410}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2853), (short) (-2605), (short)1410, (short) (-21957)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1365()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) 1472);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test1366()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2853);
      shortArray0[1] = (short) (-2605);
      ArrayUtils.reverse(booleanArray0, (int) (short) (-2605), (int) (short) (-2605));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Random.setNextRandom((short) (-2853));
  }

  @Test(timeout = 4000)
  public void test1367()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      ArrayUtils.shift(booleanArray0, 3199);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1368()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[6] = ';';
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, (int) (short)0, (-415), (int) (short)0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(18, shortArray2.length);
      assertEquals(9, shortArray0.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0, (-2146340152), (int) (short)0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Random.setNextRandom((-415));
  }

  @Test(timeout = 4000)
  public void test1369()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(76);
      assertNotNull(integer0);
      assertEquals(76, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1370()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer(2);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      Integer integer2 = new Integer(498);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(498, (int)integer2);
      
      Integer integer3 = new Integer((-1806));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-1806), (int)integer3);
      
      Integer integer4 = Integer.valueOf(3157);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(3157, (int)integer4);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 295.0F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {295.0F}, floatArray0, 0.01F);
      
      MutableInt mutableInt0 = new MutableInt((-1));
      assertNotNull(mutableInt0);
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      
      Integer integer5 = mutableInt0.getValue();
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)integer5);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2855);
      shortArray0[1] = (short) (-2855);
      shortArray0[2] = (short) (-2855);
      shortArray0[3] = (short) (-2855);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)848, 162);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-2855), (short) (-2855), (short) (-2855), (short) (-2855)}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 2);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1371()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-720.0F);
      floatArray0[1] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 6);
      assertEquals(2, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-720.0F), 1.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[2] = (long) 6;
      longArray0[3] = (long) 6;
      longArray0[4] = (long) 6;
      longArray0[5] = (long) 6;
      longArray0[6] = (long) 1;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-663L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 6L, 6L, 6L, 1L}, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 6L, 6L, 6L, 1L}, longArray1);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-663L);
      Integer integer0 = new Integer(6);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      Integer integer1 = new Integer((-1765));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1765), (int)integer1);
      
      Integer integer2 = new Integer((-3163));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-3163), (int)integer2);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer1;
      integerArray0[1] = integer2;
      integerArray0[2] = integer2;
      integerArray0[3] = integer2;
      integerArray0[4] = integer0;
      integerArray0[5] = integer2;
      integerArray0[6] = integer2;
      Integer integer3 = new Integer(3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(3, (int)integer3);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(7, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1372()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = '^';
      charArray0[2] = '9';
      charArray0[3] = 'k';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'y', '^', '9', 'k'}, charArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1212);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1212, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-945));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-945), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger((String) null);
      assertNull(integer3);
      
      integerArray0[3] = null;
      Integer integer4 = new Integer((-945));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals((-945), (int)integer4);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-197);
      shortArray0[1] = (short) (-2966);
      ArrayUtils.reverse(shortArray0, 6, (int) integerArray0[1]);
      assertEquals(2, shortArray0.length);
      assertEquals(7, integerArray0.length);
      assertArrayEquals(new short[] {(short) (-197), (short) (-2966)}, shortArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      ArrayUtils.reverse(byteArray0, (int) (short) (-197), (int) (byte)1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1373()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 925L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte) (-36));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, (int) (byte) (-36), (int) (byte) (-36));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)115);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)115}, shortArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (int) (short)115;
      intArray0[2] = (int) (short)115;
      intArray0[3] = (int) (byte) (-36);
      intArray0[4] = (int) (short)115;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1), 115, 115, (-36), 115}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1374()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Integer[]) null, 3069);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3069, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1375()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = '^';
      charArray0[2] = '9';
      charArray0[3] = 'k';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'y', '^', '9', 'k'}, charArray0);
      
      Integer[] integerArray0 = new Integer[7];
      int int0 = 101;
      Integer integer0 = new Integer(101);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1212);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(1212, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-945));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-945), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger((String) null);
      assertNull(integer3);
      
      integerArray0[3] = null;
      Integer integer4 = new Integer((-945));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals((-945), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(6);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(6, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(101, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = ArrayUtils.get(integerArray0, 0, integer2);
      assertTrue(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer5));
      assertTrue(integer2.equals((Object)integer4));
      assertFalse(integer2.equals((Object)integer6));
      assertNotNull(integer7);
      assertEquals(7, integerArray0.length);
      assertEquals(101, (int)integer7);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray0, (-1763));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1763, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1376()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      ArrayUtils.swap(booleanArray1, 0, 59, 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-374L);
      longArray0[1] = (long) 59;
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) doubleArray0, (Object) null);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertEquals(1, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) null, 1078);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, 299.0, (-602.25312));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1078;
      floatArray0[1] = (float) 1078;
      floatArray0[2] = (float) (-374L);
      floatArray0[3] = (float) (-374L);
      floatArray0[4] = (float) 59;
      floatArray0[5] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 1070);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1078.0F, 1078.0F, (-374.0F), (-374.0F), 59.0F, (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1078.0F, 1078.0F, (-374.0F), (-374.0F), 59.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1377()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.03741383238743618, (-483.47124814389485));
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1378()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Integer integer0 = new Integer(101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      Integer integer1 = new Integer(101);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(101, (int)integer1);
      
      Integer integer2 = new Integer((-945));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-945), (int)integer2);
      
      Integer integer3 = Integer.getInteger((String) null);
      assertNull(integer3);
      
      ArrayUtils.reverse((byte[]) null, 101, 2144525681);
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[1] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1212);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true}, booleanArray0));
      
      short[] shortArray1 = ArrayUtils.insert(2144525681, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2144525681;
      doubleArray0[1] = (double) 2144525681;
      doubleArray0[2] = (double) (-945);
      doubleArray0[3] = (double) 1212;
      doubleArray0[4] = (double) 2144525681;
      doubleArray0[5] = (double) 5;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (-945), 1212.0);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {2.144525681E9, 2.144525681E9, (-945.0), 1212.0, 2.144525681E9, 5.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 101;
      intArray0[1] = 1212;
      intArray0[2] = 2144525681;
      intArray0[3] = 2144525681;
      intArray0[4] = 101;
      intArray0[5] = (-945);
      boolean boolean2 = ArrayUtils.contains(intArray0, 8);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(6, intArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new int[] {101, 1212, 2144525681, 2144525681, 101, (-945)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1379()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (-105);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-1440.68084700953);
      doubleArray0[2] = (double) 0;
      doubleArray0[2] = (double) (short) (-105);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.reverse(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 103, 103);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1380()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-137), (-137), (double) (-137));
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1381()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 35.99314179645;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 35.99314179645}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 35.99314179645, 0.0}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)112);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)112, (byte)112, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)0}, byteArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)112;
      floatArray0[1] = (float) (byte)112;
      floatArray0[2] = (float) (byte) (-86);
      floatArray0[3] = (float) (byte) (-6);
      floatArray0[4] = (float) (byte) (-86);
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte) (-6);
      floatArray0[7] = 1.0F;
      floatArray0[8] = (float) (byte) (-6);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1871.62F);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {112.0F, 112.0F, (-86.0F), (-6.0F), (-86.0F), 0.0F, (-6.0F), 1.0F, (-6.0F)}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)112, (byte)112, (byte)0}, byteArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (-1.0), (int) (byte)112, 2733.26313233);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals((-1), int0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 35.99314179645}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 35.99314179645, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1382()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1874);
      intArray0[1] = (-3278);
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = (-197);
      intArray0[5] = 1;
      intArray0[6] = 2;
      int int0 = ArrayUtils.indexOf(intArray0, (-2079));
      assertEquals(7, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1874), (-3278), 0, 2, (-197), 1, 2}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-2079);
      doubleArray0[3] = (double) (-1874);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-1874);
      doubleArray0[6] = (double) (-197);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1));
      assertTrue(int1 == int0);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {2.0, 2.0, (-2079.0), (-1874.0), 1.0, (-1874.0), (-197.0)}, doubleArray0, 0.01);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift(intArray0, 1, (-2011), 128);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1874), (-3278), 0, 2, (-197), 1, 2}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2;
      floatArray0[2] = 229.9F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, Integer.MAX_VALUE);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 2.0F, 229.9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 2.0F, 229.9F}, floatArray1, 0.01F);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) Integer.MAX_VALUE;
      doubleArray1[1] = (double) (-3278);
      doubleArray1[2] = (double) (-1);
      int int2 = ArrayUtils.indexOf(doubleArray1, (double) 2, (-2079), (double) (-1874));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(3, doubleArray1.length);
      assertEquals((-1), int2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.147483647E9, (-3278.0), (-1.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1383()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-1964), (int) (short) (-1964));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-53);
      floatArray0[1] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-580), (-406));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-53.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1384()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ArrayUtils.shift(byteArray0, 17);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1385()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      ArrayUtils.shift(byteArray0, (int) (byte) (-1));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1386()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)48;
      ArrayUtils.shift(byteArray0, (-363));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)48, (byte) (-1), (byte) (-1), (byte)0}, byteArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)48;
      shortArray0[1] = (short) (byte)99;
      shortArray0[2] = (short)729;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)48, (short)99, (short)729, (short)0, (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1387()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)35, (byte)35}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1388()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)743;
      shortArray0[1] = (short) (-2274);
      shortArray0[2] = (short) (-394);
      shortArray0[3] = (short) (-6);
      shortArray0[4] = (short)1796;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)743, (short) (-2274), (short) (-394), (short) (-6), (short)1796}, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)57;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1389()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-27);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-27), (-27));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-27)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      int int0 = new Short((short) (-49));
      assertEquals((short) (-49), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (short) (-49), 114L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -49, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1390()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = (Byte) (byte) (-1);
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2192;
      intArray0[1] = (int) (byte) (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)1, (-2243));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {2192, (-1)}, intArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (byte)0, 0);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((long[]) null, 2192);
  }

  @Test(timeout = 4000)
  public void test1391()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = (-1);
      int int1 = (-59);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-59), (-6043));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      int int2 = (-2844);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) (-2844);
      longArray0[2] = (long) (-6043);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2844), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2844, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1392()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-2351L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1L;
      longArray0[4] = 1L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-2351L), 0L, 0L, 1L, 1L}, longArray0);
      
      long[] longArray2 = ArrayUtils.insert(0, longArray0, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {(-2351L), 0L, 0L, 1L, 1L}, longArray0);
      assertArrayEquals(new long[] {(-2351L), 0L, 0L, 1L, 1L, (-2351L), 0L, 0L, 1L, 1L}, longArray2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-483);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)900;
      shortArray0[4] = (short)801;
      shortArray0[5] = (short) (-1193);
      shortArray0[6] = (short)57;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)13);
      assertNotNull(bitSet0);
      assertEquals(8, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short) (-483), (short)0, (short)0, (short)900, (short)801, (short) (-1193), (short)57, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1393()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1394()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) doubleArray0, (Object) null);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1395()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int int0 = 450;
      double[] doubleArray1 = ArrayUtils.subarray((double[]) null, (int) (byte)12, 450);
      assertNull(doubleArray1);
      
      int int1 = 3199;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 450;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)12, 796);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {450L}, longArray0);
      
      Integer integer0 = new Integer(796);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(796, (int)integer0);
      
      Integer integer1 = new Integer((byte)12);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals(12, (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(object0.equals((Object)int1));
      assertFalse(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)integer0));
      assertNotNull(object0);
      assertEquals(12, object0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer integer2 = ArrayUtils.get(integerArray0, 3235);
      assertNull(integer2);
      assertEquals(1, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(object0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1396()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1397()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)1904);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1398()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (-1);
      intArray0[2] = 51;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-3302);
      ArrayUtils.shift(intArray0, (-839));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {51, 0, 0, 0, (-1), (-1), (-3302), 0, (-1)}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      boolean[] booleanArray2 = new boolean[3];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(3, booleanArray2.length);
      assertFalse(boolean0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray2));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-3302);
      longArray0[1] = (long) (-1);
      ArrayUtils.shuffle(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-3302L)}, longArray0);
      
      int int1 = ArrayUtils.indexOf((short[]) null, (short)2, 50);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Integer integer0 = new Integer(188);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(188, (int)integer0);
      
      boolean boolean1 = ArrayUtils.isSameType(integer0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1399()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-170);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-711);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short) (-170);
      doubleArray0[2] = (double) 1033;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1400()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-1974);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1974, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1401()  throws Throwable  {
      Byte[] byteArray0 = new Byte[16];
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)2);
      assertNotNull(byteArray1);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1402()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (float) 1033;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      ArrayUtils.swap(floatArray1, 1033, 1033, 1033);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1033.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      Byte byte0 = new Byte((byte)37);
      assertNotNull(byte0);
      assertEquals((byte)37, (byte)byte0);
      
      Byte byte1 = new Byte((byte)112);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)112, (byte)byte1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(2, floatArray0.length);
      assertEquals(0, int0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, 1497L);
      assertFalse(int1 == int0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1403()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1404()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(doubleArray1);
      assertNotNull(map0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((int) (short)0, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((byte[]) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Short short0 = new Short((short) (-1135));
      assertNotNull(short0);
      assertEquals((short) (-1135), (short)short0);
      
      Byte[] byteArray1 = new Byte[9];
      byteArray1[0] = (Byte) (byte) (-1);
      byteArray1[1] = (Byte) (byte) (-1);
      byteArray1[2] = (Byte) (byte) (-1);
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byteArray1[3] = byte1;
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = byte0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray2, (byte)0, Integer.MAX_VALUE);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(bitSet0);
      assertEquals(1, byteArray2.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray1, (byte)53);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertEquals(9, byteArray3.length);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)0, (byte)53, (byte)53, (byte)53, (byte)53, (byte)53}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test1405()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-1));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1406()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-962);
      intArray0[1] = 1381;
      intArray0[2] = 635;
      intArray0[3] = (-646);
      intArray0[4] = (-1);
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = 8;
      intArray0[7] = 1211;
      ArrayUtils.shuffle(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1381, 635, (-646), (-1), Integer.MAX_VALUE, 8, 1211, (-962)}, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1197;
      shortArray0[1] = (short)0;
      ArrayUtils.reverse(shortArray0, 8, 0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1197, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ArrayUtils.reverse(byteArray0, 4, 4);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = (Byte) (byte)1;
      byte byte0 = (byte)9;
      Byte byte1 = new Byte((byte)9);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)9, (byte)byte1);
      
      byteArray1[1] = byte1;
      byteArray1[2] = (Byte) (byte)1;
      byteArray1[3] = (Byte) (byte)1;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, byte0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)9, (byte)1, (byte)1}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1407()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)90);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)90}, shortArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 84;
      doubleArray0[1] = (double) 43;
      ArrayUtils.shift(doubleArray0, 2411, 5, (int) (short)90);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {84.0, 43.0}, doubleArray0, 0.01);
      
      int int0 = 89;
      Integer integer0 = new Integer(89);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(89, (int)integer0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger((String) null, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(89, (int)integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, (Integer) int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(8, integerArray1.length);
      assertEquals(7, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      ArrayUtils.swap((boolean[]) null, int0, int0);
  }

  @Test(timeout = 4000)
  public void test1408()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      charArray0[2] = 'K';
      charArray0[3] = '\"';
      charArray0[4] = '4';
      charArray0[5] = 'L';
      charArray0[6] = '`';
      charArray0[7] = '2';
      boolean boolean0 = ArrayUtils.contains(charArray0, '4');
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'r', ';', 'K', '\"', '4', 'L', '`', '2'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      
      ArrayUtils.swap(booleanArray1, 0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1409()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)42;
      doubleArray0[2] = (double) 84;
      doubleArray0[3] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, 61, 0, (-724));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {42.0, 0.0, 84.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)0;
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((short)2460);
      assertNotNull(integer0);
      assertEquals(2460, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      ArrayUtils.swap(booleanArray1, (-724), 84);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1410()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 3271L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 728, 728);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {3271L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '=';
      charArray0[1] = 'r';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(728, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 728, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1411()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1412()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (-1165);
      doubleArray0[4] = (double) (short)0;
      ArrayUtils.shift(doubleArray0, (int) (short)0, (-2117), (int) (short)0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1165.0), 0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      ArrayUtils.reverse((Object[]) shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1413()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      ArrayUtils.swap(floatArray0, 2146689078, 22, 2146689078);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(868);
      assertNotNull(integer0);
      assertEquals(868, (int)integer0);
      
      Integer integer1 = new Integer(22);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(22, (int)integer1);
      
      Integer integer2 = new Integer((-811));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-811), (int)integer2);
      
      Integer integer3 = new Integer((-811));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-811), (int)integer3);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeElements((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test1414()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test1415()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-170);
      Integer integer0 = new Integer((short) (-1666));
      assertNotNull(integer0);
      assertEquals((-1666), (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      Integer integer1 = Integer.valueOf(1033);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1033, (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry4);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry3);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotNull(abstractMap_SimpleImmutableEntry7);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry8 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry6);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertNotNull(abstractMap_SimpleImmutableEntry8);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry9 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry9.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry9.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry9.equals((Object)abstractMap_SimpleImmutableEntry8));
      assertTrue(abstractMap_SimpleImmutableEntry9.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry9.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry9.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry9.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry9);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 7);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry4;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry4;
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry5;
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry6;
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry6;
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(7, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test1416()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      Long long0 = new Long(1853L);
      assertNotNull(long0);
      assertEquals(1853L, (long)long0);
      
      Long long1 = new Long(1853L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1853L, (long)long1);
      
      Long long2 = new Long((-564L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-564L), (long)long2);
      
      Long long3 = new Long((-96L));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals((-96L), (long)long3);
      
      Long long4 = new Long(2709L);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals(2709L, (long)long4);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1417()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (-1932L);
      longArray0[5] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 1116L);
      assertEquals(6, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L, (-1932L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1418()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-6231.275942);
      doubleArray0[1] = (-1730.0);
      doubleArray0[3] = (-6231.275942);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1730.0), (-3344.061885844));
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-6231.275942), (-1730.0), 0.0, (-6231.275942)}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((-545));
      assertNotNull(integer0);
      assertEquals((-545), (int)integer0);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-6231.275942), 0.0, (-1730.0), (-6231.275942)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1419()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte) (-1));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Long long0 = new Long(1540L);
      assertNotNull(long0);
      assertEquals(1540L, (long)long0);
      
      Long long1 = new Long((byte)0);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1420()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 101;
      Integer integer0 = new Integer(101);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1212);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1212, (int)integer1);
      
      Integer integer2 = new Integer((-945));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-945), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger((String) null);
      assertNull(integer3);
      
      integerArray0[3] = null;
      Integer integer4 = new Integer((-945));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals((-945), (int)integer4);
      
      integerArray0[4] = integer4;
      integerArray0[5] = integer0;
      Integer integer5 = new Integer(int0);
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(101, (int)integer5);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) integerArray0[4]);
      assertNotNull(bitSet0);
      assertEquals(7, integerArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals("{2, 4}", bitSet0.toString());
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1247;
      shortArray0[1] = (short)2276;
      shortArray0[2] = (short) (-3170);
      shortArray0[3] = (short) (-2547);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1247, (short)2276, (short) (-3170), (short) (-2547)}, shortArray0);
      assertArrayEquals(new short[] {(short)1247, (short)2276, (short) (-3170), (short) (-2547)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1421()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1874);
      intArray0[1] = (-3278);
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = (-197);
      intArray0[5] = 1;
      intArray0[6] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, (-2079));
      assertEquals(7, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1874), (-3278), 0, 2, (-197), 1, 0}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-2079);
      doubleArray0[3] = (double) (-1874);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-1874);
      doubleArray0[6] = (double) (-197);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1));
      assertTrue(int1 == int0);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {2.0, 2.0, (-2079.0), (-1874.0), 1.0, (-1874.0), (-197.0)}, doubleArray0, 0.01);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift(intArray0, 1, (-2011), 128);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1874), (-3278), 0, 2, (-197), 1, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) classArray0, (Object) integer0, 2);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(bitSet0);
      assertEquals(0, classArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1422()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-6678));
      assertEquals(8, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1423()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 1530, 1835);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-6043));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-53);
      doubleArray0[1] = (double) (byte)48;
      doubleArray0[2] = (double) (-1);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-6043), 21);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-53.0), 48.0, (-1.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, false, (-2178));
      assertFalse(int1 == int0);
      assertEquals(6, booleanArray0.length);
      assertEquals(1, int1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1424()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-2132L));
      assertNotNull(long0);
      assertEquals((-2132L), (long)long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1425()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test1426()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)67;
      ArrayUtils.reverse(byteArray0, (int) (byte)67, (int) (byte) (-47));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)42, (byte) (-47), (byte)67}, byteArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)2460}, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (byte)2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1427()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1428()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Long long0 = new Long(2147483647L);
      assertNotNull(long0);
      assertEquals(2147483647L, (long)long0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1429()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1497);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1430()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1431()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1432()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 9;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int0 = 1599;
      intArray0[6] = 1599;
      intArray0[7] = 0;
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1433()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)42;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)42}, shortArray0);
      assertArrayEquals(new short[] {(short)42, (short)42}, shortArray1);
      
      Random.setNextRandom((byte)42);
  }

  @Test(timeout = 4000)
  public void test1434()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-348), (-348), (-348));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1435()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 3271L;
      longArray0[1] = (long) (-1165);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-932), (-3817));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {3271L, (-1165L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = ')';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1165), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1165, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1436()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 2, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertSame(longArray2, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
  }

  @Test(timeout = 4000)
  public void test1437()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-8));
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertArrayEquals(new byte[] {(byte) (-8)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1438()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)59);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1439()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 35.99314179645;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 35.99314179645}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 35.99314179645, 0.0}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)0, (byte) (-86), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-86)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1440()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2);
      assertNotNull(bitSet0);
      assertEquals(16, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1441()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-34));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1442()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-105);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-105));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-105)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1443()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1444()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 1108.6175106924077);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1108.6175106924077}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1445()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1446()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)220;
      shortArray0[1] = (short)1810;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)33;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)220;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)1810;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1810, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1447()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1448()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 0, 0);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1449()  throws Throwable  {
      float[] floatArray0 = new float[3];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      
      Float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertNotNull(floatArray3);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray3.length);
      assertNotSame(floatArray0, floatArray2);
      assertSame(floatArray1, floatArray3);
      assertSame(floatArray3, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1450()  throws Throwable  {
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float((-3624.146963241367));
      assertNotNull(float0);
      assertEquals((-3624.147F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(247.969F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(247.969F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) 247.969F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(247.969F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(7, floatArray0.length);
      assertEquals(247.969F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(0.0);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals(0.0F, (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-1172.47663));
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotNull(float5);
      assertEquals((-1172.4767F), (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float(1089.0);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotNull(float6);
      assertEquals(1089.0F, (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1451()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'Z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(101);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(101, (int)integer1);
      
      Integer integer2 = new Integer(9);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(9, (int)integer2);
      
      Integer integer3 = Integer.getInteger((String) null);
      assertNull(integer3);
      
      Integer integer4 = new Integer((-183));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals((-183), (int)integer4);
      
      Integer integer5 = new Integer((-183));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals((-183), (int)integer5);
      
      Integer integer6 = new Integer((-945));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      assertEquals((-945), (int)integer6);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer6;
      Integer integer7 = ArrayUtils.get(integerArray0, (-183), integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertNotNull(integer7);
      assertEquals(1, integerArray0.length);
      assertEquals((-945), (int)integer7);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'Z');
      assertTrue(int1 == int0);
      assertEquals(8, charArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'Z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test1452()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, (int) (short)0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '!');
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      int int1 = (-122);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-122);
      longArray0[1] = (long) '!';
      longArray0[2] = (long) '!';
      longArray0[3] = 11L;
      longArray0[4] = (long) (-122);
      longArray0[5] = (long) (-1);
      int int2 = ArrayUtils.indexOf(longArray0, 33L, (-122));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(7, longArray0.length);
      assertEquals(1, int2);
      assertArrayEquals(new long[] {(-122L), 33L, 33L, 11L, (-122L), (-1L), 0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-122L), 33L, 33L, 11L, (-122L), (-1L), 0L}, longArray1);
      assertArrayEquals(new long[] {(-122L), 33L, 33L, 11L, (-122L), (-1L), 0L}, longArray0);
      
      boolean boolean1 = ArrayUtils.contains((char[]) null, ')');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int3 = ArrayUtils.indexOf(booleanArray0, false, (int) (byte)0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(7, booleanArray0.length);
      assertEquals(1, int3);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      
      int int4 = (-1425);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (-1425));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1425, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1453()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '[', 113);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1454()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1945.729784964695);
      doubleArray0[1] = (-389.855822801275);
      doubleArray0[2] = 2849.8154224;
      doubleArray0[3] = (-387.8);
      doubleArray0[4] = 1977.5637024178;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1873.756891);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1945.729784964695), (-389.855822801275), 2849.8154224, (-387.8), 1977.5637024178, 1.0, 2.0, 0.0, (-1873.756891)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1455()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 36.79093198023513;
      char[] charArray0 = new char[9];
      charArray0[1] = '^';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'r');
      assertEquals(9, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 291.58129, (-1));
      assertTrue(int1 == int0);
      assertEquals(12, doubleArray0.length);
      assertEquals((-1), int1);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      ArrayUtils.shift(doubleArray0, (-1), (int) '^', 571);
      assertEquals(12, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1456()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      charArray0[2] = 'K';
      charArray0[3] = '\"';
      charArray0[4] = '4';
      charArray0[5] = 'L';
      charArray0[6] = '`';
      charArray0[7] = '2';
      boolean boolean0 = ArrayUtils.contains(charArray0, '4');
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'r', ';', 'K', '\"', '4', 'L', '`', '2'}, charArray0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '4';
      charArray1[1] = 'y';
      charArray1[2] = '4';
      charArray1[3] = '\"';
      charArray1[4] = 'K';
      charArray1[5] = 'L';
      boolean boolean1 = ArrayUtils.isEmpty(charArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray1.length);
      assertFalse(boolean1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'4', 'y', '4', '\"', 'K', 'L'}, charArray1);
      
      int int1 = ArrayUtils.lastIndexOf(charArray1, '2');
      assertFalse(int1 == int0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray1.length);
      assertEquals((-1), int1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'4', 'y', '4', '\"', 'K', 'L'}, charArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '\"';
      doubleArray0[1] = (double) '4';
      doubleArray0[2] = (double) 'y';
      doubleArray0[3] = (double) '4';
      doubleArray0[4] = (double) '`';
      boolean boolean2 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {34.0, 52.0, 121.0, 52.0, 96.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1457()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'O';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'O');
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', 'O'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1458()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1459()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)35);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1460()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1461()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'r';
      charArray0[2] = '\"';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1165), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1165, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1462()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2428), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2428, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1463()  throws Throwable  {
      float[] floatArray0 = new float[33];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(33, floatArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(950, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 950, Length: 33
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1464()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-59), (-6043));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) (-2844);
      longArray0[2] = (long) (-6043);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-53);
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)48, (byte) (-53), (byte) (-53), (byte) (-53)}, byteArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-53);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-2251.0F);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(59, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1465()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1466()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 'Z';
      charArray0[6] = 'Z';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-40);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)98;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte) (-40);
      doubleArray1[1] = (double) 'Z';
      doubleArray1[2] = (double) (byte) (-59);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (double) (byte) (-40);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {98.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {98.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-40.0), 90.0, (-59.0), (-1.0), (-40.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1467()  throws Throwable  {
      Integer integer0 = new Integer((-300));
      assertNotNull(integer0);
      assertEquals((-300), (int)integer0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(623);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(623, (int)integer1);
      
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray1, integerArray0);
      
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MutableInt mutableInt0 = new MutableInt((int) integerArray0[4]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(mutableInt0);
      assertEquals(6, integerArray0.length);
      assertEquals((byte) (-44), mutableInt0.byteValue());
      assertEquals((-300), (int)mutableInt0.getValue());
      assertEquals((short) (-300), mutableInt0.shortValue());
      assertEquals((-300), mutableInt0.intValue());
      assertEquals((-300.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-300", mutableInt0.toString());
      assertEquals((-300), (int)mutableInt0.toInteger());
      assertEquals((-300L), mutableInt0.longValue());
      assertEquals((-300.0F), mutableInt0.floatValue(), 0.01F);
      
      mutableInt0.decrement();
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(6, integerArray0.length);
      assertEquals((-301L), mutableInt0.longValue());
      assertEquals((byte) (-45), mutableInt0.byteValue());
      assertEquals((short) (-301), mutableInt0.shortValue());
      assertEquals((-301), (int)mutableInt0.getValue());
      assertEquals((-301.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-301.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-301), mutableInt0.intValue());
      assertEquals("-301", mutableInt0.toString());
      assertEquals((-301), (int)mutableInt0.toInteger());
      assertNotSame(integerArray0, integerArray1);
      
      Integer integer2 = mutableInt0.toInteger();
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(6, integerArray0.length);
      assertEquals((-301L), mutableInt0.longValue());
      assertEquals((byte) (-45), mutableInt0.byteValue());
      assertEquals((short) (-301), mutableInt0.shortValue());
      assertEquals((-301), (int)mutableInt0.getValue());
      assertEquals((-301.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-301.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-301), mutableInt0.intValue());
      assertEquals("-301", mutableInt0.toString());
      assertEquals((-301), (int)mutableInt0.toInteger());
      assertEquals((-301), (int)integer2);
      assertNotSame(integerArray0, integerArray1);
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray0, integer2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertEquals(6, integerArray0.length);
      assertEquals(7, integerArray2.length);
      assertEquals((-301L), mutableInt0.longValue());
      assertEquals((byte) (-45), mutableInt0.byteValue());
      assertEquals((short) (-301), mutableInt0.shortValue());
      assertEquals((-301), (int)mutableInt0.getValue());
      assertEquals((-301.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-301.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-301), mutableInt0.intValue());
      assertEquals("-301", mutableInt0.toString());
      assertEquals((-301), (int)mutableInt0.toInteger());
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1468()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      int int1 = ArrayUtils.lastIndexOf((float[]) null, 824.21F);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = ArrayUtils.insert((int) (short)457, (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1469()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1470()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '-');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1471()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1472()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short)457;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[7] = (short) (byte) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)457, (short)0, (short)0, (short) (-1), (short)0, (short) (-1)}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1);
      boolean boolean1 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte) (-1), (int) (short) (-1));
      assertEquals(8, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)457, (short)0, (short)0, (short) (-1), (short)0, (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1473()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1474()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = '6';
      charArray0[2] = '~';
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l', '6', '~'}, charArray0);
      assertArrayEquals(new char[] {'6', '~'}, charArray1);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) 0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)90;
      shortArray0[1] = (short)457;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-634);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)90, (short)457, (short)0, (short) (-634)}, shortArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) '6';
      floatArray0[2] = (float) (short)457;
      floatArray0[3] = (float) (short)90;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 'l';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2117), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2117, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1475()  throws Throwable  {
      int[] intArray0 = new int[9];
      ArrayUtils.shift(intArray0, 2146817219);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1476()  throws Throwable  {
      int[] intArray0 = new int[20];
      ArrayUtils.shift(intArray0, 2578);
      assertEquals(20, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1477()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)964;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)964;
      doubleArray0[1] = (double) (short)964;
      doubleArray0[2] = (double) (short)964;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)964;
      intArray0[1] = (int) (short)964;
      intArray0[2] = (int) (short)964;
      intArray0[3] = (int) (short)964;
      intArray0[4] = (int) (short)964;
      intArray0[5] = (int) (short)964;
      ArrayUtils.shift(intArray0, 964);
      ArrayUtils.shift(intArray0, 964);
      assertArrayEquals(new int[] {964, 964, 964, 964, 964, 964}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1478()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 2, 2349, (-1284));
      Integer integer0 = new Integer((byte) (-1));
      ArrayUtils.addFirst((Integer[]) null, integer0);
      ArrayUtils.removeElement(byteArray0, (byte) (-70));
      ArrayUtils.indexesOf(doubleArray0, (-711.0), 2876, 1.5);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2876;
      ArrayUtils.swap(longArray0, (-2146875984), (int) (byte) (-1));
      assertArrayEquals(new long[] {2876L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1479()  throws Throwable  {
      int[] intArray0 = new int[8];
      Integer integer0 = new Integer(3);
      ArrayUtils.shift(intArray0, (-1347), 102, (-1347));
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1480()  throws Throwable  {
      ArrayUtils.removeElement((byte[]) null, (byte) (-69));
      int int0 = 10;
      Integer integer0 = new Integer(10);
      Integer[] integerArray0 = new Integer[6];
      Integer integer1 = new Integer((byte)1);
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      ArrayUtils.toPrimitive(integerArray0, (-1102));
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-69);
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1136;
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      ArrayUtils.nullToEmpty(longArray0);
      ArrayUtils.lastIndexOf(longArray0, (long) 1136, (-748));
      ArrayUtils.shift((int[]) null, 1);
  }

  @Test(timeout = 4000)
  public void test1481()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      Integer integer0 = new Integer((-1577));
      Integer integer1 = new Integer((short) (-170));
      Integer integer2 = new Integer((-1577));
      Integer integer3 = Integer.getInteger("", integer2);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer3);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer3, integer2);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      Integer.valueOf((-1577));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer3);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry3);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry8 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry9 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry3);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 5);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry4;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry7;
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry3;
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry9;
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-170);
      shortArray0[1] = (short)867;
      shortArray0[2] = (short)2379;
      shortArray0[3] = (short) (-170);
      shortArray0[4] = (short) (-170);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)867);
      assertArrayEquals(new short[] {(short) (-170), (short)2379, (short) (-170), (short) (-170)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1482()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1483()  throws Throwable  {
      Object object0 = new Object();
      int[] intArray0 = new int[1];
      intArray0[0] = (-2283);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2283, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1484()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '@');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1485()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.indexOf(shortArray0, (short)0);
      ArrayUtils.removeElement(shortArray0, (short)0);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (-1);
      intArray0[2] = 51;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-3302);
      ArrayUtils.shift(intArray0, (-839));
      ArrayUtils.removeAllOccurences((boolean[]) null, true);
      ArrayUtils.add((boolean[]) null, true);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.isEmpty(booleanArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-3302);
      longArray0[1] = (long) (-1);
      ArrayUtils.shuffle(longArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 51;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1486()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1487()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1488()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.toObject(booleanArray0);
      short[] shortArray0 = new short[0];
      ArrayUtils.clone(shortArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-1), doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1489()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[13];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(13, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1490()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean1 == boolean0);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('_');
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(2, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test1491()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      ArrayUtils.toObject((boolean[]) null);
      ArrayUtils.clone(shortArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1530;
      doubleArray0[1] = (double) 1033;
      doubleArray0[2] = (double) 1033;
      doubleArray0[3] = (double) 1530;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1033, doubleArray1, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1033, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1492()  throws Throwable  {
      ArrayUtils.indexOf((long[]) null, 59L, (-676));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert((-676), doubleArray0, doubleArray0);
      ArrayUtils.swap(doubleArray0, (-770), 53);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test1493()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1494()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.toObject(booleanArray0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)964;
      ArrayUtils.clone(shortArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)964;
      doubleArray0[1] = (double) (short)964;
      doubleArray0[2] = (double) (short)964;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)964, doubleArray0, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 964, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1495()  throws Throwable  {
      long[] longArray0 = new long[9];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-300), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -300, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1496()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-241.38F));
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-1));
      long[] longArray0 = new long[2];
      longArray0[0] = 1337L;
      longArray0[1] = (long) (-1);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      ArrayUtils.isSorted((float[]) null);
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (byte) (-11));
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray1);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, 355.182028425796);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      ArrayUtils.isSorted((float[]) null);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (short)2;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2042), (int) (short)2);
      assertArrayEquals(new int[] {2, 2}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1497()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      ArrayUtils.nullToEmpty(byteArray0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = new BitSet();
      MockRandom mockRandom0 = new MockRandom();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 59;
      ArrayUtils.reverse(longArray0, 1, 1);
      ArrayUtils.isSorted((float[]) null);
      ArrayUtils.shift((float[]) null, 667, 667, 667);
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 59, 1);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1498()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      int int1 = (-1);
      ArrayUtils.subarray((int[]) null, Integer.MAX_VALUE, (-1));
      long[] longArray0 = new long[4];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 2681;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2681, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2681, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1499()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 923;
      longArray0[1] = (long) 923;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(923, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 923, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1500()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-541);
      intArray0[0] = (-541);
      int int1 = 177;
      intArray0[1] = 177;
      int int2 = (-385);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-541), (-385));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -541, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1501()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, 150, 150);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 150, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1502()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ArrayUtils.shift(byteArray0, 1004);
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1503()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ArrayUtils.shift(byteArray0, 17);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1504()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1505()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.toPrimitive(integerArray0);
      ArrayUtils.isArrayIndexValid(integerArray0, (-1));
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = '!';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = '8';
      charArray0[7] = 'G';
      ArrayUtils.lastIndexOf(charArray0, 'G');
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '!';
      doubleArray0[1] = (double) 'G';
      doubleArray0[2] = (double) 'G';
      doubleArray0[3] = (double) 'G';
      ArrayUtils.indexOf(doubleArray0, (-1185.5346578), 7);
      ArrayUtils.removeElements(charArray0, charArray0);
      ArrayUtils.shift((byte[]) null, (-1162));
  }

  @Test(timeout = 4000)
  public void test1506()  throws Throwable  {
      short[] shortArray0 = new short[6];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(6, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1507()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (int) (byte)0, (-617), (int) (byte)0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1508()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-1));
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1509()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)99;
      ArrayUtils.shift(byteArray0, 0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)54, (byte) (-87), (byte)0, (byte)0, (byte) (-128), (byte)0, (byte)99}, byteArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)99;
      shortArray0[1] = (short) (byte) (-128);
      shortArray0[2] = (short) (byte) (-87);
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)54;
      shortArray0[5] = (short)90;
      shortArray0[6] = (short) (byte)54;
      shortArray0[7] = (short) (byte)99;
      shortArray0[8] = (short) (byte)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(9, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1510()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1511()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      short[] shortArray0 = new short[3];
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'c', (int) (short) (-2570));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1512()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      ArrayUtils.toObject(byteArray0);
      MockRandom mockRandom0 = new MockRandom((byte)84);
      mockRandom0.ints();
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1513()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '8', (int) '8');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1514()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 0.03741383238743618, 0.03741383238743618);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1515()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1516()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1517()  throws Throwable  {
      ArrayUtils.contains((double[]) null, 0.0, 1.0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-33);
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      ArrayUtils.toObject(byteArray0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = '/';
      charArray0[2] = '{';
      charArray0[3] = '&';
      charArray0[4] = '[';
      ArrayUtils.lastIndexOf(charArray0, 'z', (int) (byte) (-33));
      MockRandom mockRandom0 = new MockRandom((byte) (-33));
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1518()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      float[] floatArray0 = new float[13];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) (byte) (-1);
      ArrayUtils.isNotEmpty(floatArray0);
      ArrayUtils.removeAllOccurences(byteArray0, (byte) (-82));
      // Undeclared exception!
      try { 
        ArrayUtils.insert(111, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1519()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      ArrayUtils.nullToEmpty(byteArray0);
      Byte byte0 = new Byte((byte)39);
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1520()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)0);
      byteArray0[5] = byte6;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1521()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2580);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2580));
      assertEquals(1, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1522()  throws Throwable  {
      char[] charArray0 = new char[4];
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[3];
      intArray1[0] = (-3601);
      intArray1[1] = (-3601);
      intArray1[2] = (-3601);
      ArrayUtils.isSameLength(intArray0, intArray1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-3601), 'j');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3601, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1523()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.isSorted(integerArray0);
      ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      Integer integer0 = new Integer(2);
      Integer.valueOf(1211);
      MutableInt mutableInt0 = new MutableInt();
      mutableInt0.toInteger();
      Integer integer1 = new Integer(2);
      ArrayUtils.insert(2, integerArray0, integerArray0);
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1524()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.isSameLength(intArray0, intArray0);
      Double double0 = new Double(2.147483647E9);
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1525()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      long[] longArray0 = new long[0];
      ArrayUtils.insert((-39), longArray0, longArray0);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1193);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)13;
      ArrayUtils.indexesOf(shortArray0, (short) (-2113));
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1526()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.isSameLength(intArray0, intArray0);
      long[] longArray0 = new long[5];
      longArray0[0] = (-2351L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1L;
      longArray0[4] = 1L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(5, longArray1.length);
      
      long[] longArray2 = ArrayUtils.insert(0, longArray0, longArray0);
      assertArrayEquals(new long[] {(-2351L), 0L, 0L, 1L, 1L, (-2351L), 0L, 0L, 1L, 1L}, longArray2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-483);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)900;
      shortArray0[4] = (short)801;
      shortArray0[5] = (short) (-1193);
      shortArray0[6] = (short)57;
      shortArray0[7] = (short)13;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)57);
      assertEquals(1, bitSet0.cardinality());
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1527()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.isSorted(charArray0);
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1528()  throws Throwable  {
      Long[] longArray0 = new Long[10];
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 2, 2, 2);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1529()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1530()  throws Throwable  {
      char[] charArray0 = new char[2];
      ArrayUtils.removeElements(charArray0, charArray0);
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-631), (int) (short) (-631));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1531()  throws Throwable  {
      ArrayUtils.removeElements((short[]) null, (short[]) null);
      int[] intArray0 = new int[2];
      intArray0[0] = 2130;
      intArray0[1] = 82;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2130, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1532()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 89;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 89, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1533()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1534()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = 'E';
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'E';
      intArray0[1] = (int) 'E';
      intArray0[2] = (int) 'E';
      intArray0[3] = (int) 'E';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 69, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1535()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-270);
      intArray0[1] = (-270);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-270));
      assertEquals("{0, 1}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1536()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = (-663L);
      longArray0[1] = 0L;
      longArray0[2] = (-1730L);
      longArray0[3] = 9L;
      ArrayUtils.removeAllOccurrences(doubleArray0, (double) (-1730L));
      ArrayUtils.toObject(longArray0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-663L);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) (-1730L);
      floatArray0[4] = (float) 9L;
      ArrayUtils.removeAllOccurences(floatArray0, (float) (-1730L));
      Integer integer0 = new Integer(286);
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1537()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-53);
      ArrayUtils.toObject((short[]) null);
      ArrayUtils.indexesOf((short[]) null, (short)86);
      ArrayUtils.removeAllOccurrences((long[]) null, 2358L);
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1538()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.removeAllOccurences((byte[]) null, (byte)44);
      ArrayUtils.shift((Object[]) integerArray0, (-2397), 594, (-2397));
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)44);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      ArrayUtils.indexesOf((int[]) null, 240, (-483));
      ArrayUtils.nullToEmpty(stringArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (-1));
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-483);
      longArray0[1] = (long) 594;
      longArray0[2] = (long) 594;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {(-483L), 594L, 594L, (-483L), 594L, 594L}, longArray1);
      
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 594, (-745));
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = '/';
      charArray0[2] = '*';
      int int1 = ArrayUtils.indexOf(charArray0, '*', 802);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1539()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)70;
      shortArray0[2] = (short)115;
      shortArray0[3] = (short) (-1754);
      ArrayUtils.shift(shortArray0, 1225);
      ArrayUtils.reverse((short[]) null);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)70;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)70;
      intArray0[3] = (int) (short)1;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-2319));
      int[] intArray2 = new int[1];
      intArray2[0] = (int) (short)1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(728, intArray1, intArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 728, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1540()  throws Throwable  {
      int[] intArray0 = new int[10];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1472);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1541()  throws Throwable  {
      float[] floatArray0 = new float[5];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1542()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1501);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1501;
      longArray0[1] = (long) 1501;
      longArray0[2] = (long) 1501;
      longArray0[3] = (long) 1501;
      boolean boolean0 = ArrayUtils.contains(longArray0, 1501L);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 1501L;
      bitSet0.clear(1265);
      assertEquals("{}", bitSet0.toString());
      
      objectArray0[1] = (Object) 1501L;
      objectArray0[2] = (Object) 1501L;
      objectArray0[3] = (Object) 1501L;
      BitSet.valueOf(longArray0);
      objectArray0[4] = (Object) 1501L;
      objectArray0[5] = (Object) 1501L;
      objectArray0[6] = (Object) bitSet0;
      objectArray0[7] = (Object) 1501L;
      objectArray0[8] = (Object) bitSet0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(9, stringArray0.length);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      long[] longArray2 = ArrayUtils.addAll(longArray1, (long[]) null);
      assertNotNull(longArray2);
      assertEquals(4, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test1543()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1544()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (-2302.96F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1545()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1546()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.lang.Short";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1547()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1273));
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1548()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-59);
      shortArray0[1] = (short)1082;
      shortArray0[2] = (short)91;
      ArrayUtils.reverse(shortArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)91;
      intArray0[1] = (-908);
      intArray0[2] = (int) (short) (-59);
      intArray0[3] = (-58);
      ArrayUtils.indexesOf(intArray0, (int) (short) (-59), 1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.junitpioneer.jupiter.RepeatFailedTestExtension";
      stringArray0[1] = "P{isr8]E/`U$";
      ArrayUtils.nullToEmpty(stringArray0);
      float[] floatArray0 = new float[0];
      ArrayUtils.removeAllOccurences(floatArray0, (-1.0F));
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-58);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (short) (-59);
      longArray0[3] = (long) (-908);
      longArray0[4] = (long) (-58);
      longArray0[5] = (long) (short)1082;
      longArray0[6] = (long) (short)1082;
      longArray0[7] = (-1L);
      longArray0[8] = (long) (-58);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(18, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1549()  throws Throwable  {
      long[] longArray0 = new long[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (byte) (-24));
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-24);
      floatArray0[1] = (float) (-663L);
      floatArray0[2] = (float) (-663L);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-24));
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'm', (-1210));
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-45.0);
      doubleArray0[1] = (double) 0;
      int int2 = ArrayUtils.indexOf(doubleArray0, (-45.0), (-3122));
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test1550()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1551()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2837.6;
      doubleArray0[1] = Double.NaN;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2837.6);
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1552()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-793.85174), 100);
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1553()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)12;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (byte)112);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)12;
      longArray0[3] = (long) (byte)12;
      longArray0[4] = (long) (byte)12;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (-1589L);
      longArray0[7] = (long) (byte)12;
      longArray0[8] = (long) (byte)112;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(9, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1554()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.indexOf(booleanArray0, false);
      Integer integer0 = new Integer(1);
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      ArrayUtils.toPrimitive(object0);
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (-1770.1606321476465));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1555()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayUtils.indexesOf(doubleArray0, (double) 1501);
      Byte[] byteArray0 = new Byte[0];
  }

  @Test(timeout = 4000)
  public void test1556()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)100;
      ArrayUtils.reverse(byteArray0);
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) (byte)100;
      floatArray0[2] = (float) (byte)100;
      floatArray0[4] = (float) 22;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1557()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1476.5));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1558()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)12;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)112}, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)112;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (byte)112);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)112;
      longArray0[1] = (long) (byte)112;
      longArray0[2] = (long) (byte)12;
      longArray0[3] = (long) (byte)12;
      longArray0[4] = (long) (byte)12;
      longArray0[5] = (long) (byte)112;
      longArray0[6] = (-1589L);
      longArray0[7] = (long) (byte)12;
      longArray0[8] = (long) (byte)112;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(9, longArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)12;
      intArray0[1] = (int) (byte)12;
      intArray0[2] = 248;
      intArray0[3] = (int) (byte)112;
      intArray0[4] = (int) (byte)112;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1559()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 6;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 6, 0);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 18688);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-24);
      longArray0[1] = (long) (-2147483627);
      longArray0[2] = (long) (byte) (-36);
      longArray0[4] = (long) 4;
      ArrayUtils.shift(longArray0, 6);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1284L);
      assertArrayEquals(new long[] {(-2147483627L), (-36L), 0L, 4L, 0L, 0L, (-24L)}, longArray1);
      
      ArrayUtils.lastIndexOf(floatArray0, 4524.063F);
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 2560.5803F);
      assertEquals(1, floatArray1.length);
      
      ArrayUtils.toPrimitive(longArray2);
      assertArrayEquals(new long[] {(-2147483627L), (-36L), 0L, 4L, 0L, 0L, (-24L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1560()  throws Throwable  {
      float[] floatArray0 = new float[3];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)115;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-104));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)115;
      doubleArray0[1] = 1069.3;
      doubleArray0[2] = (double) (byte)115;
      doubleArray0[3] = 1069.3;
      ArrayUtils.indexOf(doubleArray0, 1.0);
      ArrayUtils.removeElement(floatArray0, (float) (byte) (-1));
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)115}, byteArray1);
      assertTrue(boolean0);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap(floatArray0, 4323, 61, (int) (byte)115);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'T';
      longArray0[1] = (long) (byte)115;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1337);
      ArrayUtils.shift(longArray0, (-3550), 728, 1630);
      assertArrayEquals(new long[] {(-1L), (-1337L), 84L, 115L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1561()  throws Throwable  {
      float[] floatArray0 = new float[3];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray1);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1562()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      ArrayUtils.nullToEmpty(doubleArray1);
      ArrayUtils.isSameLength(shortArray0, shortArray1);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      ArrayUtils.contains(booleanArray0, true);
      Character[] characterArray0 = new Character[2];
      char char0 = '_';
      Character character0 = Character.valueOf('_');
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      characterArray0[1] = character1;
      ArrayUtils.nullToEmpty(characterArray0);
      ArrayUtils.nullToEmpty((Float[]) null);
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1563()  throws Throwable  {
      ArrayUtils.isNotEmpty((long[]) null);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1719;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short) (-28);
      shortArray0[3] = (short)7920;
      shortArray0[4] = (short) (-3260);
      ArrayUtils.lastIndexOf(shortArray0, (short)114, (int) (short)7920);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.add(booleanArray0, false);
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-3260);
      intArray0[1] = (int) (short)7920;
      intArray0[2] = (int) (short)114;
      intArray0[3] = (int) (short) (-28);
      intArray0[4] = 48;
      intArray0[5] = (int) (short) (-3260);
      intArray0[6] = (int) (short)7920;
      intArray0[7] = (int) (short)7920;
      intArray0[8] = (int) (short)7920;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7920, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1564()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.removeElements(shortArray0, shortArray0);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(7, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test1565()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.shift(longArray0, 663);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1566()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 'Z';
      charArray0[6] = 'Z';
      int int0 = 2;
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      integerArray0[2] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {2, 2, 2}, intArray0);
      
      ArrayUtils.reverse((long[]) null);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) int0);
      assertArrayEquals(new float[] {2.0F, 2.0F}, floatArray1, 0.01F);
      
      char[] charArray1 = ArrayUtils.insert(int0, charArray0, charArray0);
      assertEquals(20, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1567()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1568()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'L', (-827));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1569()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1570()  throws Throwable  {
      char[] charArray0 = new char[20];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '\u0000');
      assertEquals(21, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1571()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 2321);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1572()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 59, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1573()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = 'm';
      charArray0[2] = '+';
      charArray0[3] = 'h';
      charArray0[4] = 'A';
      charArray0[5] = 'z';
      charArray0[6] = 'u';
      charArray0[7] = '9';
      int int0 = 1449;
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 1449, 'b');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1449, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1574()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 5, '%');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1575()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)4698);
      assertArrayEquals(new short[] {(short)4698, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1576()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-437));
      assertArrayEquals(new short[] {(short) (-437)}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1577()  throws Throwable  {
      short[] shortArray0 = new short[10];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1578()  throws Throwable  {
      short[] shortArray0 = new short[3];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1314, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1314, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1579()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)122;
      shortArray0[1] = (short)3832;
      shortArray0[2] = (short)97;
      shortArray0[3] = (short)1365;
      shortArray0[4] = (short)139;
      shortArray0[5] = (short)0;
      ArrayUtils.addFirst(shortArray0, (short) (-121));
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1365;
      floatArray0[1] = (float) (short)3832;
      ArrayUtils.swap(floatArray0, 986, (-1246));
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1580()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)35;
      intArray0[1] = (int) (byte)35;
      intArray0[2] = (int) (byte)35;
      intArray0[3] = (int) (byte)35;
      intArray0[4] = (int) (byte)35;
      intArray0[5] = (int) (byte)35;
      intArray0[6] = (int) (byte)35;
      intArray0[7] = (int) (byte)35;
      intArray0[8] = (int) (byte)35;
      int[] intArray1 = new int[8];
      intArray1[0] = (int) (byte)35;
      intArray1[1] = (int) (byte)35;
      intArray1[2] = (int) (byte)35;
      intArray1[3] = (int) (byte)35;
      intArray1[4] = (int) (byte)35;
      intArray1[5] = (int) (byte)35;
      intArray1[6] = (int) (byte)35;
      intArray1[7] = (int) (byte)35;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertEquals(1, intArray2.length);
      assertArrayEquals(new int[] {35}, intArray2);
  }

  @Test(timeout = 4000)
  public void test1581()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-3856);
      intArray0[1] = (-742);
      intArray0[2] = (-3856);
      intArray0[3] = 2;
      intArray0[4] = (-742);
      intArray0[5] = (-3856);
      intArray0[6] = (-742);
      intArray0[7] = (-1021);
      intArray0[8] = (-742);
      ArrayUtils.removeElements(intArray0, intArray0);
      ArrayUtils.nullToEmpty((Boolean[]) null);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3856);
      doubleArray0[1] = (double) (-1021);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-3856);
      ArrayUtils.swap(floatArray0, 2, (-742));
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1582()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-170);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-711);
      ArrayUtils.swap((float[]) null, (-3550), (-904));
  }

  @Test(timeout = 4000)
  public void test1583()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1584()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.isSorted(integerArray0);
      float[] floatArray0 = new float[5];
      int[] intArray0 = new int[0];
      ArrayUtils.removeElements(intArray0, intArray0);
      ArrayUtils.nullToEmpty((Boolean[]) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2828;
      doubleArray0[1] = (double) 2828;
      doubleArray0[2] = (-1.0);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      ArrayUtils.swap(floatArray0, 76, (-2144278447));
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1585()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.removeElements((int[]) null, (int[]) null);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      ArrayUtils.swap(floatArray0, 0, 9);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1586()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1587()  throws Throwable  {
      short[] shortArray0 = new short[7];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1588()  throws Throwable  {
      ArrayUtils.isSameLength((double[]) null, (double[]) null);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 1717, (long) 1717);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1717, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1589()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, 2971L);
      assertArrayEquals(new long[] {2971L}, longArray0);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1590()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)55);
      assertArrayEquals(new byte[] {(byte)55}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1591()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1592()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, 2, object0);
      assertNull(object1);
      
      objectArray0[1] = null;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.insert(2, longArray0, longArray0);
      assertEquals(12, longArray1.length);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1593()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1594()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      char[] charArray0 = new char[4];
      charArray0[0] = 'r';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 488;
      ArrayUtils.reverse(intArray0, (-1), 0);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1L);
      assertEquals(1, longArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) ';';
      floatArray0[1] = (float) 123;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 488;
      floatArray0[5] = (float) (-766L);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (float) 1L);
      assertArrayEquals(new float[] {1.0F, 59.0F, 123.0F, 0.0F, 0.0F, 488.0F, (-766.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1595()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1596()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-1), 2883, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1597()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 3268L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {3268L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1598()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte) (-17));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0, 6, (int) (byte) (-36));
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      ArrayUtils.isSorted(intArray1);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1599()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.isSorted(integerArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)67;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)42;
      shortArray0[1] = (short) (byte)67;
      ArrayUtils.addAll(shortArray0, shortArray0);
      ArrayUtils.reverse((Object[]) integerArray0);
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)67;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (short)67;
      intArray0[3] = (int) (byte)2;
      ArrayUtils.reverse(intArray0, (int) (byte)2, 2);
      ArrayUtils.addFirst((long[]) null, (long) 67);
      ArrayUtils.add(floatArray0, 0, 804.91187F);
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      ArrayUtils.swap(charArray0, 2011, 67, 67);
      assertArrayEquals(new char[] {'Y'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1600()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1601()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1602()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.addFirst(booleanArray0, true);
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1603()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.toObject(shortArray0);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 3553, 3553, 3553);
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = '%';
      charArray0[2] = 'f';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = '9';
      ArrayUtils.addAll(charArray0, (char[]) null);
      Integer integer0 = new Integer(3553);
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(3553, object0);
  }

  @Test(timeout = 4000)
  public void test1604()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = 'a';
      charArray0[2] = '_';
      charArray0[3] = '[';
      charArray0[4] = '5';
      charArray0[5] = 'J';
      charArray0[6] = 't';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(14, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 488;
      intArray0[1] = (int) 'J';
      intArray0[2] = (int) 'a';
      intArray0[3] = (int) 'a';
      intArray0[4] = (int) '9';
      intArray0[5] = (int) '[';
      ArrayUtils.reverse(intArray0, 0, (-2303));
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 488;
      longArray0[1] = (long) 't';
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-766L));
      assertArrayEquals(new long[] {(-766L), 488L, 116L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1605()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      boolean boolean0 = ArrayUtils.contains(charArray0, '^');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1606()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = ArrayUtils.contains(charArray0, '|');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1607()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1608()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)1072;
      shortArray0[2] = (short)1072;
      shortArray0[3] = (short) (-764);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-287);
      shortArray0[6] = (short)1;
      shortArray0[7] = (short)1771;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)32);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1609()  throws Throwable  {
      short[] shortArray0 = new short[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2580));
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1610()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-18), 38);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -18, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1611()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1068.76);
      int int0 = (-488);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-488), (-1068.76));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -488, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1612()  throws Throwable  {
      short[] shortArray0 = new short[6];
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, (int) (short)269, (-117.149328));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 269, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1613()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Short[] shortArray0 = new Short[0];
      ArrayUtils.toPrimitive(shortArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-110), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -110, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1614()  throws Throwable  {
      int int0 = 97;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-53);
      byte byte1 = (byte)48;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-1), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1615()  throws Throwable  {
      Short short0 = new Short((short)1136);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)105;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1319, byteArray0, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1319, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1616()  throws Throwable  {
      ArrayUtils.isNotEmpty((float[]) null);
      ArrayUtils.swap((float[]) null, (int) (byte)0, 2146689078, 2146689078);
      Integer integer0 = new Integer((byte)0);
      ArrayUtils.shift((char[]) null, 1628);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-1419), byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1617()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1618()  throws Throwable  {
      int int0 = 97;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byte byte1 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte3 = (byte) (-53);
      byteArray0[3] = (byte) (-53);
      byte byte4 = (byte)48;
      byteArray0[4] = (byte)48;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(97, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1619()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.contains(booleanArray0, true);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = ArrayUtils.get(integerArray0, 0);
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test1620()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = '9';
      charArray0[3] = 'k';
      ArrayUtils.isEmpty(charArray0);
      Integer[] integerArray0 = new Integer[7];
      int int0 = 101;
      Integer integer0 = new Integer(101);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1212);
      Integer integer2 = new Integer((-945));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-945));
      integerArray0[4] = integer3;
      integerArray0[5] = integer0;
      Integer integer4 = new Integer(int0);
      integerArray0[6] = integer4;
      Integer integer5 = ArrayUtils.get(integerArray0, int0, integer2);
      assertFalse(integer5.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test1621()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      ArrayUtils.toPrimitive(shortArray0, (short)4122);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      ArrayUtils.get(abstractMap_SimpleImmutableEntryArray0, (int) 4122);
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1622()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.get(integerArray0, (-44));
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1623()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.isSameLength(floatArray0, floatArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      ArrayUtils.add(doubleArray0, 1.0);
      boolean boolean0 = false;
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1624()  throws Throwable  {
      ArrayUtils.add((double[]) null, 0.0);
      ArrayUtils.isEmpty((boolean[]) null);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-6);
      longArray0[1] = (long) (byte) (-6);
      longArray0[2] = (long) (byte)112;
      ArrayUtils.shuffle(longArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1625()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1626()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'O';
      ArrayUtils.contains(charArray0, 'g');
      ArrayUtils.shift(charArray0, (-3945));
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3945);
      longArray0[2] = (long) '|';
      ArrayUtils.lastIndexOf((short[]) null, (short)4163);
      ArrayUtils.subarray(charArray0, (int) (byte)105, (-3945));
      ArrayUtils.reverse((short[]) null, (-105), 77);
  }

  @Test(timeout = 4000)
  public void test1627()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 1530, 1530, 1033);
      short[] shortArray0 = new short[6];
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = '9';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(1033);
      Integer integer1 = new Integer(101);
      Integer integer2 = new Integer(101);
      Integer.getInteger((String) null);
      Integer integer3 = new Integer((-1037));
      ArrayUtils.reverse(shortArray0, (int) (short) (-2966), 1530);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      ArrayUtils.reverse(byteArray0, (-342), 101);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1628()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)745;
      shortArray0[2] = (short)745;
      ArrayUtils.reverse(shortArray0);
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1629()  throws Throwable  {
      ArrayUtils.indexOf((byte[]) null, (byte)0, 2621);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      ArrayUtils.isEmpty(intArray0);
      ArrayUtils.toObject((float[]) null);
      ArrayUtils.reverse((byte[]) null, Integer.MAX_VALUE, (-1));
      short[] shortArray0 = new short[1];
      int int0 = new Integer(2621);
      ArrayUtils.swap((double[]) null, (int) (byte) (-116), 2444, 63);
  }

  @Test(timeout = 4000)
  public void test1630()  throws Throwable  {
      Long long0 = new Long(0L);
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1631()  throws Throwable  {
      Long[] longArray0 = new Long[7];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1632()  throws Throwable  {
      Long[] longArray0 = new Long[6];
      long long0 = (-1L);
      Long long1 = new Long((-1L));
      longArray0[0] = long1;
      Long long2 = new Long(long0);
      longArray0[1] = long2;
      Long long3 = new Long(1489L);
      longArray0[2] = long3;
      Long long4 = new Long(long0);
      longArray0[3] = long4;
      Long long5 = new Long((long) longArray0[2]);
      longArray0[4] = long5;
      Long long6 = new Long((-4184L));
      longArray0[5] = long6;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), 1489L, (-1L), 1489L, (-4184L)}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1633()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1634()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1948.2119F);
      floatArray0[4] = (-2262.0F);
      boolean boolean1 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 2675L;
      longArray0[1] = 2882L;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 2882L);
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertArrayEquals(new long[] {2675L, 2882L, 2675L}, longArray2);
  }

  @Test(timeout = 4000)
  public void test1635()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      ArrayUtils.toStringArray((Object[]) floatArray0);
      float[] floatArray1 = new float[1];
      floatArray1[0] = Float.NaN;
      ArrayUtils.swap(floatArray1, 2597, 2597, 22);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1636()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 3271L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 728, 728);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 728;
      doubleArray0[1] = (double) 3271L;
      ArrayUtils.shift(doubleArray0, (int) (short)0, (int) (short)0, (-699));
      short[] shortArray2 = new short[4];
      shortArray2[0] = (short)0;
      shortArray2[1] = (short)0;
      shortArray2[2] = (short) (-2130);
      shortArray2[3] = (short)0;
      short[] shortArray3 = ArrayUtils.addAll(shortArray2, shortArray2);
      assertEquals(8, shortArray3.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-2130), (short)0, (short)0, (short)0, (short) (-2130), (short)0}, shortArray3);
  }

  @Test(timeout = 4000)
  public void test1637()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shift(floatArray0, 34);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1638()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1639()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 85, 85, 85);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1640()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayUtils.shuffle(intArray0);
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1641()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      ArrayUtils.shift(doubleArray0, 1248, 1248, 1248);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1248;
      floatArray0[1] = (float) 1248;
      floatArray0[2] = (float) 1248;
      ArrayUtils.swap(floatArray0, 1248, 1248, 1248);
      int[] intArray0 = new int[9];
      intArray0[0] = 1248;
      intArray0[1] = 1248;
      intArray0[2] = 1248;
      intArray0[3] = 3767;
      intArray0[4] = 1248;
      intArray0[5] = 0;
      intArray0[6] = 1248;
      intArray0[7] = 1248;
      intArray0[8] = 1248;
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle(intArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new int[] {1248, 1248, 3767, 1248, 0, 1248, 1248, 1248, 1248}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1642()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-2898));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2898, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1643()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1644()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_BYTE_ARRAY);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_SHORT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1645()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (-3137));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3137, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1646()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2231));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1647()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.shift(intArray0, (-92), (-92), 602);
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1648()  throws Throwable  {
      ArrayUtils.isNotEmpty((float[]) null);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-6));
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(2, byteArray2.length);
      assertNotNull(byteArray2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-1648.524);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (byte) (-6);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (-3258.6331628518);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1649()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2243));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1650()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse((byte[]) null, (int) (byte)42, 84);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2460);
      assertArrayEquals(new short[] {(short)2460, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer((byte)42);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer0);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-1309), 1987, (-1649));
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)2460;
      intArray0[1] = (int) (byte)42;
      intArray0[2] = (int) integerArray0[0];
      ArrayUtils.shift(intArray0, (-1347), (int) integerArray0[0], (int) integerArray0[0]);
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new int[] {2460, 42, 42}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1651()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 9);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      Class<Integer> class8 = Integer.class;
      classArray0[8] = class8;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(9, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test1652()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1653()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 76);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1654()  throws Throwable  {
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test1655()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1648.524);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1656()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1657()  throws Throwable  {
      int[] intArray0 = new int[6];
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1658()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1730.4865802610177;
      doubleArray0[1] = 112.0;
      doubleArray0[2] = (-197.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 2494.81752198;
      doubleArray0[5] = (-690.8);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-887.8721313476562);
      doubleArray0[8] = (-1730.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1659()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-720.0F);
      floatArray0[1] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 6);
      assertEquals(1, int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      Integer integer0 = new Integer(6);
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1660()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-264));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1661()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'e');
      assertEquals(5, charArray1.length);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1662()  throws Throwable  {
      ArrayUtils.getLength((Object) null);
      long[] longArray0 = new long[0];
      ArrayUtils.subarray(longArray0, 0, 2);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 'Z';
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 90.0F);
      assertEquals(1, int0);
      
      ArrayUtils.indexOf((double[]) null, (double) 2);
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertNotNull(longArray2);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) ';';
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {59, 59}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1663()  throws Throwable  {
      long[] longArray0 = new long[3];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1664()  throws Throwable  {
      ArrayUtils.removeAllOccurrences((char[]) null, '3');
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-2802.3915451903));
      doubleArray0[0] = double0;
      Double double1 = new Double((-2802.3915451903));
      doubleArray0[1] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      float[] floatArray0 = ArrayUtils.add((float[]) null, 0.0F);
      assertNotNull(floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (-3094));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 0.0F;
      doubleArray2[1] = (double) doubleArray0[0];
      doubleArray2[2] = (double) 0.0F;
      doubleArray2[3] = 2842.44857463869;
      doubleArray2[4] = (double) (-1);
      doubleArray2[5] = (double) (-1);
      doubleArray2[6] = (double) (-1);
      int int1 = ArrayUtils.indexOf(doubleArray2, (double) doubleArray0[0], 3131, (double) (-1));
      assertTrue(int1 == int0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1665()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.contains(longArray0, (-2127L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1666()  throws Throwable  {
      ArrayUtils.lastIndexOf((float[]) null, 0.0F);
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1667()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (-1873.5384872298));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1668()  throws Throwable  {
      float[] floatArray0 = new float[12];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1669()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1670()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-512L));
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1671()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '\u0000');
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1672()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 3554);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(6, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test1673()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-230.6F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 2146275363);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1674()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 1L);
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1675()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1676()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }
}
