/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 11:52:12 GMT 2025
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.lang3.text.StrMatcher;
import org.apache.commons.lang3.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StrTokenizer_ESTest extends StrTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("F.1.Jlk=|);K\"Z4", 'w', '(');
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = '(';
      charArray0[3] = '(';
      charArray0[4] = '(';
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      String string0 = strTokenizer1.nextToken();
      assertEquals("\u0000(\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[20];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '\u0085', '\u0000');
      String string0 = strTokenizer0.next();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("F.1.Jlk=|);K\"Z4", 'w', '(');
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = '(';
      charArray0[3] = '(';
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      strTokenizer1.nextToken();
      assertEquals(1, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("", ";}0$2N{X4\"").when(strMatcher0).toString();
      doReturn((-4218), 39).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrTokenizer strTokenizer0 = new StrTokenizer("(g]DEDU@/>$(a|L", strMatcher0, strMatcher0);
      int int0 = strTokenizer0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("(g]DEDU@/>$(a|L", "[").when(strMatcher0).toString();
      doReturn(9, 24).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrTokenizer strTokenizer0 = new StrTokenizer("(g]DEDU@/>$(a|L", strMatcher0, strMatcher0);
      int int0 = strTokenizer0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("Dqfx,>$o8y", 'q');
      char[] charArray0 = new char[4];
      strTokenizer0.tokenize(charArray0, 101, (-625));
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("Threshold must not be negative", 'V', 'O');
      char[] charArray0 = new char[6];
      charArray0[1] = 'V';
      strTokenizer0.reset(charArray0);
      strTokenizer0.nextToken();
      strTokenizer0.nextToken();
      strTokenizer0.previous();
      assertEquals(1, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("u},\r");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      String string0 = strTokenizer0.previousToken();
      //  // Unstable assertion: assertEquals("},", string0);
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", "$e");
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[11];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("remove() is unsupported");
      char[] charArray0 = new char[5];
      strTokenizer0.tokenize(charArray0, 1, 1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[4];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      List<String> list0 = strTokenizer0.tokenize(charArray0, 0, 1);
      //  // Unstable assertion: assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("NO,j'p.]yf,L", "(g]DEDU@/>$(a|L").when(strMatcher0).toString();
      doReturn((-2686), 2).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrTokenizer strTokenizer0 = new StrTokenizer("(g]DEDU@/>$(a|L", strMatcher0, strMatcher0);
      int int0 = strTokenizer0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[4];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      
      // Undeclared exception!
      try { 
        strTokenizer0.next();
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("remove() is unsupported");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.setQuoteChar('^');
      assertEquals(2, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, 'X', 'X');
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('X');
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      strTokenizer0.setEmptyTokenAsNull(true);
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('i');
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("', is neither of type Map.Entry nor an Array");
      strTokenizer0.next();
      // Undeclared exception!
      try { 
        strTokenizer0.next();
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("', is neither of type Map.Entry nor an Array");
      strTokenizer0.next();
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('u');
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("|", 'b', 'w');
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      strTokenizer0.setEmptyTokenAsNull(true);
      strTokenizer0.setIgnoredChar('+');
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("Dqfx,>$o8y", 'q');
      strTokenizer0.next();
      strTokenizer0.nextToken();
      strTokenizer0.setIgnoreEmptyTokens(false);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("Dqfx,>$o8y", 'q');
      strTokenizer0.next();
      strTokenizer0.setIgnoreEmptyTokens(false);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("1<qITX");
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      strTokenizer1.setIgnoreEmptyTokens(true);
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("StrTokenizer[not tokenized yet]", "StrTokenizer[not tokenized yet]");
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('7');
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      strTokenizer0.setIgnoreEmptyTokens(false);
      StrTokenizer strTokenizer2 = strTokenizer1.reset(charArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer2.forEachRemaining(consumer0);
      strTokenizer1.setEmptyTokenAsNull(false);
      assertEquals(1, strTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.setEmptyTokenAsNull(true);
      assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = 'W';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '5');
      strTokenizer0.setDelimiterChar('W');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.setDelimiterString("");
      assertEquals(2, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Comparator should not be null.");
      strTokenizer0.nextToken();
      strTokenizer0.setDelimiterString("Comparator should not be null.");
      assertEquals(1, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer("(g]DEDU@/>$(a|L", strMatcher0, strMatcher0);
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterString("(g]DEDU@/>$(a|L");
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      StrTokenizer strTokenizer2 = strTokenizer1.setDelimiterString("G9");
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("remove() is unsupported");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      strTokenizer0.setDelimiterChar('H');
      assertEquals(2, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("K>4*P$", 't', 't');
      String string0 = strTokenizer0.next();
      assertEquals("K>4*P$", string0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('i');
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      StrTokenizer strTokenizer2 = strTokenizer1.setDelimiterChar('=');
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      char[] charArray0 = new char[8];
      strTokenizer1.reset(charArray0);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      strTokenizer0.setEmptyTokenAsNull(true);
      StrTokenizer strTokenizer1 = strTokenizer0.reset("g");
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer("(g]DEDU@/>$(a|L", strMatcher0, strMatcher0);
      StrTokenizer strTokenizer1 = strTokenizer0.reset();
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      StrTokenizer strTokenizer2 = strTokenizer1.reset();
      assertTrue(strTokenizer2.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[2];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("?4");
      strTokenizer0.reset(charArray0);
      strTokenizer0.nextToken();
      assertEquals(0, strTokenizer0.previousIndex());
      
      strTokenizer0.previousToken();
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Compaator should not be null.");
      strTokenizer0.nextToken();
      int int0 = strTokenizer0.previousIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = 'C';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'C');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.forEachRemaining(consumer0);
      int int0 = strTokenizer0.previousIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[4];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strTokenizer0.setEmptyTokenAsNull(true);
      strTokenizer0.forEachRemaining(consumer0);
      //  // Unstable assertion: assertEquals(0, strTokenizer0.previousIndex());
      
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[2];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("?4");
      strTokenizer0.reset(charArray0);
      strTokenizer0.nextToken();
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Comparator should not be null.");
      strTokenizer0.nextToken();
      int int0 = strTokenizer0.nextIndex();
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      strTokenizer0.setEmptyTokenAsNull(true);
      // Undeclared exception!
      try { 
        strTokenizer0.next();
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance((char[]) null);
      boolean boolean0 = strTokenizer0.isIgnoreEmptyTokens();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[20];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '\u0085', '\u0000');
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      strTokenizer0.setEmptyTokenAsNull(true);
      boolean boolean0 = strTokenizer0.isEmptyTokenAsNull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      boolean boolean0 = strTokenizer0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Comparator should not be null.");
      List<String> list0 = strTokenizer0.getTokenList();
      assertTrue(list0.contains("Comparator should not be null."));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("NO,j'p.]yf,L", "(g]DEDU@/>$(a|L").when(strMatcher0).toString();
      doReturn((-2686), 2).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrTokenizer strTokenizer0 = new StrTokenizer("(g]DEDU@/>$(a|L", strMatcher0, strMatcher0);
      String[] stringArray0 = strTokenizer0.getTokenArray();
      assertEquals(1, stringArray0.length);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer("(g]DEDU@/>$(a|L", strMatcher0, strMatcher0);
      StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.cloneReset();
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertNotSame(strTokenizer1, strTokenizer0);
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strTokenizer0.tokenize(charArray0, 0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("org.apache.commons.lang3.text.StrMatcher$CharSetMatcher");
      boolean boolean0 = strTokenizer0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      strTokenizer0.hasNext();
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("org.apache.commons.lang3.text.StrTokenizer");
      StrTokenizer strTokenizer1 = strTokenizer0.reset((String) null);
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      strTokenizer0.isEmptyTokenAsNull();
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("K>4*P$", 't', 't');
      boolean boolean0 = strTokenizer0.isIgnoreEmptyTokens();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      String string0 = strTokenizer0.toString();
      assertEquals("StrTokenizer[not tokenized yet]", string0);
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      strTokenizer0.size();
      String string0 = strTokenizer0.toString();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals("StrTokenizer[]", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      String string0 = strTokenizer0.getContent();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer(":x2CVr[F 1Zk8LTqD^L", ":x2CVr[F 1Zk8LTqD^L");
      String string0 = strTokenizer0.getContent();
      assertNotNull(string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrTokenizer strTokenizer0 = new StrTokenizer("", strMatcher0, (StrMatcher) null);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("8?x", (StrMatcher) null);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("8|xoPkS2-J`kP_etTA");
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('J');
      strTokenizer1.next();
      assertEquals(1, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[3] = 'A';
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'q', 'A');
      String string0 = strTokenizer0.next();
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      char[] charArray0 = new char[4];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'k', '\u0000');
      String string0 = strTokenizer0.previousToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      char[] charArray0 = new char[2];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '^', '\u0000');
      strTokenizer0.setIgnoredChar('\u0000');
      // Undeclared exception!
      try { 
        strTokenizer0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(" \t;");
      strTokenizer0.next();
      assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer(":x2CVr[F 1Zk8LTqD^L", ":x2CVr[F 1Zk8LTqD^L");
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("maxWith0cannot be negative");
      strTokenizer0.nextToken();
      assertEquals(0, strTokenizer0.previousIndex());
      
      String string0 = strTokenizer0.previousToken();
      assertEquals("maxWith0cannot be negative", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      strTokenizer0.nextToken();
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      strTokenizer0.getTokenArray();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      // Undeclared exception!
      try { 
        strTokenizer0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      strTokenizer0.getTokenList();
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      int int0 = strTokenizer0.previousIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      // Undeclared exception!
      try { 
        strTokenizer0.set("StrTokenizer[not tokenized yet]");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("");
      StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.clone();
      assertNotSame(strTokenizer1, strTokenizer0);
      assertEquals((-1), strTokenizer1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      int int0 = strTokenizer0.nextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      // Undeclared exception!
      try { 
        strTokenizer0.add("Cannot store ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", "");
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      char[] charArray0 = new char[0];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      String string0 = strTokenizer0.getContent();
      assertNotNull(string0);
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      char[] charArray0 = new char[0];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "v=o_CHL.;NBl");
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }
}
