/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 11:41:42 GMT 2025
 */

package org.apache.commons.lang3.exception;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.UndeclaredThrowableException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ExceptionUtils_ESTest extends ExceptionUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockError mockError0 = new MockError("Index: ");
      Class<MockError> class0 = MockError.class;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
      MockError mockError1 = ExceptionUtils.throwableOfThrowable((Throwable) mockRuntimeException0, class0);
      assertSame(mockError0, mockError1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockError0, (String) null);
      MockThrowable mockThrowable0 = new MockThrowable(undeclaredThrowableException0);
      Class<MockError> class0 = MockError.class;
      MockError mockError1 = ExceptionUtils.throwableOfType((Throwable) mockThrowable0, class0);
      assertSame(mockError0, mockError1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfType((Throwable) mockThrowable0, class0, 1);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Wx0C}Vf o]");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("Wx0C}Vf o]");
      linkedList0.add("Wx0C}Vf o]");
      ExceptionUtils.removeCommonFrames(linkedList0, linkedList1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.equals((Object)linkedList1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("~kt");
      linkedList0.add("");
      ExceptionUtils.removeCommonFrames(linkedList0, linkedList0);
      assertFalse(linkedList0.contains("~kt"));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<Throwable> class0 = Throwable.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockThrowable0, (Class<? extends Throwable>) class0, 1239);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("getNextException");
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockRuntimeException0);
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException(undeclaredThrowableException0);
      UndeclaredThrowableException undeclaredThrowableException1 = new UndeclaredThrowableException(mockRuntimeException1, "getNextException");
      String[] stringArray0 = ExceptionUtils.getRootCauseStackTrace(undeclaredThrowableException1);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockError mockError0 = new MockError();
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockError0);
      mockError0.initCause(undeclaredThrowableException0);
      String string0 = ExceptionUtils.getRootCauseMessage(mockError0);
      assertEquals("UndeclaredThrowableException: ", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfType((Throwable) mockRuntimeException0, class0, 430);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("UJ!1+", mockThrowable0);
      MockError mockError0 = new MockError("@^", mockRuntimeException0);
      Class<MockError> class0 = MockError.class;
      MockError mockError1 = ExceptionUtils.throwableOfThrowable((Throwable) mockError0, class0, (-1464));
      assertSame(mockError0, mockError1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("UeocPciamweY.>TH&");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockThrowable0);
      Class<MockThrowable> class0 = MockThrowable.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) mockRuntimeException0, (Class<? extends Throwable>) class0, (-1));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<MockError> class0 = MockError.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) null, class0, 2482);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<MockRuntimeException> class0 = MockRuntimeException.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) mockRuntimeException0, (Class<? extends Throwable>) class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("UeocPciamweY.>TH&");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockThrowable0);
      Class<MockThrowable> class0 = MockThrowable.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) mockRuntimeException0, (Class<? extends Throwable>) class0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<MockRuntimeException> class0 = MockRuntimeException.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockRuntimeException0, (Class<? extends Throwable>) class0, (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockError mockError0 = new MockError();
      Class<MockError> class0 = MockError.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockError0, (Class<? extends Throwable>) class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockThrowable0);
      Class<MockThrowable> class0 = MockThrowable.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockRuntimeException0, (Class<? extends Throwable>) class0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Throwable[] throwableArray0 = ExceptionUtils.getThrowables(mockThrowable0);
      assertEquals(1, throwableArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      List<Throwable> list0 = ExceptionUtils.getThrowableList((Throwable) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      int int0 = ExceptionUtils.getThrowableCount(mockError0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getStackFrames("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockError mockError0 = new MockError("Index: ");
      List<String> list0 = ExceptionUtils.getStackFrameList(mockError0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockError mockError0 = new MockError();
      StackTraceElement stackTraceElement0 = new StackTraceElement("F", "", "at", 3315);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement1 = new StackTraceElement("at", "maxWith cannot be negative", "", 36);
      stackTraceElementArray0[0] = stackTraceElement1;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      stackTraceElementArray0[4] = stackTraceElement0;
      stackTraceElementArray0[5] = stackTraceElement0;
      mockError0.setStackTrace(stackTraceElementArray0);
      List<String> list0 = ExceptionUtils.getStackFrameList(mockError0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockError mockError0 = new MockError();
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockError0);
      // Undeclared exception!
      try { 
        ExceptionUtils.rethrow((Throwable) undeclaredThrowableException0);
        fail("Expecting exception: UndeclaredThrowableException");
      
      } catch(UndeclaredThrowableException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        ExceptionUtils.rethrow((Throwable) mockThrowable0);
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExceptionUtils.rethrow((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ExceptionUtils.rethrow((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      // Undeclared exception!
      try { 
        ExceptionUtils.removeCommonFrames(linkedList0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ExceptionUtils.printRootCauseStackTrace((Throwable) mockRuntimeException0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The PrintWriter must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      // Undeclared exception!
      try { 
        ExceptionUtils.getStackTrace(mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      // Undeclared exception!
      try { 
        ExceptionUtils.getStackFrames(mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExceptionUtils.getStackFrames((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("s}_twNx", mockThrowable0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("The validated character sequence is empty");
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockRuntimeException0, (PrintStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ExceptionUtils.printRootCauseStackTrace((Throwable) mockError0, (PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The PrintStream must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("~{:Hx[h@@alo");
      ExceptionUtils.printRootCauseStackTrace((Throwable) null, (PrintStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockError mockError0 = new MockError();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(">$9", mockError0);
      mockError0.initCause(mockRuntimeException0);
      List<Throwable> list0 = ExceptionUtils.getThrowableList(mockError0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Throwable throwable0 = ExceptionUtils.getRootCause((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockError mockError0 = new MockError();
      Throwable throwable0 = ExceptionUtils.getRootCause(mockError0);
      assertSame(throwable0, mockError0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockError mockError0 = new MockError(mockThrowable0);
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockError0);
      String string0 = ExceptionUtils.getMessage(undeclaredThrowableException0);
      assertEquals("UndeclaredThrowableException: ", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = ExceptionUtils.getMessage((Throwable) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("getLinkedException");
      MockError mockError0 = new MockError(mockThrowable0);
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockError0, (String[]) null);
      assertSame(mockThrowable0, throwable0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockError mockError0 = new MockError();
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockError0, (String[]) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) null, (String[]) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      String string0 = ExceptionUtils.getStackTrace(mockThrowable0);
      //  // Unstable assertion: assertEquals("sun.reflect.GeneratedConstructorAccessor114.newInstance(Unknown Source)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Throwable[] throwableArray0 = ExceptionUtils.getThrowables((Throwable) null);
      assertEquals(0, throwableArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ExceptionUtils.wrapAndThrow((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ExceptionUtils.wrapAndThrow((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExceptionUtils.wrapAndThrow((Throwable) null);
        fail("Expecting exception: UndeclaredThrowableException");
      
      } catch(UndeclaredThrowableException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Throwable throwable0 = ExceptionUtils.throwableOfType((Throwable) mockThrowable0, (Class<Throwable>) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfThrowable((Throwable) null, class0);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("J");
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("J");
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) linkedList0);
      ExceptionUtils.removeCommonFrames(list1, linkedList0);
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        ExceptionUtils.removeCommonFrames(linkedList0, (List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The List must not be null
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExceptionUtils.removeCommonFrames((List<String>) null, (List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The List must not be null
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ExceptionUtils.printRootCauseStackTrace((Throwable) null, (PrintWriter) null);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockError mockError0 = new MockError();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("getLinkedException");
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockError0, (PrintWriter) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ExceptionUtils.printRootCauseStackTrace((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<MockError> class0 = MockError.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockRuntimeException0, (Class<? extends Throwable>) class0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockError mockError0 = new MockError();
      Class<MockError> class0 = MockError.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockError0, (Class<? extends Throwable>) class0, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockError mockError0 = new MockError("UeocPciamweY.>TH&");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockRuntimeException0);
      Class<MockRuntimeException> class0 = MockRuntimeException.class;
      boolean boolean0 = ExceptionUtils.hasCause(undeclaredThrowableException0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<MockRuntimeException> class0 = MockRuntimeException.class;
      boolean boolean0 = ExceptionUtils.hasCause((Throwable) null, class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockError mockError0 = new MockError();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(">$9", mockError0);
      mockError0.initCause(mockRuntimeException0);
      Class<MockThrowable> class0 = MockThrowable.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) mockError0, (Class<? extends Throwable>) class0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getStackFrames((Throwable) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      String[] stringArray0 = ExceptionUtils.getStackFrames(mockThrowable0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getStackFrames("NIigc.yR>");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getRootCauseStackTrace((Throwable) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = ExceptionUtils.getRootCauseMessage((Throwable) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getDefaultCauseMethodNames();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException(mockRuntimeException0);
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockRuntimeException1, stringArray0);
      assertNotNull(throwable0);
      assertNotSame(throwable0, mockRuntimeException1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      String[] stringArray0 = new String[8];
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockRuntimeException0, stringArray0);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockThrowable0);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockError mockError0 = new MockError();
      int int0 = ExceptionUtils.indexOfType((Throwable) mockError0, (Class<? extends Throwable>) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockError mockError0 = new MockError(mockThrowable0);
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockError0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("", undeclaredThrowableException0);
      Class<MockThrowable> class0 = MockThrowable.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockRuntimeException0, (Class<? extends Throwable>) class0, (-905));
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = ExceptionUtils.getThrowableCount((Throwable) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockError mockError0 = new MockError();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockRuntimeException0);
      assertSame(throwable0, mockError0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ExceptionUtils exceptionUtils0 = new ExceptionUtils();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockError mockError0 = new MockError();
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfType((Throwable) mockError0, class0, (-770));
      assertSame(mockError0, throwable0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<MockError> class0 = MockError.class;
      MockError mockError0 = ExceptionUtils.throwableOfType((Throwable) mockThrowable0, class0);
      assertNull(mockError0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MockError mockError0 = new MockError();
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfThrowable((Throwable) mockError0, class0);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockError mockError0 = new MockError();
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfThrowable((Throwable) mockError0, class0, 76);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ExceptionUtils.rethrow((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockError mockError0 = new MockError();
      Class<MockError> class0 = MockError.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) mockError0, (Class<? extends Throwable>) class0, (-2273));
      assertEquals(0, int0);
  }
}
