/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 11:21:54 GMT 2025
 */

package org.apache.commons.lang3.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.List;
import org.apache.commons.lang3.reflect.FieldUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FieldUtils_ESTest extends FieldUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.writeDeclaredField((Object) null, "fl?\"oat", (Object) "jav.awt.graphicsenv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // target object must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", true);
      // Undeclared exception!
      try { 
        FieldUtils.writeField((Object) field0, "modifiers", (Object) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.writeField((Object) "bq -m9.8Lh UBpzs}", "bq -m9.8Lh UBpzs}", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot locate declared field java.lang.String.bq -m9.8Lh UBpzs}
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", true);
      field0.setChar(field0, '[');
      // Undeclared exception!
      try { 
        FieldUtils.writeStaticField(field0, (Object) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeStaticField((Class<?>) class0, "modifiers", (Object) class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field java.lang.reflect.Field.modifiers is not static
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeDeclaredStaticField((Class<?>) class0, "modifiers", (Object) class0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        FieldUtils.readDeclaredStaticField(class0, "modifiers", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field 'modifiers' is not static
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Field[] fieldArray0 = FieldUtils.getFieldsWithAnnotation(class0, class0);
      assertEquals(0, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getField(class0, "org.apache.commons.lang3.reflect.FieldUtils");
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "Cannot locate declared field %s.%s");
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Field> class0 = Field.class;
      List<Field> list0 = FieldUtils.getAllFieldsList(class0);
      assertEquals(16, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field[] fieldArray0 = FieldUtils.getAllFields(class0);
      assertEquals(16, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Field[] fieldArray0 = FieldUtils.getAllFields(class0);
      assertEquals(0, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", true);
      // Undeclared exception!
      try { 
        FieldUtils.writeStaticField(field0, (Object) "modifiers", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field java.lang.reflect.Field.modifiers is not static
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeStaticField((Class<?>) class0, "oUbSfQs.Z+", (Object) "oUbSfQs.Z+", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot locate field oUbSfQs.Z+ on class java.lang.reflect.Field
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeStaticField((Class<?>) class0, "", (Object) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.writeField((Field) null, (Object) null, (Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The field must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.writeField((Field) null, (Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The field must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", true);
      // Undeclared exception!
      try { 
        FieldUtils.writeField(field0, (Object) field0, (Object) "modifiers");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.writeField((Object) null, "Cannot locate field %s on %s", (Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // target object must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeDeclaredStaticField((Class<?>) class0, "modifiers", (Object) class0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot locate declared field java.lang.reflect.Field.modifiers
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.writeDeclaredField((Object) null, "v7H", (Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // target object must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.removeFinalModifier((Field) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The field must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.removeFinalModifier((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The field must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", true);
      // Undeclared exception!
      try { 
        FieldUtils.readStaticField(field0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field 'modifiers' is not static
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readStaticField((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The field must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        FieldUtils.readStaticField(class0, "The type must not be null", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot locate field 'The type must not be null' on class java.lang.Object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        FieldUtils.readStaticField(class0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readField((Field) null, (Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The field must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readField((Field) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The field must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getField(class0, "modifiers", true);
      // Undeclared exception!
      try { 
        FieldUtils.readField(field0, (Object) "modifiers");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getField(class0, "modifiers", true);
      field0.setAccessible(false);
      try { 
        FieldUtils.readField(field0, (Object) null);
        fail("Expecting exception: IllegalAccessException");
      
      } catch(IllegalAccessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readField((Object) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // target object must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readField((Object) "v. >7H", "v. >7H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot locate field v. >7H on class java.lang.String
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        FieldUtils.readDeclaredStaticField(class0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readDeclaredField((Object) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // target object must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readDeclaredField((Object) "@IBg]jaCsY&:xo3", "@IBg]jaCsY&:xo3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot locate declared field class java.lang.String.@IBg]jaCsY&:xo3
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        FieldUtils.getFieldsListWithAnnotation(class0, (Class<? extends Annotation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The annotation class must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getField((Class<?>) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The class must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        FieldUtils.getField(class0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        FieldUtils.getField(class0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getDeclaredField((Class<?>) null, "]", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The class must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        FieldUtils.getDeclaredField(class0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        FieldUtils.getDeclaredField(class0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getAllFieldsList((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The class must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.writeDeclaredField((Object) "v7H", "v7H", (Object) "v7H", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot locate declared field java.lang.String.v7H
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", true);
      FieldUtils.removeFinalModifier(field0, true);
      assertFalse(field0.isEnumConstant());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", true);
      // Undeclared exception!
      try { 
        FieldUtils.writeField(field0, (Object) "modifiers", (Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", true);
      // Undeclared exception!
      try { 
        FieldUtils.readField(field0, (Object) "modifiers", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Field> list0 = FieldUtils.getAllFieldsList(class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", false);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getField(class0, "modifiers", false);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readStaticField((Field) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The field must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.writeStaticField((Field) null, (Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The field must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeDeclaredStaticField((Class<?>) class0, "", (Object) "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        FieldUtils.readDeclaredStaticField(class0, "-|)):!fwLh5eC*", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot locate declared field java.lang.Object.-|)):!fwLh5eC*
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", true);
      // Undeclared exception!
      try { 
        FieldUtils.writeDeclaredField((Object) field0, "modifiers", (Object) "modifiers", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.writeDeclaredField((Object) "kh{ a2}ah[V", "kh{ a2}ah[V", (Object) "kh{ a2}ah[V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot locate declared field java.lang.String.kh{ a2}ah[V
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.writeField((Object) "modifiers", "modifiers", (Object) "modifiers", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot locate declared field java.lang.String.modifiers
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", true);
      field0.setAccessible(false);
      // Undeclared exception!
      try { 
        FieldUtils.writeField(field0, (Object) class0, (Object) field0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", true);
      // Undeclared exception!
      try { 
        FieldUtils.writeField(field0, (Object) class0, (Object) "modifiers", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getField(class0, "modifiers", true);
      Object object0 = FieldUtils.readDeclaredField((Object) field0, "modifiers", true);
      assertEquals(2, object0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readDeclaredField((Object) "7o<YT", "7o<YT", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot locate declared field class java.lang.String.7o<YT
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", true);
      Object object0 = FieldUtils.readField((Object) field0, "modifiers", true);
      assertEquals(2, object0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readField((Object) "org.junitpioneer.jupiter.params.FloatRange", "org.junitpioneer.jupiter.params.FloatRange", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot locate field org.junitpioneer.jupiter.params.FloatRange on class java.lang.String
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", true);
      field0.setAccessible(false);
      Object object0 = FieldUtils.readField(field0, (Object) field0, true);
      assertEquals(2, object0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", true);
      Object object0 = FieldUtils.readField(field0, (Object) field0, true);
      assertEquals(2, object0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Class<Annotation> class1 = Annotation.class;
      List<Field> list0 = FieldUtils.getFieldsListWithAnnotation(class0, class1);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeDeclaredStaticField((Class<?>) class0, "modifiers", (Object) "modifiers");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot locate declared field java.lang.reflect.Field.modifiers
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readDeclaredField((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // target object must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        FieldUtils.readStaticField(class0, "modifiers");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot locate field 'modifiers' on class java.lang.reflect.Field
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        FieldUtils.getFieldsWithAnnotation(class0, (Class<? extends Annotation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The annotation class must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getField((Class<?>) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The class must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.writeField((Object) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // target object must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        FieldUtils.readDeclaredStaticField(class0, "hP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot locate declared field java.lang.reflect.Field.hP
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getField(class0, "modifiers", true);
      assertNotNull(field0);
      
      FieldUtils.removeFinalModifier(field0);
      assertTrue(field0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeDeclaredStaticField((Class<?>) class0, "", (Object) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field name must not be blank/empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getField(class0, "modifiers", true);
      // Undeclared exception!
      try { 
        FieldUtils.readStaticField(field0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field 'modifiers' is not static
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", true);
      Object object0 = FieldUtils.readField(field0, (Object) field0);
      FieldUtils.writeField(field0, (Object) field0, object0);
      assertFalse(field0.isEnumConstant());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getAllFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The class must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        FieldUtils.readStaticField(class0, "modifiers", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field 'modifiers' is not static
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.readField((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // target object must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FieldUtils fieldUtils0 = new FieldUtils();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = FieldUtils.getDeclaredField(class0, "modifiers", true);
      // Undeclared exception!
      try { 
        FieldUtils.writeStaticField(field0, (Object) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field java.lang.reflect.Field.modifiers is not static
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getDeclaredField((Class<?>) null, "modifiers");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The class must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        FieldUtils.writeStaticField((Class<?>) class0, "modifiers", (Object) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot locate field modifiers on class java.lang.reflect.Field
         //
         verifyException("java.util.Objects", e);
      }
  }
}
