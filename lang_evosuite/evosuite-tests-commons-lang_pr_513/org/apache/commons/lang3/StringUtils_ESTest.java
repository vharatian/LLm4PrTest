/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 12:53:02 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      long[] longArray0 = new long[31];
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("l|\"VAX=~_THk", 1552);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.toCodePoints(string1);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      String string0 = StringUtils.truncate(" but was: ", 1413);
      assertEquals(" but was: ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " but was: ", " but was: ");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("2L", 20, " but was: ");
      assertEquals("2L but was:  but was", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(" but was: "));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) treeSet0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(treeSet0.contains(" but was: "));
      assertFalse(list0.contains(" but was: "));
      
      // Undeclared exception!
      try { 
        StringUtils.join(list0, '>', Integer.MAX_VALUE, (-2220));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2147483647) > toIndex(-2220)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("VA,D]`u<", "VA,D]`u<", 1);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("VA,D]`u<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      String string0 = StringUtils.repeat(". The following paths could not be deleted (see suppressed exceptions for details): ", 3608);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.containsOnly((CharSequence) string0, string0);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "\n";
      stringArray0[2] = "\r";
      stringArray0[3] = " ";
      stringArray0[4] = "\r";
      stringArray0[5] = "";
      stringArray0[6] = "\r";
      stringArray0[7] = "\r";
      stringArray0[8] = "p";
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "p";
      stringArray1[2] = "\r";
      stringArray1[3] = "";
      stringArray1[4] = "\n";
      stringArray1[5] = "\n";
      stringArray1[6] = "";
      stringArray1[7] = "@DefaultLocale not configured correctly. When not using ^ language tag, specify eitherlanguage, or language and country, or language and country and variant.";
      stringArray1[8] = "\n";
      String string0 = StringUtils.replaceEachRepeatedly(" ", stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertEquals("", string0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray1.length);
      assertTrue(boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\r");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("\r", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\n";
      charSequenceArray0[5] = (CharSequence) "\n";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) " ";
      boolean boolean0 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", "\r");
      assertEquals(0, int0);
      
      String string1 = StringUtils.normalizeSpace("\r");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("porg.junitpioneer.jupiter.arams.IntRange", "", 0, 0);
      assertEquals("porg.junitpioneer.jupiter.arams.IntRange", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.join(charArray0, '\"');
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("\u0000");
      assertEquals("\u0000", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("T");
      assertTrue(boolean0);
      
      // Undeclared exception!
      StringUtils.repeat("%LVww$LJ$74", 495573150);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("vr4gG2W%oOV$Iq}DORqblank_blank_blak_2014");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.toRootUpperCase("pm-%Nws:vvz");
      assertEquals("PM-%NWS:VVZ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("y5<\"&*wZ&[");
      assertEquals("Y5<\"&*WZ&[", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("ailedTestExtension", "t", 3029);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.rightPad("t", 14, "$");
      assertEquals("t$$$$$$$$$$$$$", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("]p<aq", (-2536));
      assertEquals("]p<aq", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      String string0 = StringUtils.removeEnd("\r", "\n");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Iterator<Locale.Category> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, "\r", 97, (-2147483647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(97) > toIndex(-2147483647)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)14;
      shortArray0[1] = (short)892;
      shortArray0[2] = (short)2;
      String string0 = StringUtils.join(shortArray0, 'n', 1, (int) (short)2);
      assertArrayEquals(new short[] {(short)14, (short)892, (short)2}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals("892", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("T)XVv8GiH");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      String string0 = StringUtils.rightPad("e", 8192, "e");
      assertNotNull(string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      // Undeclared exception!
      StringUtils.getCommonPrefix(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 809;
      intArray0[1] = 867;
      intArray0[2] = 2142;
      intArray0[3] = 16;
      intArray0[4] = 44;
      intArray0[5] = (-1459);
      intArray0[6] = 4364;
      String string0 = StringUtils.join(intArray0, 'A');
      assertArrayEquals(new int[] {809, 867, 2142, 16, 44, (-1459), 4364}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals("809A867A2142A16A44A-1459A4364", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("809A867A2142A16A44A-1459A4364", "809A867A2142A16A44A-1459A4364");
      assertEquals(1.0, double0, 0.01);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 16;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "809A867A2142A16A44A-1459A4364", 36, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("blank_blank_blak_2014", 'k');
      assertEquals("kblank_blank_blak_2014k", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "hKVcRRmHYUvE";
      String string3 = StringUtils.removeAll("kblank_blank_blak_2014k", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("kblank_blank_blak_2014k", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[0];
      String string4 = StringUtils.join(objectArray0, 'k');
      assertEquals(0, objectArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = "\r";
      // Undeclared exception!
      StringUtils.rightPad("kblank_blank_blak_2014k", 65536, "n2~oQH/$2j0j?4'st");
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.wrap("org.junitpioneer.jupitersparams.IntRange6bB$!P\"a", '\u0006');
      assertEquals("\u0006org.junitpioneer.jupitersparams.IntRange6bB$!P\"a\u0006", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("\u0006org.junitpioneer.jupitersparams.IntRange6bB$!P\"a\u0006");
      assertEquals("\u0006org.junitpioneer.jupitersparams.IntRange6bB$!P\"a", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("org.junitpioneer.jupitersparams.IntRange6bB$!P\"a");
      assertEquals(48, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.length("\u0006org.junitpioneer.jupitersparams.IntRange6bB$!P\"a");
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      // Undeclared exception!
      StringUtils.repeat("FDRFDR", 65536);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      String string0 = StringUtils.chomp("\n\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '<';
      charArray0[2] = 'q';
      charArray0[3] = 'h';
      charArray0[4] = ',';
      charArray0[5] = 'i';
      charArray0[6] = 'i';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\n", charArray0);
      assertArrayEquals(new char[] {'[', '<', 'q', 'h', ',', 'i', 'i'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      String string0 = StringUtils.chomp("\n\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "$";
      objectArray0[1] = (Object) "$";
      char char0 = '_';
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '_', 2147483645, (-3203));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.wrapIfMissing("aCc|cfYsXY|8#Urd+", 'M');
      assertEquals("MaCc|cfYsXY|8#Urd+M", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "MaCc|cfYsXY|8#Urd+M", 97, 97);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      String string0 = StringUtils.chop("\n\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      String string0 = StringUtils.repeat("&c@zAt+ .+J-", 1747);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.indexOfAnyBut((CharSequence) string0, (CharSequence) "&c@zAt+ .+J-");
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      String string0 = StringUtils.unwrap("]lank_bla<k_blak_2014", '\u0000');
      assertEquals("]lank_bla<k_blak_2014", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      
      CharBuffer charBuffer1 = charBuffer0.slice();
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(" ", charBuffer1.toString());
      assertFalse(charBuffer1.hasArray());
      assertEquals(1, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1, charBuffer1.length());
      assertEquals(1, charBuffer1.capacity());
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\n", (CharSequence) charBuffer0);
      assertNotSame(charBuffer0, charBuffer1);
      assertFalse(boolean0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) ")nIhjrB";
      charSequenceArray0[1] = (CharSequence) ")nIhjrB";
      charSequenceArray0[2] = (CharSequence) ")nIhjrB";
      String string0 = StringUtils.abbreviateMiddle("vs?]", "9]H0*sPT\"IWg+RX", 4);
      assertEquals("vs?]", string0);
      assertNotNull(string0);
      
      charSequenceArray0[3] = (CharSequence) "vs?]";
      String string1 = StringUtils.wrapIfMissing(")nIhjrB", "TQ");
      assertEquals("TQ)nIhjrBTQ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[4] = (CharSequence) "TQ)nIhjrBTQ";
      charSequenceArray0[5] = (CharSequence) ")nIhjrB";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      String string0 = StringUtils.repeat('0', (int) '0');
      assertEquals("000000000000000000000000000000000000000000000000", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "000000000000000000000000000000000000000000000000", "000000000000000000000000000000000000000000000000");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("000000000000000000000000000000000000000000000000", (String) null);
      assertEquals("000000000000000000000000000000000000000000000000", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("*WSz|>PIlS6#9JG");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.truncate("000000000000000000000000000000000000000000000000", 24, 24);
      assertEquals("000000000000000000000000", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("blank_blank_blak_2014", '\u0000');
      assertEquals("blank_blank_blak_2014", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("blank_blank_blak_2014");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'b', 46, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Illegal range. The step cannot be zero.", (CharSequence) "Illegal range. The step cannot be zero.", Integer.MAX_VALUE);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Illegal range. The step cannot be zero.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      String string0 = StringUtils.leftPad("0PV.", 2121, '<');
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string0, "Comparator should not be null.");
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.repeat("as\"i|FI}zt!f.r>uF{", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      String string0 = "Argumets c4not boh be nll";
      String[] stringArray0 = StringUtils.split("Argumets c4not boh be nll");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("Argumets c4not boh be nll");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat('c', (-2354));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trim("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string3 = StringUtils.substringAfterLast("", "#$DC}{:RxW8\n");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Argumets c4not boh be nll";
      charSequenceArray0[2] = (CharSequence) "Argumets c4not boh be nll";
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("#$DC}{:RxW8\n", "", "2;/8>T'8[m:qsK($ R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Rn5");
      assertEquals("Rn5", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Extension context \"";
      objectArray0[1] = (Object) "Rn5";
      objectArray0[2] = (Object) "ZX}o}HRpY(1MONjj";
      objectArray0[3] = (Object) "Rn5";
      objectArray0[4] = (Object) "Rn5";
      objectArray0[1] = (Object) "Rn5";
      objectArray0[6] = (Object) "ZX}o}HRpY(1MONjj";
      objectArray0[7] = (Object) "Rn5";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'J', 3, 22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 8;
      intArray0[2] = (int) 'R';
      intArray0[3] = 8;
      intArray0[4] = (int) 'R';
      intArray0[5] = (int) 'R';
      intArray0[6] = 8;
      intArray0[7] = 8;
      intArray0[8] = 8;
      String string1 = StringUtils.join(intArray0, 'T', 3, 5);
      assertArrayEquals(new int[] {8, 0, 82, 8, 82, 82, 8, 8, 8}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals("8T82", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      String string0 = StringUtils.repeat("$ egq>[+A5!54/Q3", ",#X1", 1102);
      assertNotNull(string0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      // Undeclared exception!
      StringUtils.getFuzzyDistance(string0, string0, locale0);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Object varargs must not be null", "Y\\^7B!e");
      assertEquals(3, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Y\\^7B!e", (CharSequence) "Object varargs must not be null");
      assertEquals(30, int1);
      assertFalse(int1 == int0);
      
      Object[] objectArray0 = new Object[10];
      // Undeclared exception!
      StringUtils.join(objectArray0, 'a', (-625248868), 53);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("org.junitpioneer.jupiter.SystemPropertyExtension", "org.junitpioneer.jupiter.SystemPropertyExtension");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("org.junitpioneer.jupiter.SystemPropertyExtension", 1);
      assertEquals("org.junitpioneer.jupiter.SystemPropertyExtension", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      int int0 = 2210;
      String string0 = "Failed to ge";
      String string1 = StringUtils.repeat("Failed to ge", 2210);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "\n";
      String string3 = StringUtils.defaultString(string1, "\n");
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      StringUtils.isAsciiPrintable(string3);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)220;
      shortArray0[1] = (short)11;
      shortArray0[2] = (short) (-2908);
      shortArray0[3] = (short) (-552);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'v', Integer.MAX_VALUE, (int) (short) (-2908));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.removeStartIgnoreCase("EI@aAg#,B0-", "EI@aAg#,B0-");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "EI@aAg#,B0-", 11);
      assertEquals(11, int0);
      
      int int1 = StringUtils.ordinalIndexOf("", "", 11);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(iterator0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte) (-32);
      String string0 = StringUtils.join(byteArray0, 'S', 5, (int) (byte) (-13));
      assertArrayEquals(new byte[] {(byte) (-68), (byte)88, (byte) (-13), (byte)54, (byte)27, (byte) (-123), (byte) (-32)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[7]);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, 'o', 0, 1269);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      String string0 = StringUtils.repeat(' ', (int) ' ');
      assertEquals("                                ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      charArray0[5] = ' ';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "                                ", charArray0);
      assertArrayEquals(new char[] {' ', ' ', ' ', ' ', ' ', ' '}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      int int0 = 1975;
      String string0 = StringUtils.center("P", 1975, 'Y');
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) "P");
      assertEquals(987, int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) string0;
      int int2 = StringUtils.lastIndexOfAny("P", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      char char0 = 'u';
      String string1 = StringUtils.join((byte[]) null, 'u', (-1), 987);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("{DDjY08+(c$$", "{DDjY08+(c$$", "G'\"1L#ZZ28R7EW");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition
         // {DDjY08+(c$$
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 3564, "");
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = "";
      stringArray0[3] = string0;
      stringArray0[4] = "Faied to crate default temp directory";
      stringArray0[5] = "DISPLAYhFORMATDISPLAYhFORMAT";
      stringArray0[6] = string0;
      // Undeclared exception!
      StringUtils.stripAll(stringArray0, "Can only resolve parameter of type \")6;S.>v?qEd^f\" should have a parent context.");
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'L', 0, 0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = "";
      String string2 = StringUtils.rightPad("", 3564, "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[1] = (CharSequence) string2;
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3564;
      intArray0[2] = (int) 'L';
      String string3 = StringUtils.join(intArray0, 'r', 9, (-474));
      assertArrayEquals(new int[] {3564, 0, 76}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)charSequence0));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string2;
      stringArray0[1] = "}Y\"#I'FMm Gw9f";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals("}Y\"#I'FMm Gw9f", string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[1] = 'L';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      charArray0[4] = 'r';
      charArray0[5] = 'L';
      charArray0[6] = 'r';
      // Undeclared exception!
      StringUtils.containsAny((CharSequence) string2, charArray0);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Iterator<String> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      
      String string0 = StringUtils.remove("VPwQuZfifW@C:", "VPwQuZfifW@C:");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("Fa");
      assertEquals("F", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "Fa", (CharSequence) "F");
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isAlpha("F");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("F");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) priorityQueue0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) priorityQueue0;
      objectArray0[3] = (Object) "F";
      objectArray0[4] = (Object) priorityQueue0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) iterator0;
      objectArray0[7] = (Object) "Fa";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "", 1, 77);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(2, enumSet0.size());
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals("DISPLAYFORMAT", string0);
      assertNotNull(string0);
      assertEquals(2, enumSet0.size());
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("/wEq?>] j-90tt", "lT 9$| SzReI%fnomw");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.strip("l2 A8?:e]a0#`c", "");
      assertEquals("l2 A8?:e]a0#`c", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "l2 A8?:e]a0#`c", 94);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "lT 9$| SzReI%fnomw", 32);
      assertEquals(6, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "l2 A8?:e]a0#`c", (char[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      String string0 = "maxWith cannot be negative";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("maxWith cannot be negative", (String) null);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.LF;
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.leftPad("maxWith cannot be negative", 65536, "\n");
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.add(object0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(object0));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(object0));
      
      String string0 = StringUtils.join(iterator0, ';');
      assertNotNull(string0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(object0));
      assertFalse(linkedList0.contains(';'));
      
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@54a37129";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      String string1 = StringUtils.toRootLowerCase("offset cannot be negative");
      assertEquals("offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("&Aha)nIhjrB");
      assertEquals("&Aha)nIhjrB", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("&Aha)nIhjrB", "offset cannot be negative");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)16;
      String string3 = StringUtils.join(byteArray0, '`', 5, (int) (byte)16);
      assertEquals(17, byteArray0.length);
      assertEquals("0`0`0`0`0`0`0`0`0`0`0", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "&Aha)nIhjrB", (int) (byte)16, (int) (byte)97);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "Oz79B1\"");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", (String) null, (-11));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("gI2X2T8PS");
      assertTrue(boolean0);
      
      String string1 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category1));
      
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 'h');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.leftPad("", (-2370));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.abbreviateMiddle("vCs ", "", (-1));
      assertEquals("vCs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("\n", "");
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[7];
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertTrue(boolean0);
      
      stringArray0[0] = "\n";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[4] = "vCs ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("vCs ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      String string0 = StringUtils.trim(". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details):", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(". The following paths could not be deleted (see suppressed exceptions for details):", ". The following paths could not be deleted (see suppressed exceptions for details):", 25);
      assertEquals(25, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(". The following paths could not be deleted (see suppressed exceptions for details):");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(25, stringArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isEmpty(". The following paths could not be deleted (see suppressed exceptions for details):");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "m|'Yu{e@lC)!xA@*SZ";
      objectArray0[1] = (Object) "m|'Yu{e@lC)!xA@*SZ";
      objectArray0[2] = (Object) "m|'Yu{e@lC)!xA@*SZ";
      objectArray0[3] = (Object) "m|'Yu{e@lC)!xA@*SZ";
      objectArray0[4] = (Object) "m|'Yu{e@lC)!xA@*SZ";
      objectArray0[5] = (Object) "m|'Yu{e@lC)!xA@*SZ";
      objectArray0[6] = (Object) "m|'Yu{e@lC)!xA@*SZ";
      String string0 = StringUtils.joinWith("m|'Yu{e@lC)!xA@*SZ", objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals("m|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "m|'Yu{e@lC)!xA@*SZ";
      stringArray0[1] = "m|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZ";
      stringArray0[2] = "m|'Yu{e@lC)!xA@*SZ";
      stringArray0[3] = "m|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZ";
      stringArray0[4] = "m|'Yu{e@lC)!xA@*SZ";
      stringArray0[5] = "m|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZ";
      stringArray0[6] = "m|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZ";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("m|'Yu{e@lC)!xA@*SZ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("m|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.substringBeforeLast("m|'Yu{e@lC)!xA@*SZ", "Array and element cannot both be null");
      assertEquals("m|'Yu{e@lC)!xA@*SZ", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "m|'Yu{e@lC)!xA@*SZ", 64);
      assertEquals(7, int0);
      
      String string3 = StringUtils.chomp("m|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZ");
      assertEquals("m|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZm|'Yu{e@lC)!xA@*SZ", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string4 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string4);
      
      String string5 = StringUtils.join((int[]) null, 'h', 64, 7);
      assertNull(string5);
      
      String string6 = StringUtils.stripToNull("3C5^");
      assertEquals("3C5^", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(117);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(117, charBuffer0.remaining());
      assertEquals(117, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(117, charBuffer0.capacity());
      assertEquals(117, charBuffer0.length());
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) charBuffer0, (CharSequence) charBuffer0, 117);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      String string0 = StringUtils.difference("?j/PN_9:`[", "?j/PN_9:`[");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      String string1 = StringUtils.replace("?j/PN_9:`[", "FaD SBVj0-vyfT<Zo-", "");
      assertEquals("?j/PN_9:`[", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "FaD SBVj0-vyfT<Zo-";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "FaD SBVj0-vyfT<Zo-");
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, 'M', 0, 2556);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toString(byteArray0, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "\"^s`c'=uW");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Strings must not be null", "Can only resolve parameter of type ", "\"^s`c'=uW");
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) "\"^s`c'=uW");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isWhitespace("Strings must not be null");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = '[';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      charArray0[4] = '$';
      charArray0[5] = 'x';
      charArray0[6] = '8';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'c', 21, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.removeEnd("y\"u_?7sYD8d", "vkL@3lt|Y';");
      assertEquals("y\"u_?7sYD8d", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "y\"u_?7sYD8d";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean1 = StringUtils.startsWith("y\"u_?7sYD8d", charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.abbreviate("wv'e*OJE0*D''c*=", " ", (-1), 6);
      assertEquals("wv'e* ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "\r", (CharSequence) " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      String string0 = StringUtils.leftPad("org.junitpioneer.jupiter.params.ByteRange", 103, "org.junitpioneer.jupiter.params.DoubleRange");
      assertEquals("org.junitpioneer.jupiter.params.DoubleRangeorg.junitpioneer.juorg.junitpioneer.jupiter.params.ByteRange", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("org.junitpioneer.jupiter.params.ByteRange", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, '[');
      assertNull(string1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "org.junitpioneer.jupiter.params.ByteRange", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.join((Object[]) null, '[');
      assertNull(string2);
      
      boolean boolean2 = StringUtils.contains((CharSequence) null, 103);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.stripEnd((String) null, "^<6Rj:oEK6h:rR");
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("org.junitpioneer.jupiter.params.DoubleRangeorg.junitpioneer.juorg.junitpioneer.jupiter.params.ByteRange", (String) null, (String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.jupiter.params.DoubleRangeorg.junitpioneer.juorg.junitpioneer.jupiter.params.ByteRange", (CharSequence) "org.junitpioneer.jupiter.params.DoubleRange");
      assertEquals(94, int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 94;
      intArray0[1] = (int) '[';
      intArray0[2] = 103;
      intArray0[3] = (int) '[';
      intArray0[4] = (int) '[';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '_', 4, 103);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      String[] stringArray0 = new String[1];
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = '%';
      charArray0[7] = ';';
      charArray0[3] = '|';
      charArray0[4] = '%';
      charArray0[5] = ';';
      charArray0[6] = '|';
      charArray0[7] = '|';
      int int0 = StringUtils.indexOfAny((CharSequence) "v|", charArray0);
      assertArrayEquals(new char[] {'1', '%', '\u0000', '|', '%', ';', '|', '|'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("v|", "v|");
      assertTrue(boolean0);
      
      String string0 = StringUtils.joinWith("4fMinimum abbreviation width is %d", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.replace(" G,vw}*Qw&D|^uq", " G,vw}*Qw&D|^uq", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", 2579);
      assertEquals("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", 64);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'W', 1444, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("BY_EV5msb&kLg", "BY_EV5msb&kLg");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.unwrap("BY_EV5msb&kLg", "Locale must not be null");
      assertEquals("BY_EV5msb&kLg", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "BY_EV5msb&kLg", (CharSequence) "BY_EV5msb&kLg", 36);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceChars("b935Eunx%&BI1zc1y:", "BY_EV5msb&kLg", "BY_EV5msb&kLg");
      assertEquals("b935Eunx%&BI1zc1y:", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("Locale must not be null", '=');
      assertEquals("Locale must not be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) '=';
      doubleArray0[2] = (double) 36;
      doubleArray0[3] = (double) 36;
      doubleArray0[4] = (double) '=';
      doubleArray0[5] = (double) 36;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 20;
      String string3 = StringUtils.join(doubleArray0, '=', 0, 5);
      assertArrayEquals(new double[] {0.0, 61.0, 36.0, 36.0, 61.0, 36.0, 0.0, 20.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals("0.0=61.0=36.0=36.0=61.0", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.length("BY_EV5msb&kLg");
      assertEquals(13, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "b935Eunx%&BI1zc1y:", (CharSequence) "0.0=61.0=36.0=36.0=61.0");
      assertEquals(22, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(474);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(474, charBuffer0.remaining());
      assertEquals(474, charBuffer0.limit());
      assertEquals(474, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(474, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) charBuffer0, (CharSequence) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(iterator0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join(iterator0, ":.1uj.~");
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals("DISPLAY:.1uj.~FORMAT", string0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(string0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      boolean boolean0 = enumSet0.add(locale_Category0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(boolean0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 6);
      assertEquals(0, int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.stripAccents(" is not in the range '0' - '9'");
      assertEquals(" is not in the range '0' - '9'", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart(" is not in the range '0' - '9'", " is not in the range '0' - '9'");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeIgnoreCase("Cannot store ", " is not in the range '0' - '9'");
      assertEquals("Cannot store ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Cannot store ";
      objectArray0[1] = (Object) locale_Category0;
      objectArray0[2] = (Object) " is not in the range '0' - '9'";
      objectArray0[3] = (Object) locale_Category0;
      String string4 = StringUtils.join(objectArray0, "A83`zmaxWith cannot be negative", 0, 1);
      assertEquals(4, objectArray0.length);
      assertEquals("Cannot store ", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int2 = StringUtils.ordinalIndexOf(":.1uj.~", "Cannot store ", 6);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      String string0 = "Threshold must not be negativeThreshold must not be negative";
      int[] intArray0 = StringUtils.toCodePoints("Threshold must not be negativeThreshold must not be negative");
      assertEquals(60, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.join(intArray0, 'O');
      assertEquals(60, intArray0.length);
      assertEquals("84O104O114O101O115O104O111O108O100O32O109O117O115O116O32O110O111O116O32O98O101O32O110O101O103O97O116O105O118O101O84O104O114O101O115O104O111O108O100O32O109O117O115O116O32O110O111O116O32O98O101O32O110O101O103O97O116O105O118O101", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance("84O104O114O101O115O104O111O108O100O32O109O117O115O116O32O110O111O116O32O98O101O32O110O101O103O97O116O105O118O101O84O104O114O101O115O104O111O108O100O32O109O117O115O116O32O110O111O116O32O98O101O32O110O101O103O97O116O105O118O101", "84O104O114O101O115O104O111O108O100O32O109O117O115O116O32O110O111O116O32O98O101O32O110O101O103O97O116O105O118O101O84O104O114O101O115O104O111O108O100O32O109O117O115O116O32O110O111O116O32O98O101O32O110O101O103O97O116O105O118O101");
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      String string0 = StringUtils.defaultString("7rLkY>N'[WV#$+SiQ");
      assertEquals("7rLkY>N'[WV#$+SiQ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("Search and Replace array lengths don't match: ", "7rLkY>N'[WV#$+SiQ");
      assertNull(string2);
      
      String string3 = StringUtils.stripEnd("?", "Object varargs must not be null");
      assertEquals("?", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Object varargs must not be null", 79);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-646.33936);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2568.6923);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1961.08257009918;
      doubleArray0[8] = 0.0;
      String string0 = StringUtils.join(doubleArray0, '>');
      assertArrayEquals(new double[] {0.0, (-646.33936), 0.0, (-2568.6923), 0.0, 0.0, 0.0, 1961.08257009918, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals("0.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("0.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.0", "5bzrvr+rY\u0003X+3TV'i");
      assertEquals("5bzrvr+rY\u0003X+3TV'i", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (-646.33936);
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 1961.08257009918;
      objectArray0[4] = (Object) "Backup";
      objectArray0[5] = (Object) (-646.33936);
      objectArray0[6] = (Object) "0.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.0";
      String string2 = StringUtils.joinWith("0.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.0", objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals("0.00.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.0-646.339360.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.00.00.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.01961.082570099180.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.0Backup0.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.0-646.339360.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.00.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("0.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.0");
      assertEquals("0.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.0", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string4 = StringUtils.substring("Failed to create custom temp directory", 16, 7);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "0.00.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.0-646.339360.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.00.00.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.01961.082570099180.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.0Backup0.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.0-646.339360.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.00.0>-646.33936>0.0>-2568.6923>0.0>0.0>0.0>1961.08257009918>0.0", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      String string0 = StringUtils.leftPad("N#|ro}HBUn7", 194, "]<t,aS$&");
      assertEquals("]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$N#|ro}HBUn7", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$N#|ro}HBUn7", (CharSequence) "]<t,aS$&", 194);
      assertEquals(168, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$N#|ro}HBUn7", (CharSequence) "N#|ro}HBUn7", 31);
      assertEquals(183, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.stripToEmpty("]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$N#|ro}HBUn7");
      assertEquals("]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$&]<t,aS$N#|ro}HBUn7", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "maxWith cannot be negative";
      String string3 = StringUtils.wrapIfMissing("A83`z", "maxWith cannot be negative");
      assertEquals("maxWith cannot be negativeA83`zmaxWith cannot be negative", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("a-k[Q&iM", "A83`z");
      assertEquals("a-k[Q&iM", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToNull("maxWith cannot be negative");
      assertEquals("maxWith cannot be negative", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      char char0 = '6';
      String string6 = StringUtils.join((Object[]) null, '6', 43, 168);
      assertNull(string6);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)23;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '6', (-1073), 183);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1073
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      String string0 = StringUtils.substringAfter("SG$pKUDZF,ZUR", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) stringArray0[0], (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.trim("E");
      assertEquals("E", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("Failed to delete temp directory ", "m_B1f^J0)DUv~ZCE", 18);
      assertEquals("Fm_B1f^J0)DUv~ZCE ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Fm_B1f^J0)DUv~ZCE ", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.startsWithAny("Failed to delete temp directory ", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.substring("LAM", 18);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("VA,D]`fE", "5[e+x6~ecyf3l&zp5!M");
      assertEquals("VA,D]`fE", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "VA,D]`fE");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1181.49F;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'Z', 0, 701);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category2);
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category1, locale_Category0);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category2));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category1, locale_Category0);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category2));
      
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category1, locale_Category0);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertTrue(enumSet0.contains(locale_Category2));
      assertTrue(enumSet1.contains(locale_Category2));
      
      String string0 = StringUtils.capitalize("The Character must not be null");
      assertEquals("The Character must not be null", string0);
      assertNotNull(string0);
      
      EnumSet<Locale.Category> enumSet2 = enumSet1.clone();
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category1, locale_Category0);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertNotNull(enumSet2);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertEquals(2, enumSet2.size());
      assertTrue(enumSet0.contains(locale_Category2));
      assertTrue(enumSet1.contains(locale_Category2));
      assertTrue(enumSet2.contains(locale_Category2));
      
      String string1 = StringUtils.uncapitalize("The Character must not be null");
      assertEquals("the Character must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "maxWith cannot be negative";
      stringArray0[1] = "T";
      stringArray0[2] = "T";
      stringArray0[3] = "maxWith cannot be negative";
      String string2 = StringUtils.replaceEach("The Character must not be null", stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals("The Character must not be null", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny("maxWith cannot be negative", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = 'e';
      int int1 = StringUtils.indexOfAny((CharSequence) "T", charArray0);
      assertArrayEquals(new char[] {'+', 'e'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("The Character must not be null", "maxWith cannot be negative");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.abbreviateMiddle(" x0Y", "", (-1));
      assertEquals(" x0Y", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("\n", "");
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[7];
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertTrue(boolean0);
      
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[2] = "\n";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(" x0Y", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = 1.0;
      doubleArray0[1] = (double) 'p';
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 'p';
      doubleArray0[5] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 'p';
      String string0 = StringUtils.join(doubleArray0, 'p');
      assertArrayEquals(new double[] {0.0, 112.0, 0.0, 1.0, 112.0, 0.0, 0.0, 0.0, 112.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals("0.0p112.0p0.0p1.0p112.0p0.0p0.0p0.0p112.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("3", "Object varargs must not be null", "0.0p112.0p0.0p1.0p112.0p0.0p0.0p0.0p112.0");
      assertEquals("3", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains('p'));
      
      String string2 = StringUtils.join((List<?>) stack0, 'p', (-1621), (-4408));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains('p'));
      
      byte[] byteArray0 = new byte[0];
      String string3 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("H#{^eC$V[s`LK.VX^", 34);
      assertEquals("H#{^eC$V[s`LK.VX^", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "H#{^eC$V[s`LK.VX^");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1456.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1221.3399320749338;
      String string0 = StringUtils.join(doubleArray0, ';');
      assertArrayEquals(new double[] {1456.0, (-1.0), 1221.3399320749338}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals("1456.0;-1.0;1221.3399320749338", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference((String) null, "1456.0;-1.0;1221.3399320749338");
      assertEquals("1456.0;-1.0;1221.3399320749338", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("1456.0;-1.0;1221.3399320749338", "_8", 16, 7);
      assertEquals("_8.33_8", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "1456.0;-1.0;1221.3399320749338";
      charSequenceArray0[2] = (CharSequence) "_8.33_8";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.joinWith("_8.33_8", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("_8.33_81456.0;-1.0;1221.3399320749338_8.33_8_8.33_8", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("1456.0;-1.0;1221.3399320749338");
      assertEquals("1456.0;-1.0;1221.3399320749338", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 7;
      intArray0[1] = 7;
      String string5 = StringUtils.join(intArray0, ';', 16, (-2020));
      assertArrayEquals(new int[] {7, 7}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      String string0 = "$d]4Sv~(hps\"KON%";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("$d]4Sv~(hps\"KON%", "org.apache.commons.lang3.StringUtils");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 54;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '+', 54, 2147483645);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      String string0 = "gw!fuS]";
      String string1 = StringUtils.repeat("gw!fuS]", 321);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = '';
      charArray0[2] = 'Q';
      charArray0[3] = 'n';
      charArray0[4] = '^';
      char char0 = 't';
      charArray0[5] = 't';
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      String string0 = ";nG1s";
      String string1 = StringUtils.strip(";nG1s", "GN");
      assertEquals(";nG1s", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) ";nG1s", (CharSequence) ";nG1s");
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("GN");
      assertTrue(boolean0);
      
      String string2 = null;
      String string3 = StringUtils.center("^", 1, (String) null);
      assertEquals("^", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "GN";
      charSequenceArray0[1] = (CharSequence) "^";
      charSequenceArray0[2] = (CharSequence) ";nG1s";
      charSequenceArray0[3] = (CharSequence) ";nG1s";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)13;
      try { 
        StringUtils.toString(byteArray0, "...");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", " ");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", "", 9);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(" "));
      
      int int0 = StringUtils.getFuzzyDistance("", "\r", locale0);
      assertEquals(0, int0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      
      String string1 = StringUtils.remove("\n", '.');
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.stripEnd((String) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\n", (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\r", "\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 's', 10, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      String string0 = StringUtils.removeEnd(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ";
      charSequenceArray0[3] = (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ";
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.overlay(". The following paths could not be deleted (see suppressed exceptions for details): ", "", 0, 58);
      assertEquals(" exceptions for details): ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((short[]) null, '0');
      assertNull(string2);
      
      String string3 = StringUtils.stripStart(" ", (String) null);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isMixedCase("org.junitpioneer.jupiter.params.RangeSourceProvider");
      assertTrue(boolean0);
      
      String string4 = StringUtils.getDigits(" ");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripAccents("");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat('0', (-2137));
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.left("Minimum abbreviation width is %d", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "9;C(", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      String string0 = StringUtils.substringBetween("+N@f.Tob", "+N@f.Tob");
      assertNull(string0);
      
      String string1 = StringUtils.repeat(";?|nku~2K1d:4`6Zh0Ouf?h", "+N@f.Tob", 1863);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) "+N@f.Tob", 6);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "+N@f.Tob", (CharSequence) ";?|nku~2K1d:4`6Zh0Ouf?h");
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = StringUtils.indexOfAny((CharSequence) null, "");
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      String string2 = "...";
      String string3 = "Icp5S!QKMu.e.ekn7j)";
      // Undeclared exception!
      try { 
        StringUtils.removePattern("Icp5S!QKMu.e.ekn7j)", "+N@f.Tob");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '+' near index 0
         // +N@f.Tob
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 350.937F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 912.0472F;
      floatArray0[3] = (-1604.525F);
      floatArray0[4] = (-831.3F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 2676.896F;
      String string0 = StringUtils.join(floatArray0, '$');
      assertArrayEquals(new float[] {350.937F, 0.0F, 912.0472F, (-1604.525F), (-831.3F), 0.0F, 2676.896F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals("350.937$0.0$912.0472$-1604.525$-831.3$0.0$2676.896", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "350.937$0.0$912.0472$-1604.525$-831.3$0.0$2676.896", (CharSequence) "350.937$0.0$912.0472$-1604.525$-831.3$0.0$2676.896");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.mid("F~EwKmWzsX", (-1), 65);
      assertEquals("F~EwKmWzsX", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty(")nIhjrB", supplier0);
      assertEquals(")nIhjrB", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string3 = StringUtils.wrapIfMissing(")nIhjrB", "&Aha");
      assertEquals("&Aha)nIhjrB&Aha", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate(")nIhjrB", ")nIhjrB", 779);
      assertEquals(")nIhjrB", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(")nIhjrB", (CharSequence[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte) (-96);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '$', (int) (byte)4, 78);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", (-3563));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("gI2a82T8PS", "gI2a82T8PS");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string0 = StringUtils.toRootUpperCase("[L!");
      assertEquals("[L!", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("gI2a82T8PS", "VxXZ<WuW,GM1|\"\"/l}");
      assertEquals("gI2a82T8PS", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.LF;
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("\n");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 30);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String[] stringArray1 = StringUtils.split("", '.');
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "gI2a82T8PS");
      assertEquals(0, int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category2);
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category1));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category1));
      
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertTrue(enumSet0.contains(locale_Category1));
      assertTrue(enumSet1.contains(locale_Category1));
      
      String string0 = StringUtils.capitalize("The Character must not be null");
      assertEquals("The Character must not be null", string0);
      assertNotNull(string0);
      
      EnumSet<Locale.Category> enumSet2 = enumSet1.clone();
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertNotNull(enumSet2);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertEquals(2, enumSet2.size());
      assertTrue(enumSet0.contains(locale_Category1));
      assertTrue(enumSet1.contains(locale_Category1));
      assertTrue(enumSet2.contains(locale_Category1));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The Character must not be null";
      stringArray0[1] = "The Character must not be null";
      stringArray0[2] = "The Character must not be null";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "The Character must not be null");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "The Character must not be null", (CharSequence) "The Character must not be null", (int) (short)0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.swapCase("The Character must not be null");
      assertEquals("tHE cHARACTER MUST NOT BE NULL", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("maxWith cannot be negative", "o4dq&N*Az)fm'l&_:uR:VXUQGmd|l 4");
      assertEquals("maxWith cannot be negative", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("The Character must not be null");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringBeforeLast("The Character must not be null", ")ULnks?bji&*0Yr}V");
      assertEquals("The Character must not be null", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Locale locale0 = Locale.lookup(stack0, arrayList0);
      assertNull(locale0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(")ULnks?bji&*0Yr}V", "maxWith cannot be negative", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      String string0 = StringUtils.swapCase("\" should have a parent context.");
      assertEquals("\" SHOULD HAVE A PARENT CONTEXT.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\" should have a parent context.", (CharSequence) "\" SHOULD HAVE A PARENT CONTEXT.");
      assertEquals(24, int0);
      
      String string1 = StringUtils.join((double[]) null, 'l', 51, 1114111);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("'4>#LM*MDyu4M9^@");
      assertEquals(16, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.deleteWhitespace("Be_EV5msb&kLg");
      assertEquals("Be_EV5msb&kLg", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Be_EV5msb&kLg", (CharSequence) "'4>#LM*MDyu4M9^@", 13);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Be_EV5msb&kLg", (CharSequence) "Be_EV5msb&kLg");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = StringUtils.indexOfAny((CharSequence) "Be_EV5msb&kLg", "Be_EV5msb&kLg");
      assertEquals(0, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      
      String string1 = StringUtils.removePattern("M", "...");
      assertEquals("M", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("Strings must not be null", "~c@~xwX/xchmu{c~rc");
      assertEquals("Strings must not be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Be_EV5msb&kLg";
      stringArray0[1] = "M";
      stringArray0[2] = "M";
      stringArray0[3] = null;
      String string3 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNull(string3);
      
      int int4 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int4);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
      
      String string4 = StringUtils.capitalize(string3);
      assertEquals(4, stringArray0.length);
      assertNull(string4);
      
      String string5 = StringUtils.join((double[]) null, '?', 322, 503);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) stringArray0[0], (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = "Failed to create custom temp directoryFailed to create custom temp directory";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Failed to create custom temp directoryFailed to create custom temp directory", " vs ", 18, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      
      ByteBuffer byteBuffer0 = charset0.encode("7Q~o");
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(4, byteBuffer0.remaining());
      assertEquals(4, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(4, byteBuffer0.limit());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=4 cap=4]", byteBuffer0.toString());
      assertEquals(4, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(4, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(4, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("7Q~o", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      
      boolean boolean1 = StringUtils.equals((CharSequence) charBuffer0, (CharSequence) "7Q~o");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=4 cap=4]", byteBuffer0.toString());
      assertEquals(4, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(4, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(4, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("7Q~o", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      
      String string0 = StringUtils.leftPad("@DefaultLocale can only be used with language tag if language, country, and variant are not set", 59, (String) null);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string0);
      assertNotNull(string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("7Q~o"));
      
      String string1 = StringUtils.rightPad("@DefaultLocale can only be used with language tag if language, country, and variant are not set", 694);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not setstring1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay(" but was: ", "Extension context \"", (-2575), 694);
      assertEquals("Extension context \"", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray1 = new CharSequence[8];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "Extension context \"";
      String string3 = StringUtils.leftPad("cntAG/R&H) }w@Q3I", 40, "Extension context \"");
      assertEquals("Extension context \"ExtcntAG/R&H) }w@Q3I", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      charSequenceArray1[1] = (CharSequence) "Extension context \"ExtcntAG/R&H) }w@Q3I";
      charSequenceArray1[2] = (CharSequence) "7Q~o";
      charSequenceArray1[3] = (CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set
      charSequenceArray1[4] = (CharSequence) "7Q~o";
      String string4 = StringUtils.uncapitalize("@~E)W0BPmu`vuV)Z4");
      assertEquals("@~E)W0BPmu`vuV)Z4", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      charSequenceArray1[5] = (CharSequence) "@~E)W0BPmu`vuV)Z4";
      charSequenceArray1[6] = (CharSequence) "7Q~o";
      charSequenceArray1[7] = (CharSequence) "Extension context \"";
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(8, charSequenceArray1.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Extension context \"ExtcntAG/R&H) }w@Q3I", charSequenceArray1[5], 694);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(8, charSequenceArray1.length);
      assertEquals((-1), int0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      ByteBuffer byteBuffer0 = charset0.encode("7Q~o");
      assertNotNull(byteBuffer0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertEquals(4, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(4, byteBuffer0.limit());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=4 cap=4]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(4, byteBuffer0.limit());
      assertEquals(4, byteBuffer0.position());
      assertEquals(4, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("7Q~o", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      
      boolean boolean0 = StringUtils.equals((CharSequence) charBuffer0, (CharSequence) "7Q~o");
      assertTrue(boolean0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=4 cap=4]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(4, byteBuffer0.limit());
      assertEquals(4, byteBuffer0.position());
      assertEquals(4, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("7Q~o", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      String string0 = StringUtils.chomp("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)");
      assertEquals("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.join(objectArray0, '8');
      assertEquals(0, objectArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", (CharSequence) "", 30);
      assertEquals(30, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string2 = StringUtils.substringBeforeLast("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", "jq<Ajq<A");
      assertEquals("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      
      Locale locale1 = Locale.PRC;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CHN", locale1.getISO3Country());
      
      String string3 = locale0.getDisplayScript(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string3);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CHN", locale1.getISO3Country());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.getFuzzyDistance("", "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", locale0);
      assertNotSame(locale0, locale1);
      assertEquals(0, int1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(int1 == int0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      
      String string4 = StringUtils.stripEnd("]z~hCjdZZ#\"`", "");
      assertEquals("]z~hCjdZZ#\"`", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int2 = StringUtils.countMatches((CharSequence) "]z~hCjdZZ#\"`", (CharSequence) "jq<Ajq<A");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String string5 = StringUtils.replaceChars(" s ", "MK>=}r8r$", "x0r^wd;/f(Rs");
      assertEquals(" s ", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.deleteWhitespace("jq<Ajq<A");
      assertEquals("jq<Ajq<A", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.removePattern("jq<Ajq<A", "eCAM9DQ]IS");
      assertEquals("jq<Ajq<A", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "", 113);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      String string0 = StringUtils.abbreviate("DefaultLocale", "DefaultLocale", 14);
      assertEquals("DefaultLocale", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("DefaultLocale");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty("DefaultLocale", "Strings must not be null");
      assertEquals("DefaultLocale", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("DefaultLocale");
      assertEquals("DefaultLocal", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripEnd((String) null, "org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Strings must not be null", (CharSequence) "org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "Strings must not be null", 29);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.removeEnd("Timeout", "org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertEquals("Timeout", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 29;
      intArray0[2] = 14;
      intArray0[3] = 14;
      intArray0[4] = 29;
      intArray0[5] = 0;
      intArray0[6] = (-1);
      String string6 = StringUtils.join(intArray0, 'v', 14, (-280));
      assertArrayEquals(new int[] {(-1), 29, 14, 14, 29, 0, (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'P');
      assertEquals(5, charSequenceArray0.length);
      assertEquals("PPPP", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing("PPPP", "PPPP", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("PPPP", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("\r", 1371, 13);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      charArray0[4] = 'P';
      charArray0[5] = 'P';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {'P', 'P', 'P', 'P', 'P', 'P'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.compareIgnoreCase("qDt2#OdxW<BoE%)Z", "qDt2#OdxW<BoE%)Z", true);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.unwrap("PPPP", 'P');
      assertEquals("PP", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripEnd("PPPP", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("PPPP", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = 1.0;
      String string0 = StringUtils.truncate("org.junitpioneer.vintage.ExpectedExceptionExtension", 11, 1);
      assertEquals("o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("xmmQ!^6.pdSjOh", 3, "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("xmmQ!^6.pdSjOh", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("xmmQ!^6.pdSjOh");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringBetween((String) null, ",m)p", "o");
      assertNull(string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '6', 11, (int) (byte)15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.stripToEmpty("G");
      assertEquals("G", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("G", "go;6O3E\"/");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.joinWith("1G+?GTrXkZ})dpjZ%Xo", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("1G+?GTrXkZ})dpjZ%Xo1G+?GTrXkZ})dpjZ%Xo1G+?GTrXkZ})dpjZ%Xo1G+?GTrXkZ})dpjZ%Xo1G+?GTrXkZ})dpjZ%Xo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "G", 1315);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceFirst((String) null, "/", "LaunchTime");
      assertNull(string2);
      
      String string3 = StringUtils.unwrap("iy>?Azor", "G");
      assertEquals("iy>?Azor", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.rotate("inj!sX_a}!inj!sX_a}!", (-1));
      assertEquals("nj!sX_a}!inj!sX_a}!i", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("LaunchTime"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("LaunchTime"));
      
      String string5 = StringUtils.join(iterator0, "4vzwVF&fU");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("LaunchTime"));
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      String[] stringArray1 = StringUtils.split("LaunchTime", "\n\r", 1601);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string6 = StringUtils.defaultString("nj!sX_a}!inj!sX_a}!i");
      assertEquals("nj!sX_a}!inj!sX_a}!i", string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "Om", (-1), 40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.leftPad("mj5?%~6r(Wv0vj-E", (-1), 'H');
      assertEquals("mj5?%~6r(Wv0vj-E", string0);
      assertNotNull(string0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(object0));
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(object0));
      
      String string1 = StringUtils.join(iterator0, "32Failed to create custom temp directory");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(object0));
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category1, locale_Category2);
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      boolean boolean0 = enumSet0.add(locale_Category0);
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertFalse(boolean0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string2 = StringUtils.center("", (-1), 'H');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      boolean boolean1 = enumSet0.add(locale_Category3);
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category3);
      assertNotSame(locale_Category1, locale_Category3);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category3);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category3, locale_Category1);
      assertSame(locale_Category3, locale_Category2);
      assertSame(locale_Category3, locale_Category0);
      assertFalse(boolean1);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category3));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertFalse(locale_Category3.equals((Object)locale_Category1));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category3));
      
      boolean boolean2 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.startsWithAny("mj5?%~6r(Wv0vj-E", (CharSequence[]) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = StringUtils.isMixedCase("32Failed to create custom temp directory");
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      String string3 = StringUtils.getDigits("offset cannot be negative");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat('5', 545);
      assertEqualsstring5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(":M5z>dwhDfQomI%g d=x");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllLowerCase(":M5z>dwhDfQomI%g d=x");
      assertFalse(boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(":M5z>dwhDfQomI%g d=x"));
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack0.contains(":M5z>dwhDfQomI%g d=x"));
      
      boolean boolean1 = stack0.add((Object) listIterator0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(stack0.contains(":M5z>dwhDfQomI%g d=x"));
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, 'G');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      String string0 = StringUtils.wrap("?Lat5x3PJ>IS~", '%');
      assertEquals("%?Lat5x3PJ>IS~%", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = null;
      int int0 = StringUtils.indexOfAny((CharSequence) "%?Lat5x3PJ>IS~%", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = ":\"<X@-L~m";
      String string2 = StringUtils.defaultString(":\"<X@-L~m");
      assertEquals(":\"<X@-L~m", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultIfBlank("", " ");
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny("?Lat5x3PJ>IS~", (CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isMixedCase(":\"<X@-L~m");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.getDigits("?Lat5x3PJ>IS~");
      assertEquals("53", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripAccents(")z,,P~%iQ");
      assertEquals(")z,,P~%iQ", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat('g', 101);
      assertEquals("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)93;
      try { 
        StringUtils.toString(byteArray0, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      String string0 = StringUtils.capitalize("]5&z");
      assertEquals("]5&z", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "oBrPb!", (CharSequence) "]5&z");
      assertEquals(0, int0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast("]5&z", "]5&z");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '_');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.chomp("org.junitpioneer.jupiter.DefaultLocaleEtnsion", "org.junitpioneer.jupiter.DefaultLocaleEtnsion");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.EMPTY;
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "org.junitpioneer.jupiter.DefaultLocaleEtnsion", 6);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("org.junitpioneer.jupiter.DefaultLocaleEtnsion");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "1Z`Z)8FqB{$^t";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.DefaultLocaleEtnsion";
      charSequenceArray0[4] = (CharSequence) "";
      String string3 = StringUtils.prependIfMissing("rk<g=$YpB*!yB{`;(Lv", "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("rk<g=$YpB*!yB{`;(Lv", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charSequenceArray0[0]);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.rightPad("", 2101);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) string0);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.startsWithAny(charSequence0, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((Object[]) null);
      assertNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) string0, 163);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category1));
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      String string0 = StringUtils.upperCase((String) null, locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNull(string0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, (-718));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("X", "X", (-1825));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeIgnoreCase("^>6iAh8>vEI0~Mvmk", "^>6iAh8>vEI0~Mvmk");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissing("", "X", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("X"));
      
      Locale locale1 = Locale.forLanguageTag("");
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      String string2 = Locale.lookupTag(linkedList0, treeSet0);
      assertNull(string2);
      assertEquals(0, linkedList0.size());
      assertFalse(treeSet0.contains("X"));
      
      int int0 = StringUtils.getFuzzyDistance("", "^>6iAh8>vEI0~Mvmk", locale0);
      assertNotSame(locale0, locale1);
      assertEquals(0, int0);
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string3 = StringUtils.substringAfter("", (String) null);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("", "Comparator should not be null.", "H/ Uly=MaL", 0);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = StringUtils.join(byteArray0, 'j');
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals("0j0j0j0j0j0j0j0j0", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.repeat('j', 65536);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(iterator0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join(iterator0, "LhV2,~#");
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals("DISPLAYLhV2,~#FORMAT", string0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(string0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      boolean boolean0 = enumSet0.add(locale_Category0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(boolean0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string1 = StringUtils.center("G", 8192, '5');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = enumSet0.add(locale_Category0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(boolean1);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) string1;
      charSequenceArray0[3] = (CharSequence) "LhV2,~#";
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.startsWithAny(charSequenceArray0[1], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = StringUtils.isMixedCase("");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      
      String string2 = StringUtils.getDigits("junit-pioneer4:=K%X<Ee.sgfo|");
      assertEquals("4", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents((String) null);
      assertNull(string3);
      
      // Undeclared exception!
      StringUtils.repeat('?', 8192);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(2, enumSet0.size());
      
      String string0 = StringUtils.join(iterator0, "Threshold must not be negative");
      assertEquals("DISPLAYThreshold must not be negativeFORMAT", string0);
      assertNotNull(string0);
      assertEquals(2, enumSet0.size());
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "b9J35Eunx%&BI1zc1y:", (CharSequence) "/OP;WD]SG5", 1736);
      assertEquals(19, int0);
      
      int int1 = StringUtils.ordinalIndexOf("/OP;WD]SG5", "b9J35Eunx%&BI1zc1y:", 19);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      String string0 = StringUtils.chomp("\r");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "mj5?%~6r(Wv0vj-E", "mj5?%~6r(Wv0vj-E");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("h", "Q");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat((String) null, 1398);
      assertNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.defaultIfBlank((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.defaultString("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 1398;
      floatArray0[2] = (float) 1398;
      floatArray0[3] = 0.0F;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '{', (-1), 1398);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>(priorityQueue0);
      assertNotNull(hashSet0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Iterator<String> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.join(iterator0, 'Z');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(string0));
      
      int int0 = StringUtils.compare("", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "The String must not be empty", (-2244));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.lowerCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, ",L");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.rightPad("", 2039);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.isAllLowerCase("");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("");
      assertSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 113);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "B";
      objectArray0[1] = (Object) "B";
      objectArray0[2] = (Object) "B";
      objectArray0[3] = (Object) "B";
      objectArray0[4] = (Object) "B";
      objectArray0[5] = (Object) "B";
      objectArray0[6] = (Object) "B";
      String string0 = StringUtils.join(objectArray0, '+', 56, 10);
      assertEquals(7, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("R", 10, "Z'tu)LZ/j");
      assertEquals("RZ'tu)LZ/j", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents(" cT");
      assertEquals(" cT", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("", "", "*6>b\"EJ&DTT--Bj=M");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart("4:=K%X<Ee.sgfo|", "junit-pioneer");
      assertEquals("4:=K%X<Ee.sgfo|", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfterLast("", (String) null);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.startsWithAny("-V=3lhjxL ?bi", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("-q", 4, "-q");
      assertEquals("-q-q", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      String string0 = StringUtils.swapCase(":}G,^](sJ$;_w/");
      assertEquals(":}g,^](Sj$;_W/", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ":}G,^](sJ$;_w/", (CharSequence) ":}g,^](Sj$;_W/");
      assertEquals(4, int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      String string0 = StringUtils.substringBetween("V", "uF=m,/T7tmR?c", "uF=m,/T7tmR?c");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "uF=m,/T7tmR?c");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", "Object varargs must not be null");
      assertEquals(0, int0);
      
      String string0 = " vs ";
      String string1 = ".-+ A=M-:K%D\\&wK";
      String string2 = StringUtils.abbreviateMiddle(" vs ", ".-+ A=M-:K%D&wK", 0);
      assertEquals(" vs ", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[1] = (CharSequence) " vs ";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\n";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[3] = "Object varargs must not be null";
      stringArray0[4] = " vs ";
      stringArray0[5] = " vs ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(" vs ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.abbreviateMiddle(" vs ", "", (-1));
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("\n", "");
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[4] = "\n";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(" vs ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfBlank(" BZm", supplier0);
      assertEquals(" BZm", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("\r");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.unwrap("Failed to create default temp directory", "\n");
      assertEquals("Failed to create default temp directory", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isWhitespace("Locale must not be null");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>(linkedList0);
      assertNotNull(hashSet0);
      assertEquals(0, linkedList0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.removeAll(hashSet0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean1 = linkedHashSet0.add("uRrI6J.{bJ_%uRrI6J.{bJ_%");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("uRrI6J.{bJ_%uRrI6J.{bJ_%"));
      
      Iterator<String> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("uRrI6J.{bJ_%uRrI6J.{bJ_%"));
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) iterator0);
      assertNotNull(predicate0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("uRrI6J.{bJ_%uRrI6J.{bJ_%"));
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "ExpectedExceptionExpectedException", false);
      assertEquals(1, int0);
      
      String string0 = StringUtils.center((String) null, 108);
      assertNull(string0);
      
      String string1 = StringUtils.rotate((String) null, 76);
      assertNull(string1);
      
      boolean boolean2 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      String string0 = StringUtils.removeStart("Failed to create custom temp directory", "Failed to create custom temp directory");
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) ' ';
      String string1 = StringUtils.join(longArray0, ' ');
      assertArrayEquals(new long[] {32L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals("32", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("Failed to create custom temp directory", "32");
      assertEquals("Failed to create custom temp directory", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("", ' ');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String string4 = StringUtils.center("Failed to create custom temp directory", (int) ' ');
      assertEquals("Failed to create custom temp directory", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("<E", 0);
      assertEquals("<E", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAlphaSpace("32");
      assertFalse(boolean0);
      
      String string6 = StringUtils.wrapIfMissing("32", ' ');
      assertEquals(" 32 ", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.center("", 0);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      String string0 = StringUtils.unwrap(" cT", "O |HZZNc%Vd|apT_a");
      assertEquals(" cT", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " cT", (CharSequence) " cT", 20);
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints(" cT");
      assertArrayEquals(new int[] {32, 99, 84}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric(" cT");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceChars(" cT", (String) null, (String) null);
      assertEquals(" cT", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("kN`:tEO\"PV8R", '=');
      assertEquals("kN`:tEO\"PV8R", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 20;
      doubleArray0[1] = (double) '=';
      doubleArray0[2] = (double) '=';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'A', 0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("'4>#LM*MDyu4M9^@");
      assertEquals(16, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.deleteWhitespace("Be_EV5msb&kLg");
      assertEquals("Be_EV5msb&kLg", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Be_EV5msb&kLg", (CharSequence) "'4>#LM*MDyu4M9^@", 13);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Be_EV5msb&kLg", (CharSequence) "Be_EV5msb&kLg");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = StringUtils.indexOfAny((CharSequence) "Be_EV5msb&kLg", "Be_EV5msb&kLg");
      assertEquals(0, int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      String string1 = StringUtils.removePattern("M", "...");
      assertEquals("M", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("pkVCq", "^6Oa.*%gp", " ");
      assertEquals("pkVCq", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "\" should have a parent context.";
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) "pkVCq";
      objectArray0[3] = (Object) "^6Oa.*%gp";
      objectArray0[4] = (Object) " ";
      String string3 = StringUtils.join(objectArray0, 'V', 348, 13);
      assertEquals(5, objectArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.upperCase("'4>#LM*MDyu4M9^@", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.repeat("\r", "\r", 221);
      assertEquals("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("< ?0;zeLkm9.9m~A", 221, 972);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r", (CharSequence) "", 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      String string0 = StringUtils.stripAccents("inj!sX_a}!");
      assertEquals("inj!sX_a}!", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("|0=n S*MY");
      assertEquals("|0=n S*MY", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("inj!sX_a}!");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "|0=n S*MY", (CharSequence) "inj!sX_a}!", 9);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      String string0 = StringUtils.substringBetween("(}tb)ur[Hye5ZgXWkH", "dX5hLUmoIo{y", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      String string0 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean1 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.remove(" ", "32Failed to create custom temp directory");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase(" ");
      assertEquals(" ", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad(" ", (-1219), '(');
      assertEquals(" ", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("d>'27dJMy7k_R9_", " ");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.right("jY)2oG", 0);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((List<?>) null, "Object varargs must not be null", 0, 35);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("a");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "C$");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "C$", "C$");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "?d={V=%yc:M!g{S";
      stringArray0[1] = null;
      String string1 = StringUtils.join(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("?d={V=%yc:M!g{S", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "?d={V=%yc:M!g{S", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "C$");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "?d={V=%yc:M!g{S", (CharSequence) "?d={V=%yc:M!g{S");
      assertEquals("?d={V=%yc:M!g{S", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      
      String string2 = StringUtils.substringBetween((String) null, "\" should have a parent context.");
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "?d={V=%yc:M!g{S", (CharSequence) null, 2690);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      String string0 = StringUtils.left("morg.junitpioneer.jupiter.SystemPropertyExtension", 256);
      assertEquals("morg.junitpioneer.jupiter.SystemPropertyExtension", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "morg.junitpioneer.jupiter.SystemPropertyExtension", (CharSequence) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      String string0 = StringUtils.stripAccents("inj!sX_a}!");
      assertEquals("inj!sX_a}!", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("inj!sX_a}!", (-1215), "inj!sX_a}!");
      assertEquals("inj!sX_a}!", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("inj!sX_a}!", 1567, "L=4[");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("inj!sX_a}!"));
      
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("inj!sX_a}!"));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)46;
      String string3 = StringUtils.join(shortArray0, '\u001F', 1309, (int) (short)46);
      assertArrayEquals(new short[] {(short)46}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains("inj!sX_a}!"));
      
      linkedList0.push("]6Ncx>O!/rou#+P");
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("]6Ncx>O!/rou#+P"));
      assertFalse(linkedList0.contains("inj!sX_a}!"));
      
      String string4 = StringUtils.stripEnd("inj!sX_a}!", "]6Ncx>O!/rou#+P");
      assertEquals("inj!sX_a}", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate(string2, (int) (short)46, 1446);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("\r");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", (-3563));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("gI2a82T8PS", "gI2a82T8PS");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string0 = StringUtils.toRootUpperCase("[L!");
      assertEquals("[L!", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("gI2a82T8PS", "VxXZ<WuW,GM1|\"\"/l}");
      assertEquals("gI2a82T8PS", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.LF;
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("\n");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, 30);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      String string0 = StringUtils.removeStart("Failed to create custom temp directory", "Failed to create custom temp directory");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfEmpty("", "(I@.vN?+8}!-N");
      assertEquals("(I@.vN?+8}!-N", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle((String) null, "UI+! ", (-3669));
      assertNull(string2);
      
      String string3 = StringUtils.stripStart("UI+! ", "");
      assertEquals("UI+! ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null, (-3669));
      assertNull(stringArray0);
      
      String string4 = StringUtils.chop("Failed to create custom temp directory");
      assertEquals("Failed to create custom temp director", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.substringsBetween(" vs ", (String) null, "UI+! ");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("z");
      assertEquals("z", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("z");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object1;
      objectArray0[1] = object1;
      objectArray0[2] = (Object) null;
      String string1 = StringUtils.leftPad("]d", 2, 'i');
      assertEquals("]d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart(", Length: ", "]d");
      assertEquals(", Length: ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ", Length: ", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(". The following paths could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals(58, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.LF;
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("\r", (-1825));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.trim("f^|n");
      assertEquals("f^|n", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details): ", (CharSequence[]) stringArray0);
      assertEquals(58, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'L', 0, 0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceFirst("", "Strings must not be null", "Qm}tV%}v_>}))7");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("Object varargs must not be null", "'zi%^=K<l`");
      assertEquals("Object varargs must not be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.rotate("Strings must not be null", (-1));
      assertEquals("trings must not be nullS", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains('L'));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains('L'));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains('L'));
      
      Iterator<Object> iterator1 = arrayList0.iterator();
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains('L'));
      
      String string4 = StringUtils.join(iterator1, "1U|%^53REm(");
      assertEquals("", string4);
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains('L'));
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      String[] stringArray0 = StringUtils.split("The Character must not be null", (String) null, (-706));
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.replace("Igj;,piXxj%zb<}Hv_qx", " vs ", "", (-1));
      assertEquals("Igj;,piXxj%zb<}Hv_qx", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.leftPad("Strings must not be null", 240);
      assertEquals("                                                                                                                                                                                                                        Strings must not be null", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceEach("1yb_2(uN`c;|1pxz$lZ", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("1yb_2(uN`c;|1pxz$lZ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("1yb_2(uN`c;|1pxz$lZ");
      assertEquals("1yb_2(uN`c;|1pxz$lZ", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny("4t5r8}OFG'ag%tecnRu", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)91;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      String string3 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {(byte)66, (byte) (-29), (byte) (-128), (byte) (-62), (byte)91}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("B\uFFFD\uFFFD[", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      ByteBuffer byteBuffer0 = charset0.encode("4t5r8}OFG'ag%tecnRu");
      assertNotNull(byteBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(20, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(22, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(20, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=20 cap=22]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      charArray0[1] = '_';
      charArray0[2] = 'H';
      int int1 = StringUtils.indexOfAny((CharSequence) "B\uFFFD\uFFFD[", charArray0);
      assertArrayEquals(new char[] {'%', '_', 'H'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("The String must not be empty", "1yb_2(uN`c;|1pxz$lZ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.stripAccents("");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      String string0 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.defaultIfBlank("?iy>?Azorg.apache.commons.lang3.StringUtils", "Object varargs must not be null");
      assertEquals("?iy>?Azorg.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("", "?iy>?Azorg.apache.commons.lang3.StringUtils", (-1), (-1959));
      assertEquals("?iy>?Azorg.apache.commons.lang3.StringUtils", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isWhitespace(" ");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      String string0 = StringUtils.repeat(' ', (int) ' ');
      assertEquals("                                ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "                                ", charArray0);
      assertArrayEquals(new char[] {' ', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "                                ", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "349G:A$c)Y{xfi9D7'[", 1265);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isMixedCase("349G:A$c)Y{xfi9D7'[");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWithAny("349G:A$c)Y{xfi9D7'[", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1265;
      longArray0[1] = (long) (-1);
      longArray0[2] = 3119L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'm', 2225, 2147483645);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      String string0 = StringUtils.repeat(' ', (int) ' ');
      assertEquals("                                ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "                                ", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad("                                ", (int) ' ', "                                ");
      assertEquals("                                ", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "                                ";
      boolean boolean1 = StringUtils.endsWithAny("                                ", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.remove("Aborting to protect against StackOverflowError - output of one loop is the input of another", " ");
      assertEquals("AbortingtoprotectagainstStackOverflowError-outputofoneloopistheinputofanother", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootLowerCase("");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("ingUtils", (-1406), '#');
      assertEquals("ingUtils", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("AbortingtoprotectagainstStackOverflowError-outputofoneloopistheinputofanother", "ingUtils");
      assertEquals(0.51, double0, 0.01);
      
      String string5 = StringUtils.stripStart("\r", "{jW a4#,iw6Jnot4HZ");
      assertEquals("\r", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.mid("ingUtils", 904, 20);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.removeStart("", "                                ");
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      String[] stringArray0 = StringUtils.substringsBetween("z!ZqL~5yubo@*2qJ", (String) null, "R&thW");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      String string0 = StringUtils.substringBetween("fs'<Yi4,", "fs'<Yi4,", "fs'<Yi4,");
      assertNull(string0);
      
      String string1 = StringUtils.center((String) null, (-2342));
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      String string0 = StringUtils.replaceChars("cYZl;Pn)8h/Hdl", "cYZl;Pn)8h/Hdl", "cYZl;Pn)8h/Hdl");
      assertEquals("cYZl;Pn)8h/Hdl", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("B");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.toRootUpperCase("B");
      assertEquals("B", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("cYZl;Pn)8h/Hdl", "B");
      assertEquals("cYZl;Pn)8h/Hdl", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("cYZl;Pn)8h/Hdl", "B", 3029);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.removeEndIgnoreCase(" ", (String) null);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.center((String) null, 3029, ']');
      assertNull(string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("cYZl;Pn)8h/Hdl"));
      
      String string5 = StringUtils.wrapIfMissing("Expected exception %s was not thrown.", ']');
      assertEquals("]Expected exception %s was not thrown.]", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.joinWith(" ", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals("B", string6);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("\"*XgbWENhy$iL97d}");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "The String must not b< mpt", "The String must not b< mpt");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("The String must not b< mpt", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.remove("Tup2,#B", " ");
      assertEquals("Tup2,#B", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("d>'27dJMy7k_R9_");
      assertEquals("d>'27djmy7k_r9_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("The String must not b< mpt", (-1219), '(');
      assertEquals("The String must not b< mpt", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", "The String must not b< mpt");
      assertEquals(0.68, double0, 0.01);
      
      String string3 = StringUtils.truncate((String) null, 1114111, 1114111);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The String must not b< mpt", "6gsQVLi#&?b9");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.lowerCase(". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals(". the following paths could not be deleted (see suppressed exceptions for details): ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.trim(". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details):", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isBlank("p");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(". The following paths could not be deleted (see suppressed exceptions for details):", "p");
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "p", 44);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.uncapitalize("ExpectedException");
      assertEquals("expectedException", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("K:$:Gn,", 'S');
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.substringBefore("\"v6/20", (String) null);
      assertEquals("\"v6/20", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "p", (CharSequence) "p");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      boolean boolean0 = StringUtils.isBlank("p");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Search and Replace array lengths don't match: ", "p");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)4621;
      shortArray0[1] = (short)2500;
      shortArray0[2] = (short) (-3163);
      shortArray0[3] = (short) (-223);
      String string0 = StringUtils.join(shortArray0, '[', (int) (short)4621, (-563));
      assertArrayEquals(new short[] {(short)4621, (short)2500, (short) (-3163), (short) (-223)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join(shortArray0, 'I', (-563), (-563));
      assertArrayEquals(new short[] {(short)4621, (short)2500, (short) (-3163), (short) (-223)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.stripEnd("~o(%Camj5lM", "ingUtils");
      assertEquals("~o(%Camj5lM", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "C$");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "C$", "C$");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short short0 = (short)1424;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)26;
      String string1 = StringUtils.join(byteArray0, 'E', (int) (byte)76, (int) (byte) (-64));
      assertArrayEquals(new byte[] {(byte) (-64), (byte)76, (byte)1, (byte)65, (byte)26}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "t9kZ";
      // Undeclared exception!
      try { 
        StringUtils.unwrap("t9kZ", "t9kZ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.join(objectArray0, '>');
      assertEquals(2, objectArray0.length);
      assertEquals(">", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ">", (CharSequence) ">", 13);
      assertEquals(0, int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ">", (CharSequence) ">");
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      String string1 = StringUtils.removePattern((String) null, "M");
      assertNull(string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("\" should have a parent context.", "M", (String) null);
      assertEquals("\" should have a parent context.", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'V', (-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      String string0 = StringUtils.chomp("\n\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("\n", (String) null);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "");
      assertNull(stringArray0);
      
      String string0 = StringUtils.rightPad("", 5671, 'E');
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.containsAny((CharSequence) string0, (CharSequence) "%0F5B/^1dPw/1(@");
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("upi)<fZ", '');
      assertEquals("upi)<fZ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      float[] floatArray0 = new float[0];
      String string2 = StringUtils.join(floatArray0, 'R');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'p';
      intArray0[1] = 160;
      intArray0[2] = 8192;
      intArray0[3] = 16;
      intArray0[4] = (int) (byte)67;
      intArray0[6] = 16;
      intArray0[7] = (int) 'p';
      intArray0[8] = (int) (byte)67;
      String string3 = StringUtils.join(intArray0, '', 8192, 944);
      assertArrayEquals(new int[] {112, 160, 8192, 16, 67, 0, 16, 112, 67}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 67);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.defaultString("Sv87", (String) null);
      assertEquals("Sv87", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'R', 112, 3921);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 112
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase(",L", ",L", ",L", 3533);
      assertEquals(",L", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) ",L", 'U');
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripToEmpty("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Threshold must not be negative");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceChars("\n\r", "T*_?gS~:*~.6", "A,#pv9");
      assertEquals("\n\r", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.center("T*_?gS~:*~.6", 1301, "Strings must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("`l;p@", " vs ", 19);
      assertEquals("`l;p@", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int[] intArray0 = new int[0];
      String string5 = StringUtils.join(intArray0, 'U');
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "A,#pv9", 322);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Illegal range. The step cannot be zero.", '.');
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Illegal range. The step cannot be zero.", '.');
      assertEquals(2, int0);
      
      String string0 = StringUtils.stripToNull("^");
      assertEquals("^", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("Be_EV5msb&kLg");
      assertEquals("BE_EV5MSB&KLG", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("BE_EV5MSB&KLG");
      assertEquals(13, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.deleteWhitespace("Threshold must not be negative                                                                             ");
      assertEquals("Thresholdmustnotbenegative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("HF~/&iN+ ~", 25, 'F');
      assertEquals("FFFFFFFFFFFFFFFHF~/&iN+ ~", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replace((String) null, "TNo,\u0002,Zz.lb;", "W", 921);
      assertNull(string3);
      
      String string4 = StringUtils.strip("W", "Thresholdmustnotbenegative");
      assertEquals("W", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.reverseDelimited("HF~/&iN+ ~", 'F');
      assertEquals("~/&iN+ ~FH", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, "W");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "FFFFFFFFFFFFFFFHF~/&iN+ ~", "FFFFFFFFFFFFFFFHF~/&iN+ ~");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) " but was: ", (CharSequence) null);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "The ChLracte* must not be null", (CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("A");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = StringUtils.join(objectArray0, '>');
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ">java.lang.Object@326cf65e", (CharSequence) ">java.lang.Object@326cf65e", 13);
      assertEquals(0, int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ">java.lang.Object@326cf65e", (CharSequence) ">java.lang.Object@326cf65e");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string1 = StringUtils.removeEnd((String) null, ">java.lang.Object@326cf65e");
      assertNull(string1);
      
      int int3 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      String string2 = StringUtils.repeat('3', 13);
      assertEquals("3333333333333", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("3333333333333");
      assertEquals("3333333333333", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat('m', 23);
      assertEquals("mmmmmmmmmmmmmmmmmmmmmmm", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("*9bZ+[V5T??;)", (CharSequence) null);
      assertFalse(boolean0);
      
      String string5 = StringUtils.remove("nt.", 'W');
      assertEquals("nt.", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing(">java.lang.Object@326cf65e", '>');
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.LF;
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("Failed to create custom temp directoryFailed to create custom temp directory", "s");
      assertEquals("tom temp directoryFailed to create cu", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = ">,m)p>+B8Hdz?KeQR6";
      String string4 = "k!,0\\S*w[7-II";
      String[] stringArray1 = StringUtils.substringsBetween(">,m)p>+B8Hdz?KeQR6", "*9bZ+[V5T??;)", "k!,0S*w[7-II");
      assertNull(stringArray1);
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        StringUtils.truncate("org.junitpioneer.vintage.TimeoutExtension", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase(",L", ",L", ",L", 3533);
      assertEquals(",L", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) ",L", 'U');
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripToEmpty("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("inj!sX_a}!inj!sX_a}!", ",L");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.joinWith("ExceptionWasThrown", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("inj!sX_a}!inj!sX_a}!", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int1 = StringUtils.lastIndexOf((CharSequence) ",L", 1315);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.replaceChars("inj!sX_a}!inj!sX_a}!", "inj!sX_a}!inj!sX_a}!", "\n\r");
      assertEquals("\n\r\n\r", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.center("\r", (-290), "inj!sX_a}!inj!sX_a}!");
      assertEquals("\r", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("S1jvj$9#[@I-", "Threshold must not be negative                                                                             ", 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 108
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.stripToEmpty("mj5?%~6r(Wv0vj-E");
      assertEquals("mj5?%~6r(Wv0vj-E", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "mj5?%~6r(Wv0vj-E", (CharSequence) "mj5?%~6r(Wv0vj-E", 6);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.repeat("mj5?%~6r(Wv0vj-E", "){}(P|RN2i_TEMG1`", 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissing("mj5?%~6r(Wv0vj-E", "", (CharSequence[]) null);
      assertEquals("mj5?%~6r(Wv0vj-E", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string3 = StringUtils.join(intArray0, 'd', 76, 8);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("mj5?%~6r(Wv0vj-E");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(13, stringArray0.length);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 30, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string2 = StringUtils.removeFirst((String) null, "GR;p");
      assertNull(string2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '>';
      charArray0[1] = 'o';
      charArray0[2] = '~';
      charArray0[3] = 'z';
      charArray0[4] = 'T';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'>', 'o', '~', 'z', 'T'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.rightPad("org.junitpioneer.j", 30);
      assertEquals("org.junitpioneer.j            ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeFirst(",", "maxWith cannot be negative");
      assertEquals(",", string4);
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      String string0 = StringUtils.substringBetween("fs'<Yi4,", "fs'<Yi4,", "fs'<Yi4,");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "fs'<Yi4,";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace(charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.chomp("Qt");
      assertEquals("Qt", string0);
      assertNotNull(string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.mid("r,Y(", 16, (-1));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = " ";
      stringArray0[1] = "";
      stringArray0[2] = "\n";
      String string2 = StringUtils.replaceEach("yq3QKTOy.M", stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("yq3QKTOy.M", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("io", (-1823), "8?U)Dv\"4");
      assertEquals("io", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }");
      assertEquals("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripStart("\ng_zATT1W@R##", (String) null);
      assertEquals("g_zATT1W@R##", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      String string0 = StringUtils.stripAccents("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("G2DX36IpO,9A");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("G2DX36IpO,9A");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "G2DX36IpO,9A", (char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("G2DX36IpO,9A");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.removeStart("G2DX36IpO,9A", "?");
      assertEquals("G2DX36IpO,9A", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("Strings must not be null", 'l');
      assertEquals("Strings must not be nu", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.compareIgnoreCase("Strings must not be nu", "", true);
      assertEquals(22, int0);
      
      String string4 = StringUtils.unwrap("Strings must not be nu", 'l');
      assertEquals("Strings must not be nu", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Illegal range he step cannotbe zero.", '.');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("Illegal range he step cannotbe zero", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("8e'x^S}VrEg$cJt;gU", 'O');
      assertEquals("8e'x^S}VrEg$cJt;gU", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Don't clear/set the same property more than once.");
      assertEquals("Don't clear/set the same property more than once.", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      String string0 = StringUtils.removeEnd(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ";
      charSequenceArray0[3] = (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ";
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.overlay(". The following paths could not be deleted (see suppressed exceptions for details): ", "", 0, 58);
      assertEquals(" exceptions for details): ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("0Vi!U {", " exceptions for details): ");
      assertEquals("0Vi!U {", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("org.junitpioneer.jupiter.DefaultLocaleExtension", "=O W,O;v+[mu[");
      assertEquals("=O W,O;v+[mu[org.junitpioneer.jupiter.DefaultLocaleExtension=O W,O;v+[mu[", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.remove("xo#CfNA{hm", "=O W,O;v+[mu[");
      assertEquals("xo#CfNA{hm", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "{?+8-wQL?^Y;a__-Zt", 28, 2);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase((String) null, "Id", false);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string5 = StringUtils.substring("", 0);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(charSequenceArray0[0], "");
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      String string0 = StringUtils.wrap("?Lat5x3PJ>IS~", '%');
      assertEquals("%?Lat5x3PJ>IS~%", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("?Lat5x3PJ>IS~");
      assertEquals("?Lat5x3PJ>IS", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trim((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase((String) null, "!N5ddVUro&3", "Z_");
      assertNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "iy>?Azorg.apache.commons.lang3.StringUtils?", (CharSequence) "?Lat5x3PJ>IS~");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.removeStart("org.junitpioneer.jupiter.params.IntRa_geJ", "a<-aKe`nn6LFWz#W(>");
      assertEquals("org.junitpioneer.jupiter.params.IntRa_geJ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfterLast("!N5ddVUro&3", "?Lat5x3PJ>IS~");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Z_";
      String string6 = StringUtils.joinWith("?Lat5x3PJ>IS", objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals("Z_", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.leftPad("?Lat5x3PJ>IS", (-1), ',');
      assertEquals("?Lat5x3PJ>IS", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.params.IntRa_geJ";
      charSequenceArray0[1] = (CharSequence) "a<-aKe`nn6LFWz#W(>";
      charSequenceArray0[2] = (CharSequence) "Z_";
      charSequenceArray0[3] = (CharSequence) "Z_";
      charSequenceArray0[4] = (CharSequence) "org.junitpioneer.jupiter.params.LongRange";
      String string8 = StringUtils.appendIfMissing((String) null, "a<-aKe`nn6LFWz#W(>", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertNull(string8);
      
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "%?Lat5x3PJ>IS~%";
      String string9 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "?Lat5x3PJ>IS~";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.params.LongRange", (CharSequence) "Z_");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      String string10 = StringUtils.join(doubleArray0, ',', 22, 22);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals("", string10);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertNotNull(string10);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (-1), 22);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, '9', 98, 33);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeEndIgnoreCase("p{InCombiningDiacriticalMarks}+", "Y\\^7B!eiy>?Azorg.apache.commons.lang3.StringUtils");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Zp,8G)cyfH`v^{", "RprFVk", "p{InCombiningDiacriticalMarks}+");
      assertEquals("Zp,8G)cyfH`v^{", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      String string2 = StringUtils.reverseDelimited("org.junitpioneer.jupiter.TempDirectory", '');
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("i~?4a\"^r", "RprFVk");
      assertEquals("i~?4a\"^r", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "i~?4a\"^r", (CharSequence) "p{InCombiningDiacriticalMarks}+", (-1604));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumeric("Object varargs must not be null");
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfEmpty("Failed to create custom temp directoryFailed to create custom temp directory", supplier0);
      assertEquals("Failed to create custom temp directoryFailed to create custom temp directory", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((int[]) null, 'k', (-1604), (-1604));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("Failed to delete temp directory ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.mid("X>vZd", 256, 256);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("+t_AZ|Un+'3xi[l|vHW");
      assertEquals("+T_AZ|UN+'3XI[L|VHW", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(256));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "K<[;.", charArray0);
      assertArrayEquals(new char[] {'\"', '\"', '\"', '\"'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, ";>LFV 8;|{R", true);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.unwrap("m", '\"');
      assertEquals("m", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'T');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      // Undeclared exception!
      StringUtils.rightPad("jFt'PGD/", 65536);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 8192;
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.leftPad("", 8192, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      // Undeclared exception!
      StringUtils.rightPad("", 8192);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vs ", " ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase(" vs ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("\r");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) stringArray0[0], (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.right("*", 30);
      assertEquals("*", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("*");
      assertEquals("*", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("*");
      assertEquals("*", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "*", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("org.apache.commons.lang3.ARrayUtils", "VA,D]`fE");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.removeAll((String) null, " vs ");
      assertNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfBlank("I'|jwl]$_Twa&khtGM", supplier0);
      assertEquals("I'|jwl]$_Twa&khtGM", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "I'|jwl]$_Twa&khtGM", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("Search and Replace array lengths don't match: ", supplier1);
      assertEquals("Search and Replace array lengths don't match: ", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      String string0 = StringUtils.chomp("e");
      assertEquals("e", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "C$");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = (-26);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, (-26));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Failed to create custom temp directory", "7{'4>#Gk");
      assertEquals("Failed to create custom temp directory", string0);
      assertNotNull(string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string0));
      
      String string1 = StringUtils.strip("?", "m.D9s_zkBn2");
      assertEquals("?", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Failed to create custom temp directory";
      charSequenceArray0[1] = (CharSequence) " in an array of ";
      charSequenceArray0[2] = (CharSequence) "Failed to create custom temp directory";
      charSequenceArray0[3] = (CharSequence) "?";
      charSequenceArray0[4] = (CharSequence) "m.D9s_zkBn2";
      charSequenceArray0[5] = (CharSequence) "7{'4>#Gk";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "m.D9s_zkBn2", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.removePattern("Failed to create custom temp directory", "Failed to create custom temp directory");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny("?", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = ' ';
      int int1 = StringUtils.indexOfAny(charSequenceArray0[1], charArray0);
      assertArrayEquals(new char[] {'[', '[', ' '}, charArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(3, charArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(charSequenceArray0[4], "?");
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.stripAccents(" in an array of ");
      assertEquals(" in an array of ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, "?", 0, (-843));
      assertEquals(6, charSequenceArray0.length);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      String string0 = StringUtils.replaceAll((String) null, "Index: ", "Jq5sA?");
      assertNull(string0);
      
      String string1 = StringUtils.repeat('u', (-2));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("Index: ", '{');
      assertEquals("Index: ", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.chop((String) null);
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "Index: ";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "Index: ";
      charSequenceArray0[5] = (CharSequence) "Index: ";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) "Index: ";
      boolean boolean0 = StringUtils.startsWithAny("Index: ", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = "\r";
      String string1 = StringUtils.leftPad("\r", (-1));
      assertEquals("\r", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.countMatches((CharSequence) "\r", 'o');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isWhitespace("\r");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = "";
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      String string3 = locale0.toLanguageTag();
      assertEquals("ja-JP", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      Locale.Category[] locale_CategoryArray0 = Locale.Category.values();
      assertEquals(2, locale_CategoryArray0.length);
      assertNotNull(locale_CategoryArray0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) locale_Category0);
      assertNotNull(predicate0);
      
      boolean boolean2 = linkedList0.removeIf(predicate0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("JP", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      Locale locale2 = (Locale)locale0.clone();
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertTrue(locale2.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale0));
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(locale2);
      assertEquals("", locale2.getVariant());
      assertEquals("JP", locale2.getCountry());
      assertEquals("ja_JP", locale2.toString());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("\r", (-3237.0090686892));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=-3237.0090686892
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      String string0 = StringUtils.leftPad(". The following paths could not be deleted (see suppressed exceptions for details): ", (-894), 'o');
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details): ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.chomp("org.junitpioneer.jupiter.DefaultLocaleEtnsion", "org.junitpioneer.jupiter.DefaultLocaleEtnsion");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      boolean boolean0 = treeSet0.add(";73l+]<$pE:e");
      assertTrue(boolean0);
      assertFalse(treeSet0.contains("org.junitpioneer.jupiter.DefaultLocaleEtnsion"));
      assertTrue(treeSet0.contains(";73l+]<$pE:e"));
      
      charArray0[1] = 'k';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'\"', 'k', '\"', '\"'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.unwrap("The character ", 'T');
      assertEquals("The character ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.mid(";73l+]<$pE:e", 80, 32);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.leftPad("-X`w'q", 2586);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("fH8{gep-jc-1$");
      assertFalse(boolean0);
      
      String string1 = StringUtils.mid("org.junitpioneer.jupiter.DefaultLocaleExtension", 256, 26);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("+t_AZ|Un+'3xi[l|vHW");
      assertEquals("+T_AZ|UN+'3XI[L|VHW", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.join(iterator0, '\"');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertFalse(treeSet0.contains(string0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = 'k';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'\"', 'k', '\"', '\"'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("Failed to delete temp directory ", "Failed to delete temp directory ", false);
      assertEquals(0, int0);
      
      String string4 = StringUtils.unwrap("The character ", 'T');
      assertEquals("The character ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("fH8{gep-jc-1$", 'g');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.wrapIfMissing("$%F4z+", '\u0084');
      assertEquals("\u0084$%F4z+\u0084", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("\u0084$%F4z+\u0084", '\u0084');
      assertEquals("$%F4z+", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("?Lat5x3PJ>IS~", (String) null);
      assertEquals("?Lat5x3PJ>IS~", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("?Lat5x3PJ>IS~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      String string0 = "\"^s`c'=uW";
      String string1 = " in an array of ";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string0));
      
      boolean boolean0 = treeSet0.add("p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean0);
      assertTrue(treeSet0.contains("p{InCombiningDiacriticalMarks}+"));
      assertFalse(treeSet0.contains(string1));
      
      Iterator<String> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(treeSet0.contains("p{InCombiningDiacriticalMarks}+"));
      assertFalse(treeSet0.contains(string1));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = " in an array of ";
      boolean boolean1 = StringUtils.equalsAny("fH8{gep-jc-1$", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.trim(" in an array of ");
      assertEquals("in an array of", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "in an array of", (CharSequence) " in an array of ", (-161));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'P');
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("\r", 1371, 13);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[7] = "";
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(9, stringArray0.length);
      assertNull(string4);
      
      String string5 = "\\u";
      String string6 = StringUtils.substringBefore(string5, "");
      assertEquals("", string6);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceIgnoreCase("org.junitpioneer.jupiter.params.Sho)tRange", string5, "The Array must not be null", 1418);
      assertEquals("org.junitpioneer.jupiter.params.Sho)tRange", string7);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      String string8 = StringUtils.repeat('b', 97);
      assertEquals("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringBefore(" ", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\r", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      String string0 = StringUtils.center(" vs ", (-2360));
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace(" vs ");
      assertFalse(boolean0);
      
      String string1 = "Low@ej#oSZ]U:;';A8C";
      String string2 = StringUtils.substringBetween("Low@ej#oSZ]U:;';A8C", (String) null, " vs ");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.lowerCase((String) null);
      assertNull(string3);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2360);
      intArray0[1] = (-2360);
      intArray0[2] = (-2360);
      intArray0[3] = 654;
      intArray0[4] = (-2360);
      intArray0[5] = 11;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'e', (-2360), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2360
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 5);
      assertEquals(0, int0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object2;
      objectArray0[1] = object2;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "";
      String string2 = StringUtils.left("Search and Replace array lengths don't match: The character ", 5);
      assertEquals("Searc", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootUpperCase("*9Dg}i)LT`mlc4");
      assertEquals("*9DG}I)LT`MLC4", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.left((String) null, 5);
      assertNull(string4);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "7N~6t", (CharSequence) "");
      assertEquals("7N~6t", charSequence0);
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "", 586);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.stripEnd("Comparator should not be null.", "");
      assertEquals("Comparator should not be null.", string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: The character ";
      charSequenceArray0[2] = (CharSequence) "7N~6t";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = '';
      charArray0[2] = 'D';
      charArray0[3] = 'o';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'w', (-1), 586);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = StringUtils.join(objectArray0, '>');
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ">java.lang.Object@7ac920ea", (CharSequence) ">java.lang.Object@7ac920ea", (int) '>');
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) ">java.lang.Object@7ac920ea", 'A');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ">java.lang.Object@7ac920ea", (CharSequence) ">java.lang.Object@7ac920ea");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String string1 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string1);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      String string2 = StringUtils.SPACE;
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      String string3 = StringUtils.unwrap("7N~6txz{?KmF~o`E~&E", ">java.lang.Object@7ac920ea");
      assertEquals("7N~6txz{?KmF~o`E~&E", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertFalse(boolean0);
      
      String string4 = StringUtils.remove((String) null, '9');
      assertNull(string4);
      
      byte[] byteArray1 = StringUtils.getBytes((String) null, "p{InCombiningDiacriticalMarks}+");
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "g", (CharSequence) "g");
      assertEquals(1, int0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "g");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category1, locale_Category0, locale_Category2);
      assertNotSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertSame(locale_Category1, locale_Category2);
      assertSame(locale_Category2, locale_Category1);
      assertNotSame(locale_Category2, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertNotSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertSame(locale_Category1, locale_Category2);
      assertSame(locale_Category2, locale_Category1);
      assertNotSame(locale_Category2, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      assertNotSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertSame(locale_Category1, locale_Category2);
      assertSame(locale_Category2, locale_Category1);
      assertNotSame(locale_Category2, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet1.contains(locale_Category0));
      
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      EnumSet<Locale.Category> enumSet2 = enumSet0.clone();
      assertNotSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertSame(locale_Category1, locale_Category2);
      assertSame(locale_Category2, locale_Category1);
      assertNotSame(locale_Category2, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertNotNull(enumSet2);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet2.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet2.contains(locale_Category0));
      
      String string1 = StringUtils.uncapitalize("gdVLbK");
      assertEquals("gdVLbK", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "K<[;.", (CharSequence) null, (int) (short)0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("K<[;.", "org.junitpioneer.jupiter.ReportEntryExtension", (-1));
      assertEquals("K<[;.", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.chop(">H$Jo/Q}-iqA");
      assertEquals(">H$Jo/Q}-iq", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.StringUtils", "sm$V-sh)1XpL");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.overlay("jJ@q+.SD{", "", 64, 64);
      assertEquals("jJ@q+.SD{", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("", '8');
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", " in an array of ", Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[6] = '8';
      charArray0[7] = '8';
      charArray0[8] = '8';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "jJ@q+.SD{", charArray0);
      assertArrayEquals(new char[] {'$', '8', '8', '8', '8', '\u0000', '8', '8', '8'}, charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.capitalize("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("", "Cannot clear and set the following system properties at the same time: ", 90, (-1));
      assertEquals("Cannot clear and set the following system properties at the same time: ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "The String must not b< mpt", "The String must not b< mpt");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("The String must not b< mpt", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.remove("Tup2,#B", " ");
      assertEquals("Tup2,#B", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("d>'27dJMy7k_R9_");
      assertEquals("d>'27djmy7k_r9_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("The String must not b< mpt", (-1219), '(');
      assertEquals("The String must not b< mpt", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", "The String must not b< mpt");
      assertEquals(0.68, double0, 0.01);
      
      String string3 = StringUtils.right(":/9.", (-1750));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("Tup2,#B");
      assertEquals("Tup2,#B", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.capitalize("Tup2,#B");
      assertEquals("Tup2,#B", string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "d>'27djmy7k_r9_", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("org.apache.commons.lang3.ARrayUtils", (CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string6 = StringUtils.removeAll("", "org.apache.commons.lang3.ARrayUtils");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string7 = StringUtils.getIfBlank("org.junitpioneer.jupiter.DefaultTimeZoneExtension", supplier0);
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      int int1 = StringUtils.compare((String) null, ")*6*/qpSobip~h,O", true);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("z");
      assertEquals("z", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("z");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object1;
      objectArray0[1] = object1;
      objectArray0[2] = (Object) null;
      objectArray0[0] = (Object) "";
      objectArray0[4] = (Object) "z";
      objectArray0[5] = (Object) "z";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) null;
      String string2 = StringUtils.joinWith((String) null, objectArray0);
      assertEquals(8, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("z", 2, 'B');
      assertEquals("Bz", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("Bz", 2, 28);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad((String) null, 240);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":YPY6F65P";
      String string2 = StringUtils.replaceEach((String) null, stringArray0, (String[]) null);
      assertEquals(1, stringArray0.length);
      assertNull(string2);
      
      String string3 = StringUtils.deleteWhitespace((String) null);
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[10];
      charArray0[0] = 'w';
      charArray0[1] = 'S';
      charArray0[2] = '@';
      charArray0[3] = 'v';
      charArray0[4] = 'z';
      charArray0[5] = ';';
      int int1 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'w', 'S', '@', 'v', 'z', ';', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(10, charArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.stripAccents("The String must not be empty");
      assertEquals("The String must not be empty", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.wrap((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceChars((String) null, "@@q}b`KA_ca.Fu\"", "@@q}b`KA_ca.Fu\"");
      assertNull(string1);
      
      String string2 = StringUtils.center("", 2, "ingUtils");
      assertEquals("ii", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase((String) null, "<Fh0HSxVESlg5U$hD", false);
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string3 = StringUtils.unwrap("', is neither of type Map.Entry nor an Array", 'V');
      assertEquals("', is neither of type Map.Entry nor an Array", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("', has a length less than 2");
      assertEquals("', has a length less than 2", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>(linkedList0);
      assertNotNull(hashSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "ExpectedExceptionExpectedException", false);
      assertEquals(1, int0);
      
      String string0 = StringUtils.center((String) null, 108);
      assertNull(string0);
      
      String string1 = StringUtils.rotate((String) null, 76);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "The String must not b< mpt", "The String must not b< mpt");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("The String must not b< mpt", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.remove("Tup2,#B", " ");
      assertEquals("Tup2,#B", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("d>'27dJMy7k_R9_");
      assertEquals("d>'27djmy7k_r9_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("The String must not b< mpt", (-1219), '(');
      assertEquals("The String must not b< mpt", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", "The String must not b< mpt");
      assertEquals(0.68, double0, 0.01);
      
      String string3 = StringUtils.right("hU.", (-1750));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("Tup2,#B");
      assertEquals("Tup2,#B", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.capitalize("Tup2,#B");
      assertEquals("Tup2,#B", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "d>'27djmy7k_r9_", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("org.apache.commons.lang3.ARrayUtils", (CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string6 = StringUtils.removeAll("", "org.apache.commons.lang3.ARrayUtils");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string7 = StringUtils.getIfBlank("org.junitpioneer.jupiter.DefaultTimeZoneExtension", supplier0);
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      int int1 = StringUtils.compare((String) null, ")*6*/qpSobip~h,O", false);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      String string0 = StringUtils.repeat("m", 3608);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string0, "m");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      String string0 = StringUtils.wrap("?Lat5x3PJ>IS~", '%');
      assertEquals("%?Lat5x3PJ>IS~%", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "%?Lat5x3PJ>IS~%", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString("?Lat5x3PJ>IS~");
      assertEquals("?Lat5x3PJ>IS~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank("", "");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)64;
      String string3 = StringUtils.join(byteArray0, 't', (-1), (int) (byte) (-13));
      assertArrayEquals(new byte[] {(byte)88, (byte)64}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("", (String) null);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "?Lat5x3PJ>IS~", (CharSequence) "");
      assertEquals(13, int1);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 897L;
      longArray0[1] = (long) (byte)64;
      longArray0[2] = (long) 't';
      longArray0[3] = (long) '%';
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 13;
      String string5 = StringUtils.join(longArray0, 'A');
      assertArrayEquals(new long[] {897L, 64L, 116L, 37L, (-1L), (-1L), 13L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals("897A64A116A37A-1A-1A13", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.defaultString("DGO$6+\"0 *Qkd[F");
      assertEquals("DGO$6+\"0 *Qkd[F", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "The String must not be empty";
      String string0 = StringUtils.join((short[]) null, '0');
      assertNull(string0);
      
      String string1 = StringUtils.reverse("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat('0', 9);
      assertEquals("000000000", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase(charSequenceArray0[1], "cYZl;Pn)8h/Hdl");
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.remove("DefaultLocale", 'I');
      assertEquals("DefaultLocale", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("", 'g');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultIfEmpty((String) null, "]]C IjRtF");
      assertEquals("]]C IjRtF", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 9;
      intArray0[1] = 9;
      intArray0[2] = 9;
      intArray0[3] = (int) '0';
      intArray0[4] = (int) '0';
      intArray0[5] = (int) 'I';
      intArray0[6] = (int) 'I';
      intArray0[7] = (int) '0';
      intArray0[8] = (int) 'g';
      String string6 = StringUtils.join(intArray0, 'm', 3560, 44);
      assertArrayEquals(new int[] {9, 9, 9, 48, 48, 73, 73, 48, 103}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      String string0 = "\r";
      String string1 = StringUtils.normalizeSpace("\r");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("\r", "");
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) ". The followingpaths could not be :eleted (see suppressed exceptions for details): ", (CharSequence) ". The followingpaths could not be :eleted (see suppressed exceptions for details): ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) ". The followingpaths could not be :eleted (see suppressed exceptions for details): ", ". The followingpaths could not be :eleted (see suppressed exceptions for details): ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.stripStart(", Length: ", "kF");
      assertEquals(", Length: ", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      String string1 = locale0.getDisplayVariant();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      String string2 = StringUtils.right("Strings must not be null", 3396);
      assertEquals("Strings must not be null", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.getFuzzyDistance("kF", "Strings must not be null", locale0);
      assertEquals(0, int0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, 'd', (-1), (-1233));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Failed to create custom temp directory", "\"^s`c'=uW");
      assertEquals("Failed to create custom temp directory", string0);
      assertNotNull(string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("\"^s`c'=uW"));
      
      Iterator<String> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("\"^s`c'=uW"));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Failed to create custom temp directory";
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Iterator<Locale.Category> iterator1 = hashSet0.iterator();
      assertNotNull(iterator1);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean0 = hashSet0.add(locale_Category0);
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(locale_Category0));
      
      String string1 = StringUtils.join(iterator1, '-');
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(locale_Category0));
      
      String string2 = StringUtils.repeat('-', 1147);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string2, (CharSequence) "", 4);
      assertEquals(4, int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.lowerCase("Object varargs must not be null");
      assertEquals("object varargs must not be null", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("object varargs must not be null");
      assertEquals(31, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = "\\u";
      String string2 = StringUtils.deleteWhitespace(string1);
      assertEquals("\\u", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = '3';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Object varargs must not be null", charArray0);
      assertArrayEquals(new char[] {'3', '3'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.leftPad("iy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A", 16);
      assertEquals("iy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("iy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.mid(string1, 16, 90);
      assertEquals("", string4);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("object varargs must not be null", "AIdL'cX/`XL51@");
      assertEquals("AIdL'cX/`XL51@object varargs must not be nullAIdL'cX/`XL51@", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("object varargs must not be null"));
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack0.contains("object varargs must not be null"));
      
      String string6 = StringUtils.join((Iterator<?>) listIterator0, string1);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertNotNull(string6);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack0.contains("object varargs must not be null"));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      String string7 = StringUtils.leftPad(string1, 97, '@');
      assertEquals("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\u", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertNotNull(string7);
      
      charSequenceArray0[1] = (CharSequence) string7;
      charSequenceArray0[2] = (CharSequence) "uBL";
      charSequenceArray0[3] = (CharSequence) "c";
      charSequenceArray0[4] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[5] = (CharSequence) "iy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A";
      charSequenceArray0[6] = (CharSequence) "iy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A";
      boolean boolean2 = StringUtils.containsAny((CharSequence) "AIdL'cX/`XL51@", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'P');
      assertEquals(5, charSequenceArray0.length);
      assertEquals("PPPP", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing("PPPP", "PPPP", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("PPPP", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("\r", 1371, 13);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\r";
      stringArray0[1] = "\r";
      stringArray0[2] = "\r";
      stringArray0[3] = "";
      stringArray0[4] = "\r";
      stringArray0[5] = "\r";
      stringArray0[6] = "";
      stringArray0[7] = "sWE1c}~u";
      stringArray0[8] = "DefaultLocale";
      String string3 = StringUtils.join(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("\r\r\r\r\rsWE1c}~uDefaultLocale", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\r\r\r\r\rsWE1c}~uDefaultLocale", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "", 797);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("org.junitpioneer.jupiter.SystemPropertyExtension", "org.junitpioneer.jupiter.SystemPropertyExtension", "org.junitpioneer.jupiter.ReportEntryExtension");
      assertNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase(",L", ",L", ",L", 3533);
      assertEquals(",L", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center(",L", 3533, '}');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      String string2 = StringUtils.stripStart("?$&IIgT7p0Z7MM", "codefx");
      assertEquals("?$&IIgT7p0Z7MM", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("U", "?$&IIgT7p0Z7MM");
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween(",L", ",L", "U");
      assertNull(stringArray0);
      
      String string4 = StringUtils.truncate(string1, 3, 114);
      assertEquals("}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}", string4);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.TempDirectory", "\r");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.compareIgnoreCase("}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}", "\r", true);
      assertEquals(112, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        Charset.forName("org.junitpioneer.vintage.TimeoutExtension");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.junitpioneer.vintage.TimeoutExtension
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, '_', (-127), (-127));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.upperCase("NQ1eoh", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      String string0 = StringUtils.substringBetween("IoW8\"B~|E;)Jl", "IoW8\"B~|E;)Jl");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("IoW8\"B~|E;)Jl", (String) null, (-11));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeIgnoreCase("org.junitpioneer.jupiter.params.IntRange", "org.junitpioneer.jupiter.params.IntRange");
      assertEquals("", string1);
      assertNotNull(string1);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Stack<Locale.Category> stack1 = new Stack<Locale.Category>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack1.sort(comparator0);
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = stack0.add(locale_Category0);
      assertNotSame(stack0, stack1);
      assertTrue(boolean0);
      assertFalse(stack0.equals((Object)stack1));
      assertEquals("[FORMAT]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      stack0.addElement(locale_Category1);
      assertNotSame(stack0, stack1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertEquals("[FORMAT, DISPLAY]", stack0.toString());
      assertTrue(stack0.contains(locale_Category1));
      
      boolean boolean1 = StringUtils.isAlphaSpace("IoW8\"B~|E;)Jl");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.overlay("", (String) null, 2713, 84);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) stringArray0[0], (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.overlay("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError - output of one loop is the input of another", (String) null, 108, 160);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protes the input of another", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = StringUtils.repeat((String) null, "F7P.B{YR&ZC)N \"", 2376);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'P');
      assertEquals(5, charSequenceArray0.length);
      assertEquals("PPPP", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing("E", "E", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("E", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[3] = 'P';
      charArray0[4] = 'P';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "E", charArray0);
      assertArrayEquals(new char[] {'P', 'P', '\u0000', 'P', 'P'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\r", "\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("\r");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("JmaxWith cannot be negative", "9Ts");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 'P';
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 'P';
      floatArray0[5] = (float) 'P';
      floatArray0[6] = (float) 'P';
      floatArray0[7] = (float) (-1);
      String string2 = StringUtils.repeat((String) null, "PPPP", (-1632));
      assertNull(string2);
      
      String string3 = StringUtils.remove("9Ts", '3');
      assertEquals("9Ts", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeAll("E", "9Ts");
      assertEquals("E", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replaceChars((String) null, (String) null, ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertNull(string1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = null;
      String string1 = StringUtils.remove((String) null, "=r9To`suQe_vZD?iy>?Azorg.apache.commons.lang3.StringUtils?");
      assertNull(string1);
      
      String string2 = StringUtils.toRootLowerCase((String) null);
      assertNull(string2);
      
      int int0 = 1;
      String string3 = StringUtils.rightPad("=r9To`suQe_vZD?iy>?Azorg.apache.commons.lang3.StringUtils?", (-258), 'Z');
      assertEquals("=r9To`suQe_vZD?iy>?Azorg.apache.commons.lang3.StringUtils?", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, (String) null, (-117));
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'P');
      assertEquals(5, charSequenceArray0.length);
      assertEquals("PPPP", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing("E", "E", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("E", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("\r", 1371, 13);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.trim("");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("E", "", "iy>?Azorg.apache.commons.lang3.StringUtils?");
      assertEquals("E", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.removeStart("org.junitpioneer.jupiter.params.LongRange", "");
      assertEquals("org.junitpioneer.jupiter.params.LongRange", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.substringAfterLast((String) null, "E");
      assertNull(string7);
      
      String string8 = StringUtils.joinWith("", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      
      String string9 = StringUtils.leftPad("", 13, ',');
      assertEquals(",,,,,,,,,,,,,", string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int2 = StringUtils.lastOrdinalIndexOf("iy>?Azorg.apache.commons.lang3.StringUtils?", "PPPP", 1371);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)67;
      String string10 = StringUtils.toString(byteArray0, (String) null);
      assertArrayEquals(new byte[] {(byte) (-62), (byte)65, (byte)121, (byte)67}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals("\uFFFDAyC", string10);
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertNotNull(string10);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("pP{l;>3/0JKL$})", (-1), 70);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "G2DX36IpO,9A", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("?iy>?Azorg.apache.commons.lang3.StringUtils", 45, '_');
      assertEquals("?iy>?Azorg.apache.commons.lang3.StringUtils__", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("?iy>?Azorg.apache.commons.lang3.StringUtils__", "G2DX36IpO,9A");
      assertEquals(0.24, double0, 0.01);
      
      String string1 = StringUtils.right("?iy>?Azorg.apache.commons.lang3.StringUtils__", 24);
      assertEquals("mons.lang3.StringUtils__", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp(".8j/MC(");
      assertEquals(".8j/MC(", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ", Length: y?x}McTwjf ", 1052);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.defaultString("\r", "\r");
      assertEquals("\r", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("org.junitpioneer.jupiter.RepeatFailedTestExtensionG2DX36IpO,9A", "org.junitpioneer.jupiter.RepeatFailedTestExtensionG2DX36IpO,9A");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.remove((String) null, "VA,D]`fE");
      assertNull(string4);
      
      String string5 = StringUtils.toRootLowerCase("mons.lang3.StringUtils__");
      assertEquals("mons.lang3.stringutils__", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split("?iy>?Azorg.apache.commons.lang3.StringUtils");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(string1));
      
      LinkedList<String> linkedList0 = new LinkedList<String>(hashSet0);
      assertNotNull(linkedList0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(hashSet0.contains(string1));
      assertFalse(linkedList0.contains(string1));
      
      String string6 = StringUtils.join((Iterable<?>) linkedList0, '_');
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(hashSet0.contains(string1));
      assertFalse(linkedList0.contains(string1));
      
      double double1 = StringUtils.getJaroWinklerDistance("Timeout", "");
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean0 = arrayDeque0.add(locale_Category0);
      assertTrue(boolean0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains(locale_Category0));
      
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>(arrayDeque0);
      assertNotNull(arrayDeque1);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque1.size());
      assertFalse(arrayDeque1.isEmpty());
      assertTrue(arrayDeque0.contains(locale_Category0));
      
      Locale.Category locale_Category1 = arrayDeque0.removeFirst();
      assertSame(locale_Category1, locale_Category0);
      assertEquals(Locale.Category.DISPLAY, locale_Category1);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(locale_Category1));
      
      String string0 = StringUtils.join((Iterable<?>) arrayDeque1, (String) null);
      assertEquals("DISPLAY", string0);
      assertNotNull(string0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(1, arrayDeque1.size());
      assertFalse(arrayDeque1.isEmpty());
      assertFalse(arrayDeque0.contains(locale_Category1));
      
      boolean boolean1 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("DISPLAY", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = '^';
      charArray0[2] = 'r';
      charArray0[3] = '-';
      charArray0[4] = 'Y';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'r', 14, 1010);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      String string0 = StringUtils.deleteWhitespace("y-e,/bj+w,{7\"0m-R9:");
      assertEquals("y-e,/bj+w,{7\"0m-R9:", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("org.junitpioneer.jupiter.params.DoubleRange\n", 118, '5');
      assertEquals("55555555555555555555555555555555555555555555555555555555555555555555555555org.junitpioneer.jupiter.params.DoubleRange\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "rP4MSMD", (char[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replace(", Length: 0", "', has a length less than 2", "Timeout", 118);
      assertEquals(", Length: 0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("rP4MSMD", "a%$/]wx");
      assertEquals("rP4MSMD", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.reverseDelimited("qttUY*,Ie@$5oz*j5c", '3');
      assertEquals("qttUY*,Ie@$5oz*j5c", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.endsWith("rP4MSMD", "a%$/]wx");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ", Length: 0", "p81p35p89p0p62p-28p62p0p");
      assertEquals(10, int0);
      
      String string5 = StringUtils.trimToNull("=");
      assertEquals("=", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isWhitespace("{# p");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "z", "z");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      String string0 = StringUtils.removeStart("d0#D<iW=kWdSY", "d0#D<iW=kWdSY");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("{L4@t[y9;", 6);
      assertEquals("{L4@t[", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("{L4@t[y9;", "d0#D<iW=kWdSY", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      String string0 = StringUtils.stripAccents("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("\r", 'N', 'J');
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("\r");
      assertTrue(boolean0);
      
      String string2 = StringUtils.defaultString("iy>?Azorg.apache.commons.lang3.StringUtils?", "...");
      assertEquals("iy>?Azorg.apache.commons.lang3.StringUtils?", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("@%2", "@%2");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("...", 420);
      assertEquals("...", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAllUpperCase("iy>?Azorg.apache.commons.lang3.StringUtils?");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.join((short[]) null, '4', (-2830), 3703);
      assertNull(string5);
      
      String string6 = StringUtils.replace("M_w&W", "@%2", "");
      assertEquals("M_w&W", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.lowerCase("M_w&W");
      assertEquals("m_w&w", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.isAlpha("m_w&w");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string8 = StringUtils.toRootUpperCase("x");
      assertEquals("X", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      
      String string9 = StringUtils.truncate((String) null, 3703);
      assertNull(string9);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "io", 'N');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.truncate((String) null, 0, 0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      String string0 = StringUtils.strip("*v&~RH%", "*v&~RH%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*v&~RH%";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[5] = "*v&~RH%";
      stringArray0[6] = "";
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("", 2586);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Failed to delete temp directory ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.mid("*v&~RH%", (-573), (-573));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootUpperCase("*v&~RH%");
      assertEquals("*V&~RH%", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "*V&~RH%", (char[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = StringUtils.compareIgnoreCase(" ", " ", false);
      assertEquals(0, int0);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", (CharSequence) "Failed to delete temp directory ");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string4 = StringUtils.wrap("", '}');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean4 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.appendIfMissing("\n", "\n", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(locale_Category0));
      
      Stack<Locale.Category> stack1 = new Stack<Locale.Category>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertFalse(stack1.contains(locale_Category0));
      
      String string1 = StringUtils.replaceIgnoreCase("\n", "\n", "\n", (-1));
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string2 = StringUtils.EMPTY;
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("\n");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = StringUtils.unwrap("\n", ':');
      assertEquals("\n", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      String string0 = StringUtils.unwrap("e", 's');
      assertEquals("e", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      String string0 = StringUtils.substringBetween("fs'<Yi4,", "fs'<Yi4,", "fs'<Yi4,");
      assertNull(string0);
      
      String string1 = StringUtils.swapCase((String) null);
      assertNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, (String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripStart("VA,D]`fE", (String) null);
      assertEquals("VA,D]`fE", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween((String) null, "VA,D]`fE");
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("VA,D]`fE", (String) null, "U");
      assertNull(stringArray0);
      
      String string3 = StringUtils.truncate("VA,D]`fE", 8, 168);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("\n", "...");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertNull(intArray0);
      
      String[] stringArray2 = StringUtils.split((String) null, '`');
      assertNull(stringArray2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-65);
      try { 
        StringUtils.toString(byteArray0, "...");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "The String must not be empty", "The String must not be empty");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("The String must not be empty", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.remove("Tup2,#B", " ");
      assertEquals("Tup2,#B", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("d>'27dJMy7k_R9_");
      assertEquals("d>'27djmy7k_r9_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("The String must not be empty", (-1219), '(');
      assertEquals("The String must not be empty", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", "The String must not be empty");
      assertEquals(0.68, double0, 0.01);
      
      String string3 = StringUtils.right("hU.", (-1750));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("Tup2,#B");
      assertEquals("Tup2,#B", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.capitalize("Tup2,#B");
      assertEquals("Tup2,#B", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "d>'27djmy7k_r9_", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("org.apache.commons.lang3.ARrayUtils", (CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string6 = StringUtils.removeAll("", "org.apache.commons.lang3.ARrayUtils");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string7 = StringUtils.getIfBlank("org.junitpioneer.jupiter.DefaultTimeZoneExtension", supplier0);
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "The String must not be empty";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "The String must not be empty";
      boolean boolean0 = StringUtils.endsWithAny("The String must not be empty", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("The String must not be empty"));
      
      HashSet<String> hashSet0 = new HashSet<String>(linkedList0);
      assertNotNull(hashSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(linkedList0.contains("The String must not be empty"));
      assertFalse(hashSet0.contains("The String must not be empty"));
      
      Iterator<String> iterator0 = hashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(linkedList0.contains("The String must not be empty"));
      assertFalse(hashSet0.contains("The String must not be empty"));
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) charSequenceArray0[3]);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(predicate0);
      
      boolean boolean1 = hashSet0.removeIf(predicate0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(linkedList0.contains("The String must not be empty"));
      assertFalse(hashSet0.contains("The String must not be empty"));
      
      String string0 = StringUtils.replaceIgnoreCase("The String must not be empty", "Strings must not be null", "Strings must not be null");
      assertEquals("The String must not be empty", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      int int0 = StringUtils.getFuzzyDistance("cYZl;Pn)8h/Hdl", "cYZl;Pn)8h/Hdl", locale0);
      assertEquals(40, int0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.overlay("{?+8-wQL?^Y;a__-Zt", "{?+8-wQL?^Y;a__-Zt", (-1), 58);
      assertEquals("{?+8-wQL?^Y;a__-Zt", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((short[]) null, '0');
      assertNull(string1);
      
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.stripStart((String) null, "{?+8-wQL?^Y;a__-Zt");
      assertNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "{?+8-wQL?^Y;a__-Zt", 148, 28);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase((String) null, (String) null, true);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNotBlank(". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'U';
      String string0 = StringUtils.join(floatArray0, 'U', 20, (-2642));
      assertArrayEquals(new float[] {85.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Locale must not be null";
      stringArray0[1] = "";
      stringArray0[2] = "&DZ2ic/\"m~%b";
      stringArray0[3] = ". The following paths could not be deleted (see suppressed exceptions for details): ";
      stringArray0[4] = "Locale must not be null";
      stringArray0[5] = ", Length: 0";
      stringArray0[6] = "";
      stringArray0[7] = "&DZ2ic/\"m~%b";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("Locale must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("org.junitpioneer.jupiter.params.IntRange", "p");
      assertEquals("org.junit", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "?", 161);
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("iy>?Azorg.apache.commons.lang3.StringUtils", "?");
      assertEquals("?iy>?Azorg.apache.commons.lang3.StringUtils?", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad(":YPY6F65P", 240);
      assertEquals("                                                                                                                                                                                                                                       :YPY6F65P", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("iy>?Azorg.apache.commons.lang3.StringUtils");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.replaceEach("=r9To`suQe_vZD", (String[]) null, (String[]) null);
      assertEquals("=r9To`suQe_vZD", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace(":YPY6F65P");
      assertEquals(":YPY6F65P", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("=r9To`suQe_vZD", "?iy>?Azorg.apache.commons.lang3.StringUtils?");
      assertEquals("=r9To`suQe_vZD", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfAny("=r9To`suQe_vZD", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = 'R';
      charArray0[2] = 'b';
      charArray0[3] = 'N';
      charArray0[4] = '@';
      charArray0[5] = ',';
      charArray0[6] = 'J';
      int int1 = StringUtils.indexOfAny((CharSequence) "iy>?Azorg.apache.commons.lang3.StringUtils", charArray0);
      assertArrayEquals(new char[] {'d', 'R', 'b', 'N', '@', ',', 'J'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("iy>?Azorg.apache.commons.lang3.StringUtils", "=r9To`suQe_vZD");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string5 = StringUtils.stripAccents("LMU87D,}zWAEK>H#^Vs");
      assertEquals("LMU87D,}zWAEK>H#^Vs", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      String string0 = StringUtils.substringBetween("+N@f.Tob", "+N@f.Tob");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOfAny("+N@f.Tob", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 16);
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string1 = StringUtils.join((int[]) null, '/');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'P');
      assertEquals(5, charSequenceArray0.length);
      assertEquals("PPPP", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing("E", "E", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("E", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[3] = 'P';
      charArray0[4] = 'P';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "E", charArray0);
      assertArrayEquals(new char[] {'P', 'P', '\u0000', 'P', 'P'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\r", "\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("\r");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("JmaxWith cannot be negative", "9Ts");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 'P';
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 'P';
      floatArray0[5] = (float) 'P';
      floatArray0[6] = (float) 'P';
      floatArray0[7] = (float) (-1);
      String string2 = StringUtils.join(floatArray0, 'P', 2866, (-1));
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 80.0F, (-1.0F), 80.0F, 80.0F, 80.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.getIfEmpty("The character ", (Supplier<String>) null);
      assertEquals("The character ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.appendIfMissingIgnoreCase("Failed to create default temp directory", "Failed to create default temp directory", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("Failed to create default temp directory", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNull(charSequence0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      int int0 = StringUtils.compare((String) null, " in an array of ");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.toRootUpperCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.trimToNull("Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviation width is %d", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Failed to create default temp directory", (String) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "]FD()&&MuSL ");
      assertNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("Failed to create default temp directory");
      assertEquals(39, intArray0.length);
      assertNotNull(intArray0);
      
      String string3 = StringUtils.leftPad(" in an array of ", (-1), 'L');
      assertEquals(" in an array of ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'L', 0, 0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.rightPad("", 3564, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) string1;
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripAccents("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("", 3, string1);
      assertEquals("   ", string3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, 'B', (-864), 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -864
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (-182));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.stripToNull("\r");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.split((String) null, (String) null, (-182));
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.endsWithAny("\r", (CharSequence[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = StringUtils.stripAccents("XK]X");
      assertEquals("XK]X", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      String string0 = StringUtils.wrap("?Lat5x3PJ>IS~", '%');
      assertEquals("%?Lat5x3PJ>IS~%", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "%?Lat5x3PJ>IS~%", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "?Lat5x3PJ>IS~", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = ":\"<X@-L~m";
      String string2 = StringUtils.defaultString(":\"<X@-L~m");
      assertEquals(":\"<X@-L~m", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultIfBlank("", " ");
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween(" ", " ");
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "?Lat5x3PJ>IS~", "*9bZ+[V5T??;)");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("%?Lat5x3PJ>IS~%", 1110, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Aborting to protect against StackOverflowEror - output of one loop is the input of another", "Aborting to protect against StackOverflowEror - output of one loop is the input of another");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "Aborting to protect against StackOverflowEror - output of one loop is the input of another", "Aborting to protect against StackOverflowEror - output of one loop is the input of another");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("'4>#LM*MDyu4M9^@");
      assertEquals(16, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.deleteWhitespace("Be_EV5msb&kLg");
      assertEquals("Be_EV5msb&kLg", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("rP4MSMD", 0, '3');
      assertEquals("rP4MSMD", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[1] = 'F';
      charArray0[2] = '3';
      String string2 = StringUtils.repeat('F', 0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeAll(")F)\"$e", "Strings must not be null");
      assertEquals(")F)\"$e", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.overlay("9v,\rx8wk*{1-I", "9v,\rx8wk*{1-I", 0, 0);
      assertEquals("9v,\rx8wk*{1-I9v,\rx8wk*{1-I", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("9Ts", 101, 101);
      assertEquals("9Ts", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = StringUtils.join(objectArray0, '>');
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ">java.lang.Object@69ac9d54", (CharSequence) ">java.lang.Object@69ac9d54", 13);
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) ">java.lang.Object@69ac9d54", 'A');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ">java.lang.Object@69ac9d54", (CharSequence) ">java.lang.Object@69ac9d54");
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string1 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string1);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = 'c';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", charArray0);
      assertArrayEquals(new char[] {'A', '>', '>', 'c'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replace((String) null, (String) null, "goU|Hf'", (-1595));
      assertNull(string2);
      
      String string3 = StringUtils.strip((String) null, ", Length: ");
      assertNull(string3);
      
      String string4 = StringUtils.reverseDelimited(" is not in the range '0' - '9'", '*');
      assertEquals(" is not in the range '0' - '9'", string4);
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.endsWith("p{InCombiningDiacriticalMarks}+", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int4 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      
      String string5 = StringUtils.trimToNull("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)");
      assertEquals("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isWhitespace(">java.lang.Object@69ac9d54");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeFirst("The character ", "The character ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("The character ", 'u');
      assertEquals("The character ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.trimToEmpty("The character ");
      assertEquals("The character", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string3 = StringUtils.getIfBlank("", supplier0);
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("The character");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.unwrap("Locale must not be null", "Failed to create default temp directory");
      assertEquals("Locale must not be null", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.isWhitespace("Locale must not be null");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      String string0 = StringUtils.remove("Cannot clear and set the following system properties at the same time: ", 'Y');
      assertEquals("Cannot clear and set the following system properties at the same time: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("Cannot clear and set the following system properties at the same time: ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("Cannot clear and set the following system properties at the same time: ", "Cannot clear and set the following system properties at the same time: ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.reverse("Locale must not be null");
      assertEquals("llun eb ton tsum elacoL", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("llun eb ton tsum elacoL", 368, "Locale must not be null");
      assertEquals("Locale must not be nullLocale must not be nullLocale must not be nullLocale must not be nullLocale must not be nullLocale must not be nullLocale must not be nullLocale mustllun eb ton tsum elacoLLocale must not be nullLocale must not be nullLocale must not be nullLocale must not be nullLocale must not be nullLocale must not be nullLocale must not be nullLocale must ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate("Cannot clear and set the following system properties at the same time: ", 368);
      assertEquals("Cannot clear and set the following system properties at the same time: ", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string4 = StringUtils.trimToNull("Locale must not be null");
      assertEquals("Locale must not be null", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      charSequenceArray0[0] = (CharSequence) "Locale must not be null";
      charSequenceArray0[1] = (CharSequence) "llun eb ton tsum elacoL";
      charSequenceArray0[2] = (CharSequence) "Cannot clear and set the following system properties at the same time: ";
      charSequenceArray0[3] = (CharSequence) "Locale must not be nullLocale must not be nullLocale must not be nullLocale must not be nullLocale must not be nullLocale must not be nullLocale must not be nullLocale mustllun eb ton tsum elacoLLocale must not be nullLocale must not be nullLocale must not be nullLocale must not be nullLocale must not be nullLocale must not be nullLocale must not be nullLocale must ";
      charSequenceArray0[4] = (CharSequence) "Locale must not be null";
      charSequenceArray0[5] = (CharSequence) "Cannot clear and set the following system properties at the same time: ";
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("Locale must not be null", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string5 = StringUtils.center("Locale must not be null", 368);
      assertEquals("                                                                                                                                                                            Locale must not be null                                                                                                                                                                             ", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, "Search and Replace array lengths don't match: ");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Search and Replace array lengths don't match: ");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceChars("Search and Replace array lengths don't match: ", "_d%PEG>O", (String) null);
      assertEquals("Search an Replace array lengths on't match: ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("", 0, "@@q}b`KA_ca.Fu\"");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "@@q}b`KA_ca.Fu\"";
      charSequenceArray0[1] = (CharSequence) "Search an Replace array lengths on't match: ";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("@@q}b`KA_ca.Fu\"Search an Replace array lengths on't match: ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.abbreviate("Strings must not be null", (String) null, Integer.MAX_VALUE);
      assertEquals("Strings must not be null", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "Search and Replace array lengths don't match: ", "ea*\" u2");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Failed to create custom temp directory", "\"^s`c'=uW");
      assertEquals("Failed to create custom temp directory", string0);
      assertNotNull(string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("\"^s`c'=uW"));
      
      boolean boolean0 = treeSet0.add("(/'RE[$!4_'3&");
      assertTrue(boolean0);
      assertTrue(treeSet0.contains("(/'RE[$!4_'3&"));
      assertFalse(treeSet0.contains("\"^s`c'=uW"));
      
      Iterator<String> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(treeSet0.contains("(/'RE[$!4_'3&"));
      assertFalse(treeSet0.contains("\"^s`c'=uW"));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Failed to create custom temp directory";
      stringArray0[1] = " in an array of ";
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = " in an array of ";
      stringArray1[1] = "Failed to create custom temp directory";
      stringArray1[2] = ",F~!Dtu*>x>+z/b #";
      String string1 = StringUtils.getCommonPrefix(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertEquals("", string1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("\"^s`c'=uW", " in an array of ", "i8");
      assertEquals("\"^s`c'=uW", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("Failed to create custom temp directory", " vs ", 31, 31);
      assertEquals(" vs reate custom temp directory", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " vs reate custom temp directory", Integer.MAX_VALUE, 31);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      String string4 = StringUtils.join(longArray0, 'U');
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      int int0 = StringUtils.getFuzzyDistance("7rLk>N'[WV#$+;Si", "Threshold must not be negative\n\r", locale0);
      assertEquals(0, int0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      boolean boolean0 = StringUtils.isAlphanumeric("7rLk>N'[WV#$+;Si");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      String string0 = StringUtils.substringBefore("uC)b`Q#cT9sB{Qh4Z/", (String) null);
      assertEquals("uC)b`Q#cT9sB{Qh4Z/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      String string0 = StringUtils.trimToNull("\"^s`c'=uW");
      assertEquals("\"^s`c'=uW", string0);
      assertNotNull(string0);
      
      String string1 = "', is neither of type Map.Entry nor an Array";
      int int0 = StringUtils.indexOfAny((CharSequence) "', is neither of type Map.Entry nor an Array", "\"^s`c'=uW");
      assertEquals(0, int0);
      
      String string2 = "'C*v";
      String string3 = StringUtils.center("', is neither of type Map.Entry nor an Array", 0, 'G');
      assertEquals("', is neither of type Map.Entry nor an Array", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      try { 
        StringUtils.getBytes("=2wNZ8 z", "\"^s`c'=uW");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      String string0 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      boolean boolean0 = StringUtils.isAlphaSpace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", 518);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "The String must not be empty");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.removeAll((String) null, "e Jq!;t");
      assertNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string2 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      String string0 = StringUtils.remove("?Lat5x3PJIS~", (String) null);
      assertEquals("?Lat5x3PJIS~", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("?Lat5x3PJIS~");
      assertFalse(boolean0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      String string0 = StringUtils.defaultString("Threshold must not be negative", "Threshold must not be negative");
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1950);
      String string2 = StringUtils.join(shortArray0, 'W');
      assertArrayEquals(new short[] {(short) (-1950)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("-1950", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.replaceChars("/`a:<E7", "maxWith cannot be negative", "Threshold must not be negative");
      assertEquals("/`h:<E7", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.join((Object[]) null, "Backup");
      assertNull(string4);
      
      String string5 = StringUtils.wrapIfMissing((String) null, ' ');
      assertNull(string5);
      
      String string6 = StringUtils.capitalize(".");
      assertEquals(".", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "maxWith cannot be negative", (CharSequence) ".");
      assertEquals(0, int0);
      
      String string7 = StringUtils.repeat('H', (int) (short) (-1950));
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringBetween((String) null, "", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("7{u+|v!Ep'FW2pO~,", "uC)U`Q#cT9B{Qh4Z/", "7{u+|v!Ep'FW2pO~,");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 1
         // uC)U`Q#cT9B{Qh4Z/
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("org.junitpioneer.jupiter.params.IntRa_ge", "org.junitpioneer.jupiter.params.IntRa_ge");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "+N@f.Tob", (CharSequence) "", 16);
      assertEquals(8, int0);
      
      String string1 = StringUtils.overlay("", "TtQABP*S'(X", 8, 76);
      assertEquals("TtQABP*S'(X", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("J");
      assertEquals("J", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("_`{f/XiKfc8M|q");
      assertEquals("8", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "org.junitpioneer.jupiter.params.IntRa_ge", 76, 798);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.substringAfter((String) null, "TtQABP*S'(X");
      assertNull(string4);
      
      String string5 = StringUtils.reverse("p{InCombiningDiacriticalMarks}+");
      assertEquals("+}skraMlacitircaiDgninibmoCnI{p", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = 'f';
      charArray0[2] = 'R';
      charArray0[3] = '{';
      charArray0[4] = 'e';
      charArray0[5] = '>';
      charArray0[6] = 'x';
      charArray0[7] = 'T';
      charArray0[8] = '/';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertArrayEquals(new char[] {'.', 'f', 'R', '{', 'e', '>', 'x', 'T', '/'}, charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "TtQABP*S'(X", (CharSequence) "+N@f.Tob", (-1));
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("chinois", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(set0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      String string1 = StringUtils.lowerCase("\"6", locale0);
      assertNotSame(locale0, locale1);
      assertEquals("\"6", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      int int0 = StringUtils.indexOf((CharSequence) "\"6", (CharSequence) "\"6");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.center("\"6", 0, "\"6");
      assertEquals("\"6", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.lowerCase("\"6");
      assertEquals("\"6", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.prependIfMissing((String) null, "\"6", (CharSequence[]) null);
      assertNull(string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = ';';
      charArray0[2] = 'i';
      charArray0[3] = '\"';
      charArray0[4] = 'M';
      charArray0[5] = 'B';
      charArray0[6] = '2';
      charArray0[7] = 'K';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "\"6", charArray0);
      assertArrayEquals(new char[] {'&', ';', 'i', '\"', 'M', 'B', '2', 'K'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("\"6");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.LF;
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "\"6", (CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string6 = StringUtils.repeat("FD-yKE0!YF;=tx=y0Q", 7);
      assertEquals("FD-yKE0!YF;=tx=y0QFD-yKE0!YF;=tx=y0QFD-yKE0!YF;=tx=y0QFD-yKE0!YF;=tx=y0QFD-yKE0!YF;=tx=y0QFD-yKE0!YF;=tx=y0QFD-yKE0!YF;=tx=y0Q", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, 'V', 17, 17);
      assertNull(string0);
      
      String string1 = StringUtils.rotate("<io^#6", 8192);
      assertEquals("#6<io^", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "<io^#6", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad("<io^#6", (-2), "<io^#6");
      assertEquals("<io^#6", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("<io^#6"));
      
      String string3 = linkedList0.poll();
      assertNull(string3);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("<io^#6"));
      
      linkedList0.push("The character must not be null");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("The character must not be null"));
      assertFalse(linkedList0.contains(string1));
      
      String string4 = StringUtils.join((List<?>) linkedList0, '8', 1829, 1829);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("The character must not be null"));
      assertFalse(linkedList0.contains(string1));
      
      boolean boolean1 = StringUtils.endsWith("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError - output of one loop is the input of another", "<io^#6");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.abbreviateMiddle((String) null, ";SeB&5uFbLH]r\"5rcYZl;Pn)8h/Hdl", (-2788));
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string6 = StringUtils.replace((String) null, "7@}hx4Kt", "i");
      assertNull(string6);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean2 = StringUtils.startsWithAny("The character must not be null", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ";SeB&5uFbLH]r\"5rcYZl;Pn)8h/Hdl", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "g", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.prependIfMissingIgnoreCase("m", "m", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("m", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("m", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultIfEmpty("_d%PEG>O", (String) null);
      assertEquals("_d%PEG>O", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("_d%PEG>O");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.join((short[]) null, 'A', 2, 4);
      assertNull(string2);
      
      String string3 = StringUtils.replace("", "0R4}:1oZ84.=/x", "zu1v[75'#_!-%/");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.toRootUpperCase((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.rotate((String) null, 3703);
      assertNull(string5);
      
      String string6 = StringUtils.reverse("Expected exception %s was not thrown.");
      assertEquals(".nworht ton saw s% noitpecxe detcepxE", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      boolean boolean3 = StringUtils.isBlank("io");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      String string0 = StringUtils.stripAccents("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("G2DX36IpO,9A");
      assertFalse(boolean0);
      
      String string2 = "T4PQ";
      String string3 = StringUtils.capitalize("T4PQ");
      assertEquals("T4PQ", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumeric("T4PQ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = 65536;
      // Undeclared exception!
      StringUtils.center("G2DX36IpO,9A", 65536, "G2DX36IpO,9A");
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, 'V', 17, 17);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      charArray0[3] = '\\';
      charArray0[4] = 'V';
      charArray0[5] = 'V';
      charArray0[6] = 'V';
      charArray0[7] = 'V';
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[1], charArray0);
      assertArrayEquals(new char[] {'V', 'V', 'V', '\\', 'V', 'V', 'V', 'V'}, charArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(8, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.repeat('V', 17);
      assertEquals("VVVVVVVVVVVVVVVVV", string1);
      assertNotNull(string1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string2 = StringUtils.join(iterator0, "VVVVVVVVVVVVVVVVV");
      assertEquals("FORMAT", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      boolean boolean2 = enumSet0.add(locale_Category0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string3 = StringUtils.removePattern("FORMAT", "");
      assertEquals("FORMAT", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.center("FORMAT", 17, 'V');
      assertEquals("VVVVVFORMATVVVVVV", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      boolean boolean4 = StringUtils.startsWithAny("VVVVVFORMATVVVVVV", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      
      boolean boolean5 = StringUtils.isMixedCase("VVVVVFORMATVVVVVV");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      
      // Undeclared exception!
      StringUtils.center("VVVVVVVVVVVVVVVVV", 1114111, "g@qxD*F^@];");
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.appendIfMissing("\n", "\n", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(locale_Category0));
      
      Stack<Locale.Category> stack1 = new Stack<Locale.Category>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertFalse(stack1.contains(locale_Category0));
      
      String string1 = StringUtils.replaceIgnoreCase("\n", "\n", "\n", (-1));
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string2 = StringUtils.EMPTY;
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("\n");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.containsAny(charSequenceArray0[0], (CharSequence) "\r");
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.remove(" in an array of ", '5');
      assertEquals(" in an array of ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf(" in an array of ", " in an array of ", 64);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.normalizeSpace(", Length: 0");
      assertEquals(", Length: 0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("V");
      assertEquals("V", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[5];
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '&';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\u0000', '5', '5', '5', '&'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(charBuffer0);
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000555&", charBuffer0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.contains((CharSequence) charBuffer0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("\n", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      String string0 = StringUtils.defaultString("cYZl;Pn)8h/Hdl", "B");
      assertEquals("cYZl;Pn)8h/Hdl", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("cYZl;Pn)8h/Hdl");
      assertEquals("cYZl;Pn)8h/Hdl", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char char0 = 'L';
      char char1 = ')';
      String string2 = "";
      char char2 = 'V';
      String string3 = StringUtils.replaceChars("", ')', 'V');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNotEmpty("cYZl;Pn)8h/Hdl");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "cYZl;Pn)8h/Hdl", (CharSequence) "");
      assertEquals(14, int0);
      
      String string4 = "Sd5>QCV";
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("Sd5>QCV", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      String string0 = StringUtils.replaceChars("cYZl;Pn)8h/Hdl", "cYZl;Pn)8h/Hdl", "cYZl;Pn)8h/Hdl");
      assertEquals("cYZl;Pn)8h/Hdl", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("_:uR:VXUQGmd|l 4", "cYZl;Pn)8h/Hdl");
      assertEquals("_:uR:VXUQGmd|l 4", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("xo#CfNA{h", "m");
      assertEquals("mxo#CfNA{hm", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "xo#CfNA{h", "xo#CfNA{h");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("B");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("!D&:qT6GKJ", "Strings must not be null");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.repeat("B", (-567));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("xo#CfNA{h", 4812, "m");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[3];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      charSequenceArray1[2] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(3, charSequenceArray1.length);
      assertTrue(boolean1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean1 == boolean0);
      
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", (Supplier<CharSequence>) null);
      assertNull(charSequence0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'r';
      String string0 = StringUtils.join(intArray0, 'A', 65536, (-474));
      assertArrayEquals(new int[] {114}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop(",m)p");
      assertEquals(",m)", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfAny(",m)", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(3, charSequenceArray1.length);
      assertEquals(3, int0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      boolean boolean2 = StringUtils.isNumericSpace(",m)");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      ByteBuffer byteBuffer0 = charset0.encode(",m)p");
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(4, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(4, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(4, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=4 cap=4]", byteBuffer0.toString());
      assertEquals(4, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(",m)p", charBuffer0.toString());
      assertEquals(4, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      
      String string2 = StringUtils.overlay("pRRF/(xn5Ikd'Rp^1u.", "", 2054, 52);
      assertEquals("pRRF/(xn5Ikd'Rp^1u.", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(locale_Category0));
      
      Stack<Locale.Category> stack1 = new Stack<Locale.Category>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertFalse(stack1.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      boolean boolean1 = stack1.add(locale_Category1);
      assertNotSame(stack1, stack0);
      assertSame(locale_Category1, locale_Category0);
      assertTrue(boolean1);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stack1.size());
      assertEquals("[DISPLAY]", stack1.toString());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertTrue(stack1.contains(locale_Category1));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      assertNotSame(stack0, stack1);
      assertFalse(stack0.equals((Object)stack1));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(locale_Category1));
      
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      stack1.addElement(locale_Category2);
      assertNotSame(stack1, stack0);
      assertSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(2, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals("[DISPLAY, DISPLAY]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertTrue(stack1.contains(locale_Category2));
      
      boolean boolean2 = StringUtils.isAlphaSpace("Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string0 = StringUtils.overlay("%Oh[5~>{]n*rHw%,", "\n", 15, 14);
      assertEquals("%Oh[5~>{]n*rHw\n,", string0);
      assertNotNull(string0);
      
      boolean boolean3 = StringUtils.isAsciiPrintable("%Oh[5~>{]n*rHw\n,");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.appendIfMissing("\n", "\n", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("\n", "\n");
      assertEquals(0, int0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(locale_Category0));
      
      Stack<Locale.Category> stack1 = new Stack<Locale.Category>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertFalse(stack1.contains(locale_Category0));
      
      String string1 = StringUtils.replaceIgnoreCase("\n", "\n", "\n", 0);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string2 = StringUtils.EMPTY;
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.containsAny(charSequenceArray0[0], (CharSequence) "\r");
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      int int0 = StringUtils.compare("gI2X2T8PS", "gI2X2T8PS");
      assertEquals(0, int0);
      
      String string0 = StringUtils.replaceIgnoreCase("[!", "[!", "[!", 0);
      assertEquals("[!", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("[!");
      assertEquals("[!", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, 2210);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Failed to create custom temp directory", "\"^s`c'=uW");
      assertEquals("Failed to create custom temp directory", string0);
      assertNotNull(string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("\"^s`c'=uW"));
      
      Iterator<String> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("\"^s`c'=uW"));
      
      String[] stringArray0 = new String[11];
      stringArray0[0] = "Failed to create custom temp directory";
      stringArray0[1] = " in an array of ";
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.prependIfMissing(" in an array of ", " in an array of ", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals(" in an array of ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      charArray0[1] = 'v';
      charArray0[2] = 'm';
      charArray0[3] = 'j';
      charArray0[4] = 'e';
      charArray0[5] = '7';
      charArray0[6] = 'h';
      charArray0[7] = '3';
      boolean boolean0 = StringUtils.containsNone((CharSequence) " in an array of ", charArray0);
      assertArrayEquals(new char[] {'S', 'v', 'm', 'j', 'e', '7', 'h', '3'}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase(" vs ");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.LF;
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "\"^s`c'=uW", (CharSequence) "Failed to create custom temp directory");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.repeat((String) null, 3593);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("X", "X", (-1825));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeIgnoreCase("^>6iAh8>vEI0~Mvmk", "^>6iAh8>vEI0~Mvmk");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("^>6iAh8>vEI0~Mvmk", (String) null);
      assertEquals(1, int0);
      
      String string1 = StringUtils.toRootUpperCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("h");
      assertEquals("h", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("])<I#](}FVL3xl4!", "");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      String string0 = StringUtils.replace("g@?2sk@IG(TvnY!t", "g@?2sk@IG(TvnY!t", (String) null, 76);
      assertEquals("g@?2sk@IG(TvnY!t", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("f5[sM|T#pMK", 0);
      assertEquals("f5[sM|T#pMK", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceFirst("f5[sM|T#pMK", "Minimum abbreviation width is %d", "g@?2sk@IG(TvnY!t");
      assertEquals("f5[sM|T#pMK", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("DUPAy*d;T`ciF0", "?", 54);
      assertEquals("DUPAy*d;T`ciF0", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.length("DUPAy*d;T`ciF0");
      assertEquals(14, int0);
      
      String string4 = StringUtils.valueOf((char[]) null);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isBlank("DUPAy*d;T`ciF0");
      assertFalse(boolean0);
      
      String string5 = StringUtils.left("maxWith cannot be negative", 0);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "f5[sM|T#pMK", (CharSequence) "DUPAy*d;T`ciF0");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "\n");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("org.junitpioneer.jupiter.params.IntRa_ge", "org.junitpioneer.jupiter.params.IntRa_ge");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "+N@f.Tob", (CharSequence) "", 16);
      assertEquals(8, int0);
      
      String string1 = StringUtils.overlay("", "TtQABP*S'(X", 8, 76);
      assertEquals("TtQABP*S'(X", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("J");
      assertEquals("J", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("_`{f/XiKfc8M|q");
      assertEquals("8", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "org.junitpioneer.jupiter.params.IntRa_ge", 76, 798);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "TtQABP*S'(X", (CharSequence) "TtQABP*S'(X");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      String string0 = StringUtils.removeEnd(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ";
      charSequenceArray0[3] = (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ";
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string1 = StringUtils.substringBetween("lY:<z`<S[", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("_:uR:VXUQGmd|l 4cYZl;Pn)8h/Hdl", (String) null, " }/");
      assertNull(stringArray0);
      
      String string2 = StringUtils.truncate("?P/1yP", 2, 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertNull(stringArray1);
      
      String string3 = StringUtils.replace("", "ynEZ6S&;D", "QZf8", 883);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.split("ynEZ6S&;D");
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("", "Zt/eUZ)^@*{9?:K");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 5
         // Zt/eUZ)^@*{9?:K
         //      ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = "ZA\"n";
      // Undeclared exception!
      try { 
        StringUtils.removePattern("ZA\"n", "[sxi$0?W0@<w9/!wbo^");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 18
         // [sxi$0?W0@<w9/!wbo^
         //                   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 3564, "");
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "7rLk>N'[WV#$+;Si";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "7rLk>N'[WV#$+;Si";
      stringArray0[4] = "7rLk>N'[WV#$+;Si";
      stringArray0[5] = "7rLk>N'[WV#$+;Si";
      stringArray0[6] = string0;
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("7rLk>N'[WV#$+;Si", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase(",L", ",L", ",L", 3533);
      assertEquals(",L", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center(",L", 3533, '}');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = '}';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string1, charArray0);
      assertArrayEquals(new char[] {'U', 'U', 'U', '}', 'U', 'U'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(1765, int0);
      assertFalse(string1.equals((Object)string0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1765;
      longArray0[1] = (long) 'U';
      longArray0[2] = (long) 'U';
      longArray0[3] = (long) 'U';
      longArray0[4] = (long) 'U';
      longArray0[5] = 2226L;
      longArray0[6] = (long) 1765;
      longArray0[7] = (long) 'U';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'U', 1765, 3533);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1765
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, "Aborting to protect against StackOverflowrror - output of one loop is the input of another");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(charSequence0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = 't';
      charArray0[2] = 'P';
      charArray0[3] = '6';
      String string1 = StringUtils.join(charArray0, 'g');
      assertArrayEquals(new char[] {'\u0000', 't', 'P', '6'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("\u0000gtgPg6", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string2);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 805;
      intArray0[1] = (int) '6';
      intArray0[2] = (int) 'P';
      intArray0[3] = (int) '6';
      intArray0[4] = (int) 't';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '^', (-9), 80);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", 'w');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("org.apache.commons.lang3.RegExUtils");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      String string0 = StringUtils.defaultString("codefx");
      assertEquals("codefx", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("codefx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[3];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      charSequenceArray1[1] = (CharSequence) "";
      charSequenceArray1[2] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(3, charSequenceArray1.length);
      assertTrue(boolean1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.removePattern("inj!sX_a}!inj!sX_a}!", "7eo:");
      assertEquals("inj!sX_a}!inj!sX_a}!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "inj!sX_a}!inj!sX_a}!", 545);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.substringBetween("inj!sX_a}!inj!sX_a}!", "7eo:", "inj!sX_a}!inj!sX_a}!");
      assertNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("x", (String) null, (String) null, (-2273));
      assertEquals("x", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "x", (CharSequence) "7eo:", 76);
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.equalsAny("GcG+X2|.+b", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(3, charSequenceArray1.length);
      assertFalse(boolean3);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      String string4 = StringUtils.mid("uJY+eOjs.", (-2273), 5);
      assertEquals("uJY+e", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "uJY+e", (CharSequence) "$0'\"", 76);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean4 = StringUtils.isMixedCase(",m)p");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("D`9[B~b");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("The ChLracte* must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      String string1 = StringUtils.upperCase("", locale0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Jc5*$h<", "", (-2050), 140);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      String string0 = ". The following paths could not be deleted (see suppressed exceptions for details): ";
      String string1 = StringUtils.removeEnd(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ";
      charSequenceArray0[3] = (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ";
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string2 = StringUtils.overlay(". The following paths could not be deleted (see suppressed exceptions for details): ", "", 0, 58);
      assertEquals(" exceptions for details): ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((short[]) null, '0');
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isNotBlank(charSequenceArray0[1]);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = "&DZ2ic/\"m~%b";
      String string5 = StringUtils.replaceChars("{?+8-wQL?^Y;a__-Zt", "', is neither of type Map.Entry nor an Array", " exceptions for details): ");
      assertEquals("{?+8-wQL?^Y;)__-Zn", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      String string6 = StringUtils.join((Object[]) charSequenceArray0, " exceptions for details): ");
      assertEquals(5, charSequenceArray0.length);
      assertEquals(" exceptions for details):  exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details):  exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details):  exceptions for details): ", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("&DZ2ic/\"m~%b");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.countMatches((CharSequence) "{?+8-wQL?^Y;)__-Zn", (CharSequence) null);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'w', 0, 545);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Failed to create custom temp directory", "\"^s`c'=uW");
      assertEquals("Failed to create custom temp directory", string0);
      assertNotNull(string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("\"^s`c'=uW"));
      
      Iterator<String> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("\"^s`c'=uW"));
      
      String[] stringArray0 = new String[8];
      int int0 = StringUtils.compareIgnoreCase("Failed to create custom temp directory", (String) null, true);
      assertEquals(1, int0);
      
      String string1 = StringUtils.unwrap((String) null, '\u0014');
      assertNull(string1);
      
      String string2 = StringUtils.truncate("bX}GrV{3ur", 119);
      assertEquals("bX}GrV{3ur", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("e", 'e');
      assertEquals("e", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("e", 'X');
      assertEquals("e", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((float[]) null, 'e', 81, 2328);
      assertNull(string2);
      
      String string3 = StringUtils.replaceFirst("e", "c__(h;", (String) null);
      assertEquals("e", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("-/>rN0$", '-');
      assertEquals("-/>rN0$-", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("-/>rN0$-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)89;
      byteArray0[4] = (byte) (-1);
      String string0 = StringUtils.join((short[]) null, 'L');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte)89;
      floatArray0[2] = (float) '0';
      floatArray0[3] = (float) '0';
      floatArray0[4] = (float) (byte)89;
      floatArray0[5] = (float) (byte)81;
      floatArray0[6] = (float) 157;
      String string1 = StringUtils.repeat('=', (int) (byte)89);
      assertEquals("=========================================================================================", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.remove("=========================================================================================", 'I');
      assertEquals("=========================================================================================", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("=========================================================================================", '=');
      assertEquals("=========================================================================================", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Arguments cannot both be null");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isMixedCase("Arguments cannot both be null");
      assertTrue(boolean0);
      
      String string0 = StringUtils.remove("it9l-D~xKUf |w", 'N');
      assertEquals("it9l-D~xKUf |w", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("it9l-D~xKUf |w", 'w');
      assertEquals("wit9l-D~xKUf |w", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Iterator<String> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      
      String string0 = StringUtils.remove((String) null, "Cannot store ");
      assertNull(string0);
      
      String string1 = StringUtils.chop("Cannot store ");
      assertEquals("Cannot store", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "Cannot store");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split(".9TBlb", "JOf>");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("", 8192);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.leftPad("", 8192, (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      String string3 = linkedList0.poll();
      assertNull(string3);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      linkedList0.push("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertTrue(linkedList0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError - output of one loop is the input of another"));
      
      String string4 = StringUtils.join((List<?>) linkedList0, '3', 154, (-210));
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(string4));
      assertTrue(linkedList0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError - output of one loop is the input of another"));
      
      boolean boolean1 = StringUtils.endsWith("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.CharSequenceUtils", string2, 15);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string5);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("", 907, "");
      assertEqualsstring1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence
      assertEquals(907, int0);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.overlay("N@n_Bu*L4M&y8QI\"l{b", "N@n_Bu*L4M&y8QI\"l{b", 58, 64);
      assertEquals("N@n_Bu*L4M&y8QI\"l{bN@n_Bu*L4M&y8QI\"l{b", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((short[]) null, '_');
      assertNull(string1);
      
      String string2 = StringUtils.remove(" in an array of ", '5');
      assertEquals(" in an array of ", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf(" in an array of ", " in an array of ", 64);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.rightPad(" in an array of ", 58);
      assertEquals(" in an array of                                           ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.normalizeSpace(", Length: 0");
      assertEquals(", Length: 0", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((List<?>) null, "", 257, 8);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Can only resolve parameter of type ");
      assertEquals("Can only resolve parameter of type", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("\r\n");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      String string0 = StringUtils.repeat('6', (-3143));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, '0');
      assertEquals(2, charSequenceArray0.length);
      assertEquals("0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray1 = new CharSequence[7];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "0";
      charSequenceArray1[1] = (CharSequence) "F%\"V&]qHGos;&PX8^";
      charSequenceArray1[2] = (CharSequence) "F%\"V&]qHGos;&PX8^";
      charSequenceArray1[3] = (CharSequence) "0";
      charSequenceArray1[4] = (CharSequence) "0";
      charSequenceArray1[5] = (CharSequence) "";
      charSequenceArray1[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(7, charSequenceArray1.length);
      assertFalse(boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(7, charSequenceArray1.length);
      assertFalse(boolean1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("0", (-3143), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      String string0 = StringUtils.removeEnd(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("oBrPb!");
      assertEquals("oBrPb!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "oBrPb!";
      objectArray0[2] = (Object) ". The following paths could not be deleted (see suppressed exceptions for details): ";
      objectArray0[3] = (Object) 'F';
      String string2 = StringUtils.join(objectArray0, '3');
      assertEquals(4, objectArray0.length);
      assertEquals("3oBrPb!3. The following paths could not be deleted (see suppressed exceptions for details): 3F", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart("tjP>:m[", "xz{?Km\n");
      assertEquals("tjP>:m[", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "", 3029);
      assertNull(stringArray0);
      
      String string4 = StringUtils.removeEndIgnoreCase("xz{?Km\n", "");
      assertEquals("xz{?Km\n", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("oBrPb!", 64, ";e5-^@MBr0");
      assertEquals("oBrPb!;e5-^@MBr0;e5-^@MBr0;e5-^@MBr0;e5-^@MBr0;e5-^@MBr0;e5-^@MB", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToEmpty("VvKXDrV:>A");
      assertEquals("VvKXDrV:>A", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.rightPad("?", (-647));
      assertEquals("?", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.removeEndIgnoreCase(" ", (String) null);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("org.junitpioneer.jupiter.params.IntRange", "org.junitpioneer.jupiter.params.IntRange");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "+N@f.Tob", (CharSequence) "", 16);
      assertEquals(8, int0);
      
      String string1 = StringUtils.toRootUpperCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToEmpty("org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertEquals("org.junitpioneer.jupiter.RepeatFailedTestExtension", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.substringBetween("org.junitpioneer.jupiter.RepeatFailedTestExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.substringsBetween("\r", "1Bjzcv&ler0P", ",L");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertFalse(boolean0);
      
      String string5 = StringUtils.substringAfter(" vs ", "offset cannot be negative");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate((String) null, (-82));
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "u";
      String string0 = StringUtils.right("`t(/s5n&h3:F", 2);
      assertEquals(":F", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "The String must not be empty", "The String must not be empty");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("The String must not be empty", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("The String must not be empty");
      assertEquals("the string must not be empty", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("The String must not be empty");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.rightPad("The String must not be empty", 1, 'L');
      assertEquals("The String must not be empty", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("The String must not be empty", "The String must not be empty");
      assertEquals(1.0, double0, 0.01);
      
      String string3 = StringUtils.right(", Length: y?x}McTwjf ", 1);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("org.apache.commons.lang3.ARrayUtils");
      assertEquals("org.apache.commons.lang3.ARrayUtils", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.capitalize((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.abbreviate("", "6[ri[drfZ\"LBps/BQI", 1, 8192);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      byte[] byteArray0 = StringUtils.getBytes("6[ri[drfZ\"LBps/BQI", (String) null);
      assertEquals(18, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 2969);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "The String must not be empty", (CharSequence) ", Length: y?x}McTwjf ");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      charArray0[4] = '3';
      charArray0[5] = 'F';
      String string0 = StringUtils.leftPad(":YPY6F65P", 240);
      assertEquals("                                                                                                                                                                                                                                       :YPY6F65P", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("oBrPb00!");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      String string1 = StringUtils.replaceEach(":YPY6F65P", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(":YPY6F65P", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("The String must not be empty");
      assertEquals("TheStringmustnotbeempty", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny("4t5r8}OFG'ag%tecnRu", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "                                                                                                                                                                                                                                       :YPY6F65P", charArray0);
      assertEquals(13, charArray0.length);
      assertEquals(236, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("TheStringmustnotbeempty", "4t5r8}OFG'ag%tecnRu");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.removeAll("oBrPb00!", "org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertEquals("oBrPb00!", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfBlank("TheStringmustnotbeempty", supplier0);
      assertEquals("TheStringmustnotbeempty", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.wrapIfMissing("y?x}McTwjf ", ", Length: ");
      assertEquals(", Length: y?x}McTwjf , Length: ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ", Length: ", (-214));
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) ", Length: y?x}McTwjf , Length: ", (CharSequence) "y?x}McTwjf ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      String string2 = StringUtils.join(longArray0, 'p', (-1), (-3));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("+D*!8*Qeqvx7MSJ", "", 1422);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence[] charSequenceArray1 = new CharSequence[1];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      String string0 = StringUtils.join((Object[]) charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(1, charSequenceArray1.length);
      assertEquals("", string0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertNotNull(string0);
      
      charSequenceArray1[0] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissingIgnoreCase((String) null, "", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(1, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      
      String string2 = StringUtils.defaultIfEmpty("zD?Z-Uq~?q vs ", (String) null);
      assertEquals("zD?Z-Uq~?q vs ", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "z$Cn_vPE?Hdd<,A=", 2, (-1476));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string3);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.right("z$Cn_vPE?Hdd<,A=", 1109);
      assertEquals("z$Cn_vPE?Hdd<,A=", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.remove("z$Cn_vPE?Hdd<,A=", 'w');
      assertEquals("z$Cn_vPE?Hdd<,A=", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split("_d%PEG>O", "bIX}Eh1]");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "q~?qq~?q");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      String string0 = StringUtils.stripEnd(">YwN,^!}$>[q", ">YwN,^!}$>[q");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Iterator<?>) null, '+');
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ">YwN,^!}$>[q", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.appendIfMissing("\n", "\n", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("\n", "\n");
      assertEquals(0, int0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(locale_Category0));
      
      Stack<Locale.Category> stack1 = new Stack<Locale.Category>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertFalse(stack1.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      boolean boolean1 = stack1.add(locale_Category1);
      assertNotSame(stack1, stack0);
      assertSame(locale_Category1, locale_Category0);
      assertTrue(boolean1);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      assertEquals(10, stack1.capacity());
      assertEquals("[DISPLAY]", stack1.toString());
      assertFalse(stack1.empty());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertTrue(stack1.contains(locale_Category0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      assertNotSame(stack0, stack1);
      assertFalse(stack0.equals((Object)stack1));
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(locale_Category0));
      
      Stack<Locale.Category> stack2 = new Stack<Locale.Category>();
      assertTrue(stack2.equals((Object)stack0));
      assertFalse(stack2.equals((Object)stack1));
      assertNotNull(stack2);
      assertEquals(0, stack2.size());
      assertTrue(stack2.isEmpty());
      assertTrue(stack2.empty());
      assertEquals(10, stack2.capacity());
      assertEquals("[]", stack2.toString());
      assertFalse(stack2.contains(locale_Category0));
      
      String string1 = StringUtils.defaultIfEmpty("", "The character must not be null");
      assertEquals("The character must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("I]0l@>$(}-{vN47Mf", (String) null);
      assertEquals("I]0l@>$(}-{vN47Mf", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("The character must not be null"));
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) enumSet0);
      assertSame(locale_Category0, locale_Category1);
      assertNotNull(predicate0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      boolean boolean2 = linkedHashSet0.removeIf(predicate0);
      assertSame(locale_Category0, locale_Category1);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, enumSet0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(linkedHashSet0.contains("The character must not be null"));
      
      String string3 = StringUtils.join((Iterator<?>) null, 'n');
      assertNull(string3);
      
      String string4 = StringUtils.repeat("The character must not be null", 101);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "iy>?Azor";
      objectArray0[4] = (Object) "iy>?Azor";
      String string1 = StringUtils.joinWith("iy>?Azor", objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals("iy>?Azoriy>?Azoriy>?Azoriy>?Azoriy>?Azoriy>?Azor", string1);
      assertNotNull(string1);
      
      int int0 = (-848);
      String string2 = StringUtils.join((byte[]) null, '>', (int) (byte)76, (-848));
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "iy>?Azoriy>?Azoriy>?Azoriy>?Azoriy>?Azoriy>?Azor", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 5);
      assertEquals(0, int0);
      
      String string1 = StringUtils.deleteWhitespace("z");
      assertEquals("z", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("z");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object2;
      objectArray0[1] = object2;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "";
      String string2 = StringUtils.left("Search and Replace array lengths don't match: The character ", 5);
      assertEquals("Searc", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootUpperCase("*9Dg}i)LT`mlc4");
      assertEquals("*9DG}I)LT`MLC4", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.left("z", 5);
      assertEquals("z", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "7N~6t", (CharSequence) "z");
      assertEquals("7N~6t", charSequence0);
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "", 586);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.stripEnd("Comparator should not be null.", "");
      assertEquals("Comparator should not be null.", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: The character ";
      charSequenceArray0[1] = (CharSequence) "Vfs'<Yi4,m";
      charSequenceArray0[2] = (CharSequence) "7N~6t";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = '';
      charArray0[2] = 'D';
      charArray0[3] = 'o';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'w', (-1), 586);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      String string0 = StringUtils.removeFirst("i", "i");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("-X`w'q", "?iy>?Azorg.apache.commons.lang3.StringUtils?");
      assertEquals("-X`w'q", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("-X`w'q", "-X`w'q");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.lowerCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.rotate("?iy>?Azorg.apache.commons.lang3.StringUtils?", 2173);
      assertEquals("ang3.StringUtils??iy>?Azorg.apache.commons.l", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("Minimum abbreviation width is %d", 2173, 2173);
      assertEquals("Minimum abbreviation width is %d", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.trim("Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean2 = StringUtils.equalsAny("?iy>?Azorg.apache.commons.lang3.StringUtils?", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string6 = StringUtils.trim("Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviation width is %d", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "-X`w'q", (CharSequence) "?iy>?Azorg.apache.commons.lang3.StringUtils?", 2173);
      assertEquals(44, int0);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "Minimum abbreviation width is %d", (CharSequence) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      boolean boolean4 = StringUtils.startsWithAny("ang3.StringUtils??iy>?Azorg.apache.commons.l", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string7 = StringUtils.join((List<?>) linkedList0, 'm', 2173, 2173);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals(0, linkedList0.size());
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Iterator<Locale.Category> iterator0 = hashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean5 = hashSet0.add(locale_Category0);
      assertTrue(boolean5);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(hashSet0.contains(locale_Category0));
      
      String string8 = StringUtils.join(iterator0, 'Y');
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(hashSet0.contains(locale_Category0));
      
      String string9 = StringUtils.repeat('Y', 44);
      assertEquals("YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertNotNull(string9);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Expected exactly one annotation to provide an ArgumentSource, found %d.", (CharSequence) null, 1665);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string0 = StringUtils.toRootUpperCase("B0Nr#qx)'P_HCpPSpF}ExpectedException");
      assertEquals("B0NR#QX)'P_HCPPSPF}EXPECTEDEXCEPTION", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "B0NR#QX)'P_HCPPSPF}EXPECTEDEXCEPTION", 7);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.toRootUpperCase("B0Nr#qx)'P_HCpPSpF}ExpectedException");
      assertEquals("B0NR#QX)'P_HCPPSPF}EXPECTEDEXCEPTION", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.left(" BZm", 7);
      assertEquals(" BZm", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.LF;
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("QoFZ/FmoHgn!BQ\"f?r(");
      assertEquals("QoFZ/FmoHgn!BQ\"f?r(", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((String[]) null);
      assertNull(string5);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "B0NR#QX)'P_HCPPSPF}EXPECTEDEXCEPTION", (CharSequence) null, 7);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      int int0 = StringUtils.compare("Failed to create default temp directory", "Failed to create default temp directory");
      assertEquals(0, int0);
      
      String string0 = StringUtils.uncapitalize("Failed to create default temp directory");
      assertEquals("failed to create default temp directory", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeFirst("Failed to create default temp directory", "failed to create default temp directory");
      assertEquals("Failed to create default temp directory", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Failed to create default temp directory";
      charSequenceArray0[1] = (CharSequence) "Failed to create default temp directory";
      charSequenceArray0[2] = (CharSequence) "Failed to create default temp directory";
      int int1 = StringUtils.lastIndexOfAny("Failed to create default temp directory", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.substring("mxo#CfNA{h", 0);
      assertEquals("mxo#CfNA{h", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)11;
      String string4 = StringUtils.join(byteArray0, 'q');
      assertArrayEquals(new byte[] {(byte) (-79), (byte)44, (byte)65, (byte)76, (byte) (-1), (byte)111, (byte) (-26), (byte)11}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("-79q44q65q76q-1q111q-26q11", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int2 = StringUtils.indexOf((CharSequence) "-79q44q65q76q-1q111q-26q11", (int) (byte)76, (int) (byte)11);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Failed to delete temp directory ", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("p{InCombiningDiacriticalMarks}+");
      assertEquals("P{InCombiningDiacriticalMarks}+", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2057.831786483966;
      doubleArray0[1] = 0.45;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 32.0;
      doubleArray0[5] = (-2003.1058221485591);
      String string2 = StringUtils.join(doubleArray0, 'x', 2381, 2381);
      assertArrayEquals(new double[] {2057.831786483966, 0.45, 0.0, 0.0, 32.0, (-2003.1058221485591)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("p{InCombiningDiacriticalMarks}+"));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, 'x', 57, 64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 64
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, '@', 11, (int) '@');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 64
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byte byte0 = (byte)89;
      byteArray0[4] = (byte) (-1);
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)0;
      String string0 = StringUtils.join(byteArray0, 'p');
      assertArrayEquals(new byte[] {(byte)81, (byte)81, (byte)0, (byte)0, (byte)108, (byte) (-28), (byte)88, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("81p81p0p0p108p-28p88p0", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "81p81p0p0p108p-28p88p0";
      String string1 = StringUtils.wrap("81p81p0p0p108p-28p88p0", 'p');
      assertEquals("p81p81p0p0p108p-28p88p0p", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "p81p81p0p0p108p-28p88p0p";
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)88;
      floatArray0[1] = (-2161.86F);
      floatArray0[2] = (float) (byte)108;
      floatArray0[3] = (float) (byte)108;
      floatArray0[4] = (float) (byte)89;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)81;
      String string2 = StringUtils.join(floatArray0, 'R');
      assertArrayEquals(new float[] {88.0F, (-2161.86F), 108.0F, 108.0F, 89.0F, 0.0F, 81.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals("88.0R-2161.86R108.0R108.0R89.0R0.0R81.0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "88.0R-2161.86R108.0R108.0R89.0R0.0R81.0";
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte) (-28);
      intArray0[3] = (int) (byte)81;
      char char0 = '1';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '1', 0, (int) (byte)89);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("...", '.');
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "blank_blank_blank_2014", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripToNull("blank_blank_blank_2014");
      assertEquals("blank_blank_blank_2014", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("inj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!CC", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("Search and Replace array lengths don't match: ", "inj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!CC", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("Search and Replace array lengths don't match: inj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!Cinj!sX_a}!CC", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category2);
      assertSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category2);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category2));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "The Character must not be null", (CharSequence) "The Character must not be null", 2200);
      assertEquals(0, int0);
      
      String string0 = "\"w(a-";
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "I)x<bCo*wf");
      assertNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "S#?%", (CharSequence) "\"w(a-");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.startsWithAny("\"w(a-", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = "Failed to create default temp directory";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("h", "I)x<bCo*wf", "4S:5@7gM*e\"");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 0
         // I)x<bCo*wf
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.jup[ter.SystemlroertyEltensionmG,vw}*Qw&D|^uq", "org.junitpioneer.jup[ter.SystemlroertyEltensionmG,vw}*Qw&D|^uq");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("a");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      charArray0[4] = '3';
      charArray0[5] = 'F';
      String string0 = StringUtils.leftPad(":YPY6F65P", 240);
      assertEquals("                                                                                                                                                                                                                                       :YPY6F65P", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("oBrPb00!");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      String string1 = StringUtils.replaceEach(":YPY6F65P", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(":YPY6F65P", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("The String must not be empty");
      assertEquals("TheStringmustnotbeempty", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.right("4t5r8}OFG'ag%tecnRu", 20);
      assertEquals("4t5r8}OFG'ag%tecnRu", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp(":YPY6F65P");
      assertEquals(":YPY6F65P", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.capitalize("48BJ[l>");
      assertEquals("48BJ[l>", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate("6[ri[drfZ\"LBps/BQI", "G=jvD$sHOO|>fY?V", (-4633), 240);
      assertEquals("6[ri[drfZ\"LBps/BQI", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      try { 
        StringUtils.getBytes("                                                                                                                                                                                                                                       :YPY6F65P", "hStf");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.rotate(" ", 0);
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      String string0 = StringUtils.abbreviate("G=jvD$sHOO|>fY?V", "G=jvD$sHOO|>fY?V", 54, Integer.MAX_VALUE);
      assertEquals("G=jvD$sHOO|>fY?V", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("G=jvD$sHOO|>fY?V");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "G=jvD$sHOO|>fY?V";
      charSequenceArray0[1] = (CharSequence) "G=jvD$sHOO|>fY?V";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "G=jvD$sHOO|>fY?V";
      charSequenceArray0[4] = (CharSequence) "G=jvD$sHOO|>fY?V";
      charSequenceArray0[5] = (CharSequence) "G=jvD$sHOO|>fY?V";
      charSequenceArray0[6] = (CharSequence) "G=jvD$sHOO|>fY?V";
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.difference("o%8", "");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.repeat(" but was: ", "G=jvD$sHOO|>fY?V", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      int int0 = 54;
      int int1 = Integer.MAX_VALUE;
      String string0 = StringUtils.abbreviate("G=jvD$sHOO|>fY?V", "G=jvD$sHOO|>fY?V", 54, Integer.MAX_VALUE);
      assertEquals("G=jvD$sHOO|>fY?V", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("G=jvD$sHOO|>fY?V");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "G=jvD$sHOO|>fY?V";
      charSequenceArray0[1] = (CharSequence) "G=jvD$sHOO|>fY?V";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "G=jvD$sHOO|>fY?V";
      charSequenceArray0[4] = (CharSequence) "G=jvD$sHOO|>fY?V";
      charSequenceArray0[5] = (CharSequence) "G=jvD$sHOO|>fY?V";
      charSequenceArray0[6] = (CharSequence) "G=jvD$sHOO|>fY?V";
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.difference("o%8", "");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = "zD?Z-Uq~?q";
      String string4 = StringUtils.wrapIfMissing("zD?Z-Uq~?q", " vs ");
      assertEquals(" vs zD?Z-Uq~?q vs ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.repeat(" but was: ", "G=jvD$sHOO|>fY?V", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "h+ haracter mustnot be null";
      int int0 = StringUtils.indexOfAny((CharSequence) "maxWith cannot be negative", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("gIb2");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("gIb2", stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "gIb2", (CharSequence[]) stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      String string0 = StringUtils.replaceChars("FFFFFFFFFFFFFFFF8FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFM+<8Hf`ciTh*<MLKmbO", "", "FFFFFFFFFFFFFFFF8FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFM+<8Hf`ciTh*<MLKmbO");
      assertEquals("FFFFFFFFFFFFFFFF8FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFM+<8Hf`ciTh*<MLKmbO", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      String string0 = StringUtils.defaultString(". The following paths could not be deleted (see suppressed exceptions for details): ", "{>3Wro-}`ChLMT`%Pr");
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details): ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("{>3Wro-}`ChLMT`%Pr");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.join(shortArray0, 'R');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.replaceChars("/Ug6.^&\"@x%", "", "mxo#CfNA{h");
      assertEquals("/Ug6.^&\"@x%", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.join((Object[]) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.substringBetween("a@W", "a@W", "%k0|#4]cuEnFwY");
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "/Ug6.^&\"@x%";
      charSequenceArray0[1] = (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ";
      charSequenceArray0[2] = (CharSequence) "a@W";
      charSequenceArray0[3] = (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ";
      charSequenceArray0[4] = (CharSequence) "/Ug6.^&\"@x%";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "/Ug6.^&\"@x%", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string6 = StringUtils.uncapitalize("@Oh9{U=+xMh6");
      assertEquals("@Oh9{U=+xMh6", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isAlphaSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      String string0 = StringUtils.defaultString("$", "$");
      assertEquals("$", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("$");
      assertEquals("$", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("$");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[21];
      shortArray0[0] = (short) (-1950);
      shortArray0[1] = (short) (-1950);
      shortArray0[2] = (short) (-1950);
      shortArray0[3] = (short) (-1950);
      shortArray0[4] = (short) (-1950);
      shortArray0[5] = (short) (-1950);
      shortArray0[6] = (short) (-1950);
      shortArray0[7] = (short) (-1950);
      shortArray0[8] = (short) (-1950);
      String string2 = StringUtils.join(shortArray0, ')');
      assertEquals(21, shortArray0.length);
      assertEquals("-1950)-1950)-1950)-1950)-1950)-1950)-1950)-1950)-1950)0)0)0)0)0)0)0)0)0)0)0)0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.replaceChars("", "PEu<O=@?>d", "$");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.join((Object[]) null, "/`a:<E7");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Strings must not be null";
      charSequenceArray0[1] = (CharSequence) "B";
      charSequenceArray0[2] = (CharSequence) "Strings must not be null";
      charSequenceArray0[3] = (CharSequence) "Strings must not be null";
      String string0 = StringUtils.wrap("", "org.junitpioneer.jupiter.params.DoubleRange");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "Threshold must not be negative";
      String string1 = StringUtils.appendIfMissingIgnoreCase("Strings must not be null", "Threshold must not be negative", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("Strings must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.swapCase("m");
      assertEquals("M", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("Threshold must not be negative", "", "@DefaultLocale can only be used with language tag if language, country, and variant are not set", (-1));
      assertEquals("Threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart("Minimum abbreviation width is %d", "4f");
      assertEquals("Minimum abbreviation width is %d", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripStart("Zcwd", "\r");
      assertEquals("Zcwd", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int int0 = StringUtils.compareIgnoreCase("hcBd[gwljJqz{oblQ`", "B", false);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.lowerCase("Object varargs must not be null");
      assertEquals("object varargs must not be null", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("object varargs must not be null");
      assertEquals(31, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = "\\u";
      String string2 = StringUtils.deleteWhitespace(string1);
      assertEquals("\\u", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = '3';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Object varargs must not be null", charArray0);
      assertArrayEquals(new char[] {'3', '3'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.leftPad("iy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A", 16);
      assertEquals("iy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("iy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.mid(string1, 16, 90);
      assertEquals("", string4);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToEmpty("Object varargs must not be null");
      assertEquals("Object varargs must not be null", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "object varargs must not be null";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "iy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A";
      charSequenceArray0[5] = (CharSequence) string1;
      charSequenceArray0[6] = (CharSequence) string2;
      charSequenceArray0[7] = (CharSequence) "iy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A";
      charSequenceArray0[8] = (CharSequence) "object varargs must not be null";
      String string6 = StringUtils.prependIfMissing("c", "Object varargs must not be null", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("c", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "c", charArray0);
      assertArrayEquals(new char[] {'3', '3'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("c");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string7 = StringUtils.LF;
      assertEquals("\n", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "\n", (CharSequence) "Failed to delete temp directory ");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string8 = StringUtils.repeat(string2, 445);
      assertEquals("\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u", string8);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      
      String string9 = StringUtils.rightPad((String) null, 76);
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "j_'@z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>(priorityQueue0);
      assertNotNull(hashSet0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Iterator<String> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      
      String string0 = StringUtils.join(iterator0, 'Z');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(string0));
      
      int int0 = StringUtils.compare("", (String) null, true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'P');
      assertEquals(5, charSequenceArray0.length);
      assertEquals("PPPP", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing("E", "E", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("E", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("\r", 1371, 13);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.trim("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("E", "", "iy>?Azorg.apache.commons.lang3.StringUtils?");
      assertEquals("E", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.removeStart("org.junitpioneer.jupiter.params.LongRange", "");
      assertEquals("org.junitpioneer.jupiter.params.LongRange", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.substringAfterLast((String) null, "E");
      assertNull(string7);
      
      String string8 = StringUtils.left("opk1sZ53r}4*WL", (-1));
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      
      String string9 = StringUtils.toRootUpperCase("");
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      
      String string10 = StringUtils.left((String) null, (-1372));
      assertNull(string10);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "E", (CharSequence) "iy>?Azorg.apache.commons.lang3.StringUtils?");
      assertEquals("E", charSequence0);
      assertTrue(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string4));
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string6));
      assertFalse(charSequence0.equals((Object)string9));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string8));
      assertFalse(charSequence0.equals((Object)string3));
      assertNotNull(charSequence0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "E", (CharSequence) "E", (-1164));
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string11 = StringUtils.stripEnd("+/q", "Vfs'<Yi4,m");
      assertEquals("+/q", string11);
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)charSequence0));
      assertFalse(string11.equals((Object)string2));
      assertNotNull(string11);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "+/q", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int3 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string12 = StringUtils.join((byte[]) null, 'P', 10, 13);
      assertNull(string12);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, '>');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.forLanguageTag(", Length: 0");
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      
      int int0 = StringUtils.getFuzzyDistance(", Length: 0", ", Length: 0", locale0);
      assertNotSame(locale0, locale1);
      assertEquals(31, int0);
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string0 = StringUtils.substring("d^^%`9_", (-861));
      assertEquals("d^^%`9_", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "d^^%`9_", (CharSequence) "d^^%`9_");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      String string0 = StringUtils.stripToNull("E/RY{9{*C 0Kl& J");
      assertEquals("E/RY{9{*C 0Kl& J", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "E/RY{9{*C 0Kl& J", (CharSequence) "E/RY{9{*C 0Kl& J");
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-96);
      String string1 = StringUtils.join(byteArray0, '&', (int) (byte) (-96), (int) (byte) (-96));
      assertArrayEquals(new byte[] {(byte) (-109), (byte) (-96)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("on");
      assertEquals("on", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "E/RY{9{*C 0Kl& J";
      stringArray0[1] = "E/RY{9{*C 0Kl& J";
      stringArray0[2] = "on";
      stringArray0[3] = "E/RY{9{*C 0Kl& J";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals("E/RY{9{*C 0Kl& J", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "E/RY{9{*C 0Kl& J", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("on", "E/RY{9{*C 0Kl& J");
      assertFalse(boolean0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "on", (CharSequence) "on", 7);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      String string0 = StringUtils.repeat('u', (-3143));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.join((Object[]) charSequenceArray0, 'P');
      assertEquals(5, charSequenceArray0.length);
      assertEquals("PPPP", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
      
      String string3 = StringUtils.stripAccents((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = "@H|y%`:o|$r>c(s]";
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      Locale locale1 = Locale.PRC;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      
      String string1 = locale1.getScript();
      assertNotSame(locale1, locale0);
      assertEquals("", string1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(set0);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string1));
      
      String string2 = locale0.getDisplayName(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("\u671D\u9C9C\u6587", string2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      
      String string3 = StringUtils.lowerCase("@H|y%`:o|$r>c(s]", locale0);
      assertNotSame(locale0, locale1);
      assertEquals("@h|y%`:o|$r>c(s]", string3);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      boolean boolean1 = locale0.hasExtensions();
      assertNotSame(locale0, locale1);
      assertFalse(boolean1);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(boolean1 == boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      assertNotSame(locale0, locale1);
      assertSame(set1, set0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(set1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertFalse(set1.contains(string2));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "@h|y%`:o|$r>c(s]", (-172));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.lowerCase("@h|y%`:o|$r>c(s]");
      assertEquals("@h|y%`:o|$r>c(s]", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = locale1.getExtension('d');
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNull(string5);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      
      String string6 = locale0.getDisplayLanguage();
      assertNotSame(locale0, locale1);
      assertEquals("Korean", string6);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      String string7 = "Illegal range. The step cannot be zero.";
      int int1 = (-2781);
      String string8 = StringUtils.mid("Illegal range. The step cannot be zero.", (-2781), (-1));
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("\u671D\u9C9C\u6587", "@h|y%`:o|$r>c(s]", "@h|y%`:o|$r>c(s]");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 17
         // @h|y%`:o|$r>c(s]
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '0');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat('=', (int) (byte) (-1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.remove((String) null, '8');
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing((String) null, '=');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "hjrB");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripAccents("Locale must not be null");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center((String) null, 10, (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "hjrB", 856);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      String string0 = StringUtils.replaceAll("F%\"V&]qHGos;&PX8^", "F%\"V&]qHGos;&PX8^", "F%\"V&]qHGos;&PX8^");
      assertEquals("F%\"V&]qHGos;&PX8^", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'A';
      String string1 = StringUtils.join(doubleArray0, 'A');
      assertArrayEquals(new double[] {65.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals("65.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("F%\"V&]qHGos;&PX8^", "F%\"V&]qHGos;&PX8^");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "F%\"V&]qHGos;&PX8^";
      String string3 = StringUtils.joinWith("iy>?Azor", objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals("iy>?AzorF%\"V&]qHGos;&PX8^", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-111);
      byteArray0[5] = (byte)85;
      String string4 = StringUtils.prependIfMissingIgnoreCase("F%\"V&]qHGos;&PX8^", "F%\"V&]qHGos;&PX8^", (CharSequence[]) null);
      assertEquals("F%\"V&]qHGos;&PX8^", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.reverseDelimited("\"6\"6", ']');
      assertEquals("\"6\"6", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[2] = ']';
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string6 = StringUtils.center((String) null, 18, "Pn?MD");
      assertNull(string6);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "iy>?Azor", charArray0);
      assertArrayEquals(new char[] {'A', '\u0000', ']', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.leftPad("mj5?%~6r(Wv0vj-E", (-1), 'H');
      assertEquals("mj5?%~6r(Wv0vj-E", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "mj5?%~6r(Wv0vj-E", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("The String must not be empty", 2581);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Failed to delete temp directory ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.mid("mj5?%~6r(Wv0vj-E", 88, (-1));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The String must not be empty";
      stringArray0[1] = "";
      stringArray0[2] = "mj5?%~6r(Wv0vj-E";
      stringArray0[3] = "Failed to delete temp directory ";
      String string3 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.wrapIfMissing((String) null, ';');
      assertNull(string5);
      
      String string6 = StringUtils.rightPad("syyr;0}dz5<FIF?2", (-1167), 'i');
      assertEquals("syyr;0}dz5<FIF?2", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      String string0 = StringUtils.removeEnd(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("oBrPb!");
      assertEquals("oBrPb!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      charArray0[4] = '3';
      charArray0[5] = 'F';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "oBrPb!", charArray0);
      assertArrayEquals(new char[] {'\u0000', 'F', 'F', '\u0000', '3', 'F'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad(":YPY6F65P", 240);
      assertEquals("                                                                                                                                                                                                                                       :YPY6F65P", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("oBrPb!");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.mid("$=#G<22w", 8, (-2158));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "                                                                                                                                                                                                                                       :YPY6F65P";
      String string4 = StringUtils.prependIfMissing("oBrPb!", "$=#G<22w", stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals("oBrPb!", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "                                                                                                                                                                                                                                       :YPY6F65P", (CharSequence) ":YPY6F65P");
      assertEquals(231, int0);
      
      String string5 = StringUtils.substringBetween("                                                                                                                                                                                                                                       :YPY6F65P", "                                                                                                                                                                                                                                       :YPY6F65P", "");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.center("7N~6txz{?KmF~o`E~&E", 4);
      assertEquals("7N~6txz{?KmF~o`E~&E", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'F', 'F', '\u0000', '3', 'F'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("\u0000FF\u00003F", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "The String must not be empty";
      stringArray0[1] = "";
      stringArray0[2] = "The String must not be empty";
      stringArray0[3] = "The String must not be empty";
      stringArray0[4] = "The String must not be empty";
      stringArray0[5] = "The String must not be empty";
      String string1 = StringUtils.join(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("The String must not be emptyThe String must not be emptyThe String must not be emptyThe String must not be emptyThe String must not be empty", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.getIfBlank("\n", (Supplier<String>) null);
      assertNull(string2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = 'F';
      charArray0[2] = 'g';
      charArray0[3] = 'S';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\n", charArray0);
      assertArrayEquals(new char[] {'\"', 'F', 'g', 'S'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("\n", "The String must not be empty", true);
      assertEquals((-106), int0);
      
      String string3 = StringUtils.unwrap("3uH@*Y0<hyxy", '>');
      assertEquals("3uH@*Y0<hyxy", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("uR:VUQGmd|l 4", (String) null);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("}(\"C>92", (String) null, (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "maxWith cannot be negative");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("maxWith cannot be negative"));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) hashSet0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(hashSet0.contains("maxWith cannot be negative"));
      assertFalse(list0.contains("maxWith cannot be negative"));
      
      int int0 = StringUtils.getFuzzyDistance("", "maxWith cannot be negative", locale0);
      assertEquals(0, int0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "maxWith cannot be negative", "_MZO;Z-2W.&A9v]");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceIgnoreCase("maxWith cannot be negative", ":8o%iW0X", "", 122);
      assertEquals("maxWith cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize(":8o%iW0X");
      assertEquals(":8o%iW0X", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(":8o%iW0X");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.mid("maxWith cannot be negative", 0, 2544);
      assertEquals("maxWith cannot be negative", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing("", "", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = StringUtils.containsNone((CharSequence) ":8o%iW0X", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int1 = StringUtils.compare("\n", "Hmts8a:Hi(OD6j", true);
      assertEquals((-62), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.overlay((String) null, (String) null, 122, (-1268));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("X", "X", (-1825));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeIgnoreCase("^>6iAh8>vEI0~Mvmk", "^>6iAh8>vEI0~Mvmk");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("^>6iAh8>vEI0~Mvmk", (String) null);
      assertEquals(1, int0);
      
      String string1 = StringUtils.toRootUpperCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("h");
      assertEquals("h", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((byte[]) null, 'M', 18, 18);
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("e", "e");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.appendIfMissingIgnoreCase("Failed to create default temp directory", "Failed to create default temp directory", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("Failed to create default temp directory", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.swapCase("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("\r", " ", "Failed to create default temp directory", (-1735));
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("Failed to create default temp directory");
      assertEquals("Failed to create default temp directory", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart("The character ", "Search and Replace array lengths don't match: ");
      assertEquals("The character ", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle("\n", "-S3uxEoQ(32", (-1735));
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.chop("The String must not be empty");
      assertEquals("The String must not be empt", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      int int0 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) "Failed to create default temp directory");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("The String must not be empty", " ");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase("m", "m", (CharSequence[]) null);
      assertEquals("m", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("m", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultIfEmpty("m", (String) null);
      assertEquals("m", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "m";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "m";
      objectArray0[7] = (Object) "m";
      objectArray0[8] = (Object) null;
      String string2 = StringUtils.join(objectArray0, (String) null, 2, 2);
      assertEquals(9, objectArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.right("", 100);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.remove("", '(');
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.split("m", "m");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "F sTkTJ]ddPP7hwLd");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("e", "e");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("org.junitpioneer.jupiter.params.IntRa_ge", "org.junitpioneer.jupiter.params.IntRa_ge");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("oBrPb!");
      assertEquals("oBrPb!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.getIfEmpty("", (Supplier<String>) null);
      assertNull(string2);
      
      String string3 = StringUtils.capitalize((String) null);
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "oBrPb!", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.trim("AW(-3PC");
      assertEquals("AW(-3PC", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "AW(-3PC", (CharSequence) "oBrPb!");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "org.junitpioneer.jupiter.params.IntRa_ge", (CharSequence) "AW(-3PC");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"^s`c'=uW";
      stringArray0[1] = "hx";
      stringArray0[2] = "\"^s`c'=uW";
      stringArray0[3] = "Failed to create custom temp directory";
      stringArray0[4] = "Failed to create custom temp directory";
      stringArray0[5] = "hx";
      stringArray0[6] = "hx";
      stringArray0[7] = "Failed to create custom temp directory";
      stringArray0[8] = "\"^s`c'=uW";
      String string0 = StringUtils.join(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("\"^s`c'=uWhx\"^s`c'=uWFailed to create custom temp directoryFailed to create custom temp directoryhxhxFailed to create custom temp directory\"^s`c'=uW", string0);
      assertNotNull(string0);
      
      char char0 = '|';
      String string1 = StringUtils.unwrap("dF!pN~ZI6!fnMe!", '|');
      assertEquals("dF!pN~ZI6!fnMe!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = (-415);
      String string2 = StringUtils.chomp((String) null, "Comparator should not be null.");
      assertNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "dF!pN~ZI6!fnMe!", (CharSequence) null, 8);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '|', (-415), 551);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -415
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string0 = StringUtils.leftPad("Threshold must not be negative\n\r", 0, "Threshold must not be negative\n\r");
      assertEquals("Threshold must not be negative\n\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString("Threshold must not be negative\n\r");
      assertEquals("Threshold must not be negative\n\r", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("Threshold must not be negative\n\r", "M(}gE#G~UX");
      assertEquals("Threshold must not be negative\n\r", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      double[] doubleArray0 = new double[0];
      String string3 = StringUtils.join(doubleArray0, 'E', 0, (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("1Bjzcv&ler0P", "junit-pioneer", (String) null);
      assertNull(stringArray0);
      
      String string4 = StringUtils.truncate("junit-pioneer", 2, 3114);
      assertEquals("nit-pioneer", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "Threshold must not be negative\n\r");
      assertNull(stringArray1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, "junit-pioneer");
      assertFalse(boolean0);
      
      String string5 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'K');
      assertNull(string0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2326.0);
      doubleArray0[1] = (-3296.65406);
      doubleArray0[2] = 3479.064282614;
      doubleArray0[3] = (-2731.0);
      doubleArray0[4] = (-197.0527579797);
      String string0 = "\\u";
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.getIfBlank("{>3Wro-}`ChLMT`%Pr(", (Supplier<String>) null);
      assertEquals("{>3Wro-}`ChLMT`%Pr(", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("0<]j3~`+}1(tR6=aK");
      assertEquals("0<]j3~`+}1(tR6=a", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("SjQ&}nProJ>", string0);
      assertEquals("SjQ&}nProJ>", string4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("'", "SjQ&}nProJ>", "SjQ&}nProJ>");
      assertEquals("'", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate("", "", 54);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int0 = StringUtils.length("{>3Wro-}`ChLMT`%Pr(");
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, "mp$/");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      String string0 = StringUtils.chomp("Object varargs must not be null", ",L");
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("Object varargs must not be null"));
      
      Locale locale1 = Locale.JAPANESE;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      
      Locale locale2 = Locale.TRADITIONAL_CHINESE;
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertEquals("TW", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      
      String string1 = locale0.getDisplayName(locale2);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("\u97D3\u6587", string1);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      
      String string2 = locale0.getDisplayVariant(locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("", string2);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      
      String string3 = locale1.getDisplayLanguage();
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("Japanese", string3);
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      
      String string4 = locale0.getDisplayLanguage(locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("\u97D3\u56FD\u8A9E", string4);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      
      String string5 = StringUtils.lowerCase("", locale0);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("", string5);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      String string6 = locale0.getDisplayScript();
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("", string6);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      Set<String> set1 = locale2.getUnicodeLocaleKeys();
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertSame(set1, set0);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(set1);
      assertEquals("TW", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(set1.contains("Object varargs must not be null"));
      
      String string7 = StringUtils.replaceChars("O3X%ZW#*j", "?", "Object varargs must not be null");
      assertEquals("O3X%ZW#*j", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("\u97D3\u6587", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertSame(set0, set1);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(list0.contains("Object varargs must not be null"));
      assertFalse(set0.contains("Object varargs must not be null"));
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      assertNotNull(treeSet0);
      
      Locale locale3 = Locale.lookup(stack0, treeSet0);
      assertNull(locale3);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      String string8 = StringUtils.substringBefore("org.apache.commons.lang3.RegExUtilsJTfvcK(Lmm", "\"b(\"qvEFdAkQ[");
      assertEquals("org.apache.commons.lang3.RegExUtilsJTfvcK(Lmm", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      
      String string9 = StringUtils.rightPad("\u97D3\u56FD\u8A9E", (-1));
      assertEquals("\u97D3\u56FD\u8A9E", string9);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Object varargs must not be null");
      assertTrue(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string10 = StringUtils.getIfEmpty("\u97D3\u6587", supplier0);
      assertEquals("\u97D3\u6587", string10);
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertNotNull(string10);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("\u97D3\u6587", "org.apache.commons.lang3.RegExUtilsJTfvcK(Lmm");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string11 = StringUtils.removeStart("RXHBzx?l/[65&hJm_", "\"b(\"qvEFdAkQ[");
      assertEquals("RXHBzx?l/[65&hJm_", string11);
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string3));
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      String string0 = StringUtils.stripEnd("fH8{gep-jc-1$", "\"^s`c'=uW");
      assertEquals("fH8{gep-jc-1$", string0);
      assertNotNull(string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("\"^s`c'=uW"));
      
      Iterator<String> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("\"^s`c'=uW"));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = " in an array of ";
      stringArray0[1] = " in an array of ";
      String string1 = StringUtils.replaceEach("Threshold must not be negative", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("Threshold must not be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("fH8{gep-jc-1$", 57, 16);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf("Threshold must not be negative", " in an array of ", 57);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string0 = StringUtils.leftPad("Threshold must not be negative\n\r", 0, "Threshold must not be negative\n\r");
      assertEquals("Threshold must not be negative\n\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString("Threshold must not be negative\n\r");
      assertEquals("Threshold must not be negative\n\r", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("Threshold must not be negative\n\r", "M(}gE#G~UX");
      assertEquals("Threshold must not be negative\n\r", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative\n\r";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Expected exactly one annotation to provide an ArgumentSource, found %d.", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.getIfBlank("{>3Wro-}`ChLMT`%Pr(", (Supplier<String>) null);
      assertEquals("{>3Wro-}`ChLMT`%Pr(", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.chop("{>3Wro-}`ChLMT`%Pr(");
      assertEquals("{>3Wro-}`ChLMT`%Pr", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("{>3Wro-}`ChLMT`%Pr", "Minimum abbreviation width is %d");
      assertEquals("{>3Wro-}`ChLMT`%Pr", string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("Threshold must not be negative\n\r", charSequence0);
      assertTrue(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string3));
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Threshold must not be negative\n\r", (CharSequence) "Threshold must not be negative\n\r", 72);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "{>3Wro-}`ChLMT`%Pr", (CharSequence) "{>3Wro-}`ChLMT`%Pr(");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string6 = StringUtils.join((float[]) null, '`', (-1), (-1));
      assertNull(string6);
      
      String string7 = StringUtils.abbreviate("Minimum abbreviation width is %d", 72);
      assertEquals("Minimum abbreviation width is %d", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)charSequence0));
      assertNotNull(string7);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string0));
      
      String string8 = StringUtils.join((Iterable<?>) set0, "3V{F6");
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)charSequence0));
      assertNotNull(string8);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string4));
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = 'B';
      charArray0[2] = 'y';
      charArray0[3] = ',';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'1', 'B', 'y', ','}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.leftPad("", 225);
      assertEquals("                                                                                                                                                                                                                                 ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("iy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.mid("", 16, 225);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("?");
      assertEquals("?", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart("JTfvcK(Lmm", "org.apache.commons.lang3.RegExUtils");
      assertEquals("JTfvcK(Lmm", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "c", charArray0);
      assertArrayEquals(new char[] {'1', 'B', 'y', ','}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(31, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.LF;
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "?", (CharSequence) "");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.overlay("oBrPb00!", "AmC; N9", 58, 58);
      assertEquals("oBrPb00!AmC; N9", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((short[]) null, 'b');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceChars((String) null, "Backup", (String) null);
      assertNull(string2);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      String string3 = StringUtils.join((Object[]) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase((String) null, "AmC; N9", (String) null, 58);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isBlank("{?+8-wQL?^Y;a__-Zt");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(object1));
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(object1));
      
      String string5 = StringUtils.join(iterator0, '[');
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(object1));
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("blank_blank_blank_2014", '\u0000');
      assertEquals("blank_blank_blank_2014", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("blank_blank_blank_2014");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '\u0000';
      doubleArray0[1] = (double) '\u0000';
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) '\u0000';
      doubleArray0[4] = (double) '\u0000';
      doubleArray0[5] = (double) '\u0000';
      doubleArray0[6] = (double) '\u0000';
      String string1 = StringUtils.join(doubleArray0, 'x');
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals("0.0x0.0x0.0x0.0x0.0x0.0x0.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      
      int int0 = StringUtils.getFuzzyDistance("0.0x0.0x0.0x0.0x0.0x0.0x0.0", "blank_blank_blank_2014", locale0);
      assertEquals(0, int0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.wrapIfMissing("", '\u0084');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("\n", '\u0084');
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      String string0 = StringUtils.removeEnd(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("oBrPb!");
      assertEquals("oBrPb!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[4] = '3';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "oBrPb!", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '3', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad("oBrPb!", 240);
      assertEquals("                                                                                                                                                                                                                                          oBrPb!", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("oBrPb!");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.mid("$=#G<22w", 8, (-2158));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.stripStart("", "mj5?%~6r(Wv0vj-E");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("", '\u0000');
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("VA,D]`fE", " vs ", 6, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) stringArray0[0], (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = "VA,D]`fE";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("VA,D]`fE", " vs ", 18, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.leftPad("mj5?%~6r(Wv0vj-E", (-1), 'H');
      assertEquals("mj5?%~6r(Wv0vj-E", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "mj5?%~6r(Wv0vj-E", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substring("The Character must", (-3465), 100);
      assertEquals("The Character must", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("mj5?%~6r(Wv0vj-E");
      assertEquals("mj5?%~6r(Wv0vj-E", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "The Character must", (CharSequence) null, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.defaultIfEmpty("The Character must", "i");
      assertEquals("The Character must", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("mj5?%~6r(Wv0vj-E", "w7Q}Y/E", 10);
      assertEquals("mjw7Q}Y/EE", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.chop("mjw7Q}Y/EE");
      assertEquals("mjw7Q}Y/E", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int int2 = StringUtils.countMatches((CharSequence) "The Character must", (CharSequence) null);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String[] stringArray0 = StringUtils.split(", Le", "$xqfW 2fu9*%E%");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("org.junitpioneer.jupiter.params.FloatRange", "|QD|:ic+P", 32);
      assertEquals("org.junitpio|QD|:ic+P.FloatRange", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.swapCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("\r", " ", "", (-1735));
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("\r", "\n");
      assertEquals("\r", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("maxWith cannot be negative", "\r");
      assertEquals("maxWith cannot be negative", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains(""));
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, (String) null);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains(""));
      
      String string6 = StringUtils.abbreviate("", (-1735));
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      String string0 = StringUtils.repeat("(.", 2210);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "g'");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1424;
      shortArray0[1] = (short)1424;
      shortArray0[2] = (short)1424;
      shortArray0[3] = (short)1424;
      String string0 = StringUtils.join(shortArray0, '\u001F', (int) (short)1424, (int) (short)1424);
      assertArrayEquals(new short[] {(short)1424, (short)1424, (short)1424, (short)1424}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("Minimum abbreviation width is %d", "", 90, (-2839));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      float[] floatArray0 = new float[0];
      String string2 = StringUtils.join(floatArray0, '5');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("%z`HT2F0CkQ:=D#'", "org.apache.commons.lang3.StringUtils", (int) (short)1424);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("<fC", "C$", 3065);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeIgnoreCase("C$", "C$");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("R]:>9K", "<fC");
      assertEquals(22, int0);
      
      String string1 = StringUtils.toRootUpperCase("x:?>0}bQhqcC2]");
      assertEquals("X:?>0}BQHQCC2]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("Qt");
      assertEquals("Qt", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToEmpty("()/>y&'WNC");
      assertEquals("()/>y&'WNC", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "C$", (CharSequence) "x:?>0}bQhqcC2]");
      assertEquals(14, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.substringBetween("DISPLAY", "x:?>0}bQhqcC2]");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.equalsAny("org.junitpioneer.vintage.ExpectedExceptionExtension", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Qt";
      charSequenceArray0[1] = (CharSequence) "X:?>0}BQHQCC2]";
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, 3065);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "?", 161);
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("iy>?Azorg.apache.commons.lang3.StringUtils", "?");
      assertEquals("?iy>?Azorg.apache.commons.lang3.StringUtils?", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("?");
      assertEquals("?", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("iy>?Azorg.apache.commons.lang3.StringUtils", 161, "iy>?Azorg.apache.commons.lang3.StringUtils");
      assertEquals("iy>?Azorg.apache.commons.lang3.StringUtilsiy>?Azorg.apache.commons.lang3.StringUtilsiy>?Azorg.apache.commons.lang3.Striiy>?Azorg.apache.commons.lang3.StringUtils", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("iy>?Azorg.apache.commons.lang3.StringUtils"));
      
      HashSet<String> hashSet0 = new HashSet<String>(linkedList0);
      assertNotNull(hashSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(linkedList0.contains("iy>?Azorg.apache.commons.lang3.StringUtils"));
      assertFalse(hashSet0.contains("iy>?Azorg.apache.commons.lang3.StringUtils"));
      
      Iterator<String> iterator0 = hashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(linkedList0.contains("iy>?Azorg.apache.commons.lang3.StringUtils"));
      assertFalse(hashSet0.contains("iy>?Azorg.apache.commons.lang3.StringUtils"));
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?");
      assertNotNull(predicate0);
      
      boolean boolean1 = hashSet0.removeIf(predicate0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(linkedList0.contains("iy>?Azorg.apache.commons.lang3.StringUtils"));
      assertFalse(hashSet0.contains("iy>?Azorg.apache.commons.lang3.StringUtils"));
      
      String string3 = StringUtils.join(iterator0, 'K');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(linkedList0.contains(string3));
      assertFalse(hashSet0.contains(string3));
      
      String string4 = StringUtils.repeat("?", 161);
      assertEquals("?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "The String must not be empty", "The String must not be empty");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("The String must not be empty", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("The String must not be empty");
      assertEquals("the string must not be empty", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("The String must not be empty");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.rightPad("The String must not be empty", 1, 'L');
      assertEquals("The String must not be empty", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("The String must not be empty", "The String must not be empty");
      assertEquals(1.0, double0, 0.01);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'B';
      int int1 = StringUtils.indexOfAny((CharSequence) "The String must not be empty", charArray0);
      assertArrayEquals(new char[] {'L', 'B'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("the string must not be empty", "The String must not be empty");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "p", (CharSequence) "p");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "p", "V!y%45Z38:3DI2j8");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[16];
      shortArray0[0] = (short)1424;
      shortArray0[1] = (short)1424;
      shortArray0[2] = (short)1424;
      shortArray0[3] = (short)1424;
      shortArray0[4] = (short)1424;
      String string0 = StringUtils.join(shortArray0, '>', (int) (short)1424, (-448));
      assertEquals(16, shortArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("p", "", (-1));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rotate("V!y%45Z38:3DI2j8", (short)1424);
      assertEquals("45Z38:3DI2j8V!y%", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(""));
      
      boolean boolean2 = linkedList1.add((Object) "");
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean2);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains("V!y%45Z38:3DI2j8"));
      assertTrue(linkedList1.contains(""));
      
      String string3 = StringUtils.join(iterator0, "45Z38:3DI2j8V!y%");
      assertNotSame(linkedList0, linkedList1);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotNull(string3);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "45Z38:3DI2j8V!y%", (CharSequence) "p", 1093);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "V!y%45Z38:3DI2j8", (CharSequence) "p");
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String string4 = StringUtils.join((float[]) null, 'Q', (-448), 1954);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase(",L", ",L", ",L", 3533);
      assertEquals(",L", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) ",L", 'U');
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripToEmpty("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip(",L", "\n\r");
      assertEquals(",L", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("inj!sX_a}!inj!sX_a}!", ",L");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string3 = StringUtils.join(intArray0, '_', 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) ",L", 1301);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.replaceFirst("Threshold must not be negative", "Threshold must not be negative", ", org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals(", org.junitpioneer.vintage.ExpectedExceptionExtension", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.overlay("ExceptionWasThrown", "org.apache.commons.lang3.Charsets", (-1), 0);
      assertEquals("org.apache.commons.lang3.CharsetsExceptionWasThrown", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string6 = StringUtils.wrapIfMissing(", org.junitpioneer.vintage.ExpectedExceptionExtension", ",L");
      assertEquals(",L, org.junitpioneer.vintage.ExpectedExceptionExtension,L", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", 'n');
      assertEquals("org.apache.commos.lag3.StrigUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)89;
      byteArray0[4] = (byte) (-1);
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)88;
      String string0 = StringUtils.join(byteArray0, 'p');
      assertArrayEquals(new byte[] {(byte)81, (byte)35, (byte)89, (byte)0, (byte)108, (byte) (-28), (byte)88, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("81p35p89p0p108p-28p88p0", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "81p35p89p0p108p-28p88p0";
      String string1 = StringUtils.wrap("81p35p89p0p108p-28p88p0", 'p');
      assertEquals("p81p35p89p0p108p-28p88p0p", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "p81p35p89p0p108p-28p88p0p";
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)88;
      floatArray0[1] = (-2161.86F);
      floatArray0[3] = (float) (byte)108;
      floatArray0[4] = (float) (byte)89;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)81;
      String string2 = StringUtils.join(floatArray0, 'R');
      assertArrayEquals(new float[] {88.0F, (-2161.86F), 0.0F, 108.0F, 89.0F, 0.0F, 81.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals("88.0R-2161.86R0.0R108.0R89.0R0.0R81.0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "88.0R-2161.86R0.0R108.0R89.0R0.0R81.0";
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)89;
      intArray0[1] = (int) (byte)89;
      intArray0[2] = (int) (byte) (-28);
      intArray0[2] = (int) (byte)81;
      String string3 = StringUtils.join(intArray0, '1', 89, (int) (byte)89);
      assertArrayEquals(new int[] {89, 89, 81, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.substringAfter("p81p35p89p0p108p-28p88p0p", "");
      assertEquals("p81p35p89p0p108p-28p88p0p", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "p81p35p89p0p108p-28p88p0p";
      String string5 = StringUtils.repeat("", "81p35p89p0p108p-28p88p0", (int) (byte)89);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      charSequenceArray0[5] = (CharSequence) string5;
      String string6 = StringUtils.remove("81p35p89p0p108p-28p88p0", '1');
      assertEquals("8p35p89p0p08p-28p88p0", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      charSequenceArray0[6] = (CharSequence) "8p35p89p0p08p-28p88p0";
      // Undeclared exception!
      try { 
        StringUtils.removeAll(string5, "-l+l[/+<agMEGuu");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 15
         // -l+l[/+<agMEGuu
         //                ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.chomp("Qt");
      assertEquals("Qt", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.replaceIgnoreCase("Qt", "Qt", "\rorg.junitpioneer.jupiter.DefaultLocaleExtension", 44);
      assertEquals("\rorg.junitpioneer.jupiter.DefaultLocaleExtension", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string2 = StringUtils.EMPTY;
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[2] = 'K';
      charArray0[1] = 'v';
      boolean boolean2 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'v', 'K'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.defaultString((String) null);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.isAlphaSpace("\rorg.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", (-3563));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.repeat("Threshold must not be negative\n\r", "~'{3gl", (-3563));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing("", "", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("~'{3gl", (-1), 'd');
      assertEquals("~'{3gl", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      
      String string3 = StringUtils.upperCase((String) null, locale0);
      assertNull(string3);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      
      String string0 = StringUtils.upperCase("wC/T", locale0);
      assertEquals("WC/T", string0);
      assertNotNull(string0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      String string0 = StringUtils.leftPad("maxWith cannot be negative", 20, 'H');
      assertEquals("maxWith cannot be negative", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'H';
      charArray0[2] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "maxWith cannot be negative", charArray0);
      assertArrayEquals(new char[] {'H', '\u0000', 'H', 'H', 'H'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("Locale must not be null", 52);
      assertEquals("                             Locale must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Failed to delete temp directory ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.replaceFirst("maxWith cannot be negative", "Failed to delete temp directory ", "Failed to delete temp directory ");
      assertEquals("maxWith cannot be negative", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'H', '\u0000', 'H', 'H', 'H'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.defaultString("Locale must not be null");
      assertEquals("Locale must not be null", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.isAlphaSpace("");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String string4 = StringUtils.replaceFirst("Locale must not be null", "not be empty", "");
      assertEquals("Locale must not be null", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.upperCase("#A,{", locale0);
      assertEquals("#A,{", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringAfter("\n", "\r");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)89;
      byteArray0[4] = (byte) (-1);
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)0;
      String string0 = StringUtils.join(byteArray0, 'p');
      assertArrayEquals(new byte[] {(byte)81, (byte)35, (byte)89, (byte)0, (byte)108, (byte) (-28), (byte)88, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("81p35p89p0p108p-28p88p0", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "81p35p89p0p108p-28p88p0";
      String string1 = StringUtils.wrap("81p35p89p0p108p-28p88p0", 'p');
      assertEquals("p81p35p89p0p108p-28p88p0p", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "p81p35p89p0p108p-28p88p0p";
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)88;
      floatArray0[1] = (-2161.86F);
      floatArray0[2] = (float) (byte)108;
      floatArray0[3] = (float) (byte)108;
      floatArray0[4] = (float) (byte)89;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)81;
      String string2 = StringUtils.join(floatArray0, 'R');
      assertArrayEquals(new float[] {88.0F, (-2161.86F), 108.0F, 108.0F, 89.0F, 0.0F, 81.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals("88.0R-2161.86R108.0R108.0R89.0R0.0R81.0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "88.0R-2161.86R108.0R108.0R89.0R0.0R81.0";
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)89;
      intArray0[1] = (int) (byte)89;
      intArray0[2] = (int) (byte) (-28);
      intArray0[3] = (int) (byte)81;
      String string3 = StringUtils.join(intArray0, '1', 89, (int) (byte)89);
      assertArrayEquals(new int[] {89, 89, (-28), 81}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.substringAfter("p81p35p89p0p108p-28p88p0p", "offset cannot be negative");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string5 = StringUtils.repeat("", "81p35p89p0p108p-28p88p0", (int) (byte)89);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      charSequenceArray0[5] = (CharSequence) string5;
      String string6 = StringUtils.remove("offset cannot be negative", '1');
      assertEquals("offset cannot be negative", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      charSequenceArray0[6] = (CharSequence) "offset cannot be negative";
      // Undeclared exception!
      try { 
        StringUtils.removeAll(string5, "-l+l[/+<agMEGuu");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 15
         // -l+l[/+<agMEGuu
         //                ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      String string0 = StringUtils.repeat('u', (-3143));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, 'P');
      assertEquals(5, charSequenceArray0.length);
      assertEquals("PPPP", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.prependIfMissing("F%\"V&]qHGos;&PX8^'i8aC*Z*MX6", charSequenceArray0[1], charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("F%\"V&]qHGos;&PX8^'i8aC*Z*MX6", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = 'l';
      charArray0[2] = 'M';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      charArray0[5] = 'u';
      charArray0[6] = 'u';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "PPPP", charArray0);
      assertArrayEquals(new char[] {'u', 'l', 'M', 'u', 'u', 'u', 'u'}, charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[1], (CharSequence) "F%\"V&]qHGos;&PX8^'i8aC*Z*MX6");
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.substringBetween("", (String) null, (String) null);
      assertNull(string3);
      
      int int2 = StringUtils.length("");
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string4 = StringUtils.removeStart("", "FBd@:+q}$p'z3w?");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.isNumeric("F%\"V&]qHGos;&PX8^'i8aC*Z*MX6");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      String string0 = StringUtils.substringBetween("uF=m,/T7tmR?c", (String) null, "G3!7{bB BX.dYv.x");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer1);
      assertSame(locale_Category0, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      boolean boolean0 = enumSet0.add(locale_Category1);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertFalse(boolean0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string1 = StringUtils.substring("", 96, (-873));
      assertEquals("", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'j';
      floatArray0[1] = (float) 96;
      String string2 = StringUtils.join(floatArray0, 'j', 0, 0);
      assertArrayEquals(new float[] {106.0F, 96.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("", "", "3':YW%.^f", 96);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.toRootUpperCase("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.reverseDelimited("", 'j');
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.unwrap(". The following paths could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details): ", 'j');
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details): ", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.join(floatArray0, 'j', 1022, 0);
      assertArrayEquals(new float[] {106.0F, 96.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertNotNull(string7);
      
      String string8 = StringUtils.normalizeSpace("");
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertNotNull(string8);
      
      String string9 = StringUtils.substringAfterLast("io", "");
      assertEquals("", string9);
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      String string0 = StringUtils.removeEnd(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 928;
      intArray0[1] = 928;
      intArray0[2] = 928;
      intArray0[3] = 3;
      intArray0[4] = 928;
      String string1 = StringUtils.leftPad("61K\"Nu|;2\"i %a6", 3, '\\');
      assertEquals("61K\"Nu|;2\"i %a6", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("61K\"Nu|;2\"i %a6", "");
      assertEquals("61K\"Nu|;2\"i %a6", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Backup";
      stringArray0[1] = "oBrPb!";
      stringArray0[2] = "61K\"Nu|;2\"i %a6";
      stringArray0[3] = ". The following paths could not be deleted (see suppressed exceptions for details): ";
      stringArray0[4] = ". The following paths could not be deleted (see suppressed exceptions for details): ";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'j');
      assertEquals("DISPLAY", string0);
      assertNotNull(string0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      boolean boolean0 = enumSet0.add(locale_Category1);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertTrue(boolean0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string1 = StringUtils.substring("DISPLAY", 96, (-873));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'j';
      floatArray0[1] = (float) 96;
      String string2 = StringUtils.join(floatArray0, 'j', 0, 0);
      assertArrayEquals(new float[] {106.0F, 96.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("DISPLAY", "DISPLAY", "3':YW%.^f", 96);
      assertEquals("3':YW%.^f", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.toRootUpperCase("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStart("", "Search and Replace array lengths don't match: ");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.EMPTY;
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string7 = StringUtils.replaceOnceIgnoreCase("3':YW%.^f", "", "_qrQyxtx(/)>M7k");
      assertEquals("3':YW%.^f", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      charSequenceArray0[0] = (CharSequence) "3':YW%.^f";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "3':YW%.^f";
      charSequenceArray0[4] = (CharSequence) "DISPLAY";
      charSequenceArray0[5] = (CharSequence) "3':YW%.^f";
      charSequenceArray0[6] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "DISPLAY";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumericSpace("3':YW%.^f");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", (CharSequence) "DISPLAY");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.replaceChars("\r", "\n", (String) null);
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      String string0 = StringUtils.substringBetween("+N@f.Tob", "+N@f.Tob");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+N@f.Tob", (String) null, (-11));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeIgnoreCase("org.junitpioneer.jupiter.params.IntRange", "org.junitpioneer.jupiter.params.IntRange");
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "+N@f.Tob", (CharSequence) "", 16);
      assertEquals(8, int0);
      
      String string2 = StringUtils.toRootUpperCase("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToEmpty("org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertEquals("org.junitpioneer.jupiter.RepeatFailedTestExtension", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.substringBetween("org.junitpioneer.jupiter.RepeatFailedTestExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNull(string5);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'R';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension", charArray0);
      assertArrayEquals(new char[] {'V', 'R'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      String string6 = StringUtils.capitalize("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("Org.junitpioneer.vintage.ExpectedExceptionExtension", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension", (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "org.junitpioneer.jupiter.params.IntRange", (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals(17, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'V', 0, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (-182));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      String string0 = StringUtils.leftPad((String) null, (-182));
      assertNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) "iy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A");
      assertEquals("iy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("iy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = StringUtils.mid("0eI wcS4LD(Mg?+fp", (-1965), (-1965));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase("{}");
      assertEquals("{}", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      String string3 = StringUtils.prependIfMissing("Search and Replace array lengths don't match: ", "iy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertNotNull(string3);
      
      char[] charArray0 = new char[0];
      boolean boolean3 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("nlM]");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.LF;
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean4 = StringUtils.contains(charSequenceArray0[1], (CharSequence) "{}");
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", 55);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "p", "V!y%45Z38:3DI2j8");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1424;
      shortArray0[1] = (short)1424;
      shortArray0[2] = (short)1424;
      String string0 = StringUtils.capitalize("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("p", "...");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)66;
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      String string1 = StringUtils.join(charArray0, 'q');
      assertArrayEquals(new char[] {'P', 'P', 'P', 'P'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("PqPqPqP", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("Minimum abbreviation width is %d");
      assertEquals("mINIMUM ABBREVIATION WIDTH IS %D", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("Minimum abbreviation width is %d", "V!y%45Z38:3DI2j8");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains((byte)46));
      
      String string3 = StringUtils.join((Iterable<?>) linkedHashSet0, 'P');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains((byte)46));
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.chomp("Qt");
      assertEquals("Qt", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.replaceIgnoreCase("Qt", "Qt", "\rorg.junitpioneer.jupiter.DefaultLocaleExtension", 44);
      assertEquals("\rorg.junitpioneer.jupiter.DefaultLocaleExtension", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string2 = StringUtils.EMPTY;
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isNumericSpace("\r");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = StringUtils.containsAny((CharSequence) "\rorg.junitpioneer.jupiter.DefaultLocaleExtension", (CharSequence) "Minimum abbreviation width is %d");
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another", 69, 69);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes("2R:Ze~B#+^jeigH[</Y", (Charset) null);
      assertEquals(19, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("9_", "9_");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("9_", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("org.junitpioneer.jupiter.DefaultLoca", 'I', ' ');
      assertEquals("org.junitpioneer.jupiter.DefaultLoca", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.defaultString(",bi.6V", "org.junitpioneer.jupiter.DefaultLoca");
      assertEquals(",bi.6V", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("org.junitpioneer.vintage.ExpectedExceptionExtension, ", "org.junitpioneer.vintage.ExpectedExceptionExtension, ");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate(",bi.6V", 5);
      assertEquals(",b...", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.join((short[]) null, ' ', 4, 65);
      assertNull(string5);
      
      String string6 = StringUtils.replace(",bi.6V", "", ", ");
      assertEquals(",bi.6V", string6);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isAlpha("org.junitpioneer.vintage.ExpectedExceptionExtension, ");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string7 = StringUtils.toRootUpperCase(", ");
      assertEquals(", ", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      String string8 = StringUtils.rotate("#I_S", 169);
      assertEquals("S#I_", string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.junitpioneer.jupiter.DefaultLoca";
      boolean boolean3 = StringUtils.isBlank("");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("org.apache.commons.lang3.RegExUtils", "+N@f.Tob");
      assertEquals(0.27, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = StringUtils.join(charArray0, '{');
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("\u0000{\u0000", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((long[]) null, '{', 67, 67);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "p", "V!y%45Z38:3DI2j8");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1424;
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '+');
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "+y!$e_u8j Eq#khB", "p");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      String string2 = StringUtils.reverseDelimited("Object varargs must not be null", '+');
      assertEquals("Object varargs must not be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("*~wiKTn,'", "p");
      assertEquals("*~wiKTn,'", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Iterator<Locale.Category> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string4 = StringUtils.join(iterator0, '9');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      double double0 = StringUtils.getJaroWinklerDistance("Object varargs must not be null", "3");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      String string0 = StringUtils.chomp("]wiUsK5{f2xZhY_k:", "jG uq\",:9Q=R{(=Gnz");
      assertEquals("]wiUsK5{f2xZhY_k:", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("jG uq\",:9Q=R{(=Gnz");
      assertEquals("jGuq\",:9Q=R{(=Gnz", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("`#[4kJ", "]wiUsK5{f2xZhY_k:", 0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isEmpty("]wiUsK5{f2xZhY_k:");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("\"_85WeX.b=t2pe", 'n');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        Charset.forName("`#[4kJ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // `#[4kJ
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, "", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertNull(string0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[4];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) null;
      charSequenceArray1[1] = (CharSequence) "";
      String string1 = StringUtils.wrap("Vfs'<Yi4,ingUtils", '*');
      assertEquals("*Vfs'<Yi4,ingUtils*", string1);
      assertNotNull(string1);
      
      charSequenceArray1[2] = (CharSequence) "*Vfs'<Yi4,ingUtils*";
      charSequenceArray1[3] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(4, charSequenceArray1.length);
      assertFalse(boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.swapCase("\n");
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("Strings must not be null", "\n", (String) null, (-1735));
      assertEquals("Strings must not be null", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart("org.junitpioneer.jupiter.DefaultLocaleExtension", "\r");
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripStart("\n", ",L");
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.removeEnd(" in an array of ", (String) null);
      assertEquals(" in an array of ", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOf((CharSequence) "Strings must not be null", (-1));
      assertEquals((-1), int0);
      
      String string7 = StringUtils.getIfBlank(",L", (Supplier<String>) null);
      assertEquals(",L", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("<fC", "C$", 3065);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeIgnoreCase("C$", "C$");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("R]:>9K", "<fC");
      assertEquals(22, int0);
      
      String string1 = StringUtils.toRootUpperCase("x:?>0}bQhqcC2]");
      assertEquals("X:?>0}BQHQCC2]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("Qt");
      assertEquals("Qt", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToEmpty("()/>y&'WNC");
      assertEquals("()/>y&'WNC", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "C$", (CharSequence) "x:?>0}bQhqcC2]");
      assertEquals(14, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.substringBetween("DISPLAY", "x:?>0}bQhqcC2]");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.equalsAny("org.junitpioneer.vintage.ExpectedExceptionExtension", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Qt";
      charSequenceArray0[1] = (CharSequence) "X:?>0}BQHQCC2]";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("<f", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      String string0 = StringUtils.substringBetween("IoW8\"B~|E;)Jl", "IoW8\"B~|E;)Jl");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("IoW8\"B~|E;)Jl", (String) null, (-11));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeIgnoreCase("org.junitpioneer.jupiter.params.IntRange", "org.junitpioneer.jupiter.params.IntRange");
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare((String) null, "org.junitpioneer.jupiter.params.IntRange");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.toRootUpperCase("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToEmpty("org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertEquals("org.junitpioneer.jupiter.RepeatFailedTestExtension", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.substringBetween("org.junitpioneer.jupiter.RepeatFailedTestExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNull(string5);
      
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("IoW8\"B~|E;)Jl", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.rightPad((String) null, (-1), 'R');
      assertNull(string7);
      
      int int2 = StringUtils.indexOf((CharSequence) null, 1174, 1174);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = StringUtils.join(charArray0, '{');
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("\u0000{\u0000", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, Integer.MIN_VALUE);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      String string0 = StringUtils.replace("g@?2sk@IG(TvnY!t", "g@?2sk@IG(TvnY!t", (String) null, 76);
      assertEquals("g@?2sk@IG(TvnY!t", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("f5[sM|T#pMK", 0);
      assertEquals("f5[sM|T#pMK", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceFirst("f5[sM|T#pMK", "Minimum abbreviation width is %d", "g@?2sk@IG(TvnY!t");
      assertEquals("f5[sM|T#pMK", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      String string3 = StringUtils.leftPad("The String must not be empty", (-358));
      assertEquals("The String must not be empty", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.mid("f5[sM|T#pMK", 2581, 0);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.prependIfMissing("g@?2sk@IG(TvnY!t", "The String must not be empty", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("The String must not be emptyg@?2sk@IG(TvnY!t", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      String string0 = StringUtils.strip("*v&~RH%", "*v&~RH%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*v&~RH%";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "*v&~RH%";
      stringArray0[5] = "*v&~RH%";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      String string1 = StringUtils.join(doubleArray0, 'p');
      assertArrayEquals(new double[] {1.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals("1.0p1.0p0.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", (String) null, "3");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string3 = StringUtils.reverseDelimited(stringArray0[3], '-');
      assertEquals(9, stringArray0.length);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.endsWith("", "*v&~RH%");
      assertFalse(boolean0);
      
      String string4 = StringUtils.stripStart("&RV`^fbRbu+=5", (String) null);
      assertEquals("&RV`^fbRbu+=5", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultIfEmpty("5?sr}$}^SYo*kR-", "Minimum abbreviation width with offset is %d");
      assertEquals("5?sr}$}^SYo*kR-", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviateMiddle("iy>?Azorg.ap", "*v&~RH%", (-46));
      assertEquals("iy>?Azorg.ap", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.chop("J][i8");
      assertEquals("J][i", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      String string8 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'p'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("p", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 127);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.swapCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("\r", " ", "", (-1735));
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("\r", "\n");
      assertEquals("\r", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("maxWith cannot be negative", "\r");
      assertEquals("maxWith cannot be negative", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEnd("\n", "maxWith cannot be negative");
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "\r", (-1735));
      assertEquals((-1), int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfBlank(";Epj~S{g*09", supplier0);
      assertEquals(";Epj~S{g*09", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("g");
      assertEquals("g", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "g", (-925));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 'p';
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 'p';
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 'p';
      String string0 = StringUtils.join(doubleArray0, 'p');
      assertArrayEquals(new double[] {1.0, 112.0, 0.0, 1.0, 112.0, 0.0, 1.0, 0.0, 112.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals("1.0p112.0p0.0p1.0p112.0p0.0p1.0p0.0p112.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("3", "Object varargs must not be null", "1.0p112.0p0.0p1.0p112.0p0.0p1.0p0.0p112.0");
      assertEquals("3", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      String string2 = StringUtils.reverseDelimited("3", '');
      assertEquals("3", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap((String) null, "?x`j5AJ");
      assertNull(string3);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Iterator<Locale.Category> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string4 = StringUtils.join(iterator0, 'I');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      double double0 = StringUtils.getJaroWinklerDistance("3", "3");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      String string0 = StringUtils.left("The Character must not be null", 2200);
      assertEquals("The Character must not be null", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "The Character must not be null", (CharSequence) "The Character must not be null");
      assertEquals("The Character must not be null", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      String string1 = StringUtils.rightPad("org.junitpioneer.vintage.TimeoutExtension", 1, "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "The Character must not be null", (CharSequence) "org.junitpioneer.vintage.TimeoutExtension");
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("The Character must not be null", "]wiUsK5{f2xZhY_k:");
      assertEquals("]wiUsK5{f2xZhY_k:The Character must not be null]wiUsK5{f2xZhY_k:", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The Character must not be null", 3543);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.remove("org.junitpioneer.jupiter.TempDirectory", "t@lC34");
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertNotNull(string4);
      
      String string5 = StringUtils.toRootLowerCase("F2EaN2x<O2oL");
      assertEquals("f2ean2x<o2ol", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.split((String) null);
      assertNull(stringArray1);
      
      double double0 = StringUtils.getJaroWinklerDistance("The Character must not be null", "f2ean2x<o2ol");
      assertEquals(0.45, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Be_EV5msb&kLg");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("'4>#LM*MDyu4M9T^@");
      assertEquals(17, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.deleteWhitespace("Be_EV5msb&kLg");
      assertEquals("Be_EV5msb&kLg", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("r>P4aMSMD", 0, '3');
      assertEquals("r>P4aMSMD", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = 'F';
      charArray0[2] = '3';
      charArray0[3] = 'F';
      charArray0[4] = 'F';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "r>P4aMSMD", charArray0);
      assertArrayEquals(new char[] {'3', 'F', '3', 'F', 'F'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replace("goU|Hf'", (String) null, "r>P4aMSMD", 0);
      assertEquals("goU|Hf'", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("r>P4aMSMD", "r>P4aMSMD");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.reverseDelimited("'4>#LM*MDyu4M9T^@", 'F');
      assertEquals("'4>#LM*MDyu4M9T^@", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.endsWith("'4>#LM*MDyu4M9T^@", "goU|Hf'");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "'4>#LM*MDyu4M9T^@", "goU|Hf'");
      assertEquals(0, int0);
      
      String string5 = StringUtils.replaceOnceIgnoreCase((String) null, (String) null, "The String must not be empty");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      String string0 = StringUtils.stripAccents("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("G2DX36IpO,9A");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("G2DX36IpO,9A");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, ']');
      assertEquals(1, stringArray0.length);
      assertEquals("G2DX36IpO,9A", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("G2DX36IpO,9A", ",m)p", 3029);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.removeEndIgnoreCase("org.junitpioneer.jupiter.RepeatFailedTestExtension", ",m)p");
      assertEquals("org.junitpioneer.jupiter.RepeatFailedTestExtension", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("JY$", 14, "G2DX36IpO,9A");
      assertEquals("JY$G2DX36IpO,9", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.joinWith("JY$", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertEquals("G2DX36IpO,9A", string6);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.LF;
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("Expected exception %s was not thrown.", (String) null, false);
      assertEquals((-1), int0);
      
      String string2 = "\\u";
      String string3 = StringUtils.unwrap(string2, 'c');
      assertEquals("\\u", string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("hg)/M");
      assertEquals("hg)/M", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      String string0 = StringUtils.repeat('u', (-3143));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, 'P');
      assertEquals(5, charSequenceArray0.length);
      assertEquals("PPPP", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("", 1371, (-573));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing("E", "E", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("E", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("\r", 1371, 13);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.compareIgnoreCase(".StringUtils", (String) null, false);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.unwrap("The character must not be null", '\u0014');
      assertEquals("The character must not be null", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isBlank("PPPP");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("iVfs'<Yi4,", "*kcxv.WV@NW=Ls");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("qakJCs:xqD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Failed to create custom temp directory", "\"^s`c'=uW");
      assertEquals("Failed to create custom temp directory", string0);
      assertNotNull(string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("\"^s`c'=uW"));
      
      Iterator<String> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("\"^s`c'=uW"));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Failed to create custom temp directory";
      stringArray0[1] = " in an array of ";
      String string1 = StringUtils.appendIfMissingIgnoreCase(",F~!Dtu*>x>+z/b #", "Failed to create custom temp directory", stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(",F~!Dtu*>x>+z/b #Failed to create custom temp directory", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace(" in an array of ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("m");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*v&~RH%";
      String[] stringArray1 = StringUtils.substringsBetween("m0i;", "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }");
      assertNull(stringArray1);
      
      String string0 = StringUtils.removeFirst("codefx", "`b`q*ty9O?JK");
      assertEquals("codefx", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtils", "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtilsReport entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("m0i;");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 101;
      intArray0[1] = 10;
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.leftPad("mj5?%~6r(Wv0vj-E", (-1), 'H');
      assertEquals("mj5?%~6r(Wv0vj-E", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "mj5?%~6r(Wv0vj-E", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("\n", 2581);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Failed to delete temp directory ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.mid("mj5?%~6r(Wv0vj-E", 88, (-1));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing("", "\n", (CharSequence[]) null);
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "mj5?%~6r(Wv0vj-E", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int1 = StringUtils.compare("", "org.apache.commons.lang3.ArrayUtils", true);
      assertEquals((-35), int1);
      assertFalse(int1 == int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.toString());
      
      byte[] byteArray0 = StringUtils.getBytes("\rorg.junitpioneer.jupiter.DefaultLocaleExtension", charset1);
      assertSame(charset1, charset0);
      assertEquals(48, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.toString());
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'L', 0, 0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.rightPad("", 3564, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) string1;
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3564;
      intArray0[1] = 0;
      intArray0[2] = (int) 'L';
      String string2 = StringUtils.join(intArray0, 'r', 9, (-474));
      assertArrayEquals(new int[] {3564, 0, 76}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      
      ByteBuffer byteBuffer0 = charset0.encode("");
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.toString());
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset1);
      assertSame(charset1, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.toString());
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '6', 2829, 50);
      assertNull(string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "The String must not be empty");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean1 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.remove("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("The String must not be empty", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, 10);
      assertNull(string0);
      
      String string1 = StringUtils.remove("1Mo<\"en", 'S');
      assertEquals("1Mo<\"en", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("1Mo<\"en", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.leftPad("mj5?%~6r(Wv0vj-E", (-1), 'H');
      assertEquals("mj5?%~6r(Wv0vj-E", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "mj5?%~6r(Wv0vj-E", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("The String must not be empty", 2581);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Failed to delete temp directory ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.mid("mj5?%~6r(Wv0vj-E", 88, (-1));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing("", "The String must not be empty", (CharSequence[]) null);
      assertEquals("The String must not be empty", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "mj5?%~6r(Wv0vj-E", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int1 = StringUtils.compare("", "org.apache.commons.lang3.ArrayUtils", true);
      assertEquals((-35), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.overlay((String) null, "Failed to create custom temp directory", (-1), (-358));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      String string0 = StringUtils.strip("*v&~RH%", "*v&~RH%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*v&~RH%";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[5] = "*v&~RH%";
      stringArray0[6] = "";
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("", 2581);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Failed to delete temp directory ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.mid("*v&~RH%", (-573), (-573));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing("E", "E", stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("E", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "E", (char[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase(" ", " ", false);
      assertEquals(0, int0);
      
      String string4 = StringUtils.unwrap("Failed to delete temp directory ", 'D');
      assertEquals("Failed to delete temp directory ", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Failed to create custom temp directoryFailed to create custom temp directory. The following paths could not be deleted (see suppressed exceptions for details): ", 'V');
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, 76, (-573));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringBefore(" ", "\n");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      String string0 = StringUtils.substringBefore(".r;|M,tks;XtZ_xjs", ".r;|M,tks;XtZ_xjs");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      String string0 = StringUtils.stripAccents("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("<!f", (String) null, (-837));
      assertEquals("<!f", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      long[] longArray0 = new long[1];
      String string2 = StringUtils.join(longArray0, 'M');
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals("0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.substring("<!f", (int) 'M');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)44;
      String string4 = StringUtils.join(byteArray0, ' ');
      assertArrayEquals(new byte[] {(byte)44, (byte)44, (byte)9, (byte)44}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals("44 44 9 44", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)44;
      floatArray0[1] = 2736.233F;
      floatArray0[2] = (float) (byte)44;
      floatArray0[3] = (float) (-837);
      floatArray0[4] = (float) ' ';
      floatArray0[5] = (float) (-2003);
      floatArray0[6] = (float) (byte)44;
      floatArray0[7] = 2566.0017F;
      floatArray0[8] = (float) (byte)44;
      String string5 = StringUtils.join(floatArray0, 'a', 157, 157);
      assertArrayEquals(new float[] {44.0F, 2736.233F, 44.0F, (-837.0F), 32.0F, (-2003.0F), 44.0F, 2566.0017F, 44.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.firstNonEmpty(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNull(string6);
      
      String string7 = "!EsMpv3EYW\\uws^Be9";
      String string8 = StringUtils.substringBefore("Index: ", string7);
      assertEquals("Index: ", string8);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      String string0 = StringUtils.substringBetween("+N@f.Tob", "+N@f.Tob");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+N@f.Tob", (String) null, (-11));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = "org.junitpioneer.jupiter.params.IntRange";
      String string2 = StringUtils.removeIgnoreCase("org.junitpioneer.jupiter.params.IntRange", "org.junitpioneer.jupiter.params.IntRange");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "+N@f.Tob", (CharSequence) "", 16);
      assertEquals(8, int0);
      
      String string3 = StringUtils.toRootUpperCase("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.deleteWhitespace((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.repeat("G2DX36IpO,9A", (String) null, 16);
      assertEquals("G2DX36IpO,9AG2DX36IpO,9AG2DX36IpO,9AG2DX36IpO,9AG2DX36IpO,9AG2DX36IpO,9AG2DX36IpO,9AG2DX36IpO,9AG2DX36IpO,9AG2DX36IpO,9AG2DX36IpO,9AG2DX36IpO,9AG2DX36IpO,9AG2DX36IpO,9AG2DX36IpO,9AG2DX36IpO,9A", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.defaultString((String) null, "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string7);
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.isEmpty("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("org", 'n');
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.leftPad("mj5?%~6r(Wv0vj-E", (-1), 'H');
      assertEquals("mj5?%~6r(Wv0vj-E", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "mj5?%~6r(Wv0vj-E", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("The String must not be empty", 2581);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Failed to delete temp directory ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.mid("mj5?%~6r(Wv0vj-E", 88, (-1));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing("", "The String must not be empty", (CharSequence[]) null);
      assertEquals("The String must not be empty", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "mj5?%~6r(Wv0vj-E", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "The String must not be empty", (CharSequence) string1);
      assertEquals((-1), int1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.substringBetween(string1, "The String must not be empty", "3`}B");
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase(".dBwn;qU`RB~8GoL=(V", ".dBwn;qU`RB~8GoL=(V");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "maxWith cannot be negative";
      String string3 = StringUtils.defaultString("maxWith cannot be negative");
      assertEquals("maxWith cannot be negative", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1995;
      char char0 = '!';
      String string4 = StringUtils.join(shortArray0, '!', (int) (short)1995, (int) (short)1995);
      assertArrayEquals(new short[] {(short)1995}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.wrap("maxWith cannot be negative", (String) null);
      assertEquals("maxWith cannot be negative", string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("", 2, ".dBwn;qU`RB~8GoL=(V");
      assertEquals(".d", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "maxWith cannot be negative";
      stringArray0[1] = "maxWith cannot be negative";
      stringArray0[2] = null;
      stringArray0[3] = ".d";
      stringArray0[4] = "maxWith cannot be negative";
      stringArray0[5] = "maxWith cannot be negative";
      stringArray0[6] = "maxWith cannot be negative";
      stringArray0[7] = "";
      String string7 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("maxWith cannot be negative", string7);
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "", 2, 14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      String string0 = StringUtils.stripStart("G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtils", "G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtils");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeFirst("G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtils", "G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtils");
      assertEquals("G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtils", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtils", "G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtils");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 256;
      intArray0[1] = 2;
      intArray0[2] = 58;
      intArray0[3] = 1586;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = (-1345);
      intArray0[6] = (-2481);
      intArray0[7] = (-432);
      intArray0[8] = 8;
      String string2 = StringUtils.join(intArray0, 'X', 1586, (-2481));
      assertArrayEquals(new int[] {256, 2, 58, 1586, Integer.MAX_VALUE, (-1345), (-2481), (-432), 8}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("a;I?qws<Gb");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("a;I?qws<Gb", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad("org.junitpioneer.vintage.ExpectedExceptionExtension", (-2713), "maxWith cannot be negative");
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Search and Replace array lengths don't match: ";
      stringArray0[1] = "Search and Replace array lengths don't match: ";
      stringArray0[2] = "Search and Replace array lengths don't match: ";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("eiv1y%|", " vs ");
      assertEquals("eiv1y%|", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.deleteWhitespace("Search and Replace array lengths don't match: ");
      assertEquals("SearchandReplacearraylengthsdon'tmatch:", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.trim("maxWith cannot be negative");
      assertEquals("maxWith cannot be negative", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.removeAll(" vs ", "Search and Replace array lengths don't match: ");
      assertEquals(" vs ", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = "{>3Wro-}`ChLMT`%Pr";
      // Undeclared exception!
      try { 
        Charset.forName("The Character must");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // The Character must
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "\r";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'o', (-1184), (-491));
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.appendIfMissing((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.left((String) null, 1599);
      assertNull(string3);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      String string4 = StringUtils.remove((String) null, 'o');
      assertNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) string0, 0, 32);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.startsWith(string0, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.abbreviate(" ", " ", 22, 6);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      String string0 = StringUtils.stripEnd(":ud?*.m;", "");
      assertEquals(":ud?*.m;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '\"', 5, 5);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.swapCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("\r", " ", "", (-1735));
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("\r", "\n");
      assertEquals("\r", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("maxWith cannot be negative", "\r");
      assertEquals("maxWith cannot be negative", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.normalizeSpace((String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, '\'');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      String string0 = StringUtils.strip("*v&~RH%", "*v&~RH%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*v&~RH%";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "*v&~RH%";
      stringArray0[5] = "*v&~RH%";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      longArray0[2] = (-2936L);
      longArray0[3] = 1L;
      String string1 = StringUtils.join(longArray0, '|');
      assertArrayEquals(new long[] {1L, 0L, (-2936L), 1L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals("1|0|-2936|1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "Strings must not be null";
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      String string2 = StringUtils.trimToEmpty("*v&~RH%");
      assertEquals("*v&~RH%", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((byte[]) null, '|');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.toRootLowerCase("?");
      assertEquals("?", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split("?", "Failed to create custom temp directoryFailed to create custom temp directory. The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)16;
      byteArray0[8] = (byte)16;
      String string2 = StringUtils.join(byteArray0, 'h', 4186, (-40));
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)16, (byte)16, (byte)16, (byte)16, (byte)16, (byte)16, (byte)16}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "^MdZ0QnK33OxR*M", (int) (byte)16, 102);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("[nM1Eb(.bmrE9,q9C^#");
      assertEquals(16, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("[nM1Eb(.bmrE9,q9C^#", stringArray0);
      assertEquals(16, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("[nM1Eb(.bmrE9,q9C^#");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.wrap("offset cannot be negative", "offset cannot be negative");
      assertEquals("offset cannot be negativeoffset cannot be negativeoffset cannot be negative", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "offset cannot be negativeoffset cannot be negativeoffset cannot be negative", (CharSequence) "offset cannot be negative");
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeAll("Object varargs must not be null", "wUFXC}*");
      assertEquals("Object varargs must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Object varargs must not be null");
      assertTrue(boolean0);
      
      String string2 = StringUtils.center("a%9I{>(o", 0, "");
      assertEquals("a%9I{>(o", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "@=Xf/";
      charSequenceArray0[2] = (CharSequence) "a%9I{>(o";
      charSequenceArray0[3] = (CharSequence) "offset cannot be negativeoffset cannot be negativeoffset cannot be negative";
      charSequenceArray0[4] = (CharSequence) "offset cannot be negative";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWithAny("wUFXC}*", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.substringAfterLast("Search and Replace array lengths don't match: ", "ExpectedException");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      String string0 = StringUtils.substringBetween("IoW8\"B~|E;)Jl", "IoW8\"B~|E;)Jl");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("IoW8\"B~|E;)Jl", (String) null, (-11));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeIgnoreCase("org.junitpioneer.jupiter.params.IntRange", "org.junitpioneer.jupiter.params.IntRange");
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare((String) null, "org.junitpioneer.jupiter.params.IntRange");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.toRootUpperCase("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToEmpty(" is not in the range '0' - '9'");
      assertEquals("is not in the range '0' - '9'", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBetween("is not in the range '0' - '9'", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNull(string5);
      
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWith("", " is not in the range '0' - '9'");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("Strings must not be null", (-1739), 56);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "]lank_bla<k_blak_2014", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String string0 = StringUtils.join(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.getIfBlank("gPUp", (Supplier<String>) null);
      assertEquals("gPUp", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("gPUp", "\n");
      assertEquals("gPUp", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.trim("\n");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("gPUp", "", "\n");
      assertEquals("gPUp", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "gPUp", (CharSequence) "gPUp");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.removeStart("\n", "gPUp");
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfterLast(stringArray0[0], "gPUp");
      assertEquals(2, stringArray0.length);
      assertNull(string6);
      
      String string7 = StringUtils.left("q?czCCBql}7f", 5);
      assertEquals("q?czC", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      String string8 = StringUtils.toRootUpperCase("org.apache.commons.lang3.StringUtils");
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      
      String string9 = StringUtils.left((String) null, 3);
      assertNull(string9);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "gPUp", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      charArray0[4] = '3';
      charArray0[5] = 'F';
      String string0 = StringUtils.leftPad(":YPY6F65P", 240);
      assertEquals("                                                                                                                                                                                                                                       :YPY6F65P", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("oBrPb00!");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      String string1 = StringUtils.replaceEach(":YPY6F65P", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(":YPY6F65P", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("The String must not be empty");
      assertEquals("TheStringmustnotbeempty", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.right("4t5r8}OFGg%tecnRu", 20);
      assertEquals("4t5r8}OFGg%tecnRu", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "                                                                                                                                                                                                                                       :YPY6F65P", (CharSequence) "4t5r8}OFGg%tecnRu", 20);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.defaultIfEmpty("TheStringmustnotbeempty", "org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("TheStringmustnotbeempty", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int1 = StringUtils.compareIgnoreCase("=i4 l", "Expected exception %s was not thrown.", false);
      assertEquals((-40), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "The String must not be empty");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean1 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.stripAccents("9rBe+2m");
      assertEquals("9rBe+2m", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootLowerCase("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("9rBe+2m");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'j');
      assertEquals("DISPLAY", string0);
      assertNotNull(string0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer1);
      assertNotSame(locale_Category0, locale_Category1);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertEquals(1, enumSet0.size());
      assertFalse(enumSet0.contains(locale_Category1));
      assertTrue(enumSet0.contains(locale_Category0));
      
      boolean boolean0 = enumSet0.add(locale_Category1);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertTrue(boolean0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category1));
      
      String string1 = StringUtils.substring("DISPLAY", 96, (-873));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'j';
      floatArray0[1] = (float) 96;
      String string2 = StringUtils.join(floatArray0, 'j', 0, 0);
      assertArrayEquals(new float[] {106.0F, 96.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("DISPLAY", "DISPLAY", "3':YW%.^f", 96);
      assertEquals("3':YW%.^f", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.toRootUpperCase("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.reverseDelimited("", 'j');
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.unwrap(". The following paths could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details): ", 'j');
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details): ", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.join(floatArray0, 'j', 1022, 0);
      assertArrayEquals(new float[] {106.0F, 96.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      
      String string8 = StringUtils.normalizeSpace("");
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string4));
      assertNotNull(string8);
      
      String string9 = StringUtils.substringAfterLast("io", "");
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string4));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 1686L;
      longArray0[2] = (-1063L);
      String string0 = StringUtils.join(longArray0, 'w');
      assertArrayEquals(new long[] {0L, 1686L, (-1063L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("0w1686w-1063", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "0w1686w-1063", (CharSequence) "0w1686w-1063");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "0w1686w-1063", (CharSequence) "0w1686w-1063", (-1));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "0w1686w-1063";
      stringArray0[1] = "0w1686w-1063";
      stringArray0[2] = "0w1686w-1063";
      stringArray0[3] = "0w1686w-1063";
      stringArray0[4] = "0w1686w-1063";
      stringArray0[5] = "0w1686w-1063";
      stringArray0[6] = "0w1686w-1063";
      stringArray0[7] = "0w1686w-1063";
      stringArray0[8] = "0w1686w-1063";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("0w1686w-1063", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = "m";
      String string1 = StringUtils.prependIfMissingIgnoreCase("m", "m", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("m", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("m", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = "_d%PEG>O";
      String string3 = StringUtils.defaultIfEmpty("_d%PEG>O", (String) null);
      assertEquals("_d%PEG>O", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "u", 2, 20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("n.");
      assertFalse(boolean0);
      
      String string0 = StringUtils.center("n.", 32);
      assertEquals("               n.               ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("X", "X", (-1825));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeIgnoreCase("X", "X");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("X", (String) null);
      assertEquals(1, int0);
      
      String string1 = StringUtils.toRootUpperCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.LF;
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("}%9\u0004&r  J", "X", (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.stripStart("%R`X;jl=g*%q)9(", "\n");
      assertEquals("%R`X;jl=g*%q)9(", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      String string0 = StringUtils.repeat("p{InCombiningDiacriticalMarks}+", "junit", 19);
      assertEquals("p{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("p{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "junit", (CharSequence) "p{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, '9');
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.truncate("p{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+", 427);
      assertEquals("p{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("Y\\^7B!eiy>?Azorg.apache.commons.lang3.StringUtils", 'x');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.substringBetween("4~-e]K7Gjr$hr,/=6b", "p{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacri", "]wiUsK5{f2xZhY_k:jG uq\",:9Q=R{(=Gnz");
      assertNull(string3);
      
      String string4 = StringUtils.defaultString("", "p{InCombiningDiacriticalMarks}+");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.center("p{InCombiningDiacriticalMarks}+", 427, '~');
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~p{InCombiningDiacriticalMarks}+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.prependIfMissingIgnoreCase("", (CharSequence) null, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.unwrap("p{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacri", '/');
      assertEquals("p{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacri", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      float[] floatArray0 = new float[0];
      String string8 = StringUtils.join(floatArray0, '}', (-1), (-1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertNotNull(string8);
      
      String string9 = StringUtils.normalizeSpace("Y\\^7B!e");
      assertEquals("Y\\^7B!e", string9);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertNotNull(string9);
      
      String string10 = StringUtils.substringAfterLast("b;~@l>^y/!,$~/w)0", ". The following paths could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals("", string10);
      assertTrue(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("w)QrKUW", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Om");
      assertEquals("Om", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("Om");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Om");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-35);
      String string1 = StringUtils.getDigits("Threshold must not be negative");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "Om", (int) (byte) (-35), (int) (byte) (-95));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase(" vs ", "Om", false);
      assertEquals((-79), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.join(charArray0, 'Z');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      String string0 = StringUtils.defaultString("cYZl;Pn)8h/Hdl", "B");
      assertEquals("cYZl;Pn)8h/Hdl", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty("B");
      assertEquals("B", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "B", "B");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "B";
      charSequenceArray0[1] = (CharSequence) "The String must not be empty";
      charSequenceArray0[2] = (CharSequence) "cYZl;Pn)8h/Hdl";
      charSequenceArray0[3] = (CharSequence) "<X>^hq|Shwzs%80zaj!";
      charSequenceArray0[4] = (CharSequence) "The String must not be empty";
      boolean boolean1 = StringUtils.isAlphanumeric(charSequenceArray0[0]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.stripAccents("B");
      assertEquals("B", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("r must not be null", 3, "B");
      assertEquals("r must not be null", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      String string4 = StringUtils.join((List<?>) linkedList0, '3', 3, 3);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      boolean boolean2 = StringUtils.endsWith("<X>^hq|Shwzs%80zaj!", "");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string5 = StringUtils.abbreviateMiddle("?|mm%z", "zD?Z-Uq~?q", 3);
      assertEquals("?|mm%z", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.startsWithAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      String string0 = "mj5?%~6r(Wv0vj-Eorg.junitpioneer.jupiter.TempDirectory$CloseablePath";
      String string1 = StringUtils.trimToEmpty("mj5?%~6r(Wv0vj-Eorg.junitpioneer.jupiter.TempDirectory$CloseablePath");
      assertEquals("mj5?%~6r(Wv0vj-Eorg.junitpioneer.jupiter.TempDirectory$CloseablePath", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("mj5?%~6r(Wv0vj-Eorg.junitpioneer.jupiter.TempDirectory$CloseablePath");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Locale must not be null", "Locale must not be null", "Locale must not be null");
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("`b`q*ty9O?JK", "mj5?%~6r(Wv0vj-Eorg.junitpioneer.jupiter.TempDirectory$CloseablePath");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 68
         // mj5?%~6r(Wv0vj-Eorg.junitpioneer.jupiter.TempDirectory$CloseablePath
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      String string0 = StringUtils.stripEnd("hx", "\"^s`c'=uW");
      assertEquals("hx", string0);
      assertNotNull(string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("hx"));
      
      Iterator<String> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("hx"));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Failed to create custom temp directory";
      stringArray0[1] = " in an array of ";
      stringArray0[2] = "+|z";
      stringArray0[3] = "Failed to create custom temp directory";
      stringArray0[4] = "hx";
      stringArray0[5] = "Failed to create custom temp directory";
      stringArray0[6] = "hx";
      stringArray0[7] = "Failed to create custom temp directory";
      String string1 = StringUtils.replaceEach("hx", stringArray0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("hx", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substring(" in an array of ", 76, 57);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Threshold must not be negative");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      String string0 = StringUtils.removeStart("Failed to create custom temp directory", "Failed to create custom temp directory");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("?j/PN_9:`[", 6);
      assertEquals("?j/PN_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Failed to create custom temp directory", "", 6);
      assertEquals(38, int0);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.join((float[]) null, 'H', (-1), (-1));
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, " ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.join((float[]) null, 'n', 0, 0);
      assertNull(string0);
      
      String string1 = StringUtils.replace((String) null, "$?", "3':YW%.^f", 39);
      assertNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("eiv1y%|");
      assertEquals("EIV1Y%|", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("eiv1y%|", (String) null);
      assertEquals("eiv1y%|", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart(", Length: ", "org.apache.commons.lang3.RegExUtils");
      assertEquals(", Length: ", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.reverseDelimited((String) null, 'q');
      assertNull(string5);
      
      String string6 = StringUtils.unwrap("org.apache.commons.lang3.RegExUtils", "Search and Replace array lengths don't match: ");
      assertEquals("org.apache.commons.lang3.RegExUtils", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOf((CharSequence) "HBAXV\",7@CjR6E+", (CharSequence) "eiv1y%|", 40);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 47);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.wrapIfMissing((String) null, 'n');
      assertNull(string0);
      
      String string1 = StringUtils.mid((String) null, 886, 605);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "Backup");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      String string0 = StringUtils.substringBetween("iy>?Az", "]1J&^z'|B");
      assertNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("]1J&^z'|B", (CharSequence) null, (-2318));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "G2DX36IpO,9A", 161);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("iy>?Azorg.apache.commons.lang3.StringUtils", "Y\\^7B!e");
      assertEquals("Y\\^7B!eiy>?Azorg.apache.commons.lang3.StringUtilsY\\^7B!e", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("iy>?Azorg.apache.commons.lang3.StringUtils", 1600);
      assertEquals("tilsiy>?Azorg.apache.commons.lang3.StringU", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 161;
      String string3 = StringUtils.join(floatArray0, 'Z', (-1074), (-1788));
      assertArrayEquals(new float[] {161.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("?", "iy>?Azorg.apache.commons.lang3.StringUtils");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      stringArray0[0] = "iy>?Azorg.apache.commons.lang3.StringUtils";
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string5 = StringUtils.joinWith("JubTf}K9*F?", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("iy>?Azorg.apache.commons.lang3.StringUtilsJubTf}K9*F?", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("Minimum abbreviation width is %d", 20, 'B');
      assertEquals("Minimum abbreviation width is %d", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.removeStartIgnoreCase("<zJ.:F", "JubTf}K9*F?");
      assertEquals("<zJ.:F", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      String string0 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("?j/PN_9:`[", 6, 6);
      assertEquals("9:`[", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string1 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 6;
      String string2 = StringUtils.truncate("?j/PN_9:`[", 6, 6);
      assertEquals("9:`[", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)42;
      byteArray0[0] = (byte)42;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'M', 6, (int) (byte)42);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "maxWith cannot be negative");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("maxWith cannot be negative"));
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) locale_Category0);
      assertNotNull(predicate0);
      
      boolean boolean0 = hashSet0.removeIf(predicate0);
      assertFalse(boolean0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("maxWith cannot be negative"));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) hashSet0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(hashSet0.contains("maxWith cannot be negative"));
      assertFalse(list0.contains("maxWith cannot be negative"));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "maxWith cannot be negative", "VqLF7");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.replaceIgnoreCase("maxWith cannot be negative", ":8o%iW0X", "", 122);
      assertEquals("maxWith cannot be negative", string0);
      assertNotNull(string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.capitalize("iy>?Azorg.apache.commons.lang3.StringUtilsY\\^7B!e");
      assertEquals("Iy>?Azorg.apache.commons.lang3.StringUtilsY\\^7B!e", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isNumericSpace("");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = StringUtils.containsAny((CharSequence) ":8o%iW0X", (CharSequence) "\n");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      String string0 = StringUtils.substringBetween("+N@f.Tob", "+N@f.Tob");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+N@f.Tob", (String) null, (-11));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.overlay("+N@f.Tob", "", 76, 2);
      assertEquals("+N", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits(". The following paths could not be deleted (see suppressed exceptions for details): Failed to create custom temp directoryFailed to create custom temp directory");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "", Integer.MAX_VALUE, 9);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "");
      assertEquals(46, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getIfBlank("\n", (Supplier<String>) null);
      assertNull(string1);
      
      String string2 = StringUtils.chop("The String must not be empty");
      assertEquals("The String must not be empt", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.trim("The String must not be empt");
      assertEquals("The String must not be empt", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.removeStart("Strings must not be null", "org.apache.commons.lang3.StringUtils");
      assertEquals("Strings must not be null", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfterLast("", "");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.left("/m#3SiUm!lVQ2", (-733));
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String string8 = StringUtils.toRootUpperCase("");
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertNotNull(string8);
      
      String string9 = StringUtils.left("", 3);
      assertEquals("", string9);
      assertTrue(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\n", (CharSequence) "Strings must not be null");
      assertFalse(boolean0);
      
      String string10 = StringUtils.rightPad((String) null, (-1796), "v7kRp8");
      assertNull(string10);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string11 = StringUtils.appendIfMissing("", (CharSequence) null, charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("", string11);
      assertTrue(string11.equals((Object)string6));
      assertTrue(string11.equals((Object)string9));
      assertTrue(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string2));
      assertTrue(string11.equals((Object)string7));
      assertTrue(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string5));
      assertTrue(string11.equals((Object)string8));
      assertNotNull(string11);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Strings must not be null";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, (-2640), (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Be_EV5msb&kLg");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("'4>#LM*MDyu4M9T^@");
      assertEquals(17, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.deleteWhitespace("Be_EV5msb&kLg");
      assertEquals("Be_EV5msb&kLg", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("r>P4aMSMD", 0, '3');
      assertEquals("r>P4aMSMD", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = 'F';
      charArray0[2] = '3';
      charArray0[3] = 'F';
      charArray0[4] = 'F';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "r>P4aMSMD", charArray0);
      assertArrayEquals(new char[] {'3', 'F', '3', 'F', 'F'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad("Failed to delete temp directory ", 0);
      assertEquals("Failed to delete temp directory ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Be_EV5msb&kLg");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.mid("r>P4aMSMD", 0, 16);
      assertEquals("r>P4aMSMD", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.prependIfMissing("'4>#LM*MDyu4M9T^@", "Failed to delete temp directory ", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("Failed to delete temp directory '4>#LM*MDyu4M9T^@", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '3';
      charArray1[1] = 'E';
      String string5 = StringUtils.left("Mh9vQk17ms,ZQ<d9", 16);
      assertEquals("Mh9vQk17ms,ZQ<d9", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "r>P4aMSMD", (CharSequence) "Failed to delete temp directory ");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      String string0 = StringUtils.stripAccents("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("G2DX36IpO,9A");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("org.junitpioneer.jupiter.RepeatFailedTestExtension", "EE");
      assertEquals("org.junitpioneer.jupiter.RepeatFailedTestExtension", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("JY$", 8, "G2DX36IpO,9A");
      assertEquals("JY$G2DX3", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isMixedCase("G2DX36IpO,9A");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.stripToNull("\r");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", (char[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceEachRepeatedly("org.junitpioneer.vintage.ExpectedExceptionExtension", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.rotate("The Character must", (-1));
      assertEquals("he Character mustT", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "G2DX36IpO,9A", 161);
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("iy>?Azorg.apache.commons.lang3.StringUtils", "G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("iy>?Azorg.apache.commons.lang3.StringUtils", 1600);
      assertEquals("tilsiy>?Azorg.apache.commons.lang3.StringU", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[2];
      String string2 = StringUtils.removeIgnoreCase("p{InCombiningDiacriticalMarks}+", "`D0We;Fg;'AGwL ");
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "iy>?Azorg.apache.commons.lang3.StringUtils", (CharSequence) "G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A", 161);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.toRootUpperCase("q6");
      assertEquals("Q6", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull("ia&$\"UDC_j?&g]{ ");
      assertEquals("ia&$\"UDC_j?&g]{", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A", (CharSequence) "iy>?Azorg.apache.commons.lang3.StringUtils");
      assertEquals(24, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.joinWith("tilsiy>?Azorg.apache.commons.lang3.StringU", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("tilsiy>?Azorg.apache.commons.lang3.StringU", string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToNull("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.substring("S(Ja0a", 322, 1600);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      String string8 = StringUtils.removeEnd("iy>?Az", (String) null);
      assertEquals("iy>?Az", string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      
      String string9 = StringUtils.substringBeforeLast("1?mHKs", "`D0We;Fg;'AGwL ");
      assertEquals("1?mHKs", string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "1?mHKs", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string10 = StringUtils.leftPad("iy>?Az", (-1142));
      assertEquals("iy>?Az", string10);
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string2));
      assertNotNull(string10);
      
      String[] stringArray1 = StringUtils.split("|@%Ds|", '!');
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "|@%Ds|", (String) null);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      byte[] byteArray0 = new byte[0];
      String string11 = StringUtils.join(byteArray0, '[');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string11);
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string0));
      assertNotNull(string11);
      
      String string12 = StringUtils.replaceIgnoreCase((String) null, "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", "a;8%67MP4BTlwv");
      assertNull(string12);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string0 = StringUtils.leftPad("Threshold must not be negative\n\r", 0, "Threshold must not be negative\n\r");
      assertEquals("Threshold must not be negative\n\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Threshold must not be negative\n\r", "Threshold must not be negative\n\r");
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((short[]) null, '*', (-2551), 0);
      assertNull(string1);
      
      String string2 = StringUtils.overlay("Minimum abbreviation width is %d", "Index: #3*!y", 0, 4370);
      assertEquals("Index: #3*!y", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", (-1), Integer.MAX_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      String string0 = StringUtils.unwrap("", '\"');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "", 5);
      assertEquals((-1), int0);
      
      String string1 = "z";
      String string2 = StringUtils.deleteWhitespace("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isEmpty("g@?2sk@IG(TvnY!t");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("Fpd%-", '@');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        Charset.forName(", ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // , 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("\r", " ", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-3108));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceFirst(". The following paths could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details): ", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details): ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replacePattern("1\"b>WQL;IGZT%h", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "\r");
      assertEquals("1\"b>WQL;IGZT%h", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "&G00_e\"rj_2p6_zcG");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "1\"b>WQL;IGZT%h";
      objectArray0[1] = (Object) "Test '%s' was supposed to run no longer than %d ms but ran %d ms.";
      objectArray0[2] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "\r";
      objectArray0[5] = (Object) "pjG uq\",:9Q=R{(=Gnz";
      String string5 = StringUtils.join(objectArray0, "y|mKd^Ac1X", 5309, 0);
      assertEquals(6, objectArray0.length);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details): ";
      String string6 = StringUtils.appendIfMissing("Minimum abbreviation width is %d", "pjG uq\",:9Q=R{(=Gnz", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("Minimum abbreviation width is %d", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) " ", (CharSequence) "\r");
      assertFalse(boolean0);
      
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      String string0 = StringUtils.stripToNull("\r");
      assertNull(string0);
      
      String string1 = StringUtils.unwrap((String) null, '}');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(". The following paths could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details): ", "codefx", "codefx");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2326.0);
      doubleArray0[1] = (-3296.65406);
      doubleArray0[2] = 3479.064282614;
      doubleArray0[3] = (-2731.0);
      doubleArray0[4] = (-197.0527579797);
      String string0 = StringUtils.join(doubleArray0, 'E', 0, 0);
      assertArrayEquals(new double[] {(-2326.0), (-3296.65406), 3479.064282614, (-2731.0), (-197.0527579797)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "$MVn~5viw";
      String[] stringArray0 = StringUtils.substringsBetween("1Bjzcv&ler0P", "DISPLAY", "$MVn~5viw");
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", 34, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", "Object varargs must not be null");
      assertEquals(0, int0);
      
      int int1 = StringUtils.compare((String) null, "\n", true);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("\r");
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.replaceOnce("\n", " ", "\r");
      assertEquals("\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "G2DX36IpO,9A", 161);
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("iy>?Azorg.apache.commons.lang3.StringUtils", "G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("iy>?Azorg.apache.commons.lang3.StringUtils", 1600);
      assertEquals("tilsiy>?Azorg.apache.commons.lang3.StringU", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[2];
      String string2 = StringUtils.removeIgnoreCase("p{InCombiningDiacriticalMarks}+", "`D0We;Fg;'AGwL ");
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "iy>?Azorg.apache.commons.lang3.StringUtils", (CharSequence) "G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A", 161);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.toRootUpperCase("q6");
      assertEquals("Q6", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull("ia&$\"UDC_j?&g]{ ");
      assertEquals("ia&$\"UDC_j?&g]{", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A", (CharSequence) "iy>?Azorg.apache.commons.lang3.StringUtils");
      assertEquals(24, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.joinWith("tilsiy>?Azorg.apache.commons.lang3.StringU", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("tilsiy>?Azorg.apache.commons.lang3.StringU", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToNull("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.substring("S(Ja0a", 322, 1600);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      String string8 = StringUtils.removeEnd("iy>?Az", (String) null);
      assertEquals("iy>?Az", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      
      String string9 = StringUtils.substringBeforeLast("1?mHKs", "`D0We;Fg;'AGwL ");
      assertEquals("1?mHKs", string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "1?mHKs", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string10 = StringUtils.leftPad("iy>?Az", (-1142));
      assertEquals("iy>?Az", string10);
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertNotNull(string10);
      
      String[] stringArray1 = StringUtils.split("|@%Ds|", '!');
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "|@%Ds|", (String) null);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string11 = StringUtils.removeFirst("ia&$\"UDC_j?&g]{ ", "");
      assertEquals("ia&$\"UDC_j?&g]{ ", string11);
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string4));
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      String string0 = StringUtils.strip("*v&~RH%", "*v&~RH%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*v&~RH%";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "*v&~RH%";
      stringArray0[5] = "*v&~RH%";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      String string1 = StringUtils.join(doubleArray0, 'p');
      assertArrayEquals(new double[] {1.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals("1.0p1.0p0.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", (String) null, "3");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[9];
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[5] = object2;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) 1.0;
      objectArray0[5] = (Object) "*v&~RH%";
      objectArray0[6] = object0;
      objectArray0[7] = object1;
      objectArray0[8] = (Object) "";
      String string3 = StringUtils.joinWith((String) null, objectArray0);
      assertEquals(9, objectArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("", (-1), 'B');
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("*v&~RH%", "`!%eYT5=Ff");
      assertEquals("*v&~RH%", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'H';
      charArray0[3] = '$';
      charArray0[4] = 'p';
      charArray0[5] = 'p';
      charArray0[6] = 'B';
      charArray0[7] = 'p';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'p', 'p', 'H', '$', 'p', 'p', 'B', 'p'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)89;
      byteArray0[4] = (byte) (-1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) " ^0(Gv<Zc#]n9";
      objectArray0[1] = (Object) (byte)35;
      objectArray0[2] = (Object) (byte) (-1);
      objectArray0[3] = (Object) (byte)81;
      objectArray0[4] = (Object) (byte)89;
      objectArray0[5] = (Object) (byte)89;
      objectArray0[6] = (Object) (byte) (-1);
      objectArray0[7] = (Object) (byte)81;
      String string0 = StringUtils.joinWith(" ^0(Gv<Zc#]n9", objectArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(" ^0(Gv<Zc#]n9 ^0(Gv<Zc#]n935 ^0(Gv<Zc#]n9-1 ^0(Gv<Zc#]n981 ^0(Gv<Zc#]n989 ^0(Gv<Zc#]n989 ^0(Gv<Zc#]n9-1 ^0(Gv<Zc#]n981", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) " ^0(Gv<Zc#]n9";
      charSequenceArray0[1] = (CharSequence) " ^0(Gv<Zc#]n9 ^0(Gv<Zc#]n935 ^0(Gv<Zc#]n9-1 ^0(Gv<Zc#]n981 ^0(Gv<Zc#]n989 ^0(Gv<Zc#]n989 ^0(Gv<Zc#]n9-1 ^0(Gv<Zc#]n981";
      charSequenceArray0[2] = (CharSequence) " vs ";
      charSequenceArray0[3] = (CharSequence) " ^0(Gv<Zc#]n9 ^0(Gv<Zc#]n935 ^0(Gv<Zc#]n9-1 ^0(Gv<Zc#]n981 ^0(Gv<Zc#]n989 ^0(Gv<Zc#]n989 ^0(Gv<Zc#]n9-1 ^0(Gv<Zc#]n981";
      charSequenceArray0[4] = (CharSequence) " ^0(Gv<Zc#]n9 ^0(Gv<Zc#]n935 ^0(Gv<Zc#]n9-1 ^0(Gv<Zc#]n981 ^0(Gv<Zc#]n989 ^0(Gv<Zc#]n989 ^0(Gv<Zc#]n9-1 ^0(Gv<Zc#]n981";
      String string1 = StringUtils.prependIfMissingIgnoreCase(" vs ", " vs ", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(" vs ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.reverseDelimited("Strings must not be null", ']');
      assertEquals("Strings must not be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Strings must not be null", (char[]) null);
      assertEquals((-1), int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(" vs "));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains(" vs "));
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, 'o');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains(" vs "));
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "\r";
      String string0 = StringUtils.repeat("}N*1jou", (String) null, 44);
      assertEquals("}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou", string0);
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) "}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou}N*1jou";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.normalizeSpace("\r");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'G');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "The String must not be empty");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.stripAccents("9rBe+2m");
      assertEquals("9rBe+2m", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      String string0 = StringUtils.chomp("X5ODY*|`Yg4N<i3`K");
      assertEquals("X5ODY*|`Yg4N<i3`K", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("\n");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.leftPad("mj5?%~6r(Wv0vj-E", (-1), 'H');
      assertEquals("mj5?%~6r(Wv0vj-E", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "mj5?%~6r(Wv0vj-E", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.chomp("*XRvLxR]SMSaJ");
      assertEquals("*XRvLxR]SMSaJ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.startsWithAny("mj5?%~6r(Wv0vj-E", (CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      String string0 = StringUtils.replace("g@?2sk@IG(TvnY!t", "g@?2sk@IG(TvnY!t", (String) null, 76);
      assertEquals("g@?2sk@IG(TvnY!t", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("f5[sM|T#pMK", 0);
      assertEquals("f5[sM|T#pMK", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceFirst("f5[sM|T#pMK", "Minimum abbreviation width is %d", "g@?2sk@IG(TvnY!t");
      assertEquals("f5[sM|T#pMK", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "f5[sM|T#pMK";
      stringArray0[1] = "g@?2sk@IG(TvnY!t";
      String string3 = StringUtils.replacePattern("f5[sM|T#pMK", "&G00_e\"rj_2p6_zcG", "g@?2sk@IG(TvnY!t");
      assertEquals("f5[sM|T#pMK", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "&G00_e\"rj_2p6_zcG", (CharSequence) "&G00_e\"rj_2p6_zcG");
      assertTrue(boolean0);
      
      String string4 = StringUtils.join((Object[]) stringArray0, "f5[sM|T#pMK", 76, (-975));
      assertEquals(2, stringArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.appendIfMissing("Minimum abbreviation width is %d", "f5[sM|T#pMK", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("Minimum abbreviation width is %df5[sM|T#pMK", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      String string0 = StringUtils.wrap("\"6\"6", 'e');
      assertEquals("e\"6\"6e", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Threshold must not be negative", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("Threshold must not be negative", "B");
      assertEquals(18, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.substringBetween("", ":\"<X@-L~m");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(" vs ", "org.junitpioneer.jupiter.TempDirectory$CloseablePath", "MjV'J2J&<>[%MCp*_$");
      assertNull(stringArray0);
      
      String string2 = StringUtils.truncate("}O(jxatKvX=VosdfZ", 883, 883);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray1 = new String[0];
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "Search and Replace array lengths don't match: ");
      assertSame(stringArray1, stringArray2);
      assertSame(stringArray2, stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.replace("Array element ", (String) null, "B", (-683));
      assertEquals("Array element ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray3 = StringUtils.split("eiv1y%|");
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(1, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      String string0 = StringUtils.removeEnd(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("oBrPb!");
      assertEquals("oBrPb!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[1] = 'F';
      int int0 = StringUtils.lastOrdinalIndexOf("oBrPb!", "oBrPb!", 78);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "oBrPb!", 656);
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("Failed to create custom temp directoryFailed to create custom temp directory", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details): Failed to create custom temp directoryFailed to create custom temp directory. The following paths could not be deleted (see suppressed exceptions for details): ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("oBrPb!", 694);
      assertEquals("rPb!oB", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("iy>?Azorg.apache.commons.lang3.StringUtils", 1568, 1568);
      assertEquals("iy>?Azorg.apache.commons.lang3.StringUtils", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[0];
      String string5 = StringUtils.joinWith("LaunchTime", objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("Minimum abbreviation width is %d", 536, 'F');
      assertEquals("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFMinimum abbreviation width is %d", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.removeStartIgnoreCase("L%FZa>!Q", "iy>?Azorg.apache.commons.lang3.StringUtils");
      assertEquals("L%FZa>!Q", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      String string0 = StringUtils.removeEnd(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("oBrPb!");
      assertEquals("oBrPb!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf(". The following paths could not be deleted (see suppressed exceptions for details): ", "oBrPb!", (-2318));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.getIfEmpty(". The following paths could not be deleted (see suppressed exceptions for details): ", (Supplier<String>) null);
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details): ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("?|mm%z$.7iL9s;", 'N');
      assertEquals("?|mm%z$.7iL9s;", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "?|mm%z$.7iL9s;", (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      String string4 = StringUtils.repeat("org.junitpioneer.jupiter.TempDirectory$CloseablePathmj5?%~6r(Wv0vj-E", (-1));
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("oBrPb!"));
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("oBrPb!"));
      
      String string5 = StringUtils.join(iterator0, 'F');
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("oBrPb!"));
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      String string0 = StringUtils.removeEnd(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("oBrPb!");
      assertEquals("oBrPb!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.getIfEmpty(". The following paths could not be deleted (see suppressed exceptions for details): ", (Supplier<String>) null);
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details): ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[0];
      String string3 = StringUtils.capitalize("oBrPb!");
      assertEquals("OBrPb!", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "oBrPb!", (CharSequence) "OBrPb!");
      assertEquals(0, int0);
      
      String string4 = StringUtils.trim("oBrPb!");
      assertEquals("oBrPb!", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "oBrPb!", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", " ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\n", (char[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.leftPad("mj5?%~6r(Wv0vj-E", (-1), 'H');
      assertEquals("mj5?%~6r(Wv0vj-E", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mj5?%~6r(Wv0vj-E";
      stringArray0[1] = "mj5?%~6r(Wv0vj-E";
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "mj5?%~6r(Wv0vj-E";
      stringArray1[1] = "mj5?%~6r(Wv0vj-E";
      String string1 = "hq)X9WY%Q\\Nc";
      stringArray1[2] = "hq)X9WY%QNc";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("mj5?%~6r(Wv0vj-E", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 2 vs 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      String string0 = StringUtils.difference("B$Hz<", (String) null);
      assertEquals("B$Hz<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.remove(" ", "G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtils");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) " ", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.getIfBlank("G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtils", (Supplier<String>) null);
      assertEquals("G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtils", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("M(}gE#G~UX");
      assertEquals("M(}gE#G~U", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("M(}gE#G~U", "G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtils");
      assertEquals("M(}gE#G~U", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("vMYu", "M(}gE#G~UX", "0x;QXK#N\"q[Z3f^j%{");
      assertEquals("vMYu", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate("", "", 54);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      int int0 = StringUtils.length("0x;QXK#N\"q[Z3f^j%{");
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle((String) null, "x>", (-2003));
      assertNull(string1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-2003);
      longArray0[1] = (long) (-2003);
      longArray0[2] = (long) (-2003);
      longArray0[3] = (long) (-2003);
      longArray0[4] = (long) (-2003);
      longArray0[5] = (long) (-2003);
      longArray0[6] = (long) (-2003);
      longArray0[7] = (long) (-2003);
      longArray0[8] = (long) (-2003);
      String string2 = StringUtils.join(longArray0, ' ');
      assertArrayEquals(new long[] {(-2003L), (-2003L), (-2003L), (-2003L), (-2003L), (-2003L), (-2003L), (-2003L), (-2003L)}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals("-2003 -2003 -2003 -2003 -2003 -2003 -2003 -2003 -2003", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-2003 -2003 -2003 -2003 -2003 -2003 -2003 -2003 -2003";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.trimToEmpty("}3/x");
      assertEquals("}3/x", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)13;
      String string4 = StringUtils.join(byteArray0, ',');
      assertArrayEquals(new byte[] {(byte)44, (byte)13}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals("44,13", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("C\"[RGJJ4<F4ubwa7&R");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(12, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      Class<String> class0 = String.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      String string5 = StringUtils.join((Iterable<?>) serviceLoader0, ',');
      assertEquals("", string5);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      String string6 = StringUtils.lowerCase("-2003 -2003 -2003 -2003 -2003 -2003 -2003 -2003 -2003");
      assertEquals("-2003 -2003 -2003 -2003 -2003 -2003 -2003 -2003 -2003", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Failed to create custom temp directory");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      String string0 = StringUtils.replace("g@?2sk@IG(TvnY!t", "g@?2sk@IG(TvnY!t", (String) null, 76);
      assertEquals("g@?2sk@IG(TvnY!t", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("f5[sM|T#pMK", 0);
      assertEquals("f5[sM|T#pMK", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceFirst("f5[sM|T#pMK", "Minimum abbreviation width is %d", "g@?2sk@IG(TvnY!t");
      assertEquals("f5[sM|T#pMK", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("DUPAy*d;T`ciF0", "?", 54);
      assertEquals("DUPAy*d;T`ciF0", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.length("DUPAy*d;T`ciF0");
      assertEquals(14, int0);
      
      String string4 = StringUtils.valueOf((char[]) null);
      assertNull(string4);
      
      String string5 = StringUtils.abbreviate("g@?2sk@IG(TvnY!t", 54);
      assertEquals("g@?2sk@IG(TvnY!t", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string0 = StringUtils.leftPad("Threshold must not be negative\n\r", 0, "Threshold must not be negative\n\r");
      assertEquals("Threshold must not be negative\n\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString("Threshold must not be negative\n\r");
      assertEquals("Threshold must not be negative\n\r", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("Threshold must not be negative\n\r", "M(}gE#G~UX");
      assertEquals("Threshold must not be negative\n\r", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.getIfBlank("{>3Wro-}`ChLMT`%Pr(", (Supplier<String>) null);
      assertEquals("{>3Wro-}`ChLMT`%Pr(", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.chop("{>3Wro-}`ChLMT`%Pr(");
      assertEquals("{>3Wro-}`ChLMT`%Pr", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("{>3Wro-}`ChLMT`%Pr", "Minimum abbreviation width is %d");
      assertEquals("{>3Wro-}`ChLMT`%Pr", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceOnceIgnoreCase("GFl", "Expected exactly one annotation to provide an ArgumentSource, found %d.", "Minimum abbreviation width is %d");
      assertEquals("GFl", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.abbreviate("{>3Wro-}`ChLMT`%Pr", "{>3Wro-}`ChLMT`%Pr", 54);
      assertEquals("{>3Wro-}`ChLMT`%Pr", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      int int1 = StringUtils.length("Threshold must not be negative\n\r");
      assertEquals(32, int1);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      charArray0[1] = 'x';
      charArray0[2] = 'e';
      charArray0[3] = '/';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      String string8 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'v', 'x', 'e', '/', 'l', 'l'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("vxe/ll", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      
      String string9 = StringUtils.abbreviate("Minimum abbreviation width is %d", 32);
      assertEquals("Minimum abbreviation width is %d", string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "The String must not be empty");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean1 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.stripAccents("9rBe+2m");
      assertEquals("9rBe+2m", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray1 = new CharSequence[4];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "The String must not be empty";
      charSequenceArray1[1] = (CharSequence) "";
      charSequenceArray1[2] = (CharSequence) "";
      String string2 = StringUtils.chomp("", "");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray1[3] = (CharSequence) "";
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(4, charSequenceArray1.length);
      assertFalse(boolean2);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      String string0 = StringUtils.removeEnd(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("oBrPb!");
      assertEquals("oBrPb!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf(". The following paths could not be deleted (see suppressed exceptions for details): ", "oBrPb!", (-2318));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.getIfEmpty(". The following paths could not be deleted (see suppressed exceptions for details): ", (Supplier<String>) null);
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details): ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("?|mm%z$.7iL9s;", 'N');
      assertEquals("?|mm%z$.7iL9s;", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "?|mm%z$.7iL9s;", (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.trimToEmpty(";``ZXE7F^L-;7P+dT<G");
      assertEquals(";``ZXE7F^L-;7P+dT<G", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      byte[] byteArray0 = new byte[0];
      String string5 = StringUtils.join(byteArray0, ')');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      String string0 = StringUtils.stripToNull("K<[;.");
      assertEquals("K<[;.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((List<?>) null, 'R', (-2302), 106);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.endsWith("K<[;.", "K<[;.");
      assertTrue(boolean0);
      
      String string2 = StringUtils.abbreviateMiddle((String) null, "io", 40);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "io";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.CharSequenceUtils";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "K<[;.";
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[2], charSequenceArray0[5]);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.lowerCase("R9;@WfLHpvIIg");
      assertEquals("r9;@wflhpviig", string3);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = StringUtils.join((List<?>) arrayList0, 'O', (int) 'O', (int) 'O');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains('O'));
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      String string0 = StringUtils.defaultString("cYZl;Pn)8h/Hdl", "B");
      assertEquals("cYZl;Pn)8h/Hdl", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty("B");
      assertEquals("B", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "B", "B");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "B";
      charSequenceArray0[1] = (CharSequence) "The String must not be empty";
      charSequenceArray0[2] = (CharSequence) "cYZl;Pn)8h/Hdl";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "The String must not be empty";
      boolean boolean1 = StringUtils.endsWithAny("The String must not be empty", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.stripAccents("B");
      assertEquals("B", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("r must not be null", 3, "B");
      assertEquals("r must not be null", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("B"));
      
      String string4 = StringUtils.join((List<?>) linkedList0, '3', 3, 3);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("B"));
      
      boolean boolean2 = StringUtils.endsWith("", "");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string5 = StringUtils.stripStart("", "B");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate("org.apache.commons.lang3.CharUtils", "B", 102, 102);
      assertEquals("org.apache.commons.lang3.CharUtils", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("F%\"V&]qHGos;&PX8^'i8aC*Z*MX6", "F%\"V&]qHGos;&PX8^'i8aC*Z*MX6", 14);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      int[] intArray0 = new int[20];
      intArray0[0] = (int) ';';
      intArray0[1] = 928;
      intArray0[2] = (int) ';';
      String string0 = StringUtils.join(intArray0, ';');
      assertEquals(20, intArray0.length);
      assertEquals("59;928;59;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "59;928;59;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0", (CharSequence) "59;928;59;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0", (-141));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.deleteWhitespace("A]S");
      assertEquals("A]S", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("59;928;59;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("KNf6gNu%:vH~.,]", ';');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        Charset.forName("KNf6gNu%:vH~.,]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // KNf6gNu%:vH~.,]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("E^)kr'rZP[u4q");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("E^)kr'rZP[u4q");
      assertEquals(13, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.deleteWhitespace("?Lat5x3PJ>IS~");
      assertEquals("?Lat5x3PJ>IS~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("E^)kr'rZP[u4q", 0, '1');
      assertEquals("E^)kr'rZP[u4q", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "E^)kr'rZP[u4q", charArray0);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad("Failed to delete temp directory ", (-2046));
      assertEquals("Failed to delete temp directory ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Be_EV5msb&kLg");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.mid("E^)kr'rZP[u4q", 19, (-2245));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.prependIfMissing("E^)kr'rZP[u4q", "", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("E^)kr'rZP[u4q", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "E^)kr'rZP[u4q", (char[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "e", "e");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "e", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "g");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'j');
      assertEquals("DISPLAY", string0);
      assertNotNull(string0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet1.contains(locale_Category0));
      
      String string1 = StringUtils.substring("DISPLAY", 96, (-873));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "NnyjCm3ZbK5", (int) (short)0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.defaultIfEmpty("t", "Failed to create custom temp directory");
      assertEquals("t", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("", "", 96);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.chop("NnyjCm3ZbK5");
      assertEquals("NnyjCm3ZbK", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Be_EV5msb&kLg");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("'4>#LM*MDyu4M9T^@");
      assertEquals(17, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.deleteWhitespace("Be_EV5msb&kLg");
      assertEquals("Be_EV5msb&kLg", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.overlay("%ku37XBn}E;", "'vh):j^<J:0rHxvJ)", 58, (-239));
      assertEquals("'vh):j^<J:0rHxvJ)", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((short[]) null, 'g');
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNotBlank("Be_EV5msb&kLg");
      assertTrue(boolean0);
      
      String string3 = StringUtils.replaceChars("org.junitpioneer.jupiter.TempDirectory$CloseablePath", "p", "=P6b&KM]Fvb3e-#\"/");
      assertEquals("org.junit=ioneer.ju=iter.Tem=Directory$CloseablePath", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      String string4 = StringUtils.join((Object[]) stringArray0, " ");
      assertEquals(1, stringArray0.length);
      assertEquals("Be_EV5msb&kLg", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("org.junitpioneer.jupiter.DefaultLoca", 'I', ' ');
      assertEquals("org.junitpioneer.jupiter.DefaultLoca", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.defaultString(",bi.6V", "org.junitpioneer.jupiter.DefaultLoca");
      assertEquals(",bi.6V", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("org.junitpioneer.vintage.ExpectedExceptionExtension, ", "org.junitpioneer.vintage.ExpectedExceptionExtension, ");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string4 = StringUtils.overlay("blank_blank_blank_2014", "org.junitpioneer.jupiter.DefaultLoca", (-1405), 15);
      assertEquals("org.junitpioneer.jupiter.DefaultLocank_2014", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.DefaultLocank_2014";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.getIfBlank("G2DX36IpO,9A", (Supplier<String>) null);
      assertEquals("G2DX36IpO,9A", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.chop("");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.removeStartIgnoreCase("org.junitpioneer.jupiter.DefaultLoca", "org.junitpioneer.jupiter.DefaultLoca");
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      String string8 = StringUtils.replaceOnceIgnoreCase("4", "',H4st", "G2DX36IpO,9A");
      assertEquals("4", string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      
      String string9 = StringUtils.removeStart((String) null, "G2DX36IpO,9A");
      assertNull(string9);
      
      String string10 = StringUtils.substringAfterLast("Index: ", "#3*!y");
      assertEquals("", string10);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertNotNull(string10);
      
      String string11 = StringUtils.joinWith("F", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("org.junitpioneer.jupiter.DefaultLocank_2014", string11);
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string10));
      assertTrue(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string2));
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("\n");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '<';
      String string0 = StringUtils.join(intArray0, '<');
      assertArrayEquals(new int[] {60, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals("60<0<0<0<0<0<0<0", string0);
      assertNotNull(string0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      String string1 = StringUtils.getIfEmpty("", (Supplier<String>) null);
      assertNull(string1);
      
      String string2 = StringUtils.capitalize(":");
      assertEquals(":", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ":", (CharSequence) ":");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "60<0<0<0<0<0<0<0");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.rightPad("", (-4066));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("inj!sX_a}!", "inj!sX_a}!");
      assertEquals("inj!sX_a}!", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "inj!sX_a}!";
      String string1 = StringUtils.join(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("inj!sX_a}!", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'L';
      charArray0[4] = 'L';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "inj!sX_a}!", charArray0);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'L', 'L'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.capitalize("inj!sX_a}!");
      assertEquals("Inj!sX_a}!", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Inj!sX_a}!", (CharSequence) "inj!sX_a}!");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "inj!sX_a}!", (CharSequence) "inj!sX_a}!");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'j');
      assertEquals("DISPLAY", string0);
      assertNotNull(string0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.join((Object[]) null, 'B');
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "r4Z|");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase((String) null, (String) null, "DISPLAY");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'W');
      assertNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) null, 'W');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      String string0 = StringUtils.removeEnd(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("oBrPb!");
      assertEquals("oBrPb!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      charArray0[4] = '3';
      charArray0[5] = 'F';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "oBrPb!", charArray0);
      assertArrayEquals(new char[] {'\u0000', 'F', 'F', '\u0000', '3', 'F'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad(":YPY6F65P", 240);
      assertEquals("                                                                                                                                                                                                                                       :YPY6F65P", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("oBrPb!");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.mid("$=#G<22w", 8, (-2158));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "                                                                                                                                                                                                                                       :YPY6F65P";
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.replaceEach("                                                                                                                                                                                                                                       :YPY6F65P", stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(4, stringArray0.length);
      assertEquals("                                                                                                                                                                                                                                       :YPY6F65P", string4);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripStart(":YPY6F65P", "mj5?%~6r(Wv0vj-E");
      assertEquals(":YPY6F65P", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing(":YPY6F65P", 'F');
      assertEquals("F:YPY6F65PF", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.rightPad("", (-199), ';');
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      String string0 = StringUtils.removeStart("Failed to create custom temp directory", "Failed to create custom temp directory");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("aR^mP[DTf@I", "aR^mP[DTf@I", "Failed to create custom temp directory");
      assertEquals("Failed to create custom temp directory", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) ' ';
      longArray0[1] = (long) ' ';
      longArray0[2] = (long) ' ';
      longArray0[3] = (long) ' ';
      longArray0[4] = (long) ' ';
      longArray0[5] = (long) ' ';
      longArray0[6] = (long) ' ';
      longArray0[7] = (long) ' ';
      String string2 = StringUtils.join(longArray0, ' ');
      assertArrayEquals(new long[] {32L, 32L, 32L, 32L, 32L, 32L, 32L, 32L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals("32 32 32 32 32 32 32 32", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string3 = StringUtils.trimToEmpty("]wiUsK5{f2xZhY_k:jG uq\",:9Q=R{(=Gnz");
      assertEquals("]wiUsK5{f2xZhY_k:jG uq\",:9Q=R{(=Gnz", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)44;
      String string4 = StringUtils.join(byteArray0, '*');
      assertArrayEquals(new byte[] {(byte)13, (byte)44}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals("13*44", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      String string0 = StringUtils.removeStart("Ui}K", (String) null);
      assertEquals("Ui}K", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2326.0);
      doubleArray0[1] = (-3296.65406);
      doubleArray0[2] = 3492.320544563928;
      doubleArray0[3] = (-2731.0);
      String string0 = StringUtils.substring((String) null, 3148, 3148);
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, 3148);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.defaultIfEmpty((String) null, "gtX-elk([r;");
      assertEquals("gtX-elk([r;", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.StringUtils", (String) null, (-1018));
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.chop((String) null);
      assertNull(string4);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.split("J[i1p!&NX.@Po6c", "(,#EMKYl7*U");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      String string0 = StringUtils.stripAccents("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("G2DX36IpO,9A");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("G2DX36IpO,9A");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "G2DX36IpO,9A", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("G2DX36IpO,9A");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.uncapitalize("F%\"V&]qHGos;&PX8^'i8aC*Z*MX6");
      assertEquals("f%\"V&]qHGos;&PX8^'i8aC*Z*MX6", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "G2DX36IpO,9A", (CharSequence) "G2DX36IpO,9A", (int) (byte) (-95));
      assertEquals(0, int0);
      
      String string3 = StringUtils.defaultIfEmpty("\n", "Z7^Jq']");
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 3564, "");
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate((String) null, 3564);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Be_EV5msb&kLg");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("'4>#LM*MDyu4M9T^@");
      assertEquals(17, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.deleteWhitespace("Be_EV5msb&kLg");
      assertEquals("Be_EV5msb&kLg", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("r>P4aMSMD", 21, '3');
      assertEquals("333333333333r>P4aMSMD", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = 'F';
      charArray0[2] = '3';
      charArray0[3] = 'F';
      charArray0[4] = 'F';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "333333333333r>P4aMSMD", charArray0);
      assertArrayEquals(new char[] {'3', 'F', '3', 'F', 'F'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Be_EV5msb&kLg", charArray0);
      assertArrayEquals(new char[] {'3', 'F', '3', 'F', 'F'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.capitalize("Be_EV5msb&kLg");
      assertEquals("Be_EV5msb&kLg", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "333333333333r>P4aMSMD", (CharSequence) "Be_EV5msb&kLg");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Be_EV5msb&kLg");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("'4>#LM*MDyu4M9T^@");
      assertEquals(17, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.deleteWhitespace("Be_EV5msb&kLg");
      assertEquals("Be_EV5msb&kLg", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("r>P4aMSMD", 0, '3');
      assertEquals("r>P4aMSMD", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = 'F';
      charArray0[2] = '3';
      charArray0[3] = 'F';
      charArray0[4] = 'F';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "r>P4aMSMD", charArray0);
      assertArrayEquals(new char[] {'3', 'F', '3', 'F', 'F'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replace("goU|Hf'", (String) null, "r>P4aMSMD", 0);
      assertEquals("goU|Hf'", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("r>P4aMSMD", "r>P4aMSMD");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.reverseDelimited("'4>#LM*MDyu4M9T^@", 'F');
      assertEquals("'4>#LM*MDyu4M9T^@", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.endsWith("'4>#LM*MDyu4M9T^@", "goU|Hf'");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.stripStart("(9 /V/i3l", "'4>#LM*MDyu4M9T^@");
      assertEquals("(9 /V/i3l", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate("Be_EV5msb&kLg", (String) null, 99, 0);
      assertEquals("Be_EV5msb&kLg", string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Failed to create custom temp directoryFailed to create custom temp directory", "Failed to create custom temp directoryFailed to create custom temp directory", 30);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string7 = StringUtils.removeEndIgnoreCase("}/QxN3", " in an array of ");
      assertEquals("}/QxN3", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      String string8 = StringUtils.rightPad("CF?", 99, "org.apache.commons.lang3.Charsets");
      assertEquals("CF?org.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Chars", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      
      String string9 = StringUtils.joinWith("'4>#LM*MDyu4M9T^@", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals("Be_EV5msb&kLg", string9);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string6));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '7');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 5);
      assertEquals(0, int0);
      
      String string1 = StringUtils.deleteWhitespace("z");
      assertEquals("z", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("z");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split((String) null, 'P');
      assertNull(stringArray0);
      
      String string2 = "@ ZI2~KD";
      // Undeclared exception!
      try { 
        Charset.forName(" vs ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  vs 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase(" but was: ");
      assertEquals(" but was: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((byte[]) null, '&', (-370), (-370));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate((short)24);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(24, charBuffer0.limit());
      assertEquals(24, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(24, charBuffer0.remaining());
      assertEquals(24, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '3', (-485), (int) (short)24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -485
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      String string0 = StringUtils.removeEnd(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("oBrPb!");
      assertEquals("oBrPb!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf(". The following paths could not be deleted (see suppressed exceptions for details): ", "oBrPb!", (-2318));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.getIfEmpty(". The following paths could not be deleted (see suppressed exceptions for details): ", (Supplier<String>) null);
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details): ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("?|mm%z$.7iL9s;", 'N');
      assertEquals("?|mm%z$.7iL9s;", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "?|mm%z$.7iL9s;", (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'n', (-3112), 2500);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3112
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      String string0 = StringUtils.swapCase("blank_blank_blank_2014");
      assertEquals("BLANK_BLANK_BLANK_2014", string0);
      assertNotNull(string0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("blank_blank_blank_2014"));
      
      Iterator<String> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("blank_blank_blank_2014"));
      
      boolean boolean0 = priorityQueue0.add("Object varargs must not be null");
      assertTrue(boolean0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains("Object varargs must not be null"));
      assertFalse(priorityQueue0.contains("blank_blank_blank_2014"));
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "9:_*]");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase(",L", ",L", ",L", 3533);
      assertEquals(",L", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) ",L", 'U');
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripToEmpty("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "\n\r";
      String string3 = StringUtils.strip(",L", "\n\r");
      assertEquals(",L", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = "inj!sX_a}!inj!sX_a}!";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("inj!sX_a}!inj!sX_a}!", ",L");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.joinWith("ExceptionWasThrown", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("inj!sX_a}!inj!sX_a}!", string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string6 = StringUtils.join(intArray0, '_', 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) ",L", 1301);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string7 = ", org.junitpioneer.vintage.ExpectedExceptionExtension";
      String string8 = StringUtils.replaceFirst("Threshold must not be negative", "Threshold must not be negative", ", org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals(", org.junitpioneer.vintage.ExpectedExceptionExtension", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string7));
      assertNotNull(string8);
      
      String string9 = StringUtils.unwrap("iy>?Azor", ",L");
      assertEquals("iy>?Azor", string9);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      
      int int2 = StringUtils.lastOrdinalIndexOf("ExceptionWasThrown", "iy>?Azor", 1301);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = 3542;
      String string10 = StringUtils.rotate("\n\r", 3542);
      assertEquals("\n\r", string10);
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertNotNull(string10);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Threshold must not be negative"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Threshold must not be negative"));
      
      boolean boolean0 = linkedList0.add((Object) "iy>?Azor");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("Threshold must not be negative"));
      assertTrue(linkedList0.contains("iy>?Azor"));
      
      String string11 = null;
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, (String) null);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals("FORMAT", string0);
      assertNotNull(string0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      String string0 = StringUtils.defaultString("cYZl;Pn)8h/Hdl", "B");
      assertEquals("cYZl;Pn)8h/Hdl", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty("B");
      assertEquals("B", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "B", "B");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "B";
      charSequenceArray0[1] = (CharSequence) "The String must not be empty";
      charSequenceArray0[2] = (CharSequence) "cYZl;Pn)8h/Hdl";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "The String must not be empty";
      boolean boolean1 = StringUtils.endsWithAny("The String must not be empty", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.stripAccents("B");
      assertEquals("B", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("r must not be null", 3, "B");
      assertEquals("r must not be null", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("The String must not be empty"));
      
      HashSet<String> hashSet0 = new HashSet<String>(linkedList0);
      assertNotNull(hashSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(linkedList0.contains("The String must not be empty"));
      assertFalse(hashSet0.contains("The String must not be empty"));
      
      Iterator<String> iterator0 = hashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(linkedList0.contains("The String must not be empty"));
      assertFalse(hashSet0.contains("The String must not be empty"));
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) charSequenceArray0[3]);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(predicate0);
      
      boolean boolean2 = hashSet0.removeIf(predicate0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(linkedList0.contains("The String must not be empty"));
      assertFalse(hashSet0.contains("The String must not be empty"));
      
      String string4 = StringUtils.join(iterator0, '0');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(linkedList0.contains("The String must not be empty"));
      assertFalse(hashSet0.contains("The String must not be empty"));
      
      String string5 = StringUtils.repeat("", 3);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.replaceOnce("\n", " ", "\r");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty(" ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.overlay((String) null, "G\"x:Sm18R]{n", (-1), 2618);
      assertNull(string1);
      
      String string2 = StringUtils.rightPad((String) null, (-1), 'L');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, ';');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(';'));
      
      charSequenceArray0[0] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string1 = StringUtils.toRootLowerCase("offset cannot be negative");
      assertEquals("offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2482;
      shortArray0[1] = (short) (-87);
      shortArray0[2] = (short)2152;
      shortArray0[3] = (short) (-4012);
      String string2 = StringUtils.join(shortArray0, '>', (int) (short) (-87), (int) (short) (-4012));
      assertArrayEquals(new short[] {(short)2482, (short) (-87), (short)2152, (short) (-4012)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay((String) null, "", 2150, (-2656));
      assertNull(string3);
      
      CharSequence[] charSequenceArray1 = new CharSequence[1];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) " r]2";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(1, charSequenceArray1.length);
      assertFalse(boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      String string4 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "G2DX36IpO,9A", 161);
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("iy>?Azorg.apache.commons.lang3.StringUtils", "G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9Aiy>?Azorg.apache.commons.lang3.StringUtilsG2DX36IpO,9A", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("iy>?Azorg.apache.commons.lang3.StringUtils", 1600);
      assertEquals("tilsiy>?Azorg.apache.commons.lang3.StringU", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("tilsiy>?Azorg.apache.commons.lang3.StringU");
      assertEquals("Tilsiy>?Azorg.apache.commons.lang3.StringU", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("iy>?Azorg.apache.commons.lang3.StringUtils", "y8P+5(/3]");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-91);
      String string3 = StringUtils.join(byteArray0, 'v', 161, (int) (byte) (-54));
      assertArrayEquals(new byte[] {(byte)97, (byte)66, (byte)66, (byte)97, (byte)106, (byte)66, (byte) (-91)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "tilsiy>?Azorg.apache.commons.lang3.StringU", (int) (byte) (-91), (-1704));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      String string0 = StringUtils.difference("A", "A");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-1077), (-1077));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      String string0 = StringUtils.left("The Character must not be null", 2200);
      assertEquals("The Character must not be null", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "The Character must not be null", (CharSequence) "The Character must not be null");
      assertEquals("The Character must not be null", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      String string1 = StringUtils.rightPad("org.junitpioneer.vintage.TimeoutExtension", 2200, "org.junitpioneer.vintage.TimeoutExtension");
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "The Character must not be null", (CharSequence) string1);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("The Character must not be null", "]wiUsK5{f2xZhY_k:");
      assertEquals("]wiUsK5{f2xZhY_k:The Character must not be null]wiUsK5{f2xZhY_k:", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The Character must not be null", 3543);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", (CharSequence) "org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 2200;
      longArray0[2] = (long) 2200;
      longArray0[3] = (long) 3543;
      longArray0[4] = (long) (-1);
      String string4 = StringUtils.join(longArray0, 'V', 2200, 2200);
      assertArrayEquals(new long[] {(-1L), 2200L, 2200L, 3543L, (-1L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat(", ", "org.junitpioneer.vintage.TimeoutExtension", (-2405));
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isAllLowerCase(string1);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      
      boolean boolean4 = StringUtils.isWhitespace("The Character must not be null");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      
      String string6 = StringUtils.uncapitalize("J*K0%SH!\u0007p");
      assertEquals("j*K0%SH!\u0007p", string6);
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 83, 821);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string7 = StringUtils.join((Object[]) stringArray0, 'p', 1800, (-1038));
      assertEquals(0, stringArray0.length);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)charSequence0));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'j');
      assertEquals("DISPLAY", string0);
      assertNotNull(string0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer1);
      assertNotSame(locale_Category0, locale_Category1);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(enumSet0.contains(locale_Category1));
      
      boolean boolean0 = enumSet0.add(locale_Category1);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertTrue(boolean0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string1 = StringUtils.substring("DISPLAY", 96, (-873));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'j';
      floatArray0[1] = (float) 96;
      String string2 = StringUtils.join(floatArray0, 'j', 0, 0);
      assertArrayEquals(new float[] {106.0F, 96.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("DISPLAY", "DISPLAY", "3':YW%.^f", 96);
      assertEquals("3':YW%.^f", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.toRootUpperCase("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.reverseDelimited("", 'j');
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.endsWith("3':YW%.^f", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.stripStart("", "DISPLAY");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.abbreviate("Threshold must not be negative", "*XRvLxR]SMSaJ", 101, 101);
      assertEquals("Threshold must not be negative", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Failed to create custom temp directoryFailed to create custom temp directory", "DISPLAY", (-795));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      String string0 = StringUtils.strip("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)");
      assertEquals("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.abbreviate((String) null, "]Y~jvU", 545, 545);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(250, stringArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals("AD", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("", (-1), "#C0XwJn");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(", Length: y?x}McTwjf ", "");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "p", (CharSequence) "p");
      assertTrue(boolean0);
      
      String string0 = StringUtils.strip("Illegal range. The step cannot be zero.");
      assertEquals("Illegal range. The step cannot be zero.", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.containsWhitespace("Illegal range. The step cannot be zero.");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.rotate("Illegal range. The step cannot be zero.", 13);
      assertEquals("nnot be zero.Illegal range. The step ca", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "Illegal range. The step cannot be zero.", (CharSequence) "Illegal range. The step cannot be zero.");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 13;
      String string2 = StringUtils.join(longArray0, '>', (-1925), (-1925));
      assertArrayEquals(new long[] {13L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "pwo=V#";
      charSequenceArray0[2] = (CharSequence) "Illegal range. The step cannot be zero.";
      charSequenceArray0[3] = (CharSequence) "nnot be zero.Illegal range. The step ca";
      charSequenceArray0[4] = (CharSequence) "pwo=V#";
      String string3 = StringUtils.prependIfMissingIgnoreCase("pwo=V#", "Illegal range. The step cannot be zero.", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("pwo=V#", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.reverseDelimited("w/VWj*kt<Cc.e[hLl", '&');
      assertEquals("w/VWj*kt<Cc.e[hLl", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.strip("hw>YI'`}7(!", "Strings must not be null");
      assertEquals("hw>YI'`}7(!", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("maxWith cannot be negative");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charBuffer0);
      assertEquals("4", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      
      boolean boolean0 = StringUtils.equals((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertEquals("4", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      
      boolean boolean1 = StringUtils.isNumeric(charBuffer0);
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("4", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 'p';
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 'p';
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 'p';
      String string0 = StringUtils.join(doubleArray0, 'p');
      assertArrayEquals(new double[] {1.0, 112.0, 0.0, 1.0, 112.0, 0.0, 1.0, 0.0, 112.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals("1.0p112.0p0.0p1.0p112.0p0.0p1.0p0.0p112.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("3", "Object varargs must not be null", "1.0p112.0p0.0p1.0p112.0p0.0p1.0p0.0p112.0");
      assertEquals("3", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      String string2 = StringUtils.reverseDelimited("3", '');
      assertEquals("3", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap((String) null, "?x`j5AJ");
      assertNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "3", 32);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumeric("3");
      assertTrue(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string4 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "$0'\"");
      assertNull(stringArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '';
      intArray0[1] = 32;
      intArray0[2] = (int) '';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '', 32, 127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 'p';
      doubleArray0[2] = 0.0;
      doubleArray0[4] = (double) 'p';
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 'p';
      String string0 = StringUtils.join(doubleArray0, 'p');
      assertArrayEquals(new double[] {1.0, 112.0, 0.0, 0.0, 112.0, 0.0, 1.0, 0.0, 112.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals("1.0p112.0p0.0p0.0p112.0p0.0p1.0p0.0p112.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("3", "Object varargs must not be null", "1.0p112.0p0.0p0.0p112.0p0.0p1.0p0.0p112.0");
      assertEquals("3", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      String string2 = StringUtils.reverseDelimited("3", '');
      assertEquals("3", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap((String) null, "?x`j5AJ");
      assertNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "3", 32);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.remove("Object varargs must not be null", 'T');
      assertEquals("Object varargs must not be null", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "3";
      stringArray0[1] = "1.0p112.0p0.0p0.0p112.0p0.0p1.0p0.0p112.0";
      stringArray0[2] = "?x`j5AJ";
      stringArray0[3] = "Object varargs must not be null";
      stringArray0[4] = "Object varargs must not be null";
      String string5 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("3", string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      String string0 = StringUtils.substringBetween("V", "uF=m,/T7tmR?c", "uF=m,/T7tmR?c");
      assertNull(string0);
      
      String string1 = StringUtils.defaultString("4J9a;ug:|jX@");
      assertEquals("4J9a;ug:|jX@", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("4J9a;ug:|jX@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Locale.Category> consumer0 = (Consumer<Locale.Category>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet1.contains(locale_Category0));
      
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      EnumSet<Locale.Category> enumSet2 = enumSet0.clone();
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertNotNull(enumSet2);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet2.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet2.contains(locale_Category0));
      
      String string1 = StringUtils.substring("The Character must", 96, (-873));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("(,#EMKYl7*U");
      assertEquals("(,#EMKYl7*U", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (int) (short)0);
      assertEquals(0, int0);
      
      String string3 = StringUtils.defaultIfEmpty("]", "J[i1p!&NX.@Po6c");
      assertEquals("]", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("The Character must", "Failed to create custom temp directory", 1302);
      assertEquals("The Character must", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.chop("Z4QzRmtNK*bu'");
      assertEquals("Z4QzRmtNK*bu", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int1 = StringUtils.countMatches((CharSequence) "(,#EMKYl7*U", (CharSequence) "Z4QzRmtNK*bu");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String[] stringArray1 = StringUtils.split("(,#EMKYl7*U", "The Character must");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) "\n");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'j');
      assertEquals("DISPLAY", string0);
      assertNotNull(string0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet1.contains(locale_Category0));
      
      String string1 = StringUtils.substring("DISPLAY", 96, (-873));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "NnyjCm3ZbK5", (int) (short)0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.abbreviate("", "Qm", 2930, 2930);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", ". The following paths could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details): ", 2930);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.replaceFirst("LcV@z", "K;50-62", "");
      assertEquals("LcV@z", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, ",m)p", 3029);
      assertNull(stringArray0);
      
      String string0 = StringUtils.rightPad("vi+", 3029);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      String string0 = StringUtils.reverse("#O+C*^$fs");
      assertEquals("sf$^*C+O#", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 'E');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("<tmTC/?(Z~V~4( \"", "Gvw}Qw&D|^uq");
      assertEquals("<tmTC/?(Z~V~4( \"", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      String string0 = StringUtils.swapCase("O=&`%)cK1");
      assertEquals("o=&`%)Ck1", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Aborting to protect against StackOverflowEror - output of one loop is the input of another", (CharSequence) "o=&`%)Ck1");
      assertEquals(88, int0);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("g", "g");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      String string0 = StringUtils.defaultString("Threshold must not be negative", "B");
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[17];
      charArray0[0] = 'L';
      charArray0[1] = 'H';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Threshold must not be negative", charArray0);
      assertEquals(17, charArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.capitalize("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.substringBeforeLast("Thre", "");
      assertEquals("Thre", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.removeEnd("Test '%s' was sup", "");
      assertEquals("Test '%s' was sup", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.abbreviateMiddle(" vs ", "", (-1));
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize(" vs ");
      assertEquals(" vs ", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      String string0 = StringUtils.upperCase(". The following paths could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals(". THE FOLLOWING PATHS COULD NOT BE DELETED (SEE SUPPRESSED EXCEPTIONS FOR DETAILS): . THE FOLLOWING PATHS COULD NOT BE DELETED (SEE SUPPRESSED EXCEPTIONS FOR DETAILS): ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) ". THE FOLLOWING PATHS COULD NOT BE DELETED (SEE SUPPRESSED EXCEPTIONS FOR DETAILS): . THE FOLLOWING PATHS COULD NOT BE DELETED (SEE SUPPRESSED EXCEPTIONS FOR DETAILS): ", (-1936));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring((String) null, (-1));
      assertNull(string1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      byte[] byteArray0 = StringUtils.getBytes("g^bb5-^kon78}b4a", charset0);
      assertEquals(16, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      String string0 = StringUtils.substring(")>7q>x!^/M*s", 1768);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getFuzzyDistance("", ")>7q>x!^/M*s", locale0);
      assertEquals(0, int0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      String string0 = StringUtils.stripAccents("fPH?ieRogkAEp");
      assertEquals("fPH?ieRogkAEp", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("fPH?ieRogkAEp", 437, 437);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.toString(byteArray0, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'T');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      String string0 = "DefaultTimeZone";
      String string1 = StringUtils.strip("DefaultTimeZone");
      assertEquals("DefaultTimeZone", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("DefaultTimeZone");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '5';
      char char0 = 'z';
      charArray0[2] = 'z';
      char char1 = 'S';
      charArray0[3] = 'S';
      charArray0[4] = '0';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "DefaultTimeZone", charArray0);
      assertArrayEquals(new char[] {'.', '5', 'z', 'S', '0'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "DefaultTimeZone", "\r");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.truncate("", 0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "DefaultTimeZone";
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1010));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      String string0 = StringUtils.center("X;", (-2355), ' ');
      assertEquals("X;", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "X;", charArray0);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "X;", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "X;";
      String string1 = StringUtils.truncate("/z", 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(128);
      assertNotNull(charBuffer0);
      assertEquals(128, charBuffer0.remaining());
      assertEquals(128, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(128, charBuffer0.length());
      assertEquals(128, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      
      CharBuffer charBuffer1 = CharBuffer.allocate(3012);
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(3012, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(3012, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.position());
      assertEquals(3012, charBuffer1.length());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(3012, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      
      int int1 = StringUtils.countMatches(charSequenceArray0[0], (CharSequence) charBuffer0);
      assertNotSame(charBuffer0, charBuffer1);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int1);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(int1 == int0);
      assertEquals(128, charBuffer0.remaining());
      assertEquals(128, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(128, charBuffer0.length());
      assertEquals(128, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.complementOf(enumSet0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(enumSet1);
      assertEquals(2, enumSet0.size());
      assertEquals(0, enumSet1.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(enumSet1.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet2 = EnumSet.complementOf(enumSet1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(enumSet2);
      assertEquals(2, enumSet0.size());
      assertEquals(0, enumSet1.size());
      assertEquals(2, enumSet2.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(enumSet1.contains(locale_Category0));
      assertTrue(enumSet2.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet2.iterator();
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet1.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(iterator0);
      assertEquals(2, enumSet0.size());
      assertEquals(0, enumSet1.size());
      assertEquals(2, enumSet2.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(enumSet1.contains(locale_Category0));
      assertTrue(enumSet2.contains(locale_Category0));
      
      String string2 = StringUtils.join(iterator0, ' ');
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals("DISPLAY FORMAT", string2);
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet1.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(string2);
      assertEquals(2, enumSet0.size());
      assertEquals(0, enumSet1.size());
      assertEquals(2, enumSet2.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(enumSet1.contains(locale_Category0));
      assertTrue(enumSet2.contains(locale_Category0));
      
      boolean boolean2 = StringUtils.contains((CharSequence) "X;", (-2122));
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.lowerCase("wam+.");
      assertEquals("wam+.", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      String string0 = StringUtils.substringBetween("+N@f.Tob", "+N@f.Tob");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+N@f.Tob", (String) null, (-11));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeIgnoreCase("org.junitpioneer.jupiter.params.IntRange", "org.junitpioneer.jupiter.params.IntRange");
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "+N@f.Tob", (CharSequence) "", 16);
      assertEquals(8, int0);
      
      String string2 = StringUtils.toRootUpperCase("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToEmpty("org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertEquals("org.junitpioneer.jupiter.RepeatFailedTestExtension", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.substringBetween("org.junitpioneer.jupiter.RepeatFailedTestExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNull(string5);
      
      String[] stringArray1 = StringUtils.substringsBetween("\r", "1Bjzcv&ler0P", ",L");
      assertNull(stringArray1);
      
      String string6 = StringUtils.truncate("org.junitpioneer.jupiter.RepeatFailedTestExtension", 2465, 2436);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String[] stringArray2 = StringUtils.stripAll((String[]) null, "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'j');
      assertEquals("DISPLAY", string0);
      assertNotNull(string0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet1.contains(locale_Category0));
      
      String string1 = StringUtils.substring("DISPLAY", 96, (-873));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "NnyjCm3ZbK5", (int) (short)0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.defaultIfEmpty("t", "Failed to create custom temp directory");
      assertEquals("t", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle(", org.junitpioneer.vintage.ExpectedExceptionExtension", "BNp4!/RV*X\"~|p", 96);
      assertEquals(", org.junitpioneer.vintage.ExpectedExceptionExtension", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.chop("NnyjCm3ZbK5");
      assertEquals("NnyjCm3ZbK", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2326.0);
      doubleArray0[2] = 3479.064282614;
      doubleArray0[3] = (-2731.0);
      doubleArray0[4] = (-197.0527579797);
      String string0 = StringUtils.join(doubleArray0, 'E', 0, 0);
      assertArrayEquals(new double[] {(-2326.0), 0.0, 3479.064282614, (-2731.0), (-197.0527579797)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny("", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Failed to create custom temp directory";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "N,PXQ0";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("Failed to create custom temp directory", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 'E';
      longArray0[2] = (long) 'E';
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 'E';
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 'E';
      String string2 = StringUtils.join(longArray0, 'E', 0, 8);
      assertArrayEquals(new long[] {0L, 69L, 69L, 0L, 0L, 69L, 0L, 69L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals("0E69E69E0E0E69E0E69", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("h_", "h_");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("h_", stringArray0);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      String string0 = StringUtils.defaultString("cYZl;Pn)8h/Hdl", "B");
      assertEquals("cYZl;Pn)8h/Hdl", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty("B");
      assertEquals("B", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "B", "gx)(/@");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "B";
      charSequenceArray0[1] = (CharSequence) "The String must not be empty";
      charSequenceArray0[2] = (CharSequence) "cYZl;Pn)8h/Hdl";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "The String must not be empty";
      boolean boolean1 = StringUtils.endsWithAny("The String must not be empty", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.stripAccents("B");
      assertEquals("B", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("r must not be null", 3, "B");
      assertEquals("r must not be null", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      String string0 = StringUtils.abbreviate("w iJ781A.,Qy:", "z", 6, 6);
      assertEquals("z1A.,z", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "z", (CharSequence) "w iJ781A.,Qy:");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.prependIfMissingIgnoreCase("m", "m", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("m", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("m", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("m");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Stack<Locale.Category> stack1 = new Stack<Locale.Category>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      
      String string1 = StringUtils.replaceIgnoreCase("HRY4,3i6M+O8S", (String) null, "D$h_!;%L[/e>%", (-2438));
      assertEquals("HRY4,3i6M+O8S", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string2 = StringUtils.EMPTY;
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAllLowerCase("\n");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      boolean boolean4 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "D$h_!;%L[/e>%");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("W?-58-@Wu,6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '3', (-2279), 12);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      String string0 = StringUtils.abbreviate("VA,D]`fE", "z", 6, 6);
      assertEquals("zD]`fE", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("zD]`fE");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("inj!sX_a}!", "inj!sX_a}!");
      assertEquals("inj!sX_a}!", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "inj!sX_a}!";
      String string1 = StringUtils.join(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("inj!sX_a}!", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "inj!sX_a}!", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.getIfBlank("inj!sX_a}!", (Supplier<String>) null);
      assertEquals("inj!sX_a}!", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "inj!sX_a}!", 2006, 2006);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("Threshold must not be negative", "", true);
      assertEquals(30, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("inj!sX_a}!", "inj!sX_a}!");
      assertEquals("inj!sX_a}!", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "inj!sX_a}!";
      String string1 = StringUtils.join((String[]) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "inj!sX_a}!", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.getIfBlank("inj!sX_a}!", (Supplier<String>) null);
      assertEquals("inj!sX_a}!", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("inj!sX_a}!", "inj!sX_a}!", "ew0");
      assertEquals("ew0", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStart("", "s");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", " vs ");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 2132);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "G,vw}*Qw&D|^uq";
      charSequenceArray0[1] = (CharSequence) "G,vw}*Qw&D|^uq";
      charSequenceArray0[2] = (CharSequence) "rQFh<~C]D.fs";
      String string0 = StringUtils.prependIfMissing("rQFh<~C]D.fs", "G,vw}*Qw&D|^uq", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("rQFh<~C]D.fs", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'j');
      assertEquals("DISPLAY", string0);
      assertNotNull(string0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      boolean boolean0 = enumSet0.add(locale_Category1);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertTrue(boolean0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string1 = StringUtils.substring("DISPLAY", 96, (-873));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'j';
      floatArray0[1] = (float) 96;
      String string2 = StringUtils.join(floatArray0, 'j', 0, 0);
      assertArrayEquals(new float[] {106.0F, 96.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("DISPLAY", "DISPLAY", "3':YW%.^f", 96);
      assertEquals("3':YW%.^f", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.toRootUpperCase("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStart("", "Search and Replace array lengths don't match: ");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.stripStart(", Length: ", "");
      assertEquals(", Length: ", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.difference("H__hZ;:D-ev", "OLZ~)x;");
      assertEquals("OLZ~)x;", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = StringUtils.substring("OLZ~)x;", 96, 4000);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      
      String string9 = StringUtils.stripToNull("Cannot store ");
      assertEquals("Cannot store", string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      
      String string10 = StringUtils.getDigits("vO$XrO");
      assertEquals("", string10);
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertNotNull(string10);
      
      int int0 = StringUtils.indexOf((CharSequence) "3':YW%.^f", 3832, 2614);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "OLZ~)x;";
      String string11 = StringUtils.prependIfMissing("`", ", Length: ", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("`", string11);
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string6));
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty(". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details):", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.appendIfMissing("\n", "\n", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("\n", "\n");
      assertEquals(0, int0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(locale_Category0));
      
      Stack<Locale.Category> stack1 = new Stack<Locale.Category>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertFalse(stack1.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      boolean boolean1 = stack1.add(locale_Category1);
      assertNotSame(stack1, stack0);
      assertSame(locale_Category1, locale_Category0);
      assertTrue(boolean1);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals("[DISPLAY]", stack1.toString());
      assertTrue(stack1.contains(locale_Category0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      assertNotSame(stack0, stack1);
      assertFalse(stack0.equals((Object)stack1));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(locale_Category0));
      
      Stack<Locale.Category> stack2 = new Stack<Locale.Category>();
      assertFalse(stack2.equals((Object)stack1));
      assertTrue(stack2.equals((Object)stack0));
      assertNotNull(stack2);
      assertEquals(0, stack2.size());
      assertTrue(stack2.isEmpty());
      assertTrue(stack2.empty());
      assertEquals("[]", stack2.toString());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.contains(locale_Category0));
      
      String string1 = StringUtils.defaultIfEmpty("", "The character must not be null");
      assertEquals("The character must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("I]0l@>$(}-{vN47Mf", (String) null);
      assertEquals("I]0l@>$(}-{vN47Mf", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("Illegal range. The step cannot be zero.", (-335), 0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToNull("/8 {%GXG");
      assertEquals("/8 {%GXG", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.getDigits("'i8aC*Z*MX6");
      assertEquals("86", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOf((CharSequence) "/8 {%GXG", 1490, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\n", (CharSequence) " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      String string0 = StringUtils.strip("Failed to create custom temp directoryFailed to create custom temp directory", (String) null);
      assertEquals("Failed to create custom temp directoryFailed to create custom temp directory", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("Failed to create custom temp directoryFailed to create custom temp directory", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("Failed to create custom temp directoryFailed to create custom temp directory", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 'U';
      charArray0[2] = 'w';
      charArray0[3] = 'F';
      charArray0[4] = 'i';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'$', 'U', 'w', 'F', 'i'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceEachRepeatedly("%dJF9;UwymZ'dVq>iR", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("%dJF9;UwymZ'dVq>iR", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (-182));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.stripToNull("\r");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "\r", (CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", (char[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceEachRepeatedly("org.junitpioneer.vintage.ExpectedExceptionExtension", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.rotate("The Character must", (-1));
      assertEquals("he Character mustT", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      String string0 = StringUtils.stripStart("BE9?x", "kFZIFx");
      assertEquals("BE9?x", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("G**C");
      assertEquals("G**C", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "G**C";
      charSequenceArray0[1] = (CharSequence) "G**C";
      String string2 = StringUtils.joinWith("G**C", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("G**CG**CG**CG**CG**CG**CG**CG**CG**C", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "G**CG**CG**CG**CG**CG**CG**CG**CG**C";
      charSequenceArray0[3] = (CharSequence) "BE9?x";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-85);
      String string3 = StringUtils.join(byteArray0, 'T');
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-32), (byte) (-85)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("-1T-32T-85", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[4] = (CharSequence) "-1T-32T-85";
      String string4 = StringUtils.rightPad("G**C", 706, "S");
      assertEqualsstring4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      charSequenceArray0[5] = (CharSequence
      charSequenceArray0[6] = (CharSequence) "G**C";
      charSequenceArray0[7] = (CharSequence) "G**C";
      String string5 = StringUtils.appendIfMissingIgnoreCase("BE9?x", "BE9?x", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("BE9?x", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, ']', 4, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      String string0 = "=q";
      String string1 = null;
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      char char0 = '9';
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = (int) '9';
      intArray0[2] = (int) '9';
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '%', 32, 700);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = ")q,<0KcS^pdy\"bW";
      stringArray1[1] = ")q,<0KcS^pdy\"bW";
      stringArray1[2] = ")q,<0KcS^pdy\"bW";
      stringArray1[3] = ")q,<0KcS^pdy\"bW";
      stringArray1[4] = "temp.dirpkVC q";
      stringArray1[5] = ")q,<0KcS^pdy\"bW";
      stringArray1[6] = ")q,<0KcS^pdy\"bW";
      stringArray1[7] = ")q,<0KcS^pdy\"bW";
      stringArray1[8] = ")q,<0KcS^pdy\"bW";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach(")q,<0KcS^pdy\"bW", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 9 vs 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = " ";
      stringArray1[2] = "\n";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("\r", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      int int0 = 953;
      String string0 = StringUtils.rotate("p", 953);
      assertEquals("p", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      String string1 = StringUtils.chomp("p", "jG uq\",:9Q=R{(=Gnz");
      assertEquals("p", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "p";
      stringArray0[1] = "|F7L5SRtL!`va4j";
      stringArray0[2] = "]wiUsK5{f2xZhY_k:";
      stringArray0[3] = "Illegal range. Equal from and to will produce an empty range.";
      stringArray0[4] = "p";
      stringArray0[5] = "p";
      stringArray0[6] = "|F7L5SRtL!`va4j";
      stringArray0[7] = "|F7L5SRtL!`va4j";
      stringArray0[8] = "p";
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "|F7L5SRtL!`va4j";
      stringArray1[1] = "|F7L5SRtL!`va4j";
      stringArray1[2] = "jG uq\",:9Q=R{(=Gnz";
      stringArray1[3] = "]wiUsK5{f2xZhY_k:";
      stringArray1[4] = "p";
      stringArray1[5] = "p";
      stringArray1[6] = "p";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("]wiUsK5{f2xZhY_k:", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 9 vs 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = StringUtils.replaceChars((String) null, 'W', 'k');
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "A,D]`fE", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '.');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.unwrap("\r", "");
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      String string0 = StringUtils.strip("*v&~RH%", "*v&~RH%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "*v&~RH%";
      stringArray0[5] = "*v&~RH%";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      String string1 = StringUtils.join(doubleArray0, 'p');
      assertArrayEquals(new double[] {1.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals("1.0p1.0p0.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", (String) null, "3");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "*v&~RH%";
      objectArray0[1] = (Object) 0.0;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) 1.0;
      objectArray0[5] = (Object) "*v&~RH%";
      objectArray0[6] = object0;
      String string3 = StringUtils.reverseDelimited("", '');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("1.0p1.0p0.0", "");
      assertEquals("1.0p1.0p0.0", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 153);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("inj!sX_a}!", "inj!sX_a}!");
      assertEquals("inj!sX_a}!", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "inj!sX_a}!";
      String string1 = StringUtils.join(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("inj!sX_a}!", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "inj!sX_a}!", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.getIfBlank("inj!sX_a}!", (Supplier<String>) null);
      assertEquals("inj!sX_a}!", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("inj!sX_a}!", "inj!sX_a}!", "ew0");
      assertEquals("ew0", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStart("", "\n");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", " vs ");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string0 = StringUtils.leftPad("Threshold must not be negative\n\r", 0, "Threshold must not be negative\n\r");
      assertEquals("Threshold must not be negative\n\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("Threshold must not be negative\n\r");
      assertEquals(32, int0);
      
      String string1 = StringUtils.defaultString("Threshold must not be negative\n\r");
      assertEquals("Threshold must not be negative\n\r", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "M(}gE#G~UX";
      String string3 = StringUtils.remove("Threshold must not be negative\n\r", "M(}gE#G~UX");
      assertEquals("Threshold must not be negative\n\r", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative\n\r";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Threshold must not be negative\n\r", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = "Minimum abbreviation width is %d";
      String string5 = StringUtils.removeIgnoreCase("Threshold must not be negative\n\r", "Minimum abbreviation width is %d");
      assertEquals("Threshold must not be negative\n\r", string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Threshold must not be negative\n\r", (CharSequence) null, 513);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.toRootUpperCase((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.trimToNull("Threshold must not be negative\n\r");
      assertEquals("Threshold must not be negative", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, charSequenceArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "kO)hr[fSn|V", (CharSequence) null, (-1700));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      String string0 = StringUtils.wrap("org.junitpioneer.jupiter.params.LongRange", "<C1MyOCm ;0`HTLw");
      assertEquals("<C1MyOCm ;0`HTLworg.junitpioneer.jupiter.params.LongRange<C1MyOCm ;0`HTLw", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "<C1MyOCm ;0`HTLworg.junitpioneer.jupiter.params.LongRange<C1MyOCm ;0`HTLw", (CharSequence) "<C1MyOCm ;0`HTLw");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceChars("", 'o', 'o');
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("Cl?9we-", 1301, "@=Xf/");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny("@=Xf/", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.abbreviate(" ", "...", 1301);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) " ", " ");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1301;
      intArray0[1] = (-1);
      String string4 = StringUtils.join(intArray0, 'o');
      assertArrayEquals(new int[] {1301, (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("1301o-1", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("fqDE", supplier0);
      assertEquals("fqDE", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("Arguments c4not boh be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      String string0 = StringUtils.strip("*v&~RH%", "*v&~RH%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*v&~RH%";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[5] = "*v&~RH%";
      stringArray0[6] = "";
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("", 2586);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("WTF(]=`=t1aWdU", "*v&~RH%", Integer.MAX_VALUE, 90);
      assertEquals("WTF(]=`=t1aWdU", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = StringUtils.join(objectArray0, '>');
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ">java.lang.Object@5f903145", (CharSequence) ">java.lang.Object@5f903145", (int) '>');
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) ">java.lang.Object@5f903145", 'A');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ">java.lang.Object@5f903145", (CharSequence) ">java.lang.Object@5f903145");
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string1 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string1);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      String string2 = StringUtils.SPACE;
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      String string3 = StringUtils.unwrap("7N~6txz{?KmF~o`E~&E", ">java.lang.Object@5f903145");
      assertEquals("7N~6txz{?KmF~o`E~&E", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertFalse(boolean0);
      
      String string4 = StringUtils.unwrap("", ";&>}?>vLIv 7.0v");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("org.junitpioneer.jupiter.pa");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isWhitespace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      String string0 = StringUtils.left("The Character must not be null", 2200);
      assertEquals("The Character must not be null", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "The Character must not be null", (CharSequence) "The Character must not be null");
      assertEquals("The Character must not be null", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      String string1 = StringUtils.rightPad("org.junitpioneer.vintage.TimeoutExtension", 1, "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "The Character must not be null", (CharSequence) "org.junitpioneer.vintage.TimeoutExtension");
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("The Character must not be null", "]wiUsK5{f2xZhY_k:");
      assertEquals("]wiUsK5{f2xZhY_k:The Character must not be null]wiUsK5{f2xZhY_k:", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The Character must not be null", 3543);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", (CharSequence) "org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 2200;
      longArray0[3] = (long) 3543;
      longArray0[4] = (long) (-1);
      String string4 = StringUtils.join(longArray0, 'V', 2200, 2200);
      assertArrayEquals(new long[] {(-1L), 1L, 2200L, 3543L, (-1L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat(", ", "org.junitpioneer.vintage.TimeoutExtension", (-2405));
      assertEquals("", string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isAllLowerCase("org.junitpioneer.vintage.TimeoutExtension");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      boolean boolean4 = StringUtils.isWhitespace("The Character must not be null");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category1));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category1));
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'j');
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals("DISPLAYjFORMAT", string0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(string0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category1));
      
      String string1 = StringUtils.defaultString("]_|c");
      assertEquals("]_|c", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank("h>.bCQI|$2T,,/u", "Minimum abbreviation width with offset is %d");
      assertEquals("h>.bCQI|$2T,,/u", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("oSv%y", "]_|c");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.repeat('j', 2088);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[1] = (CharSequence) "DISPLAYjFORMAT";
      charSequenceArray0[2] = (CharSequence) "DISPLAYjFORMAT";
      charSequenceArray0[3] = (CharSequence) "]_|c";
      charSequenceArray0[4] = (CharSequence) "h>.bCQI|$2T,,/u";
      charSequenceArray0[5] = (CharSequence) "DISPLAYjFORMAT";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.remove("]_|c", 'Q');
      assertEquals("]_|c", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("oSv%y", string3);
      assertEquals("oSv%y", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat('Q', 2088);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("oSv%y", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category1));
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'h');
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals("DISPLAYhFORMAT", string0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(string0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category1));
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      String string0 = StringUtils.defaultString("cYZl;Pn)8h/Hdl", "B");
      assertEquals("cYZl;Pn)8h/Hdl", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "org.apache.commons.lang3.RegExUtils");
      assertTrue(boolean0);
      
      String string2 = StringUtils.remove(", ", "%CGBfZqt`'%49WR5]5X");
      assertEquals(", ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "The String must not be empty";
      charSequenceArray0[1] = (CharSequence) "cYZl;Pn)8h/Hdl";
      charSequenceArray0[2] = (CharSequence) "The String must not be empty";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      String string3 = StringUtils.removeAll("", "The String must not be empty");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string4 = StringUtils.replaceOnce("", "org.apache.commons.lang3.RegExUtils", "cYZl;Pn)8h/Hdl");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "%CGBfZqt`'%49WR5]5X";
      boolean boolean1 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.stripAccents("");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("t+$,C]-a02M;5", (String) null);
      assertEquals("t+$,C]-a02M;5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("", "", (CharSequence[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "C$");
      assertNull(string0);
      
      String string1 = StringUtils.rotate("The Array must not be null", 10);
      assertEquals("ot be nullThe Array must n", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      intArray0[1] = 10;
      String string2 = StringUtils.join(intArray0, '9', 10, 10);
      assertArrayEquals(new int[] {10, 10}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing("iy>?Azorg.apache.commons.lang3.StringUtils", (CharSequence) null, (CharSequence[]) null);
      assertEquals("iy>?Azorg.apache.commons.lang3.StringUtils", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.reverseDelimited("ot be nullThe Array must n", '*');
      assertEquals("ot be nullThe Array must n", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.endsWith("]wiUsK5{f2xZhY_k:The Character must not be null", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.stripStart("ot be nullThe Array must n", "ot be nullThe Array must n");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate("", "iy>?Azorg.apache.commons.lang3.StringUtils", 1321, 5);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.joinWith("Qj*P", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\r", "Array and element cannot both be null", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 38
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.endsWith("", " ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.upperCase("\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'O');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("F%\"V&]qHGos;&PX8^");
      assertEquals("F%\"V&]qHGos;&PX8^", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("F%\"V&]qHGos;&PX8^", "F%\"V&]qHGos;&PX8^");
      assertEquals("F%\"V&]qHGos;&PX8^", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'A';
      String string2 = StringUtils.join(doubleArray0, 'A');
      assertArrayEquals(new double[] {65.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals("65.0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("F%\"V&]qHGos;&PX8^", "F%\"V&]qHGos;&PX8^");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "F%\"V&]qHGos;&PX8^";
      String string4 = StringUtils.joinWith("iy>?Azor", objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals("iy>?AzorF%\"V&]qHGos;&PX8^", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-111);
      byteArray0[5] = (byte)85;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte) (-13);
      String string5 = StringUtils.join(byteArray0, 'A', (int) (byte)88, (-2));
      assertArrayEquals(new byte[] {(byte)124, (byte) (-37), (byte) (-111), (byte)0, (byte)64, (byte) (-74), (byte)88, (byte)76, (byte) (-13)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "F%\"V&]qHGos;&PX8^", (CharSequence) "");
      assertEquals(17, int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 17;
      longArray0[1] = (long) (byte)64;
      longArray0[2] = (long) (byte)64;
      longArray0[3] = (long) (byte) (-37);
      longArray0[4] = (long) (byte) (-74);
      longArray0[5] = (long) (byte)76;
      longArray0[6] = (long) (byte)124;
      longArray0[7] = (long) (byte)76;
      String string6 = StringUtils.join(longArray0, 'A');
      assertArrayEquals(new long[] {17L, 64L, 64L, (-37L), (-74L), 76L, 124L, 76L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals("17A64A64A-37A-74A76A124A76", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      String string0 = StringUtils.rotate("p", 953);
      assertEquals("p", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      String string1 = StringUtils.prependIfMissing("iy>?Azorg.apache.commons.lang3.StringUtils", "p", (CharSequence[]) null);
      assertEquals("piy>?Azorg.apache.commons.lang3.StringUtils", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.reverseDelimited("]wiUsK5{f2xZhY_k:The Character must not be null", '9');
      assertEquals("]wiUsK5{f2xZhY_k:The Character must not be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.endsWith("piy>?Azorg.apache.commons.lang3.StringUtils", "p");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.stripStart("p", "p");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("Threshold must not be negative", "p", 953, 1321);
      assertEquals("Threshold must not be negative", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("', has a length less than 2", "Failed to create default temp directory", (-923));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("p", "p", 98);
      assertEquals("p", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", (-2627));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("G,vw}*Qw&D|^uq");
      assertEquals("g,vw}*Qw&D|^uq", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      String string0 = StringUtils.trimToNull("jyNopt*L-{p(-Y6eYZ");
      assertEquals("jyNopt*L-{p(-Y6eYZ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "jyNopt*L-{p(-Y6eYZ", "', is neither of type Map.Entry nor an Array");
      assertEquals(1, int0);
      
      String string1 = StringUtils.join((long[]) null, 'l');
      assertNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ATNu%=bA";
      stringArray0[1] = "h";
      stringArray0[2] = "7";
      stringArray0[3] = "jyNopt*L-{p(-Y6eYZ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.substring("h", (-2126));
      assertEquals("h", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("jyNopt*L-{p(-Y6eYZ", "", "jyNopt*L-{p(-Y6eYZ");
      assertEquals("jyNopt*L-{p(-Y6eYZ", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("inj!sX_a}!inj!sX_a}!", 'f', 'l');
      assertEquals("inj!sX_a}!inj!sX_a}!", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.swapCase("ATNu%=bA");
      assertEquals("atnU%=Ba", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'M';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "atnU%=Ba", charArray0);
      assertArrayEquals(new char[] {'f', 'M', 'l', 'l'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "t^I]$gE+%%w3Dz";
      stringArray0[1] = "";
      stringArray0[2] = "t^I]$gE+%%w3Dz";
      String string1 = StringUtils.chomp("Vfs'<Yi4,", "ingUtils");
      assertEquals("Vfs'<Yi4,", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Iterator<Locale.Category> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("ingUtils"));
      
      Iterator<Object> iterator1 = linkedList0.iterator();
      assertNotNull(iterator1);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("ingUtils"));
      
      String string2 = StringUtils.join(iterator1, 'e');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("ingUtils"));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "G");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.trimToNull("t^I]$gE+%%w3Dz");
      assertEquals("t^I]$gE+%%w3Dz", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("", "", 2);
      assertEquals("", string1);
      assertNotNull(string1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2;
      String string2 = StringUtils.join(longArray0, ' ');
      assertArrayEquals(new long[] {2L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals("2", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "2";
      stringArray0[4] = "2";
      String string3 = StringUtils.stripEnd("Array element ", "");
      assertEquals("Array element ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.toRootUpperCase("y@Ca0$+M2!c)'eOx=;9");
      assertEquals("Y@CA0$+M2!C)'EOX=;9", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int0 = StringUtils.lastOrdinalIndexOf("2", "Threshold must not be negative", 913);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle((String) null, "", 2);
      assertNull(string1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2;
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "";
      stringArray0[6] = null;
      stringArray0[7] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.trimToEmpty(string0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[0];
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle((String) null, "x>", (-2003));
      assertNull(string1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-2003);
      longArray0[1] = (long) (-2003);
      longArray0[2] = (long) (-2003);
      longArray0[3] = (long) (-2003);
      longArray0[4] = (long) (-2003);
      longArray0[5] = (long) (-2003);
      longArray0[6] = (long) (-2003);
      longArray0[7] = (long) (-2003);
      longArray0[8] = (long) (-2003);
      String string2 = StringUtils.join(longArray0, ' ');
      assertArrayEquals(new long[] {(-2003L), (-2003L), (-2003L), (-2003L), (-2003L), (-2003L), (-2003L), (-2003L), (-2003L)}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals("-2003 -2003 -2003 -2003 -2003 -2003 -2003 -2003 -2003", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-2003 -2003 -2003 -2003 -2003 -2003 -2003 -2003 -2003";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-2003L);
      floatArray0[1] = (float) (-2003L);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) ' ';
      floatArray0[4] = (float) (-2003L);
      floatArray0[5] = (float) (-2003L);
      floatArray0[6] = (float) (-2003L);
      floatArray0[7] = (float) (-2003L);
      floatArray0[8] = (float) (-2003L);
      String string3 = StringUtils.join(floatArray0, ' ', 1088, 1088);
      assertArrayEquals(new float[] {(-2003.0F), (-2003.0F), 0.0F, 32.0F, (-2003.0F), (-2003.0F), (-2003.0F), (-2003.0F), (-2003.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("}3/x");
      assertEquals("}3/x", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("-2003 -2003 -2003 -2003 -2003 -2003 -2003 -2003 -2003", "");
      assertEquals(0.0, double0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)13;
      String string5 = StringUtils.join(byteArray0, ',');
      assertArrayEquals(new byte[] {(byte)44, (byte)13}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals("44,13", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.replaceEachRepeatedly("inj!sX_a}!", stringArray0, (String[]) null);
      assertEquals(7, stringArray0.length);
      assertEquals("inj!sX_a}!", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("!k`gq(2.OR%nPvX");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(12, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("mX'74rg`n3<e,>!{", "T c/\"J7I1)&3@");
      assertEquals("mX'74rg`n3<e,>!{", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("mX'74rg`n3<e,>!{");
      assertEquals("mX'74rg`n3<e,>!{", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("z");
      assertEquals("z", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("z");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      boolean boolean1 = StringUtils.isAllLowerCase("z");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "z", (CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (-182));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.stripToNull("\r");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "\r", (CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.endsWithAny("\r", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-182);
      String string1 = StringUtils.join(intArray0, 'r', 4, (-1587));
      assertArrayEquals(new int[] {(-182)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean4 = StringUtils.isAllLowerCase("");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Be_EV5msb&kLg");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("'4>#LM*MDyu4M9T^@");
      assertEquals(17, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.deleteWhitespace("Be_EV5msb&kLg");
      assertEquals("Be_EV5msb&kLg", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("r>P4aMSMD", 0, '3');
      assertEquals("r>P4aMSMD", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = 'F';
      charArray0[2] = '3';
      charArray0[3] = 'F';
      charArray0[4] = 'F';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "r>P4aMSMD", charArray0);
      assertArrayEquals(new char[] {'3', 'F', '3', 'F', 'F'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad("Failed to delete temp directory ", 0);
      assertEquals("Failed to delete temp directory ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Be_EV5msb&kLg");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.mid("r>P4aMSMD", 0, 16);
      assertEquals("r>P4aMSMD", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.prependIfMissing("'4>#LM*MDyu4M9T^@", "Failed to delete temp directory ", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("Failed to delete temp directory '4>#LM*MDyu4M9T^@", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '3';
      charArray1[1] = 'E';
      charArray1[2] = 'n';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Failed to delete temp directory ", charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'3', 'E', 'n'}, charArray1);
      assertEquals(3, charArray1.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = StringUtils.compare("Failed to delete temp directory ", "Failed to delete temp directory '4>#LM*MDyu4M9T^@");
      assertEquals((-17), int0);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      String string0 = StringUtils.substringBetween("+N@f.Tob", "+N@f.Tob");
      assertNull(string0);
      
      String string1 = StringUtils.replaceChars("4mZ3;M&I", 'q', 'A');
      assertEquals("4mZ3;M&I", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("4mZ3;M&I", 5);
      assertEquals("4mZ3;M&I", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNotEmpty("4mZ3;M&I");
      assertTrue(boolean0);
      
      String string3 = StringUtils.defaultString("+N@f.Tob", "4mZ3;M&I");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("\n\r", "+N@f.Tob");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd("xf(N^<ayaKG4`@V&Ji", "xf(N^<ayaKG4`@V&Ji");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.toRootUpperCase("");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 72);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      String string0 = StringUtils.removeStart("Failed to create custom temp directory", "Failed to create custom temp directory");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("aR^mP[DTf@I", "aR^mP[DTf@I", "Failed to create custom temp directory");
      assertEquals("Failed to create custom temp directory", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(vector0);
      assertNotNull(arrayDeque0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("aR^mP[DTf@I"));
      
      String string2 = StringUtils.join((Iterable<?>) arrayDeque0, (String) null);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("aR^mP[DTf@I"));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Y\\^7B!e", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      String string0 = StringUtils.repeat('8', 2588);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) string0;
      charSequenceArray0[1] = (CharSequence) string0;
      charSequenceArray0[2] = (CharSequence) string0;
      charSequenceArray0[3] = (CharSequence) string0;
      charSequenceArray0[4] = (CharSequence) string0;
      charSequenceArray0[5] = (CharSequence) string0;
      String string1 = StringUtils.substringBetween("=3B'9\">", "=3B'9\">");
      assertNull(string1);
      
      charSequenceArray0[6] = (CharSequence) null;
      String string2 = StringUtils.joinWith(string0, charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[7] = (CharSequence) string2;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, '$');
      assertEquals(8, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", 128, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverAborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("Aborting to protect against StackOverflowError - output of one loop is the input of another", 705, (-3143));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      String string0 = StringUtils.left("Failed to create custom temp rectory", 14);
      assertEquals("Failed to crea", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      String string0 = StringUtils.strip("*v&~RH%", "*v&~RH%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*v&~RH%";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "*v&~RH%";
      stringArray0[5] = "*v&~RH%";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      String string1 = StringUtils.join(doubleArray0, 'p');
      assertArrayEquals(new double[] {1.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals("1.0p1.0p0.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", (String) null, "3");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "*v&~RH%";
      objectArray0[1] = (Object) 0.0;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) 1.0;
      objectArray0[5] = (Object) "*v&~RH%";
      objectArray0[6] = object0;
      objectArray0[7] = object1;
      objectArray0[8] = (Object) "";
      String string3 = StringUtils.joinWith((String) null, objectArray0);
      assertEquals(9, objectArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("", (-1), 'B');
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("*v&~RH%", "`!%eYT5=Ff");
      assertEquals("*v&~RH%", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", (short)0);
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      String string0 = StringUtils.replaceEach("", (String[]) null, (String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart((String) null, "Urvn");
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("c.T", ';');
      assertEquals(";c.T;", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("{ZOdc\ra=}hw", (-98), ';');
      assertEquals("{ZOdc\ra=}hw", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      String string0 = StringUtils.substringBetween(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      String string0 = StringUtils.stripAccents("9rBe+2m");
      assertEquals("9rBe+2m", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("9rBe+2m", 10, 10);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "{fXz:47O09}");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("[nM1Eb(.bmrE9,q9C^#");
      assertEquals(16, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(16, stringArray0.length);
      assertEquals("[", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'j');
      assertEquals("DISPLAY", string0);
      assertNotNull(string0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string1 = StringUtils.defaultString("]_|c");
      assertEquals("]_|c", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank("", "Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("oSv%y", "]_|c");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.repeat('j', 2088);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[1] = (CharSequence) "DISPLAY";
      charSequenceArray0[2] = (CharSequence) "DISPLAY";
      charSequenceArray0[3] = (CharSequence) "]_|c";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "DISPLAY";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.remove("]_|c", 'Q');
      assertEquals("]_|c", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("oSv%y", string3);
      assertEquals("oSv%y", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat('Q', 2088);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("oSv%y", string7);
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", " ");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "\n");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("org.apache.commons.lang3.RegExUtils", "org.apache.commons.lang3.RegExUtils");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\n", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      String string0 = StringUtils.stripEnd("hx", "\"^s`c'=uW");
      assertEquals("hx", string0);
      assertNotNull(string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string0));
      
      Iterator<String> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(string0));
      
      String string1 = StringUtils.join(iterator0, '\\');
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(treeSet0.contains(string1));
      
      double double0 = StringUtils.getJaroWinklerDistance(" in an array of ", "hx");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      String string0 = StringUtils.wrap("gq-0'_QBo&&hA,;x", '}');
      assertEquals("}gq-0'_QBo&&hA,;x}", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "gq-0'_QBo&&hA,;x", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("}gq-0'_QBo&&hA,;x}", "gq-0'_QBo&&hA,;x");
      assertEquals(22, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.substringBetween("gq-0'_QBo&&hA,;x", "}gq-0'_QBo&&hA,;x}");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(":\"<X@-L~m", ":Rt#+L\u0003SM", ":\"<X@-L~m");
      assertNull(stringArray0);
      
      String string2 = StringUtils.truncate("maxWith cannot be negative", 96, 628);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "8N");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "inj!sX_a}!");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "maxWith cannot be negative");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      String string0 = StringUtils.removeStart("Failed to create custom temp directory", "Failed to create custom temp directory");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("\n", 6);
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove(" f)", " f)");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1276);
      shortArray0[1] = (short)15;
      shortArray0[2] = (short)3;
      shortArray0[4] = (short) (-1683);
      shortArray0[5] = (short) (-3312);
      shortArray0[6] = (short)1163;
      String string3 = StringUtils.trimToNull("B[[UB|XA{n;x)?9i5");
      assertEquals("B[[UB|XA{n;x)?9i5", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart("\n", "Failed to create custom temp directory");
      assertEquals("\n", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfterLast("QN", "The Character must");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.removeAll("", "");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 318);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object0));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      String string0 = StringUtils.join(objectArray0, 'g');
      assertEquals(7, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "java.lang.Object@70a1fe8fgjava.lang.Object@1b829876gjava.lang.Object@cbfb99gjava.lang.Object@3b83431egjava.lang.Object@44a98767gjava.lang.Object@4b67f6acgjava.lang.Object@14afdb6a", "java.lang.Object@70a1fe8fgjava.lang.Object@1b829876gjava.lang.Object@cbfb99gjava.lang.Object@3b83431egjava.lang.Object@44a98767gjava.lang.Object@4b67f6acgjava.lang.Object@14afdb6a");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("{1JnG:rF|2)x dy", "java.lang.Object@70a1fe8fgjava.lang.Object@1b829876gjava.lang.Object@cbfb99gjava.lang.Object@3b83431egjava.lang.Object@44a98767gjava.lang.Object@4b67f6acgjava.lang.Object@14afdb6a", "java.lang.Object@70a1fe8fgjava.lang.Object@1b829876gjava.lang.Object@cbfb99gjava.lang.Object@3b83431egjava.lang.Object@44a98767gjava.lang.Object@4b67f6acgjava.lang.Object@14afdb6a");
      assertEquals("{1JnG:rF|2)x dy", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "{1JnG:rF|2)x dy", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*&CVH%";
      String[] stringArray1 = StringUtils.substringsBetween("m0i;", "*&CVH%", "m0i;");
      assertNull(stringArray1);
      
      String string0 = StringUtils.stripToNull(" it'n`D5O'V;");
      assertEquals("it'n`D5O'V;", string0);
      assertNotNull(string0);
      
      String[] stringArray2 = StringUtils.split(" it'n`D5O'V;");
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      boolean boolean0 = StringUtils.isAllUpperCase("*&CVH%");
      assertFalse(boolean0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "*&CVH%");
      assertNotNull(charBuffer0);
      assertEquals(6, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals("*&CVH%", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.capacity());
      
      int int0 = StringUtils.indexOfAny((CharSequence) charBuffer0, (char[]) null);
      assertEquals((-1), int0);
      assertEquals(6, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals("*&CVH%", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.capacity());
      
      String string1 = StringUtils.replaceEachRepeatedly("\r", stringArray0, (String[]) null);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(9, stringArray0.length);
      assertEquals("\r", string1);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      int int1 = StringUtils.indexOfAny((CharSequence) stringBuffer0, (char[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      String string2 = StringUtils.rotate("it'n`D5O'V;", 32);
      assertEquals("t'n`D5O'V;i", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEachRepeatedly(", org.junitpioneer.vintage.ExpectedExceptionExtension,L", stringArray2, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertEquals(", org.junitpioneer.vintage.ExpectedExceptionExtension,L", string3);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", "", (-1));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (-182));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean2 = stack0.add(locale_Category0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[FORMAT]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      boolean boolean3 = stack0.add(locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(stack0.isEmpty());
      assertEquals("[FORMAT, FORMAT]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(locale_Category0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      stack0.sort(comparator0);
      assertFalse(stack0.isEmpty());
      assertEquals("[FORMAT, FORMAT]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(locale_Category0));
      
      String string0 = StringUtils.join((List<?>) stack0, "\r", 322, (-182));
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(stack0.isEmpty());
      assertEquals("[FORMAT, FORMAT]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(locale_Category0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replacePattern("io", "io", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean4 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "%{F`50", (-182), 3468);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -182
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "The String must not be empy", (CharSequence) "The String must not be empy");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" ", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = 1.0;
      doubleArray0[1] = (double) 'p';
      doubleArray0[3] = (-4.842164362441947);
      doubleArray0[4] = (double) 'p';
      doubleArray0[5] = 2.6773937450913587;
      doubleArray0[7] = 2.6773937450913587;
      doubleArray0[8] = (double) 'p';
      String string0 = StringUtils.replaceChars("Xf'52Wx^[bk", "Xf'52Wx^[bk", "Don't clear/set the same property more than once.");
      assertEquals("Don't clear", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("Xf'52Wx^[bk", 10, "");
      assertEquals("Xf'52Wx^[bk", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("$s", "", 108);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      String string0 = "";
      String string1 = "lcD(C";
      String string2 = StringUtils.removeStart("", "lcD(C");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = 6;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("lcD(C", "", 6, 6);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      String string0 = StringUtils.abbreviate("A,D]`fE", "", 6, 6);
      assertEquals("A,D]`f", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "A,D]`f", (CharSequence) "A,D]`fE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      String string0 = StringUtils.rotate("p", 953);
      assertEquals("p", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      String string1 = StringUtils.join(intArray0, '9', 953, 953);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissing("iy>?Azorg.apache.commons.lang3.StringUtils", "p", (CharSequence[]) null);
      assertEquals("piy>?Azorg.apache.commons.lang3.StringUtils", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("]wiUsK5{f2xZhY_k:The Character must not be null", '9');
      assertEquals("]wiUsK5{f2xZhY_k:The Character must not be null", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.endsWith("piy>?Azorg.apache.commons.lang3.StringUtils", "p");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.stripStart("p", "");
      assertEquals("p", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Threshold must not be negative", "", (-697), 1321);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      String string0 = StringUtils.repeat("/", "/", 2);
      assertEquals("///", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "///", (CharSequence) "/", 2);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "///";
      stringArray0[1] = "///";
      stringArray0[2] = "///";
      stringArray0[3] = "///";
      stringArray0[4] = "/";
      stringArray0[5] = "/";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("/", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("/");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("///", stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.defaultString("be empty");
      assertEquals("be empty", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultIfEmpty("<D4b.4]APP-z", "[n@M");
      assertEquals("<D4b.4]APP-z", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, "Minimum abbreviation width with offset is %d", (-1), (-1552));
      assertEquals(6, stringArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '|', (-525), (-525));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("org.junitpioneer.jup[ter.SystemlroertyEltensionmG,vw}*Qw&D|^uq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      String string0 = StringUtils.replaceChars(",tmiVA]0K^", ",tmiVA]0K^", "RY.");
      assertEquals("RY.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'x', (-382), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      String string0 = StringUtils.swapCase("TNl2!;h4");
      assertEquals("tnL2!;H4", string0);
      assertNotNull(string0);
      
      int int0 = (-69);
      int int1 = StringUtils.lastIndexOf((CharSequence) "tnL2!;H4", (-69));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.defaultString("TNl2!;h4");
      assertEquals("TNl2!;h4", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank("rwbbUoN!P6", "rwbbUoN!P6");
      assertEquals("rwbbUoN!P6", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = "...";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("...", "rwbbUoN!P6");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.repeat('7', (-69));
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("rwbbUoN!P6", "tnL2!;H4");
      assertFalse(boolean0);
      
      String string5 = StringUtils.remove("", '7');
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'J', (-69), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("A}l/|bP]Zp?a[H:a", "A}l/|bP]Zp?a[H:a", "A}l/|bP]Zp?a[H:a");
      assertEquals("A}l/|bP]Zp?a[H:a", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "A}l/|bP]Zp?a[H:a", (CharSequence) "A}l/|bP]Zp?a[H:a");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) "\r");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      String string0 = StringUtils.strip("*v&~RH%", "*v&~RH%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceAll("gZTot'GK6", "gZTot'GK6", "Illegal range. The step cannot be zero.");
      assertEquals("Illegal range. The step cannot be zero.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("*v&~RH%", "");
      assertEquals(7, int0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      String string2 = StringUtils.stripToNull("Failed to create default temp directory");
      assertEquals("Failed to create default temp directory", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Illegal range. The step cannot be zero.", (CharSequence) "Illegal range. The step cannot be zero.");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.endsWithAny("o", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.stripAccents("");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = ": &XT9pxH\\6}q_6Jy";
      stringArray0[1] = "UVHDO}HIdOj";
      stringArray0[2] = "UVHDO}HIdOj";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("UVHDO}HIdOj", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "b935Eunx%&BI1zc1y:";
      stringArray0[1] = "b935Eunx%&BI1zc1y:";
      stringArray0[2] = "b935Eunx%&BI1zc1y:";
      stringArray0[3] = "b935Eunx%&BI1zc1y:";
      stringArray0[2] = "b935Eunx%&BI1zc1y:";
      stringArray0[5] = "b935Eunx%&BI1zc1y:";
      String string0 = StringUtils.replaceEach("b935Eunx%&BI1zc1y:", stringArray0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("b935Eunx%&BI1zc1y:", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("", "Urvn");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("Urvn", ';');
      assertEquals(";Urvn;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.split("b935Eunx%&BI1zc1y:", "b935Eunx%&BI1zc1y:", (-1610612734));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.replace("p{InCombiningDiacriticalMarks}+", "maxWith cannot be negative", "j;,p?uiXxj%zb<}Hv_qx", Integer.MIN_VALUE);
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.unwrap("H__hZ;:D-ev", '[');
      assertEquals("H__hZ;:D-ev", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "H__hZ;:D-ev";
      String string1 = StringUtils.right("", 53);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-515);
      shortArray0[2] = (short)32;
      shortArray0[3] = (short) (-2729);
      shortArray0[4] = (short)76;
      String string2 = StringUtils.join(shortArray0, '[', (int) (short)76, (int) (short) (-1026));
      assertArrayEquals(new short[] {(short)0, (short) (-515), (short)32, (short) (-2729), (short)76, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replace((String) null, "Y\\^7B!e", "");
      assertNull(string3);
      
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(vector0);
      assertNotNull(arrayDeque0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("H__hZ;:D-ev"));
      
      String string4 = StringUtils.join((Iterable<?>) arrayDeque0, "H__hZ;:D-ev");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("H__hZ;:D-ev"));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.junitpioneer.jupiter.TempDirectory", "H__hZ;:D-ev");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compare(">\"&&VD~ovU$[vC)8gz", ">", true);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("\nAborting to protect against StackOverflowError - output of one loop is the input of another", "\nAborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("\nAborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      String string0 = StringUtils.wrap("gq-0'_QBo&&hA,;x", '}');
      assertEquals("}gq-0'_QBo&&hA,;x}", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "gq-0'_QBo&&hA,;x", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("}gq-0'_QBo&&hA,;x}", "gq-0'_QBo&&hA,;x");
      assertEquals(22, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.defaultString("gq-0'_QBo&&hA,;x");
      assertEquals("gq-0'_QBo&&hA,;x", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank("gq-0'_QBo&&hA,;x", "}gq-0'_QBo&&hA,;x}");
      assertEquals("gq-0'_QBo&&hA,;x", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, " ");
      assertNull(stringArray0);
      
      String string3 = StringUtils.repeat('7', 2088);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.remove("gq-0'_QBo&&hA,;x", 'C');
      assertEquals("gq-0'_QBo&&hA,;x", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("gq-0'_QBo&&hA,;x", "offset cannot be negative");
      assertEquals("gq-0'_QBo&&hA,;x", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, "?Lat5x3PJ>IS~");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceChars("p{InCombiningDiacriticalMarks}+", 'V', 'o');
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", 2, "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "?Lat5x3PJ>IS~";
      charSequenceArray0[1] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[2] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[3] = (CharSequence) "ingUtils";
      charSequenceArray0[4] = (CharSequence) "@@q}b`KA_ca.Fu\"";
      charSequenceArray0[5] = (CharSequence) "ingUtils";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("?Lat5x3PJ>IS~p{InCombiningDiacriticalMarks}+Aborting to protect against StackOverflowError - output of one loop is the input of anotheringUtils@@q}b`KA_ca.Fu\"ingUtils", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.abbreviate("Timeout", (String) null, (-1));
      assertEquals("Timeout", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      String string0 = StringUtils.removeStart("Failed to create custom temp directory", "Failed to create custom temp directory");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("?j/PN_9:`[", 6, "");
      assertEquals("?j/PN_9:`[", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Failed to create custom temp directory", "?j/PN_9:`[", 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string0 = StringUtils.leftPad("Threshold must not be negative\n\r", 0, "Threshold must not be negative\n\r");
      assertEquals("Threshold must not be negative\n\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("Threshold must not be negative\n\r");
      assertEquals(32, int0);
      
      String string1 = StringUtils.defaultString("Threshold must not be negative\n\r");
      assertEquals("Threshold must not be negative\n\r", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "M(}gE#G~UX";
      String string3 = StringUtils.remove("Threshold must not be negative\n\r", "M(}gE#G~UX");
      assertEquals("Threshold must not be negative\n\r", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative\n\r";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Expected exactly one annotation to provide an ArgumentSource, found %d.", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = "Minimum abbreviation width is %d";
      String string5 = StringUtils.removeIgnoreCase("Threshold must not be negative\n\r", "Minimum abbreviation width is %d");
      assertEquals("Threshold must not be negative\n\r", string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Threshold must not be negative\n\r", (CharSequence) "Expected exactly one annotation to provide an ArgumentSource, found %d.", 513);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.toRootUpperCase((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.trimToNull("Threshold must not be negative\n\r");
      assertEquals("Threshold must not be negative", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, charSequenceArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "The String must not be empy", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("The String must not be empy");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "e", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.join((char[]) null, '5');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      String string0 = StringUtils.substringBefore("\n", "\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      int int0 = StringUtils.getFuzzyDistance("Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.", locale0);
      assertEquals(115, int0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.substring((String) null, 115, 115);
      assertNull(string0);
      
      String string1 = StringUtils.prependIfMissing("Illegal range. The step cannot be zero.", (CharSequence) null, charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("Illegal range. The step cannot be zero.", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "Illegal range. The step cannot be zero.";
      charSequenceArray0[1] = (CharSequence) "Illegal range. The step cannot be zero.";
      charSequenceArray0[2] = (CharSequence) "Illegal range. The step cannot be zero.";
      charSequenceArray0[3] = (CharSequence) "Illegal range. The step cannot be zero.";
      charSequenceArray0[4] = (CharSequence) "Illegal range. The step cannot be zero.";
      int int1 = StringUtils.lastIndexOfAny("Illegal range. The step cannot be zero.", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      String string0 = StringUtils.substringBetween("+N@f.Tob", "+N@f.Tob");
      assertNull(string0);
      
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "+N@f.Tob", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      try { 
        StringUtils.toString(byteArray0, ")");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "C$");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((double[]) null, '}');
      assertNull(string1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1424;
      shortArray0[0] = (short)0;
      String string2 = StringUtils.join(shortArray0, 't', 0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.abbreviate("C$", (String) null, 50);
      assertEquals("C$", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 't');
      assertEquals(0, int0);
      
      String string4 = StringUtils.left((String) null, 0);
      assertNull(string4);
      
      String string5 = StringUtils.defaultString("'|{fe{WthL8;,#&", (String) null);
      assertEquals("'|{fe{WthL8;,#&", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string6 = StringUtils.defaultIfEmpty((String) null, "");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.difference("6P2{y@:", "");
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String string8 = StringUtils.substring("", (int) (short)0, 0);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string2));
      assertNotNull(string8);
      
      String string9 = StringUtils.stripToNull("64 x9M&x]>GSq");
      assertEquals("64 x9M&x]>GSq", string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      
      String string10 = StringUtils.getDigits("");
      assertEquals("", string10);
      assertTrue(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string6));
      assertNotNull(string10);
      
      int int1 = StringUtils.indexOf((CharSequence) null, 0, 50);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("", "org.apache.commons.lang3.ArrayUtils", false);
      assertEquals((-35), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'P');
      assertEquals(5, charSequenceArray0.length);
      assertEquals("PPPP", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("", (-3143), "");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 705;
      doubleArray0[2] = (double) 16;
      String string2 = StringUtils.join(doubleArray0, '.', 977, 2);
      assertArrayEquals(new double[] {(-1.0), 705.0, 16.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'j');
      assertEquals("DISPLAY", string0);
      assertNotNull(string0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string1 = StringUtils.substring("DISPLAY", 96, (-873));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = 'N';
      charArray0[2] = '@';
      charArray0[3] = 'j';
      String string2 = StringUtils.join(charArray0, '(');
      assertArrayEquals(new char[] {'z', 'N', '@', 'j'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("z(N(@(j", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.swapCase("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "DISPLAY";
      charSequenceArray0[3] = (CharSequence) "DISPLAY";
      String string4 = StringUtils.repeat("[)CHLV]go?4", 14);
      assertEquals("[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4[)CHLV]go?4";
      charSequenceArray0[5] = (CharSequence) "DISPLAY";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "DISPLAY";
      charSequenceArray0[8] = (CharSequence) "M.#QqNzYDZ!NM4U@";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2326.0);
      doubleArray0[1] = (-3296.65406);
      doubleArray0[2] = 3479.064282614;
      doubleArray0[3] = (-2731.0);
      doubleArray0[4] = (-197.0527579797);
      String string0 = StringUtils.join(doubleArray0, 'E', 0, 0);
      assertArrayEquals(new double[] {(-2326.0), (-3296.65406), 3479.064282614, (-2731.0), (-197.0527579797)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny("", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "m", (CharSequence) "m", 5686);
      assertEquals(0, int0);
      
      String string0 = StringUtils.substringBeforeLast("IV38T]1 U", "m");
      assertEquals("IV38T]1 U", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      String string0 = StringUtils.strip("*v&~RH%", "*v&~RH%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*v&~RH%";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "*v&~RH%";
      stringArray0[5] = "*v&~RH%";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      String string1 = StringUtils.join(doubleArray0, 'p');
      assertArrayEquals(new double[] {1.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals("1.0p1.0p0.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", (String) null, "3");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string3 = StringUtils.reverseDelimited(stringArray0[3], '-');
      assertEquals(9, stringArray0.length);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.endsWith("", "*v&~RH%");
      assertFalse(boolean0);
      
      String string4 = StringUtils.stripStart("&RV`^fbRbu+=5", (String) null);
      assertEquals("&RV`^fbRbu+=5", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", "/`a:<E7", 1321, (-697));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'j');
      assertEquals("DISPLAY", string0);
      assertNotNull(string0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      boolean boolean0 = enumSet0.add(locale_Category1);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertTrue(boolean0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string1 = StringUtils.substring("DISPLAY", 96, (-873));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'j';
      floatArray0[1] = (float) 96;
      String string2 = StringUtils.join(floatArray0, 'j', 0, 0);
      assertArrayEquals(new float[] {106.0F, 96.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("DISPLAY", "DISPLAY", "3':YW%.^f", 96);
      assertEquals("3':YW%.^f", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.toRootUpperCase("");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStart("", "Search and Replace array lengths don't match: ");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.stripStart(", Length: ", "");
      assertEquals(", Length: ", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.reverseDelimited("HBAXV\",7@CjR6E+", 'j');
      assertEquals("R6E+jHBAXV\",7@C", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String string8 = StringUtils.unwrap("HBAXV\",7@CjR6E+", "Threshold must not be negative\n\r");
      assertEquals("HBAXV\",7@CjR6E+", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      
      int int0 = StringUtils.indexOf((CharSequence) "R6E+jHBAXV\",7@C", (CharSequence) "HBAXV\",7@CjR6E+", 153);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) stringArray0[0], (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.removeStart("F%\"V&]qHGos;&PX8^'i8aC*Z*MX6", "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("F%\"V&]qHGos;&PX8^'i8aC*Z*MX6", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("DefaultLocale", 'k');
      assertEquals("DefaultLocale", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "\n", (CharSequence) null, 18);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      String string0 = StringUtils.strip("DefaultTimeZone");
      assertEquals("DefaultTimeZone", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("DefaultTimeZone");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rotate("DefaultTimeZone", 13);
      assertEquals("faultTimeZoneDe", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "DefaultTimeZone", (CharSequence) "faultTimeZoneDe");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.stripEnd(" r]2", "DefaultTimeZone");
      assertEquals(" r]2", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("DefaultTimeZone", " r]2", 13);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "DefaultTimeZone", (CharSequence) "DefaultTimeZone");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "DefaultTimeZone";
      charSequenceArray0[1] = (CharSequence) " r]2";
      charSequenceArray0[2] = (CharSequence) "DefaultTimeZone";
      charSequenceArray0[3] = (CharSequence) "faultTimeZoneDe";
      charSequenceArray0[4] = (CharSequence) "DefaultTimeZone";
      charSequenceArray0[5] = (CharSequence) "DefaultTimeZone";
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      String string0 = StringUtils.replaceChars(";>LFV 8;|{R", ";>LFV 8;|{R", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      String string0 = StringUtils.substringBetween("+N@f.Tob", "+N@f.Tob");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+N@f.Tob", (String) null, (-11));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripEnd("ExpectedException", "hx");
      assertEquals("ExpectedException", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("ExpectedException", "+N@f.Tob", 3166);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "ExpectedException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      String string0 = StringUtils.removeStart("Failed to create custom temp directory", "Failed to create custom temp directory");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("iy>?Az", "", 76, 3324);
      assertEquals("iy>?Az", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "iy>?Az";
      String string2 = StringUtils.leftPad("", 160, '~');
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[1] = (CharSequence) "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";
      charSequenceArray0[2] = (CharSequence) "iy>?Az";
      charSequenceArray0[3] = (CharSequence) "Failed to create custom temp directory";
      charSequenceArray0[4] = (CharSequence) "iy>?Az";
      charSequenceArray0[5] = (CharSequence) "";
      String string3 = StringUtils.replace("\n", "iy>?Az", "Object varargs must not be null");
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[6] = (CharSequence) "\n";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "iy>?Az";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Locale must not be null", "Locale must not be null");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replace("Locale must not be null", "Locale must not be null", "Locale must not be null");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      String string0 = StringUtils.trim("+N@f.Tob");
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+N@f.Tob", "+N@f.Tob", (-11));
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.overlay("+N@f.Tob", "", 76, 2);
      assertEquals("+N", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)732;
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("V");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join(iterator0, "LhV,#");
      assertEquals("FORMAT", string0);
      assertNotNull(string0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      boolean boolean0 = StringUtils.isAllUpperCase("FORMAT");
      assertTrue(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("LhV,#"));
      
      String string1 = StringUtils.join((List<?>) linkedList0, 'a', 6, 6);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("LhV,#"));
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("maxWith cannot be negative");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      String string0 = StringUtils.removeStart("Failed to create custom temp directory", "Failed to create custom temp directory");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("\n", 6);
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove(" f)", " f)");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1276);
      shortArray0[1] = (short)15;
      shortArray0[2] = (short)3;
      shortArray0[3] = (short) (-3745);
      shortArray0[4] = (short) (-1683);
      shortArray0[5] = (short) (-3312);
      shortArray0[6] = (short)1163;
      shortArray0[7] = (short)10;
      String string3 = StringUtils.join(shortArray0, '\"', 48, (int) (short) (-3312));
      assertArrayEquals(new short[] {(short) (-1276), (short)15, (short)3, (short) (-3745), (short) (-1683), (short) (-3312), (short)1163, (short)10}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      String string0 = StringUtils.defaultString("cYZl;Pn)8h/Hdl", "B");
      assertEquals("cYZl;Pn)8h/Hdl", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("", ')', 'V');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string3 = "...";
      String string4 = StringUtils.defaultString("", "...");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string5);
      
      String string6 = StringUtils.abbreviate("gI'VDbQ{", 65);
      assertEquals("gI'VDbQ{", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.remove("N.o*", "gI'VDbQ{");
      assertEquals("N.o*", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.isAllUpperCase("N.o*");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = 4;
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'L', 0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      String string0 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string0);
      assertNotNull(string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.swapCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("aBORTING TO PROTECT AGAINST sTACKoVERFLOWeRROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("aBORTING TO PROTECT AGAINST sTACKoVERFLOWeRROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER");
      assertEquals(35, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.LF;
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("J\\g7GG BaHfDID3_", (-4408));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.trim("aBORTING TO PROTECT AGAINST sTACKoVERFLOWeRROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER");
      assertEquals("aBORTING TO PROTECT AGAINST sTACKoVERFLOWeRROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "J\\g7GG BaHfDID3_", (CharSequence[]) stringArray0);
      assertEquals(35, stringArray0.length);
      assertEquals(6, int0);
      
      String string5 = StringUtils.substringBeforeLast("rKexuA.1jgg", "}~'rZ>|';$LF");
      assertEquals("rKexuA.1jgg", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      String string0 = StringUtils.stripAccents("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("Om");
      assertEquals("Om", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("Om");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Om");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "G2DX36IpO,9A", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("Om");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-35);
      byteArray0[4] = (byte)47;
      try { 
        StringUtils.toString(byteArray0, "s tQJ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (-182));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.stripToNull("\r");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "\r", (CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.endsWithAny("\r", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string1 = StringUtils.stripAccents("XK]X");
      assertEquals("XK]X", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Can only resolve parameter of type ", (CharSequence) "Can only resolve parameter of type ", 13);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      long[] longArray0 = new long[20];
      String string0 = StringUtils.join(longArray0, 'k');
      assertEquals(20, longArray0.length);
      assertEquals("0k0k0k0k0k0k0k0k0k0k0k0k0k0k0k0k0k0k0k0", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("0k0k0k0k0k0k0k0k0k0k0k0k0k0k0k0k0k0k0k0");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("BA", "BA");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.LF;
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\n", Integer.MAX_VALUE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      
      NavigableSet<String> navigableSet0 = treeSet0.descendingSet();
      assertNotNull(navigableSet0);
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      
      String string0 = StringUtils.join((Iterable<?>) treeSet0, '_');
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(treeSet0.contains(string0));
      
      String string1 = StringUtils.trim(" in an arrV`ap oo ");
      assertEquals("in an arrV`ap oo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "in an arrV`ap oo";
      stringArray0[2] = stringArray0[0];
      stringArray0[2] = null;
      stringArray0[4] = "offset cannot be negative";
      stringArray0[5] = "in an arrV`ap oo";
      String string2 = StringUtils.join(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("in an arrV`ap oooffset cannot be negativein an arrV`ap oo", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "offset cannot be negative", (CharSequence[]) stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "d6KEnCfuWwO_C\"|j");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " in an arrV`ap oo ", (CharSequence) "d6KEnCfuWwO_C\"|j", 2690);
      assertEquals(17, int0);
      
      int[] intArray0 = new int[0];
      String string3 = StringUtils.join(intArray0, '\"', (-1207), (-1636));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "maxWith cannot be negative", (CharSequence) "maxWith cannot be negative", 321);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\r", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.EMPTY;
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 8192);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.prependIfMissing("1Z`Z)8FqB{$^t", "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("1Z`Z)8FqB{$^t", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "1Z`Z)8FqB{$^t", (CharSequence) "1Z`Z)8FqB{$^t");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = StringUtils.join(objectArray0, '>');
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ">java.lang.Object@54a29da9", (CharSequence) ">java.lang.Object@54a29da9", 13);
      assertEquals(0, int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ">java.lang.Object@54a29da9", (CharSequence) ">java.lang.Object@54a29da9");
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string1 = StringUtils.removeEnd((String) null, ">java.lang.Object@54a29da9");
      assertNull(string1);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      String string2 = StringUtils.repeat('3', 13);
      assertEquals("3333333333333", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("3333333333333");
      assertEquals("3333333333333", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "*9bZ+[V5T??;)");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("])<I#](}FVL3xl4!", "3333333333333");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = StringUtils.join(objectArray0, '>');
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "java.lang.Object@68d731d3>java.lang.Object@25864a91", (CharSequence) "java.lang.Object@68d731d3>java.lang.Object@25864a91", 13);
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "java.lang.Object@68d731d3>java.lang.Object@25864a91", 'A');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "java.lang.Object@68d731d3>java.lang.Object@25864a91", (CharSequence) "java.lang.Object@68d731d3>java.lang.Object@25864a91");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String string1 = StringUtils.replaceOnce("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string2);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      String string3 = StringUtils.repeat('A', 13);
      assertEquals("AAAAAAAAAAAAA", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)54;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'A', (int) (byte) (-105), (int) (byte)48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -105
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      String string0 = StringUtils.unwrap("Hl`ik):#EU*5,ya", "\n");
      assertEquals("Hl`ik):#EU*5,ya", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      String string0 = StringUtils.stripAccents("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("Om");
      assertEquals("Om", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("Om");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("G2DX36IpO,9A", "G2DX36IpO,9A");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "G2DX36IpO,9A", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("Om");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-35);
      String string2 = StringUtils.getDigits("Threshold must not be negative");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "Om", (int) (byte) (-35), (int) (byte) (-95));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase(" vs ", "Threshold must not be negative\n\r", false);
      assertEquals((-84), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("VA,D]`u<", "VA,D]`u<", 1);
      assertEquals(0, int0);
      
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      String string0 = StringUtils.defaultString("Threshold must not be negative", "B");
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("B", 'L', ')');
      assertEquals("B", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringAfterLast("B", "");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripEnd("O", "B");
      assertEquals("O", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.toRootUpperCase("Threshold must not be negative");
      assertEquals("THRESHOLD MUST NOT BE NEGATIVE", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int0 = StringUtils.lastOrdinalIndexOf("THRESHOLD MUST NOT BE NEGATIVE", "B", 72);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.rotate("\r", 106);
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("\n", "\n");
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "hbBf-()lP)M{LaSUPrs", 'J');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.deleteWhitespace(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getIfEmpty((String) null, (Supplier<String>) null);
      assertNull(string1);
      
      String string2 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.trim(" ");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.strip("\n", " ");
      assertEquals("\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      String string0 = StringUtils.leftPad("j`_ldUx~@H", 80);
      assertEquals("                                                                      j`_ldUx~@H", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("                                                                      j`_ldUx~@H", 80, "j`_ldUx~@H");
      assertEquals("                                                                      j`_ldUx~@H", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("The String must not be empty");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeStartIgnoreCase((String) null, "                                                                      j`_ldUx~@H");
      assertNull(string2);
      
      String string3 = StringUtils.unwrap("(", "(E8+zn");
      assertEquals("(", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("org.junitpioneer.jupiter.SystemPropertyExtension", "org.junitpioneer.jupiter.SystemPropertyExtension", 3083);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Failed to delete temp directory ", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Failed to delete temp directory ", (CharSequence) null, 4016);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string0 = StringUtils.join((float[]) null, '0', 4016, 1759);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase(",L", ",L", ",L", 3533);
      assertEquals(",L", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) ",L", 'U');
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripToEmpty("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip(",L", "\n\r");
      assertEquals(",L", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("inj!sX_a}!inj!sX_a}!", ",L");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.joinWith("ExceptionWasThrown", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("inj!sX_a}!inj!sX_a}!", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string4 = StringUtils.join(intArray0, '_', 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) ",L", 1301);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.replaceFirst("Threshold must not be negative", "Threshold must not be negative", ", org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals(", org.junitpioneer.vintage.ExpectedExceptionExtension", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.unwrap("iy>?Azor", ",L");
      assertEquals("iy>?Azor", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int2 = StringUtils.lastOrdinalIndexOf("ExceptionWasThrown", "iy>?Azor", 1301);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string7 = StringUtils.rotate("\n\r", 3542);
      assertEquals("\n\r", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Threshold must not be negative"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Threshold must not be negative"));
      
      String string8 = StringUtils.join(iterator0, (String) null);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Threshold must not be negative"));
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ",L", (CharSequence) ", org.junitpioneer.vintage.ExpectedExceptionExtension", 3542);
      assertEquals((-1), int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "\n\r");
      assertEquals((-1), int4);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      
      String[] stringArray1 = StringUtils.split("j;,piXxj%zb<}Hv_qx", "inj!sX_a}!inj!sX_a}!", 0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string9 = StringUtils.replace("p{InCombiningDiacriticalMarks}+", "...", (String) null, Integer.MIN_VALUE);
      assertEquals("p{InCombiningDiacriticalMarks}+", string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'L', 0, 0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.rightPad("", 3564, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) string1;
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      
      charSequenceArray0[2] = (CharSequence) "";
      CharSequence charSequence1 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertNull(charSequence1);
      
      charSequenceArray0[3] = null;
      char[] charArray0 = new char[9];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      charArray0[4] = 'L';
      charArray0[6] = 'L';
      charArray0[7] = 'L';
      charArray0[8] = 'L';
      String string2 = StringUtils.join(charArray0, 'L');
      assertArrayEquals(new char[] {'L', 'L', 'L', 'L', 'L', '\u0000', 'L', 'L', 'L'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("LLLLLLLLLL\u0000LLLLLL", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[4] = (CharSequence) "LLLLLLLLLL\u0000LLLLLL";
      String string3 = StringUtils.replaceEachRepeatedly(string1, (String[]) null, (String[]) null);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("9pZeor(Z", (String[]) null, (String[]) null);
      assertEquals("9pZeor(Z", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("9pZeor(Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      String string0 = StringUtils.rightPad("\n", 10);
      assertEquals("\n         ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n         ", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      String string0 = StringUtils.chomp("{^");
      assertEquals("{^", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "{^", "The String must not be empty");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, "#+(Q{d%cQ(");
      assertEquals(3, charSequenceArray0.length);
      assertEquals("#+(Q{d%cQ(#+(Q{d%cQ(", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("{^");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "{^", (CharSequence) "{^");
      assertEquals(1, int0);
      
      String string2 = StringUtils.join((char[]) null, '\'', 84, 1);
      assertNull(string2);
      
      String string3 = StringUtils.valueOf((char[]) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, 'V');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.wrap("", '6');
      assertEquals("", string0);
      assertNotNull(string0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(consumer0).toString();
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) enumSet0;
      objectArray0[1] = (Object) enumSet0;
      objectArray0[2] = (Object) consumer0;
      objectArray0[3] = (Object) locale_Category0;
      objectArray0[4] = (Object) enumSet0;
      objectArray0[5] = (Object) locale_Category0;
      objectArray0[6] = (Object) enumSet0;
      String string0 = StringUtils.join(objectArray0, 'N');
      assertEquals(7, objectArray0.length);
      assertEquals("[DISPLAY]N[DISPLAY]NnullNDISPLAYN[DISPLAY]NDISPLAYN[DISPLAY]", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap((String) null, 'N');
      assertNull(string1);
      
      String string2 = StringUtils.join((double[]) null, 'N');
      assertNull(string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("r>e>op<$]}p+ {", "B@p5( ?i6", (String) null);
      assertEquals("r>e>op<$]}p+ {", string3);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string4 = StringUtils.joinWith("B@p5( ?i6", objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals("[DISPLAY]B@p5( ?i6[DISPLAY]B@p5( ?i6nullB@p5( ?i6DISPLAYB@p5( ?i6[DISPLAY]B@p5( ?i6DISPLAYB@p5( ?i6[DISPLAY]", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      String string0 = StringUtils.upperCase("VA,D]`fE");
      assertEquals("VA,D]`FE", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      String string0 = StringUtils.removeEnd(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("oBrPb!");
      assertEquals("oBrPb!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      charArray0[3] = 'F';
      charArray0[4] = '3';
      charArray0[5] = 'F';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "oBrPb!", charArray0);
      assertArrayEquals(new char[] {'3', 'F', 'F', 'F', '3', 'F'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad(":YPY6F65P", 240);
      assertEquals("                                                                                                                                                                                                                                       :YPY6F65P", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("oBrPb!");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.mid("$=#G<22w", 8, (-2158));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.upperCase("vm(6C\"{LDT=\"3");
      assertEquals("VM(6C\"{LDT=\"3", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.prependIfMissing("O:c0^\"a0Pr*mqs", "VM(6C\"{LDT=\"3", (CharSequence[]) null);
      assertEquals("VM(6C\"{LDT=\"3O:c0^\"a0Pr*mqs", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'3', 'F', 'F', 'F', '3', 'F'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      String string0 = StringUtils.repeat("maxWith cannot be negative", 12);
      assertEquals("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "'4>#LM*MDyu4M9T^@", (CharSequence) "'4>#LM*MDyu4M9T^@", (-3563));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.repeat("Threshold must not be negative\n\r", "~'{3gl", 1104);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing("", string0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "(Al";
      Locale locale0 = null;
      try {
        locale0 = new Locale(")}^V Tr%zl987iU*g(t", (String) null, "Threshold must not be negative\n\r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '8', 3, 1887);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      String string0 = StringUtils.strip("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("oE", (-899), (-899));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'Z';
      charArray0[2] = '^';
      charArray0[3] = 'Z';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'P', 'Z', '^', 'Z'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.trimToNull("oE");
      assertEquals("oE", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "oE");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "(.";
      String string0 = StringUtils.substring("(.", (-1544), 1746);
      assertEquals("(.", string0);
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) "(.";
      charSequenceArray0[2] = (CharSequence) "(.";
      charSequenceArray0[3] = (CharSequence) "(.";
      charSequenceArray0[4] = (CharSequence) "(.";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("(.", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("lx:PR-9");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("lx:PR-9", "lx:PR-9", stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("lx:PR-9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("\r", " ", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("\r ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.appendIfMissing("\n", "\n", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", "\n");
      assertEquals((-1), int0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(locale_Category0));
      
      Stack<Locale.Category> stack1 = new Stack<Locale.Category>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertFalse(stack1.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      boolean boolean1 = stack1.add(locale_Category1);
      assertNotSame(stack1, stack0);
      assertSame(locale_Category1, locale_Category0);
      assertTrue(boolean1);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals("[DISPLAY]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertTrue(stack1.contains(locale_Category0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      assertNotSame(stack0, stack1);
      assertFalse(stack0.equals((Object)stack1));
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(locale_Category0));
      
      Stack<Locale.Category> stack2 = new Stack<Locale.Category>();
      assertTrue(stack2.equals((Object)stack0));
      assertFalse(stack2.equals((Object)stack1));
      assertNotNull(stack2);
      assertTrue(stack2.isEmpty());
      assertEquals("[]", stack2.toString());
      assertTrue(stack2.empty());
      assertEquals(0, stack2.size());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.contains(locale_Category0));
      
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      stack2.addElement(locale_Category2);
      assertSame(locale_Category2, locale_Category0);
      assertSame(locale_Category2, locale_Category1);
      assertNotSame(stack2, stack1);
      assertNotSame(stack2, stack0);
      assertTrue(stack2.equals((Object)stack1));
      assertFalse(stack2.equals((Object)stack0));
      assertEquals("[DISPLAY]", stack2.toString());
      assertFalse(stack2.isEmpty());
      assertEquals(1, stack2.size());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.empty());
      assertTrue(stack2.contains(locale_Category1));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack2, "Illegal range. There's no way to get from %s to %s with a step of %s.", (-1610612734), (-771));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1610612734
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("[H(aQX", stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.startsWithAny("inj!sX_a}!", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfAny("inj!sX_a}!", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'L', 0, 0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.rightPad("", 3564, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) string1;
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertEquals("", charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3564;
      intArray0[1] = 0;
      intArray0[2] = (int) 'L';
      String string2 = StringUtils.join(intArray0, 'r', 9, (-474));
      assertArrayEquals(new int[] {3564, 0, 76}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string1;
      stringArray0[1] = "}Y\"#I'FMm Gw9f";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals("}Y\"#I'FMm Gw9f", string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.replaceAll("s", (String) null, (String) null);
      assertEquals("s", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      int int0 = StringUtils.compareIgnoreCase("s", "");
      assertEquals(1, int0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(locale_Category0));
      
      boolean boolean0 = stack0.add(locale_Category0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[FORMAT]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      boolean boolean1 = stack0.add(locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[FORMAT, FORMAT]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(locale_Category0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      stack0.sort(comparator0);
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[FORMAT, FORMAT]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(locale_Category0));
      
      stack0.addElement(locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(3, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[FORMAT, FORMAT, FORMAT]", stack0.toString());
      assertTrue(stack0.contains(locale_Category0));
      
      String string1 = StringUtils.removeIgnoreCase((String) null, "");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("s");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviateMiddle((String) null, (String) null, 11);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      String string0 = StringUtils.strip("*v&~RH%", "*v&~RH%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*v&~RH%";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "*v&~RH%";
      stringArray0[5] = "*v&~RH%";
      stringArray0[6] = "";
      stringArray0[7] = "Minimum abbreviation width is %d";
      stringArray0[8] = "";
      String string1 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.right("junit-pioneer", 20);
      assertEquals("junit-pioneer", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 20);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.defaultIfEmpty("", "org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle((String) null, "", 18);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = '3';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'F', '3'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.leftPad("Failed to delete temp directory ", 16);
      assertEquals("Failed to delete temp directory ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.mid("", 16, (-518));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing("'4>#LM*MDyu4M9T^@", "Failed to delete temp directory ", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("Failed to delete temp directory '4>#LM*MDyu4M9T^@", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Failed to delete temp directory '4>#LM*MDyu4M9T^@", charArray0);
      assertArrayEquals(new char[] {'F', '3'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "", (CharSequence) "Failed to delete temp directory ");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\r", (CharSequence) "\n");
      assertFalse(boolean0);
      
      String string0 = StringUtils.capitalize("`/AkwL`c1<1`<Z5-f");
      assertEquals("`/AkwL`c1<1`<Z5-f", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("\"*XgbWENy$iL97dw", "\"*XgbWENy$iL97dw");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\"*XgbWENy$iL97dw", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("hbBf-()lP)M{LaSUPrs");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      String string0 = StringUtils.leftPad("3] cPpVs", 35, 'o');
      assertEquals("ooooooooooooooooooooooooooo3] cPpVs", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.leftPad("j`_ldUx~@H", 80);
      assertEquals("                                                                      j`_ldUx~@H", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("                                                                      j`_ldUx~@H", 80, "j`_ldUx~@H");
      assertEquals("                                                                      j`_ldUx~@H", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("The String must not be empty");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "The String must not be empty";
      stringArray0[1] = "";
      stringArray0[2] = "The String must not be empty";
      stringArray0[3] = "The String must not be empty";
      stringArray0[4] = "The String must not be empty";
      stringArray0[5] = "The String must not be empty";
      String string1 = StringUtils.join(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("The String must not be emptyThe String must not be emptyThe String must not be emptyThe String must not be emptyThe String must not be empty", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.getIfBlank("\n", (Supplier<String>) null);
      assertNull(string2);
      
      String string3 = StringUtils.chop("The String must not be empty");
      assertEquals("The String must not be empt", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.trim("The String must not be empt");
      assertEquals("The String must not be empt", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.removeStart("Strings must not be null", "org.apache.commons.lang3.StringUtils");
      assertEquals("Strings must not be null", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.substringAfterLast("", "");
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertNotNull(string7);
      
      String string8 = StringUtils.left("/m#3SiUm!lVQ2", (-733));
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      
      String string9 = StringUtils.toRootUpperCase("The String must not be empty");
      assertEquals("THE STRING MUST NOT BE EMPTY", string9);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      
      String string10 = StringUtils.left("The String must not be empty", 3);
      assertEquals("The", string10);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string6));
      assertNotNull(string10);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "\n", (CharSequence) "Strings must not be null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.left(" ", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(2, enumSet0.size());
      
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      String string0 = StringUtils.left("o", 928);
      assertEquals("o", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (-182));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.stripToNull("\r");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "\r", (CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.reverse((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "", (-182));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.join((Object[]) null, (String) null, (-182), (-182));
      assertNull(string3);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("\r"));
      
      String string4 = StringUtils.join((Iterable<?>) arrayDeque0, (String) null);
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("\r"));
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      
      String string5 = locale0.getDisplayLanguage();
      assertEquals("Japanese", string5);
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      
      String string6 = StringUtils.removeStartIgnoreCase((String) null, "Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertNull(string6);
      
      boolean boolean3 = arrayDeque0.add("");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(string5));
      assertTrue(arrayDeque0.contains(""));
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "m0o)z";
      String string0 = StringUtils.prependIfMissingIgnoreCase("m0o)z", "m0o)z", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("m0o)z", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("m0o)z", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.defaultIfEmpty("m0o)z", "m0o)z");
      assertEquals("m0o)z", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Kbn?Vo >f?w0r`M", "&2 4el", 313);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.toRootLowerCase("%\"gEF-,x}");
      assertEquals("%\"gef-,x}", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("m0o)z");
      assertEquals("M0o)z", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.split("m0o)z", ". The following paths could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details): ");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)97;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'C', 13, (int) (byte)114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      String string0 = StringUtils.stripAccents("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("<!f", (String) null, (-837));
      assertEquals("<!f", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      long[] longArray0 = new long[1];
      String string2 = StringUtils.join(longArray0, 'M');
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals("0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.substring("<!f", (int) 'M');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)44;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)44;
      floatArray0[2] = (float) (byte)44;
      floatArray0[3] = (float) (-837);
      floatArray0[4] = (float) ' ';
      String string4 = StringUtils.replaceChars(";HO2Tg<D~O{2", "7", (String) null);
      assertEquals(";HO2Tg<D~O{2", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string5 = StringUtils.join((Object[]) stringArray1, "G2DX36IpO,9A");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("<!f");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "G2DX36IpO,9A", (CharSequence) ";HO2Tg<D~O{2");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      String string0 = StringUtils.replaceChars("nUt=`$JQQ", "i.H RT!C7[m.3", "i.H RT!C7[m.3");
      assertEquals("nUt=`$JQQ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      String string0 = StringUtils.replaceChars("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFM+<VHf`ciTh*<MLKmbO", ")@>?mVG`C:`noRe$", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFM+<VHf`ciTh*<MLKmbO");
      assertEquals("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFM+<FHfFciTh*<MLKFbO", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object4));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object4));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object5));
      assertNotNull(object7);
      
      objectArray0[7] = object7;
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object1));
      assertFalse(object8.equals((Object)object7));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object4));
      assertFalse(object8.equals((Object)object6));
      assertFalse(object8.equals((Object)object3));
      assertFalse(object8.equals((Object)object2));
      assertFalse(object8.equals((Object)object5));
      assertNotNull(object8);
      
      objectArray0[8] = object8;
      String string0 = StringUtils.overlay("0bJ!\"eBi.^Z+7?@", "0bJ!\"eBi.^Z+7?@", 46, 46);
      assertEquals("0bJ!\"eBi.^Z+7?@0bJ!\"eBi.^Z+7?@", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)3;
      shortArray0[4] = (short)3;
      String string1 = StringUtils.join(shortArray0, '9');
      assertArrayEquals(new short[] {(short)0, (short)3, (short)0, (short)3, (short)3}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals("093909393", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotBlank("0bJ!\"eBi.^Z+7?@0bJ!\"eBi.^Z+7?@");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceChars("rgPcda", "0bJ!\"eBi.^Z+7?@0bJ!\"eBi.^Z+7?@", "0bJ!\"eBi.^Z+7?@");
      assertEquals("rgPcda", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Object[] objectArray1 = new Object[6];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = object8;
      objectArray1[1] = (Object) (short)3;
      objectArray1[2] = object1;
      objectArray1[3] = (Object) "rgPcda";
      objectArray1[4] = (Object) "rgPcda";
      Object object9 = new Object();
      assertFalse(object9.equals((Object)object4));
      assertFalse(object9.equals((Object)object8));
      assertFalse(object9.equals((Object)object1));
      assertFalse(object9.equals((Object)object2));
      assertFalse(object9.equals((Object)object3));
      assertFalse(object9.equals((Object)object7));
      assertFalse(object9.equals((Object)object6));
      assertFalse(object9.equals((Object)object5));
      assertFalse(object9.equals((Object)object0));
      assertNotNull(object9);
      
      objectArray1[5] = object9;
      String string3 = StringUtils.join(objectArray1, "0bJ!\"eBi.^Z+7?@0bJ!\"eBi.^Z+7?@");
      assertNotSame(objectArray1, objectArray0);
      assertEquals(6, objectArray1.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      String string0 = StringUtils.overlay("{?+8-wQL?^Y;a__-Zt", "{?+8-wQL?^Y;a__-Zt", (-1), 58);
      assertEquals("{?+8-wQL?^Y;a__-Zt", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((short[]) null, '0');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNotBlank("{?+8-wQL?^Y;a__-Zt");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceChars("org.apache.commons.lang3.StringUtilsStrings must not be null", "&DZ2ic/\"m~%b", "Backup");
      assertEquals("org.apaphe.poons.lang3.StrungUtulsStrungs ust not e null", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      String string3 = StringUtils.join((Object[]) null, "Array element ");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      String string0 = StringUtils.replaceChars("\n\n", "\n\n", "\n\n");
      assertEquals("\n\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      char char0 = ';';
      String string0 = StringUtils.join(iterator0, ';');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(';'));
      
      charSequenceArray0[0] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank(charSequenceArray0[0], supplier0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Iterator<Object> iterator1 = linkedList0.iterator();
      assertNotSame(iterator1, iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(';'));
      
      String string1 = "Object varargs must not be null";
      String string2 = "junit-pioneer";
      String string3 = StringUtils.substringBetween("Object varargs must not be null", "junit-pioneer");
      assertNull(string3);
      
      String string4 = "3f}HWr{d\\";
      String string5 = StringUtils.replaceOnce((String) null, "", "3f}HWr{d");
      assertNull(string5);
      
      int int0 = 1503;
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "Object varargs must not be null", 57, 1503);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1503
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.endsWithAny("The String must not be empy", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("\n");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("\n", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("O}w<1_d;i@j=@B O");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      String string0 = StringUtils.mid("Illegal range. The step cannot be zero.", 10, 10);
      assertEquals("nge. The s", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "nge. The s", 10, 2924);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.chop("\n\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringAfterLast("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("The Array must not be null");
      assertEquals("tHE aRRAY MUST NOT BE NULL", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("tHE aRRAY MUST NOT BE NULL");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      String string0 = StringUtils.chop("k72");
      assertEquals("k7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.junitpioneer.vintage.ExpectedExceptionExtension", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", (-2318));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 2307);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing(", ", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension, org.junitpioneer.vintage.ExpectedExceptionExtension", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("iy>?Azorg.apache.commons.lang3.StringUtils", 1600);
      assertEquals("tilsiy>?Azorg.apache.commons.lang3.StringU", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("", 1133, (-2318));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((String[]) null);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.getIfBlank("^4 xaDQY>J]'(t0&xE", (Supplier<String>) null);
      assertEquals("^4 xaDQY>J]'(t0&xE", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.chop("iy>?Azorg.apache.commons.lang3.StringUtils");
      assertEquals("iy>?Azorg.apache.commons.lang3.StringUtil", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.removeStartIgnoreCase("", "Locale must not be null");
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertNotNull(string7);
      
      String string8 = StringUtils.replaceOnceIgnoreCase(", ", "iy>?Az", "bkli5[V7N`");
      assertEquals(", ", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "tilsiy>?Azorg.apache.commons.lang3.StringU", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string9 = StringUtils.removeStart("\n\r", "Threshold must not be negative");
      assertEquals("\n\r", string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      
      String string10 = StringUtils.substringAfterLast("", "");
      assertEquals("", string10);
      assertFalse(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      String string0 = StringUtils.replaceAll("=q", (String) null, "=q");
      assertEquals("=q", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("org.junitpioneer.jupiter.params.FloatRange", (String) null);
      assertEquals(1, int0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean1 = stack0.add(locale_Category0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[FORMAT]", stack0.toString());
      assertTrue(stack0.contains(locale_Category0));
      
      boolean boolean2 = stack0.add(locale_Category0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[FORMAT, FORMAT]", stack0.toString());
      assertTrue(stack0.contains(locale_Category0));
      
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.util.Locale.Category.class) , any(java.util.Locale.Category.class));
      stack0.sort(comparator0);
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[FORMAT, FORMAT]", stack0.toString());
      assertTrue(stack0.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      stack0.addElement(locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertFalse(stack0.empty());
      assertEquals(3, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[FORMAT, FORMAT, FORMAT]", stack0.toString());
      assertTrue(stack0.contains(locale_Category1));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, "z3Qhp6*s>n>b8=U", 1, 3740);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3740
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      String string0 = StringUtils.replaceAll("=q", (String) null, "=q");
      assertEquals("=q", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("org.junitpioneer.jupiter.params.FloatRange", (String) null);
      assertEquals(1, int0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split("o");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.stripAccents("L[w$B:^");
      assertEquals("L[w$B:^", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("N@dS{au&xWPtM/@f");
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("N@dS{au&xWPtM/@f", "N@dS{au&xWPtM/@f");
      assertEquals(1.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("n@ds{au&xwptm/@f", "n@ds{au&xwptm/@f");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3
         // n@ds{au&xwptm/@f
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object0));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("#O", "yX.]l(bE@");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 9
         // yX.]l(bE@
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      String string0 = StringUtils.removeFirst("w;<t @.`'0P`ny", "w;<t @.`'0P`ny");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'y', (-1401), (-347));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1401
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, ';');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(';'));
      
      charSequenceArray0[0] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string1 = StringUtils.toRootLowerCase("offset cannot be negative");
      assertEquals("offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "]";
      String string3 = StringUtils.capitalize("]");
      assertEquals("]", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("]", "offset cannot be negative");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte byte0 = (byte)97;
      byte byte1 = (byte)16;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)16;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '`', 5, (int) (byte)16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      String string0 = StringUtils.capitalize("The ChLracte* mus\" not be null");
      assertEquals("The ChLracte* mus\" not be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.chomp("Qt");
      assertEquals("Qt", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart(", Length: ", "Illegal range. The step cannot be zero.");
      assertEquals(", Length: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", 724, 28);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "Qt", true);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints(";>LFV 8;|{R");
      assertEquals(11, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.join(intArray0, 's');
      assertEquals(11, intArray0.length);
      assertEquals("59s62s76s70s86s32s56s59s124s123s82", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase(";>LFV 8;|{R");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)21;
      String string0 = StringUtils.join(byteArray0, '-');
      assertArrayEquals(new byte[] {(byte)0, (byte) (-48), (byte)31, (byte)86, (byte)72, (byte)21}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals("0--48-31-86-72-21", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 369;
      String string1 = StringUtils.join(intArray0, '}');
      assertArrayEquals(new int[] {369}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("369", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase(" ", " ", true);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '-';
      charArray0[5] = '}';
      charArray0[6] = '}';
      charArray0[7] = 'R';
      boolean boolean0 = StringUtils.containsNone((CharSequence) " ", charArray0);
      assertArrayEquals(new char[] {'}', '}', '}', '}', '-', '}', '}', 'R'}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 4677);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\r", "\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      String string0 = StringUtils.removeEnd(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", (-3563));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat(". The following paths could not be deleted (see suppressed exceptions for details): ", "Don't clear/set the same property more than once.", (-548));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      String string0 = StringUtils.removeStart("Hx7L", " )BJW(?xy");
      assertEquals("Hx7L", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.stripStart(" ", "\r");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'j');
      assertEquals("DISPLAY", string0);
      assertNotNull(string0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string1 = StringUtils.substring("DISPLAY", 96, (-873));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'j';
      floatArray0[1] = (float) 96;
      String[] stringArray0 = StringUtils.substringsBetween("", "DISPLAY", "");
      assertNull(stringArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '-';
      doubleArray0[1] = (double) 106.0F;
      String string2 = StringUtils.join(doubleArray0, 'Z', 30, 16);
      assertArrayEquals(new double[] {45.0, 106.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("32", "32", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removePattern("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // p{InCombiningDiacriticalMarks}+
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissing("", "", (CharSequence[]) null);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("g 7)Q(Pn@", "org.junitpioneer.jupiter.SystemlropertyEltensionmG,vw}*Qw&D|^uq", 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 64
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      String string0 = StringUtils.swapCase("_Threshold must not be negative");
      assertEquals("_tHRESHOLD MUST NOT BE NEGATIVE", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.join((Object[]) stringArray0, 'O');
      assertEquals(6, stringArray0.length);
      assertEquals("OOOOO", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "OOOOO", (CharSequence) "OOOOO");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("7{u+|v!Ep'FW2pO,", "\rz| kW7");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Z_D^CG", "Z_D^CG");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "m0o)z";
      String string0 = StringUtils.prependIfMissingIgnoreCase("m0o)z", "m0o)z", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("m0o)z", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("m0o)z", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.defaultIfEmpty("m0o)z", "m0o)z");
      assertEquals("m0o)z", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Kbn?Vo >f?w0r`M", "&2 4el", 313);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.overlay("m0o)z", "Kbn?Vo >f?w0r`M", 313, 2908);
      assertEquals("m0o)zKbn?Vo >f?w0r`M", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)0;
      String string3 = StringUtils.join(shortArray0, '6');
      assertArrayEquals(new short[] {(short)0, (short)3, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals("06360", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isNotBlank("Kbn?Vo >f?w0r`M");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "g@?2sk@IG(TvnY!t";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "g@?2sk@IG(TvnY!t", (-1), 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "The String must not be empy", 109, 109);
      assertEquals(7, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.add(object0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(object0));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(object0));
      
      String string0 = StringUtils.join(iterator0, ';');
      assertNotNull(string0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(';'));
      assertTrue(linkedList0.contains(object0));
      
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@567c3626";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank(charSequenceArray0[0], supplier0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "java.lang.Object@567c3626";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Iterator<Object> iterator1 = linkedList0.iterator();
      assertNotSame(iterator1, iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(';'));
      assertTrue(linkedList0.contains(object0));
      
      String string1 = StringUtils.substringBetween("Object varargs must not be null", "junit-pioneer");
      assertNull(string1);
      
      String string2 = StringUtils.leftPad("iy>?Azor", 321, "Y\\^7B!eiy>?Azorg.apache.commons.lang3.StringUtils");
      assertEquals("Y\\^7B!eiy>?Azorg.apache.commons.lang3.StringUtilsY\\^7B!eiy>?Azorg.apache.commons.lang3.StringUtilsY\\^7B!eiy>?Azorg.apache.commons.lang3.StringUtilsY\\^7B!eiy>?Azorg.apache.commons.lang3.StringUtilsY\\^7B!eiy>?Azorg.apache.commons.lang3.StringUtilsY\\^7B!eiy>?Azorg.apache.commons.lang3.StringUtilsY\\^7B!eiy>?Azorg.apiy>?Azor", string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      int int0 = (-1169);
      String string0 = StringUtils.replaceOnce("3f}HWr{d", "", "...");
      assertEquals("3f}HWr{d", string0);
      assertNotNull(string0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '5', (-1), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("chinois", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(set0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string0));
      
      String string1 = StringUtils.lowerCase("\"6", locale0);
      assertNotSame(locale0, locale1);
      assertEquals("\"6", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      int int0 = StringUtils.indexOf((CharSequence) "\"6", (CharSequence) "\"6");
      assertEquals(0, int0);
      
      String string2 = locale1.getDisplayCountry();
      assertNotSame(locale1, locale0);
      assertEquals("Canada", string2);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.center("\"6", 0, "\"6");
      assertEquals("\"6", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.lowerCase("\"6");
      assertEquals("\"6", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.replacePattern("org.junitpioneer.jupiter.TempDirectory$CloseablePath", "chinois", "LaunchTime");
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePath", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = locale1.getDisplayScript();
      assertNotSame(locale1, locale0);
      assertEquals("", string6);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "\"6", (CharSequence) "\"6");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string7 = StringUtils.strip("\"6");
      assertEquals("\"6", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("\"6", "chinois");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '%', (-1), 3274);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 3);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 1727);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      String string0 = StringUtils.removeStart("Failed to create custom temp directory", "Failed to create custom temp directory");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("?j/PN_9:`[", (String) null);
      assertEquals("?j/PN_9:`[", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Failed to create custom temp directory", "", 6);
      assertEquals(38, int0);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("X:KBN'", "X:KBN'", (String) null);
      assertEquals("X:KBN'", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Array element ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("Array element ", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceEachRepeatedly("s%6&7FG{UFA", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("s%6&7FG{UFA", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.split("%!mluCg)]2`sU]7&", "s%6&7FG{UFA");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "T", (CharSequence) "T");
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '@', 0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "The String must not be empty");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean1 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equals(charSequenceArray0[0], (CharSequence) "");
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string1 = StringUtils.join((long[]) null, 'V', (-2701), (-2701));
      assertNull(string1);
      
      String string2 = StringUtils.repeat("", "The String must not be empty", (-2405));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      long[] longArray0 = new long[31];
      String string0 = StringUtils.join(longArray0, 'h');
      assertEquals(31, longArray0.length);
      assertEquals("0h0h0h0h0h0h0h0h0h0h0h0h0h0h0h0h0h0h0h0h0h0h0h0h0h0h0h0h0h0h0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.truncate("/z", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[2] = (CharSequence) "";
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2355);
      longArray0[1] = (long) ' ';
      longArray0[2] = (long) ' ';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, ' ', (-2355), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2355
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      String string0 = StringUtils.getDigits("?EN1KO.>u}]ylxtC+`");
      assertEquals("1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", (CharSequence) " ");
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "\n");
      assertEquals(0.0, double0, 0.01);
      
      String string0 = StringUtils.trimToEmpty("\r");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Y\\^7B!e", "Y\\^7B!e");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Y\\^7B!e", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      String string0 = StringUtils.rightPad("f5[sM|T#pMK", 0);
      assertEquals("f5[sM|T#pMK", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits("Test '%s' was supposed to run no longer than %d ms but ran %d ms.");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 100, 2984);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "f5[sM|T#pMK", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.rightPad("g@?2sk@IG(TvnY!t", (-1));
      assertEquals("g@?2sk@IG(TvnY!t", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("v_YMn0-hzb7sHU;B$~", (String) null, 2984);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      String string0 = StringUtils.capitalize("ho}|sB=%GFu{`:2");
      assertEquals("Ho}|sB=%GFu{`:2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("32");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      String string0 = StringUtils.substringBefore("\n\r", "\n\r");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("", '&');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      String string0 = StringUtils.leftPad("Fa", 8, "', has a length less than 2");
      assertEquals("', hasFa", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("', hasFa");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.wrap((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceChars("@@q}b`KA_ca.Fu\"", 'o', 'o');
      assertEquals("@@q}b`KA_ca.Fu\"", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("", 2, "ingUtils");
      assertEquals("ii", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.abbreviate((String) null, "ingUtils", 1301);
      assertNull(string4);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) null, "offset cannot be negative");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      String string0 = StringUtils.chomp("Array element ");
      assertEquals("Array element ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("Array element ", 16, "Array element ");
      assertEquals("Array element Ar", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) " ", (CharSequence) "\r");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("\r", " ", false);
      assertEquals((-19), int0);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.replaceAll("s", (String) null, (String) null);
      assertEquals("s", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "s";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("s", "");
      assertEquals(1, int0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean1 = stack0.add(locale_Category0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals("[FORMAT]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(locale_Category0));
      
      stack0.sort(comparator0);
      assertEquals(10, stack0.capacity());
      assertEquals("[FORMAT]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      stack0.addElement(locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertEquals("[FORMAT, DISPLAY]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(locale_Category0));
      
      String string1 = StringUtils.join((List<?>) stack0, "s", 1, 1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertEquals("[FORMAT, DISPLAY]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(locale_Category0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("iy>?Az");
      assertEquals("iy>?Az", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "iy>?Az");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("iy>?Az", (CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.stripAccents("The String must not be empty");
      assertEquals("The String must not be empty", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      String string0 = StringUtils.substringBetween("+N@f.Tob", "+N@f.Tob");
      assertNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 'H';
      charArray0[2] = '!';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'t', 'H', '!'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "+N@f.Tob", (CharSequence) "+N@f.Tob");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.difference("\n", "<DPR!;t");
      assertEquals("<DPR!;t", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.difference("\n", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      String string0 = StringUtils.substringBetween("+N@f.Tob", "+N@f.Tob");
      assertNull(string0);
      
      String string1 = StringUtils.getDigits("cJ9s2C(:<}Pt<YS@");
      assertEquals("92", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "The String must not be empty", "The String must not be empty");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "The String must not be empty";
      objectArray0[1] = (Object) "The String must not be empty";
      objectArray0[2] = (Object) "The String must not be empty";
      objectArray0[3] = (Object) "The String must not be empty";
      objectArray0[4] = (Object) "The String must not be empty";
      objectArray0[5] = (Object) "The String must not be empty";
      objectArray0[6] = (Object) "The String must not be empty";
      String string0 = StringUtils.join(objectArray0, 'r');
      assertEquals(7, objectArray0.length);
      assertEquals("The String must not be emptyrThe String must not be emptyrThe String must not be emptyrThe String must not be emptyrThe String must not be emptyrThe String must not be emptyrThe String must not be empty", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "The String must not be empty", "The String must not be emptyrThe String must not be emptyrThe String must not be emptyrThe String must not be emptyrThe String must not be emptyrThe String must not be emptyrThe String must not be empty");
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "The String must not be empty", 'r');
      assertEquals(1, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.rotate(")'Lw$Z1/CXxtwW,`|d", (-1));
      assertEquals("'Lw$Z1/CXxtwW,`|d)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      String string0 = StringUtils.difference("\"},\"d`v`WWZSq=i]]x", "\"},\"d`v`WWZSq=i]]x");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 's');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 2052, 2052);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", '?');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      String string0 = StringUtils.left((String) null, (-1936));
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      String string0 = StringUtils.stripEnd("g@?2sk@IG(TvnY!t", "g@?2sk@IG(TvnY!t");
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-122);
      String string1 = StringUtils.join(byteArray0, ',', (int) (byte) (-106), (-342));
      assertArrayEquals(new byte[] {(byte) (-106), (byte)0, (byte) (-122)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.SPACE;
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.endsWith(" ", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      String string0 = StringUtils.stripAccents("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("G2DX36IpO,9A");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.toRootUpperCase("G2DX36IpO,9A");
      assertEquals("G2DX36IPO,9A", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("G2DX36IpO,9A", "G2DX36IpO,9A", 4);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("G2DX36IPO,9A");
      assertFalse(boolean0);
      
      String string3 = StringUtils.defaultString("G2DX36IpO,9A", "'1?w'1?w");
      assertEquals("G2DX36IpO,9A", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "G2DX36IPO,9A", (CharSequence) "G2DX36IpO,9A");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string1 = StringUtils.overlay("\"4RT", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 4457, (-1162));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "\"4RT", (-1162));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      String string0 = StringUtils.substringBetween("+N@f.Tob", "+N@f.Tob");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+N@f.Tob", (String) null, (-11));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.overlay("+N@f.Tob", "", 76, 2);
      assertEquals("+N", string1);
      assertNotNull(string1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)732;
      shortArray0[2] = (short)212;
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.prependIfMissing("", "+&@=!qA", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("+&@=!qA", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.prependIfMissing("+&@=!qA", "b935Eunx%&BI1zc1y:", stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("b935Eunx%&BI1zc1y:+&@=!qA", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("org.junitpioneer.jupiter.SystemPropertyExtension");
      assertEquals("org.junitpioneer.jupiter.SystemPropertyExtension", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("stom temp directory");
      assertEquals("stomtempdirectory", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("", ")W?nl'dIV}Da-2X", "");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')'
         // )W?nl'dIV}Da-2X
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-28);
      String string0 = "\\ n";
      String string1 = StringUtils.replace(" n", " n", " n", (int) (byte) (-28));
      assertEquals(" n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "Trq";
      String string3 = StringUtils.rightPad("Trq", 32);
      assertEquals("Trq                             ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("Trq                             ", "7Hx9,XcAr4bGJv)IYbx", "Trq");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 13
         // 7Hx9,XcAr4bGJv)IYbx
         //              ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      String string0 = "pkVC Qq";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("pkVC Qq", 0, (-1039));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "inj!sX_a}!", (-611));
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("inj!sX_a}!", "inj!sX_a}!");
      assertEquals("inj!sX_a}!", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("inj!sX_a}!", (-611));
      assertEquals("nj!sX_a}!i", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("inj!sX_a}!", (-611), (-611));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.params.IntRange", "5H3vGi.H,dXNF");
      assertEquals("5H3vGi.H,dXNForg.junitpioneer.jupiter.params.IntRange5H3vGi.H,dXNF", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf(" ", (CharSequence) null, 1712);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("org.junitpioneer.jupiter.SystemPropertyExtension");
      assertEquals("org.junitpioneer.jupiter.SystemPropertyExtension", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.SystemPropertyExtension", "o");
      assertEquals("org.junitpioneer.jupiter.SystemPropertyExtensiono", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("org.junitpioneer.jupiter.SystemPropertyExtensiono");
      assertEquals("org.junitpioneer.jupiter.SystemPropertyExtensiono", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isMixedCase("Illegal rnge. There's no way to get from %s o %s withBa stepUofh%s.");
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringBetween("maxWith cannot be negative", "Failed to create custom temp directory", "org.junitpioneer.jupiter.params.RangeSourceProvider");
      assertNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "maxWith cannot be negative", (CharSequence) "o");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      String string0 = StringUtils.repeat('u', (-3143));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviate("", (-3143));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((short[]) null, 'P', (-3143), 0);
      assertNull(string2);
      
      String string3 = StringUtils.replace("ExpectedException", "Illegal range. There's no way to get from %s to %s with a step of %s.", " ");
      assertEquals("ExpectedException", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlpha(charSequenceArray0[1]);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.rotate("org.junitpioneer.jupiter.params.FloatRange", 0);
      assertEquals("org.junitpioneer.jupiter.params.FloatRange", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isBlank("org.junitpioneer.jupiter.params.FloatRange");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.rotate("", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat('E', (-1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("fYo*XP`;", "fYo*XP`;");
      assertEquals("fYo*XP`;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      String string0 = "]1J&^z'|B";
      String string1 = StringUtils.substringBetween("iy>?Az", "]1J&^z'|B");
      assertNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("]1J&^z'|B", (CharSequence) null, (-2318));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "G2DX36IpO,9A", 161);
      assertFalse(boolean0);
      
      String string2 = "iy>?Azorg.apache.commons.lang3.StringUtils";
      String string3 = StringUtils.wrapIfMissing("iy>?Azorg.apache.commons.lang3.StringUtils", "Y\\^7B!e");
      assertEquals("Y\\^7B!eiy>?Azorg.apache.commons.lang3.StringUtilsY\\^7B!e", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.rotate("iy>?Azorg.apache.commons.lang3.StringUtils", 1600);
      assertEquals("tilsiy>?Azorg.apache.commons.lang3.StringU", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("]1J&^z'|B", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "maxWith cannot be negative");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(""));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) hashSet0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(hashSet0.contains(""));
      assertFalse(list0.contains(""));
      
      int int0 = StringUtils.getFuzzyDistance("", "maxWith cannot be negative", locale0);
      assertEquals(0, int0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "maxWith cannot be negative", "_MZO;Z-2W.&A9v]");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceIgnoreCase("maxWith cannot be negative", ":8o%iW0X", "", 122);
      assertEquals("maxWith cannot be negative", string0);
      assertNotNull(string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.capitalize("iy>?Azorg.apache.commons.lang3.StringUtilsY\\^7B!e");
      assertEquals("Iy>?Azorg.apache.commons.lang3.StringUtilsY\\^7B!e", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[1] = (CharSequence) "_MZO;Z-2W.&A9v]";
      String string2 = StringUtils.defaultString("Illegal range. The step cannot be zero.");
      assertEquals("Illegal range. The step cannot be zero.", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "Illegal range. The step cannot be zero.";
      charSequenceArray0[3] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[4] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[5] = (CharSequence) "maxWith cannot be negative";
      String string3 = StringUtils.getDigits("'qVKb!N|`");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "maxWith cannot be negative", 9, 112);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "maxWith cannot be negative");
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'o', (-1184), (-491));
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.appendIfMissing((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.left((String) null, 1599);
      assertNull(string3);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(9, stringArray0.length);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, "", 117, 1114111);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 'p');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      String string0 = StringUtils.stripAccents("9rBe+m");
      assertEquals("9rBe+m", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("9rBe+m");
      assertEquals("9rbe+m", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object5));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object5));
      assertNotNull(object7);
      
      objectArray0[7] = object7;
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object4));
      assertFalse(object8.equals((Object)object7));
      assertFalse(object8.equals((Object)object6));
      assertFalse(object8.equals((Object)object1));
      assertFalse(object8.equals((Object)object5));
      assertFalse(object8.equals((Object)object3));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object2));
      assertNotNull(object8);
      
      objectArray0[8] = object8;
      String string0 = StringUtils.join(objectArray0, '\\', 5314, (-2819));
      assertEquals(9, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("", 1617, 'C');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("%\"gEF-,x}");
      assertEquals("%\"gef-,x}", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("", "{B");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)16;
      String string4 = StringUtils.join(byteArray0, 'C', 1617, 13);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)97, (byte)66, (byte)16}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      String string0 = StringUtils.removeStart("0kX", "0kX");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      String string0 = "A}l/|bP]Zp?a[H:a";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("A}l/|bP]Zp?a[H:a", "A}l/|bP]Zp?a[H:a", "A}l/|bP]Zp?a[H:a");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 15
         // A}l/|bP]Zp?a[H:a
         //                ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.RegExUtils", (CharSequence) "org.apache.commons.lang3.RegExUtils", 17);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) stringArray0[0], (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad(" vs ", 18, '_');
      assertEquals(" vs ______________", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("VA,D]`fE", " vs ");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.right(", Length: y?x}McTwjf ", 18);
      assertEquals("ength: y?x}McTwjf ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp(", Length: y?x}McTwjf ");
      assertEquals(", Length: y?x}McTwjf ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " vs ", 18);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("org.junitpioneer.jupiter.RepeatFailedTestExtensionG2DX36IpO,9A", "ength: y?x}McTwjf ");
      assertEquals("org.junitpioneer.jupiter.RepeatFailedTestExtensionG2DX36IpO,9A", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("org.junitpioneer.jupiter.RepeatFailedTestExtensionG2DX36IpO,9A", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.remove("Timeout", "");
      assertEquals("Timeout", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.toRootLowerCase("Q%7y#C[UOX}@Op{");
      assertEquals("q%7y#c[uox}@op{", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.split("VA,D]`fE");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      double double1 = StringUtils.getJaroWinklerDistance("VA,D]`fE", "Q%7y#C[UOX}@Op{");
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, '}');
      assertNull(string0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      String string1 = StringUtils.join(shortArray0, 't', 0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.abbreviate("C$", (String) null, 50);
      assertEquals("C$", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 't');
      assertEquals(0, int0);
      
      String string3 = StringUtils.reverseDelimited("HBAXV\",7@CjR6E+", 't');
      assertEquals("HBAXV\",7@CjR6E+", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap((String) null, "HBAXV\",7@CjR6E+");
      assertNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "6P2{y@:", (CharSequence) "HBAXV\",7@CjR6E+", Integer.MAX_VALUE);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "HBAXV\",7@CjR6E+", 48);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "Uww`s\"{");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category1));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(iterator0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category1));
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals("DISPLAYFORMAT", string0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotNull(string0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category1));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "DISPLAYFORMAT", "tNN\"sewGJ*e1G\"6P:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "hbBf-()lP)M{LaSUPrs", (CharSequence) "hbBf-()lP)M{LaSUPrs");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "m", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) " ", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.remove((String) null, "l");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.leftPad((String) null, (-3247), "The character ");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, " vs ");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad((String) null, 513, " vs ");
      assertNull(string1);
      
      int int0 = StringUtils.length(" vs ");
      assertEquals(4, int0);
      
      String string2 = StringUtils.defaultString((String) null);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove((String) null, "Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.removeIgnoreCase(",f1CUBsL)9={{x_", "Minimum abbreviation width is %d");
      assertEquals(",f1CUBsL)9={{x_", string4);
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " vs ", (CharSequence) ",f1CUBsL)9={{x_", 101);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = "H<~";
      String string6 = StringUtils.toRootUpperCase("H<~");
      assertEquals("H<~", string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.trimToNull((String) null);
      assertNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) " vs ", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("2", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.prependIfMissing("b935Eunx%&BI1zc1y:", "b935Eunx%&BI1zc1y:", stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("b935Eunx%&BI1zc1y:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("-$", "-$");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      String string0 = StringUtils.rightPad("VA,D]`u<", 2866, "VA,D]`u<");
      assertNotNull(string0);
      
      String string1 = StringUtils.right((String) null, 3346);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("[nM1Eb(.bmrE9,q9C^#");
      assertEquals(16, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("[nM1Eb(.bmrE9,q9C^#", stringArray0);
      assertEquals(16, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "\r", (CharSequence) "\r");
      assertEquals("\r", charSequence0);
      assertNotNull(charSequence0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "\r");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("org.junitpioneer.jupiter.DefaultLoca", 'I', ' ');
      assertEquals("org.junitpioneer.jupiter.DefaultLoca", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.defaultString(",bi.6V", "org.junitpioneer.jupiter.DefaultLoca");
      assertEquals(",bi.6V", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate(",bi.6V", 5);
      assertEquals(",b...", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.right("The character ", 65);
      assertEquals("The character ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.chomp("(");
      assertEquals("(", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.stripAccents(" is not in the range '0' - '9'");
      assertEquals(" is not in the range '0' - '9'", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.stripStart(" is not in the range '0' - '9'", "2q@`cZ5F/C_");
      assertEquals(" is not in the range '0' - '9'", string7);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      String string8 = StringUtils.removeIgnoreCase("k>!Nt;0|bB!5Z", ",bi.6V");
      assertEquals("k>!Nt;0|bB!5Z", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      
      String string9 = StringUtils.rightPad("A;u", 65, 'W');
      assertEquals("A;uWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      
      int int0 = StringUtils.compare("Minimum abbreviation width is %d", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compare("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("org.junitpioneer.jupiter.SystemPropertyExtension", "org.junitpioneer.jupiter.SystemPropertyExtension", "org.junitpioneer.jupiter.ReportEntryExtension");
      assertNull(stringArray0);
      
      String string0 = StringUtils.uncapitalize("org.junitpioneer.jupiter.ReportEntryExtension");
      assertEquals("org.junitpioneer.jupiter.ReportEntryExtension", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "org.junitpioneer.jupiter.SystemPropertyExtension", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", (-1));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.getDigits("org.junitpioneer.jupiter.pa");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("\n");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (-1), (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      String[] stringArray0 = new String[6];
      int int0 = StringUtils.indexOfAny((CharSequence) "Z_D^CG", (CharSequence[]) stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      String string0 = StringUtils.remove("blank_blank_blank_2014", 'H');
      assertEquals("blank_blank_blank_2014", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      String string0 = StringUtils.center("X;", (-2355), ' ');
      assertEquals("X;", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "X;", charArray0);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "X;", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("X;");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("iVfs'<Yi4,", "_d%PEG>O");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "X;", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.defaultIfBlank(" ", "Object varargs must not be null");
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      String string0 = StringUtils.wrap("Threshold must not be negativeThreshold must not be negative", "Threshold must not be negativeThreshold must not be negative");
      assertEquals("Threshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("Aborting to protect against StackOverflowEror - output of one loop is the input of another", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      String string0 = StringUtils.center("xSCttY@~U`", 2394, "xSCttY@~U`");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", "Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertFalse(boolean0);
      
      String string1 = ",piz";
      // Undeclared exception!
      StringUtils.center(",piz", 1114111);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad("", 8201);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.wrap("\r", "");
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.rightPad("p(WN8>&BBq", (-1));
      assertEquals("p(WN8>&BBq", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("", "p", (-1));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isBlank("\r");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.abbreviate("|?", "", (-1));
      assertEquals("|?", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("O}w<1_d;i@j=@B O");
      assertEquals("o}w<1_d;i@j=@B O", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("o}w<1_d;i@j=@B O", 2, "O}w<1_d;i@j=@B O");
      assertEquals("o}w<1_d;i@j=@B O", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      String string0 = StringUtils.repeat(' ', (int) ' ');
      assertEquals("                                ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "                                ", charArray0);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "                                ", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("*WSz|>PIlS6#9JG", "*WSz|>PIlS6#9JG", "                                ");
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("Threshold must not be negative", (-974), 135);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) stringArray0[0], (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.abbreviateMiddle(" vs ", "3>9#!$VffUV", 18);
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.startsWithAny("inj!sX_a}!", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      String string0 = StringUtils.abbreviate(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ", 2460, 2460);
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details): ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      String string0 = StringUtils.rightPad("VA,D]`u<", 3564, "VA,D]`u<");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.chomp("Qt");
      assertEquals("Qt", string0);
      assertNotNull(string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.removeStart(", Length: ", ";>LF");
      assertEquals(", Length: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.reverseDelimited(". The following paths could not be deleted (see suppressed exceptions for details): ", 'l');
      assertEquals("s): leted (see suppressed exceptions for detaild not be delowing paths coul. The fo", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase(". The following paths could not be deleted (see suppressed exceptions for details): ", "Strings must not be null", false);
      assertEquals((-69), int0);
      
      String string3 = StringUtils.unwrap("Qt", 'l');
      assertEquals("Qt", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", ' ');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase(". The following paths could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details): ");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(58, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("\n");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Strings must not be null", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(58, stringArray1.length);
      assertFalse(boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("V");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("V", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      String string0 = StringUtils.substringBetween("IoW8\"B~|E;)Jl", "IoW8\"B~|E;)Jl");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.removeIgnoreCase("org.junitpioneer.jupiter.params.IntRange", "org.junitpioneer.jupiter.params.IntRange");
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare((String) null, "org.junitpioneer.jupiter.params.IntRange");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.toRootUpperCase("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToEmpty("org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertEquals("org.junitpioneer.jupiter.RepeatFailedTestExtension", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.substringBetween("org.junitpioneer.jupiter.RepeatFailedTestExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNull(string5);
      
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric(". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.swapCase("8T(pr\"Ql*3nyYBu");
      assertEquals("8t(PR\"qL*3NYybU", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-1));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBetween("\r", " ", "");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.TempDirectory$CloseablePathB++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1B++:8D1", '.');
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      String string0 = StringUtils.stripEnd("r`W^*E ", "r`W^*E ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 32);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrapIfMissing("r`W^*E ", 'T');
      assertEquals("Tr`W^*E T", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "r`W^*E ";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "r`W^*E ";
      charSequenceArray0[3] = (CharSequence) "Tr`W^*E T";
      charSequenceArray0[4] = (CharSequence) "r`W^*E ";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "r`W^*E ";
      stringArray0[1] = "r`W^*E ";
      stringArray0[2] = "";
      stringArray0[3] = "\"8F";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "r`W^*E ";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(charSequenceArray0[2]);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsAny(charSequenceArray0[2], stringArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String[] stringArray1 = StringUtils.split("r`W^*E ", 'T');
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean4 = StringUtils.equals(charSequenceArray0[8], charSequenceArray0[8]);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "C$");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((double[]) null, '}');
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.replaceChars((String) null, 'o', '5');
      assertNull(string2);
      
      String string3 = StringUtils.center("org.apache.commons.lang3.StringUtils", 1491, "@@q}b`KA_ca.Fu\"");
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.join((Object[]) null);
      assertNull(string4);
      
      boolean boolean3 = StringUtils.startsWithAny("ingUtils", (CharSequence[]) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string5 = StringUtils.abbreviate((String) null, "maxWith cannot be negative", (-1));
      assertNull(string5);
      
      boolean boolean4 = StringUtils.containsOnly((CharSequence) "C$", (String) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      String string0 = StringUtils.replaceChars("VMb]", '7', 'p');
      assertEquals("VMb]", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("VMb]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("\u0006jLr0Un3", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string0 = StringUtils.join(byteArray0, 'r');
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "0", "a_O425;t[;sfS`$[OZ");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)0;
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "a_O425;t[;sfS`$[OZ";
      charSequenceArray0[1] = (CharSequence) "0";
      charSequenceArray0[2] = (CharSequence) "a_O425;t[;sfS`$[OZ";
      String string1 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "a_O425;t[;sfS`$[OZ";
      charSequenceArray0[5] = (CharSequence) "a_O425;t[;sfS`$[OZ";
      charSequenceArray0[6] = (CharSequence) "0";
      charSequenceArray0[7] = (CharSequence) "0";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.center("iy>?Azorg.ap", (-320), "A63Y>':gqrS9");
      assertEquals("iy>?Azorg.ap", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.lowerCase("Oq(a4&-:UC^^>");
      assertEquals("oq(a4&-:uc^^>", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replacePattern((String) null, "iy>?Azorg.ap", (String) null);
      assertNull(string4);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "0", (CharSequence) "iy>?Azorg.ap");
      assertEquals(0, int0);
      
      String string5 = StringUtils.strip((String) null);
      assertNull(string5);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("0", "0");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string6 = StringUtils.uncapitalize("0");
      assertEquals("0", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.upperCase((String) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty(". The following paths could not be deleted (see suppressed exceptionP for details): . The following paths could not be deleted (see suppressed exceptionP for details): ");
      assertEquals(". The following paths could not be deleted (see suppressed exceptionP for details): . The following paths could not be deleted (see suppressed exceptionP for details):", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>((Comparator<? super Object>) null);
      assertNotNull(treeSet0);
      
      char char0 = '_';
      String string0 = StringUtils.join((Iterable<?>) treeSet0, '_');
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(treeSet0.contains('_'));
      
      boolean boolean0 = treeSet0.isEmpty();
      assertTrue(boolean0);
      assertFalse(treeSet0.contains('_'));
      
      boolean boolean1 = treeSet0.add("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(treeSet0.contains(""));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        treeSet0.add(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf(", Length: 0", ", Length: 0", 19);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      String string0 = StringUtils.join((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "b935Eunx%&BI1zc1y:", (CharSequence) "b935Eunx%&BI1zc1y:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      String string0 = "C$";
      String string1 = StringUtils.join((Object[]) null, "C$");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.join((double[]) null, '}');
      assertNull(string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "C$", "C$");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1424;
      shortArray0[1] = (short)0;
      char char0 = '*';
      int int0 = 0;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '*', 0, (int) (short)1424);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, 'O');
      assertNull(string0);
      
      String string1 = StringUtils.capitalize("3");
      assertEquals("3", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      String string0 = "org.junitpioneer.jupiter.ReportEntryExtension";
      String string1 = StringUtils.leftPad("org.junitpioneer.jupiter.ReportEntryExtension", (-4646), 'Y');
      assertEquals("org.junitpioneer.jupiter.ReportEntryExtension", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("org.junitpioneer.jupiter.ReportEntryExtension", "org.junitpioneer.jupiter.ReportEntryExtension");
      assertTrue(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-4646)));
      
      Stream<Object> stream0 = linkedList0.stream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-4646)));
      
      Object object0 = linkedList0.pollFirst();
      assertNull(object0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-4646)));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-4646)));
      
      Object object1 = linkedList0.pollFirst();
      assertNull(object1);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-4646)));
      
      // Undeclared exception!
      try { 
        linkedList0.remove((-4646));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4646, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'P');
      assertEquals(5, charSequenceArray0.length);
      assertEquals("PPPP", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing("E", "E", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("E", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("\r", 1371, 13);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("72={Qj", "E", 1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("\"b(\"qvEFdAkQ[", (-1), "\r");
      assertEquals("\"b(\"qvEFdAkQ[", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      Object[] objectArray0 = new Object[0];
      String string5 = StringUtils.joinWith(". The following paths could not be deleted (see suppressed exceptions for details): ", objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("72={Qj", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("w' %j`De]obJX?s", "w' %j`De]obJX?s");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "ExceptionWasThrown");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.replaceAll("", (String) null, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean1 = stack0.add(locale_Category0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stack0.size());
      assertEquals("[FORMAT]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      boolean boolean2 = stack0.add(locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[FORMAT, FORMAT]", stack0.toString());
      assertTrue(stack0.contains(locale_Category0));
      
      stack0.sort(comparator0);
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[FORMAT, FORMAT]", stack0.toString());
      assertTrue(stack0.contains(locale_Category0));
      
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      stack0.addElement(locale_Category2);
      assertNotSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertFalse(stack0.empty());
      assertEquals(3, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[FORMAT, FORMAT, DISPLAY]", stack0.toString());
      assertTrue(stack0.contains(locale_Category0));
      
      String string1 = StringUtils.join((List<?>) stack0, "", 0, 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(stack0.empty());
      assertEquals(3, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[FORMAT, FORMAT, DISPLAY]", stack0.toString());
      assertTrue(stack0.contains(locale_Category0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      String string0 = StringUtils.removeAll("kV-mOn;LtD_@Lkhj", "kV-mOn;LtD_@Lkhj");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      String string0 = StringUtils.rightPad("The String must not be empy", 103, "The String must not be empy");
      assertEquals("The String must not be empyThe String must not be empyThe String must not be empyThe String must not be", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "The String must not be empy", 'u');
      assertEquals(1, int0);
      
      String string2 = StringUtils.repeat("The String must not be empy", 1);
      assertEquals("The String must not be empy", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.repeat("", 12);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "hjrB");
      assertFalse(boolean0);
      
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "hjrB", charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.substringAfter("Locale must not be null", (String) null);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Spliterator<Locale.FilteringMode> spliterator0 = stack0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      String string2 = StringUtils.join((List<?>) stack0, 'O', 51, (-3874));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.repeat("", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 's');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      String string0 = StringUtils.substringAfter("The String must not be empty", "The String must not be empty");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      String string0 = StringUtils.repeat(" is not in the range '0' - '9'", " is not in the range '0' - '9'", (-2403));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)0;
      String string0 = StringUtils.join(byteArray0, 'p');
      assertArrayEquals(new byte[] {(byte)81, (byte)35, (byte)89, (byte) (-1), (byte)108, (byte) (-28), (byte)88, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("81p35p89p-1p108p-28p88p0", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "81p35p89p-1p108p-28p88p0";
      String string1 = StringUtils.wrap("81p35p89p-1p108p-28p88p0", 'p');
      assertEquals("p81p35p89p-1p108p-28p88p0p", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "p81p35p89p-1p108p-28p88p0p";
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)88;
      floatArray0[1] = (-2161.86F);
      floatArray0[2] = (float) (byte)108;
      floatArray0[3] = (float) (byte)108;
      floatArray0[4] = (float) (byte)89;
      floatArray0[5] = (float) (byte) (-1);
      floatArray0[6] = (float) (byte)81;
      String string2 = StringUtils.join(floatArray0, 'R');
      assertArrayEquals(new float[] {88.0F, (-2161.86F), 108.0F, 108.0F, 89.0F, (-1.0F), 81.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals("88.0R-2161.86R108.0R108.0R89.0R-1.0R81.0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "88.0R-2161.86R108.0R108.0R89.0R-1.0R81.0";
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)89;
      intArray0[1] = (int) (byte)89;
      intArray0[2] = (int) (byte) (-28);
      intArray0[3] = (int) (byte)81;
      String string3 = StringUtils.join(intArray0, '1', 89, (int) (byte)89);
      assertArrayEquals(new int[] {89, 89, (-28), 81}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.substringAfter("p81p35p89p-1p108p-28p88p0p", "");
      assertEquals("p81p35p89p-1p108p-28p88p0p", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "p81p35p89p-1p108p-28p88p0p";
      String string5 = StringUtils.repeat("", "", (int) (byte)89);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      charSequenceArray0[5] = (CharSequence) "";
      String string6 = StringUtils.remove("", '1');
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      
      charSequenceArray0[6] = (CharSequence) "";
      // Undeclared exception!
      try { 
        StringUtils.removeAll("", "-l+l[/+<agMEGuu");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 15
         // -l+l[/+<agMEGuu
         //                ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      String string0 = StringUtils.trimToNull("KYK");
      assertEquals("KYK", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("KYK", "KYK");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      String string0 = ")~E`T-H=3We$[p<a";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("{#,7`V}qftrikl9", "Qq;vHYGv67DTQMm|r", ")~E`T-H=3We$[p<a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.stripToEmpty("b935Eunx%&BI1zc1y:");
      assertEquals("b935Eunx%&BI1zc1y:", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "The String must not be empty", ", ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.remove("b935Eunx%&BI1zc1y:", ", ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("b935Eunx%&BI1zc1y:", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.endsWithAny("b935Eunx%&BI1zc1y:", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripAccents(", ");
      assertEquals(", ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing("+&@=!qA", "b935Eunx%&BI1zc1y:", stringArray0);
      assertEquals("b935Eunx%&BI1zc1y:+&@=!qA", string3);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("Z[", "Z[");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, " ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rotate("", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.unwrap("Kv$%lQ?R;keJrd.", "Kv$%lQ?R;keJrd.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      String string0 = StringUtils.replaceAll((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.truncate("", 0, 16);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("", "", "!oVadY{D$Jx2\"=TxD?]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      String string0 = StringUtils.truncate("?j/PN_9:`[", 35);
      assertEquals("?j/PN_9:`[", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "p", "V!y%45Z38:3DI2j8");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1424;
      shortArray0[1] = (short)1424;
      shortArray0[2] = (short)1424;
      String string0 = StringUtils.capitalize("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("p", "...");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte) (-54);
      int int0 = StringUtils.lastOrdinalIndexOf("...", "]", (-1));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rightPad("V!y%45Z38:3DI2j8", (int) (byte)66);
      assertEquals("V!y%45Z38:3DI2j8                                                 ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace(".E~`N\"SL#%Y@4Y~%kK");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((List<?>) null, "V!y%45Z38:3DI2j8                                                 ", (-1), (int) (byte)97);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, (String) null, (-2301), 69);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2301
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringBetween("\r", " ", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Object varargs must not be null", "Object varargs must not be null");
      assertNull(string0);
      
      String string1 = StringUtils.getIfBlank((String) null, (Supplier<String>) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize(" ");
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string2 = StringUtils.getIfBlank(" ", supplier0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean1 = linkedHashSet0.add((Object) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean2 = linkedHashSet0.add((Object) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      String string0 = StringUtils.join(iterator0, '9');
      assertNotNull(string0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains('9'));
      assertTrue(linkedHashSet0.contains(object0));
      
      int[] intArray0 = new int[0];
      String string1 = StringUtils.join(intArray0, '9', (-4904), (-4904));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      String string0 = StringUtils.join((List<?>) stack0, (String) null, (-2301), (-2301));
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains((-2301)));
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, ';');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(';'));
      
      charSequenceArray0[0] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank(charSequenceArray0[0], supplier0);
      assertEquals(2, charSequenceArray0.length);
      assertNull(charSequence0);
      
      charSequenceArray0[1] = null;
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Iterator<Object> iterator1 = linkedList0.iterator();
      assertNotSame(iterator1, iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(';'));
      
      String string1 = StringUtils.substringBetween("Object varargs must not be null", "junit-pioneer");
      assertNull(string1);
      
      String string2 = StringUtils.replaceOnce((String) null, "", "3f}HWr{d");
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "Object varargs must not be null", 57, 1503);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1503
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.chomp("\n", "\r");
      assertEquals("\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("+&=!qA+&=!qA");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "inj!sX_a}!";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("inj!sX_a}!", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      String string0 = StringUtils.removeStart("Failed to create custom temp directory", "Failed to create custom temp directory");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("?j/PN_9:`[", 6);
      assertEquals("?j/PN_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("", 6, "`ucdy2");
      assertEquals("`ucdy2", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1169), "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      String string0 = StringUtils.repeat('u', (int) 'u');
      assertEquals("uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.removeAll("-l+l[/+<agMEGuu", "uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu");
      assertEquals("-l+l[/+<agMEGuu", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      String string0 = StringUtils.removeEnd(" in an array of ", " in an array of ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      String string0 = StringUtils.chomp("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.abbreviate("\r", "", (-1), (-1));
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = StringUtils.truncate("", 0, 16);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("", "", "!oVadY{D$Jx2\"=TxD?]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      String string0 = StringUtils.leftPad("nxkWc", 46, "nxkWc");
      assertEquals("nxkWcnxkWcnxkWcnxkWcnxkWcnxkWcnxknxkWc", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      String string0 = StringUtils.chomp("iy>?Az", "org.apache.commons.lang3.StringUtils");
      assertEquals("iy>?Az", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat('u', (-3143));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "iy>?Az";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string2 = StringUtils.wrap("iy>?Az", '\'');
      assertEquals("'iy>?Az'", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[4] = (CharSequence) "'iy>?Az'";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.toRootUpperCase("iy>?Az");
      assertEquals("IY>?AZ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.strip("", "'iy>?Az'");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, 'P');
      assertEquals(5, charSequenceArray0.length);
      assertEquals("iy>?AzPPorg.apache.commons.lang3.StringUtilsPorg.apache.commons.lang3.StringUtilsP'iy>?Az'", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("", (-3143), "");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("^L~d|o#Fff]o2TF", (-3143), 705);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", "\n");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      double[] doubleArray0 = new double[5];
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stringUtils0;
      objectArray0[1] = (Object) stringUtils0;
      objectArray0[2] = (Object) stringUtils0;
      objectArray0[3] = (Object) stringUtils0;
      objectArray0[4] = (Object) stringUtils0;
      String string0 = StringUtils.join(objectArray0, 'g');
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      
      doubleArray0[0] = (double) (-1);
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", "org.apache.commons.lang3.StringUtils@1gorg.apache.commons.lang3.StringUtils@1gorg.apache.commons.lang3.StringUtils@1gorg.apache.commons.lang3.StringUtils@1gorg.apache.commons.lang3.StringUtils@1");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase((String) null, (String) null, "");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      String string0 = StringUtils.wrap("?Lat5x3PJ>IS~", '\u001C');
      assertEquals("\u001C?Lat5x3PJ>IS~\u001C", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\u001C?Lat5x3PJ>IS~\u001C", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      String string1 = StringUtils.join((Object[]) null, ':');
      assertNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "\u001C?Lat5x3PJ>IS~\u001C", (String) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase((String) null, "uQBcuJ0|AC=HJ'$t+", (String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      String string0 = StringUtils.trimToNull("S_Q)>[C&&utOTH");
      assertEquals("S_Q)>[C&&utOTH", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "*?", "*?");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      String string0 = StringUtils.trim("K");
      assertEquals("K", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      try { 
        StringUtils.getBytes("Threshold must not be negative", "Threshold must not be negative");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      String string0 = "jyNopt*L-{p(-Y6eYZ";
      String string1 = StringUtils.trimToNull("jyNopt*L-{p(-Y6eYZ");
      assertEquals("jyNopt*L-{p(-Y6eYZ", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "jyNopt*L-{p(-Y6eYZ", "', is neither of type Map.Entry nor an Array");
      assertEquals(1, int0);
      
      String string2 = "7";
      char char0 = 'G';
      String string3 = StringUtils.center("7", 1, 'G');
      assertEquals("7", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = "C-'i";
      try { 
        StringUtils.getBytes("C-'i", "Search and Replace array lengths don't match: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null, (String) null);
      assertNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Array e6emet ", "Array e6emet ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("Array e6emet ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.ordinalIndexOf("Array e6emet ", "Array e6emet ", 1868);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("Array e6emet ", "Array e6emet ", "dz]9~i\"!j`$%Fm@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("offset cannot be negative", "offset cannot be negative", "offset cannot be negative");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = StringUtils.join(byteArray0, 'j');
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals("0j0j0j0j0j0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string0 = StringUtils.join(byteArray0, 'r');
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "0", "a_O425;t[;sfS`$[OZ");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) "a_O425;t[;sfS`$[OZ";
      objectArray0[2] = (Object) "0";
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) (byte)0;
      String string1 = StringUtils.joinWith("a_O425;t[;sfS`$[OZ", objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals("0a_O425;t[;sfS`$[OZa_O425;t[;sfS`$[OZa_O425;t[;sfS`$[OZ0a_O425;t[;sfS`$[OZ0a_O425;t[;sfS`$[OZ0a_O425;t[;sfS`$[OZ0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("a_O425;t[;sfS`$[OZ", "", "0a_O425;t[;sfS`$[OZa_O425;t[;sfS`$[OZa_O425;t[;sfS`$[OZ0a_O425;t[;sfS`$[OZ0a_O425;t[;sfS`$[OZ0a_O425;t[;sfS`$[OZ0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\r", "\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(". The following path could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (se  suppressed exceptions for detals): ");
      assertEquals(58, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) ". The following path could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (se  suppressed exceptions for detals): ", (CharSequence) ". The following path could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (se  suppressed exceptions for detals): ");
      assertEquals(1, int0);
      
      String string0 = StringUtils.wrapIfMissing(". The following path could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (se  suppressed exceptions for detals): ", 't');
      assertEquals("t. The following path could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (se  suppressed exceptions for detals): t", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(58, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("+&=!qA+&=!qA");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.center("+&=!qA+&=!qA", (-2691));
      assertEquals("+&=!qA+&=!qA", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("+&=!qA+&=!qA", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("+&=!qA+&=!qA");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("+&=!qA+&=!qA", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      String string0 = StringUtils.center("Failed to create custom temp directory", (int) ' ');
      assertEquals("Failed to create custom temp directory", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("K-@|Y}CZ");
      assertEquals("K-@|Y}CZ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(";>LFV 8;|{R");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize(";>LFV 8;|{R");
      assertEquals(";>LFV 8;|{R", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(";>LFV 8;|{R", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("\n");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Minimum abbreviation width is %dinimum abbreviation width is %dpzCJ[\"T";
      stringArray0[1] = "\n";
      String string0 = StringUtils.replaceEach("\n", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      int[] intArray0 = new int[11];
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.junitpioneer.jupiter.SystemPropertyExtension", "org.junitpioneer.jupiter.SystemPropertyExtension", 0);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEachRepeatedly("org.junitpioneer.jupiter.SystemPropertyExtension", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("org.junitpioneer.jupiter.SystemPropertyExtension", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.split("org.junitpioneer.jupiter.SystemPropertyExtension", "org.junitpioneer.jupiter.SystemPropertyExtension");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Q9)(pX-`XZ;[$tQeYx";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Q9)(pX-`XZ;[$tQeYx", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEachRepeatedly("Q9)(pX-`XZ;[$tQeYx", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("Q9)(pX-`XZ;[$tQeYx", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("Q9)(pX-`XZ;[$tQeYx");
      assertEquals(18, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      String string0 = StringUtils.substringBetween("+N@f.Tob", "+N@f.Tob");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+N@f.Tob", (String) null, (-11));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.wrapIfMissing("$%F4z+", '+');
      assertEquals("+$%F4z+", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap((String) null, '\u0084');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach(". The following paths could not be deleted (see suppressed exceptions for details): ", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details): ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("9A,x]`u<", '\u0097');
      assertEquals("\u00979A,x]`u<\u0097", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1709.1836F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1153.0044F;
      floatArray0[7] = 0.0F;
      String string0 = StringUtils.join(floatArray0, 'X');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1709.1836F, 0.0F, 0.0F, 1153.0044F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals("0.0X0.0X0.0X1709.1836X0.0X0.0X1153.0044X0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) " ", "\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      int int0 = StringUtils.getFuzzyDistance("Threshold must not be negative\n\r", "Threshold must not be negative\n\r", locale0);
      assertEquals(94, int0);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, "org.junitpioneer.jupiter.params.Sho)tRange");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      String string0 = StringUtils.removeStart("Failed to create custom temp directory", "Failed to create custom temp directory");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "\n";
      String string2 = StringUtils.abbreviate("\n", 6);
      assertEquals("\n", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = "";
      String string4 = " f\\)";
      String string5 = StringUtils.remove(" f)", " f)");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1276);
      shortArray0[1] = (short)15;
      shortArray0[2] = (short)3;
      shortArray0[3] = (short) (-3745);
      shortArray0[4] = (short) (-1683);
      String string6 = StringUtils.defaultIfEmpty("offset cannot be negative", "Failed to create custom temp directory");
      assertEquals("offset cannot be negative", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.difference("Y\\^7B!e", "x$=Qn5UT;``");
      assertEquals("x$=Qn5UT;``", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      
      String string8 = StringUtils.substring("offset cannot be negative", 1, 1114111);
      assertEquals("ffset cannot be negative", string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      
      String string9 = StringUtils.stripToNull("\n");
      assertNull(string9);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      String string0 = StringUtils.substringBetween("XOHcS", "XOHcS");
      assertNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, (-2318));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "XOHcS", (-2318));
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "XOHcS");
      assertNull(string1);
      
      String string2 = StringUtils.rotate((String) null, (-2318));
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string3 = StringUtils.abbreviate((String) null, (-1), (-1));
      assertNull(string3);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "org.apache.commons.lang3.ArrayUtils");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.stripAccents((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      String string0 = StringUtils.repeat(' ', (int) ' ');
      assertEquals("                                ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("\nv( x4", '|');
      assertEquals("|\nv( x4|", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("                                ");
      assertTrue(boolean0);
      
      String string3 = StringUtils.normalizeSpace("                                ");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string0 = StringUtils.join(intArray0, 'Q', 3014, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", 100);
      StringUtils.remove("k", ']');
      StringUtils.stripToNull("    Aborting to protect against StackOverflowError - output of one loop is the input of another     ");
      StringUtils.isMixedCase("k");
      StringUtils.removeIgnoreCase("p{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitjunit", "    Aborting to protect against StackOverflowError - output of one loop is the input of another     ");
      StringUtils.trimToNull("k");
      StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", "org.apache.commons.lang3.Charsets");
      StringUtils.isNumericSpace("    Aborting to protect against StackOverflowError - output of one loop is the input of another     ");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "    Aborting to protect against StackOverflowError - output of one loop is the input of another     ";
      objectArray0[1] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[2] = (Object) "p{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitp{InCombiningDiacriticalMarks}+junitjunit";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "k";
      objectArray0[5] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      objectArray0[6] = (Object) "org.apache.commons.lang3.Charsets";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'f', 90, 2068);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "S7EE'tV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      StringUtils.isNumericSpace((CharSequence) null);
      char[] charArray0 = new char[1];
      char char0 = '/';
      charArray0[0] = '/';
      StringUtils.containsOnly((CharSequence) null, charArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      try { 
        StringUtils.toString(byteArray0, "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "The ChLracte* must not be null", charArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("b935EuATnxk&~I1zc1u:");
      assertEquals("b935EuATnxk&~I1zc1u:", string0);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      String string0 = StringUtils.stripAccents("?>`]}K>D|nS%k%\"HRNU");
      assertNotNull(string0);
      assertEquals("?>`]}K>D|nS%k%\"HRNU", string0);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      String string0 = StringUtils.normalizeSpace("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match:", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("Search and Replace array lengths don't match:");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      String string1 = StringUtils.join((Object[]) stringArray0, 'F');
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("\n", ".B?QLPu!}k|VqG39/$", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("\n", string2);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(". The following paths could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals(58, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      StringUtils.stripAccents("G2DX36IpO,9A");
      StringUtils.normalizeSpace("Om");
      StringUtils.isNumericSpace("Om");
      StringUtils.splitPreserveAllTokens((String) null);
      char[] charArray0 = new char[0];
      StringUtils.containsOnly((CharSequence) "G2DX36IpO,9A", charArray0);
      StringUtils.splitByCharacterTypeCamelCase("");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-95);
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)10;
      byte byte1 = (byte) (-51);
      byteArray0[2] = (byte) (-51);
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte3 = (byte)47;
      byteArray0[4] = (byte)47;
      String string0 = "s tQJ";
      try { 
        StringUtils.toString(byteArray0, "s tQJ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("m9rBe+2m9rBe+2m9rBe+2m");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("maxWith cannot be negative", "maxWith cannot be negative");
      StringUtils.getCommonPrefix(stringArray0);
      String string0 = StringUtils.join(stringArray0);
      assertEquals("", string0);
      assertEquals(27, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.join(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "'4>#LM*MDyu4M9T^@");
      StringUtils.toCodePoints("");
      StringUtils.deleteWhitespace("");
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      StringUtils.containsOnly((CharSequence) "", charArray0);
      StringUtils.leftPad("Failed to delete temp directory ", 16);
      StringUtils.isAlphanumericSpace("");
      StringUtils.mid("", 16, (-518));
      String string0 = "iy>?Azorg.apache.commons.lang3.StringUtilsY\\\\^7B!e";
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "iy>?Azorg.apache.commons.lang3.StringUtilsY\\^7B!e", (-518), 3734);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -518
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.substringAfterLast("\n", " ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase(";dnx", "Strings must not be null");
      assertEquals(";dnx", string0);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\r", (CharSequence) "\n");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      String string0 = StringUtils.rotate("", 8192);
      assertEquals("", string0);
      
      StringUtils.equals((CharSequence) "", (CharSequence) "");
      String string1 = StringUtils.prependIfMissingIgnoreCase("cD~Xxd$B.;A", "cD~Xxd$B.;A", (CharSequence[]) null);
      String string2 = StringUtils.reverseDelimited("cD~Xxd$B.;A", 'j');
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      String string0 = StringUtils.chop("\r\n");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      String string0 = StringUtils.trimToNull("K}YK");
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("K}YK", 5498, 'd');
      String string2 = StringUtils.wrapIfMissing(string1, "K}YK");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      StringUtils.equals((CharSequence) "p", (CharSequence) "p");
      StringUtils.containsNone((CharSequence) "p", "V!y%45Z38:3DI2j8");
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1424;
      shortArray0[1] = (short)1424;
      shortArray0[2] = (short)1424;
      shortArray0[3] = (short)1424;
      shortArray0[4] = (short)1424;
      StringUtils.join(shortArray0, '>', (int) (short)1424, (-448));
      String string0 = StringUtils.overlay("V!y%45Z38:3DI2j8", " r]2", 21, (short)1424);
      assertEquals("V!y%45Z38:3DI2j8 r]2", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "p";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width is %d";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Minimum abbreviation width is %d", "");
      assertEquals("Minimum abbreviation width is %d", string1);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      StringUtils.defaultString("Threshold must not be negative", "B");
      String string0 = "";
      StringUtils.trimToEmpty("");
      char char0 = 'L';
      StringUtils.replaceChars("B", 'L', ')');
      StringUtils.isNotEmpty("");
      StringUtils.defaultString("Threshold must not be negative", (String) null);
      StringUtils.substringAfterLast("B", "");
      String string1 = "Threshold must not be negative";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Threshold must not be negative", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      StringUtils.getIfBlank("The String must not be empy", (Supplier<String>) null);
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "The String must not be empy");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("g@?2sk@IG(TvnY!t", "g@?2sk@IG(TvnY!t");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.removeStartIgnoreCase("\r", " ");
      assertEquals("\r", string0);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.junitpioneer.vintage.ExpectedExceptionExtension", "");
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", (-2318));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "G2DX36IpO,9A", 2307);
      String string1 = StringUtils.wrapIfMissing(", ", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension, org.junitpioneer.vintage.ExpectedExceptionExtension", string1);
      
      String string2 = StringUtils.rotate("iy>?Azorg.apache.commons.lang3.StringUtils", 1600);
      String string3 = StringUtils.removeEndIgnoreCase("tilsiy>?Azorg.apache.commons.lang3.StringU", "G2DX36IpO,9A");
      assertTrue(string3.equals((Object)string2));
      
      StringUtils.join((String[]) null);
      StringUtils.containsAny((CharSequence) "tilsiy>?Azorg.apache.commons.lang3.StringU", (CharSequence[]) null);
      String string4 = StringUtils.getIfBlank("^4 xaDQY>J]'(t0&xE", (Supplier<String>) null);
      assertNotNull(string4);
      
      String string5 = StringUtils.chop("iy>?Azorg.apache.commons.lang3.StringUtils");
      assertEquals("iy>?Azorg.apache.commons.lang3.StringUtil", string5);
      
      StringUtils.removeStartIgnoreCase("", "Locale must not be null");
      String string6 = StringUtils.replaceOnceIgnoreCase(", ", "iy>?Az", "bkli5[V7N`");
      assertEquals(", ", string6);
      
      StringUtils.indexOfIgnoreCase((CharSequence) "tilsiy>?Azorg.apache.commons.lang3.StringU", (CharSequence) "");
      StringUtils.substring((String) null, 1600, 1133);
      boolean boolean1 = StringUtils.equals((CharSequence) "iy>?Az", (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" but was: ", " but was: ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      String string0 = StringUtils.stripAccents("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string0);
      
      String string1 = StringUtils.normalizeSpace("Om");
      boolean boolean0 = StringUtils.isNumericSpace("Om");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("G2DX36IpO,9A", "G2DX36IpO,9A");
      assertEquals(2, stringArray0.length);
      
      char[] charArray0 = new char[0];
      StringUtils.containsOnly((CharSequence) "G2DX36IpO,9A", charArray0);
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("Om");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string2 = StringUtils.chop("Om");
      assertEquals("O", string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("Om", "V:mTh", "^AD?");
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.removeStart("#3*!y", "Index: ");
      assertEquals("#3*!y", string4);
      
      String string5 = StringUtils.substringAfterLast("QTy-;9~. TG`}WC[s#/", "QTy-;9~. TG`}WC[s#/");
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, (-1292));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String string0 = StringUtils.abbreviate("", (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = StringUtils.join(charArray0, 'U');
      assertEquals("\u0000U\u0000U\u0000", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\u0000U\u0000U\u0000", 146);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(stringArray0[1], stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      StringUtils.rotate("p", 953);
      StringUtils.isAnyBlank((CharSequence[]) null);
      int[] intArray0 = new int[0];
      StringUtils.join(intArray0, '9', 953, 953);
      StringUtils.prependIfMissing("iy>?Azorg.apache.commons.lang3.StringUtils", "p", (CharSequence[]) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        StringUtils.joinWith("p", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      String string0 = StringUtils.replace("g@?2sk@IG(TvnY!t", "g@?2sk@IG(TvnY!t", (String) null, 76);
      assertNotNull(string0);
      assertEquals("g@?2sk@IG(TvnY!t", string0);
      
      String string1 = StringUtils.rightPad("f5[sM|T#pMK", 0);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceFirst("f5[sM|T#pMK", "Minimum abbreviation width is %d", "g@?2sk@IG(TvnY!t");
      assertEquals("f5[sM|T#pMK", string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "f5[sM|T#pMK";
      stringArray0[1] = "g@?2sk@IG(TvnY!t";
      String string3 = StringUtils.replaceEachRepeatedly("iy>?Azor", stringArray0, stringArray0);
      assertEquals("iy>?Azor", string3);
      
      String string4 = StringUtils.removeAll("iy>?Azorg.apache.commons.lang3.StringUtilsY\\^7B!e", "W@x|Q=7W26;7F\"y\"n");
      assertEquals("iy>?Azorg.apache.commons.lang3.StringUtilsY\\^7B!e", string4);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
      
      String string5 = StringUtils.join((short[]) null, 'C');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      String string0 = StringUtils.joinWith(";>LFV 8;|{R", stringArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("Threshold must not be negativeThreshold must not be negative", 'g');
      assertNotNull(string0);
      assertEquals("ativegativeThreshold must not be negThreshold must not be ne", string0);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      String string0 = StringUtils.defaultString("+&@=!qA");
      assertEquals("+&@=!qA", string0);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("The character must not be null", "", "The character must not be null");
      assertEquals("The character must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      String string0 = StringUtils.wrap("LP) i&tJ\"&#k@*Kc", 'h');
      assertEquals("hLP) i&tJ\"&#k@*Kch", string0);
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      double[] doubleArray0 = new double[5];
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stringUtils0;
      objectArray0[1] = (Object) stringUtils0;
      objectArray0[2] = (Object) stringUtils0;
      objectArray0[3] = (Object) stringUtils0;
      objectArray0[4] = (Object) stringUtils0;
      String string0 = StringUtils.join(objectArray0, 'g');
      doubleArray0[0] = (double) (-1);
      StringUtils.wrap("*-?E7/.8AX", 'g');
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      StringUtils.join(doubleArray0, ':');
      StringUtils.replaceOnceIgnoreCase("g*-?E7/.8AXg", "", "-1.0:-1.0:-1.0:-1.0:-1.0");
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) "g*-?E7/.8AXg";
      objectArray1[1] = (Object) (-1.0);
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[3] = (Object) stringUtils0;
      objectArray1[4] = (Object) (-1.0);
      objectArray1[5] = (Object) (-1.0);
      Object object1 = new Object();
      objectArray1[6] = object1;
      String string1 = StringUtils.joinWith("", objectArray1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.truncate("<tmTC/?(Z~V~4( \"", 0, (-891));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      String string0 = StringUtils.truncate("?j/PN_9:`[", 6);
      assertEquals("?j/PN_", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      StringUtils.toRootUpperCase("i");
      int int0 = (-505);
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-505));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", " ");
      assertTrue(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String string1 = StringUtils.mid("\r", (-1), 1);
      assertEquals("\r", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      StringUtils.stripAccents("G2DX36IpO,9A");
      String string0 = StringUtils.normalizeSpace("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("G2DX36IpO,9A");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("G2DX36IpO,9A");
      StringUtils.toRootUpperCase("G2DX36IpO,9A");
      StringUtils.containsOnly((CharSequence) "G2DX36IPO,9A", (char[]) null);
      String string1 = StringUtils.leftPad(" is not in the range '0' - '9'", 160);
      assertEquals("                                                                                                                                   is not in the range '0' - '9'", string1);
      
      StringUtils.isAlphanumericSpace("G2DX36IpO,9A");
      StringUtils.mid("G2DX36IPO,9A", (-2158), 8);
      StringUtils.replaceEach("G2DX36IpO,9A", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.stripStart(",=_~U3", "m");
      assertEquals(",=_~U3", string2);
      
      String string3 = StringUtils.wrapIfMissing(",=_~U3", 'I');
      assertEquals("I,=_~U3I", string3);
      
      String string4 = StringUtils.rightPad("", 24, 'G');
      assertEquals("GGGGGGGGGGGGGGGGGGGGGGGG", string4);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(0, int0);
      
      String string0 = StringUtils.mid("r&", (-3110), 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(99);
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) charBuffer0, (Supplier<CharSequence>) null);
      boolean boolean0 = StringUtils.containsIgnoreCase(charBuffer0, charSequence0);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      String string0 = StringUtils.mid("$", 3608, 3608);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("inj!sX_a}!", supplier0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "inj!sX_a}!", (CharSequence) "inj!sX_a}!", 1752);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.mid("inj!sX_a}!", (-1005), 1752);
      assertEquals("inj!sX_a}!", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(". The following paths could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): . The following paths could not be deleted (see suppressed exceptions for details): ");
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      StringUtils.join((Iterator<?>) null, " vs ");
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      StringUtils.firstNonBlank(charSequenceArray0);
      StringUtils.join((char[]) null, 'A');
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      StringUtils.compare("\r", "\r", false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\r";
      stringArray0[1] = "\r";
      stringArray0[2] = "\r";
      stringArray0[3] = "\r";
      stringArray0[4] = "i@,\"yaY$lp1J+q[V";
      String string0 = "TFq";
      stringArray0[5] = "TFq";
      stringArray0[6] = "\r";
      StringUtils.firstNonBlank(stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        Charset.forName("\r");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \r
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.swapCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("aBORTING TO PROTECT AGAINST sTACKoVERFLOWeRROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertTrue(charSequence0.equals((Object)string2));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "aBORTING TO PROTECT AGAINST sTACKoVERFLOWeRROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", "ExceptionWasThrown");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      StringUtils.defaultString("Threshold must not be negative", "B");
      StringUtils.trimToEmpty("");
      StringUtils.replaceChars("B", 'L', ')');
      StringUtils.isNotEmpty("");
      StringUtils.substringAfterLast("B", "");
      StringUtils.stripAll((String[]) null);
      StringUtils.trimToEmpty("Strings must not be null");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-1);
      StringUtils.join(byteArray0, '8');
      String string0 = StringUtils.join((Object[]) null, 'T', (int) (byte)0, 739);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      String string0 = StringUtils.capitalize("The Character must not be null");
      assertEquals("The Character must not be null", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "T";
      charSequenceArray0[1] = (CharSequence) "The Character must not be null";
      charSequenceArray0[2] = (CharSequence) "The Character must not be null";
      charSequenceArray0[3] = (CharSequence) "T";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      StringUtils.substringAfterLast("Can only resolve parameter of type ", "Can only resolve parameter of type ");
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean0 = StringUtils.isBlank("\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      String string0 = StringUtils.rightPad("\n", 85, "\n");
      assertNotNull(string0);
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      StringUtils.repeat('u', (-3143));
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "";
      StringUtils.indexOfDifference(charSequenceArray0);
      StringUtils.join((Object[]) charSequenceArray0, 'P');
      StringUtils.leftPad("", (-3143), "");
      StringUtils.isNoneEmpty(charSequenceArray0);
      StringUtils.isAllEmpty(charSequenceArray0);
      // Undeclared exception!
      try { 
        StringUtils.truncate("^L~d|o#Fff]o2TF", (-3143), 705);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, 'R');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.repeat("\r", 2803);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.rightPad("", (-1), " ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = StringUtils.join(charArray0, '\u0000');
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean0 = StringUtils.isAllUpperCase("\n");
      assertFalse(boolean0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      String string0 = StringUtils.getIfEmpty("", (Supplier<String>) null);
      assertNull(string0);
      
      String string1 = StringUtils.LF;
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) "\n", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("The String must not be empy");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      StringUtils.equals((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", (CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ");
      boolean boolean0 = StringUtils.containsNone((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.chomp("Qt");
      assertEquals("Qt", string0);
      
      String[] stringArray0 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      StringUtils.join(byteArray0, 'A', (int) (short)1424, (-363));
      StringUtils.firstNonBlank((CharSequence[]) null);
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 2649, 2305);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      String string0 = StringUtils.rightPad("T", (-34));
      assertEquals("T", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      StringUtils.join((Object[]) charSequenceArray0, 'L', 0, 0);
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.rightPad("", 3564, "");
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) string0;
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      StringUtils.getIfEmpty((CharSequence) "", supplier0);
      charSequenceArray0[2] = null;
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      
      charSequenceArray0[3] = null;
      char[] charArray0 = new char[9];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      charArray0[4] = 'L';
      charArray0[5] = 'L';
      charArray0[6] = 'L';
      charArray0[7] = 'L';
      charArray0[8] = 'L';
      String string1 = StringUtils.join(charArray0, 'L');
      assertEquals("LLLLLLLLLLLLLLLLL", string1);
      
      charSequenceArray0[4] = (CharSequence) "LLLLLLLLLLLLLLLLL";
      String string2 = StringUtils.swapCase("");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      charSequenceArray0[5] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      String string0 = StringUtils.join(doubleArray0, 's', 10, (-2147483638));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      String string0 = StringUtils.join(doubleArray0, '2');
      assertNotNull(string0);
      assertEquals("0.020.0", string0);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      StringUtils.substringBetween("+N@f.Tob", "+N@f.Tob");
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+N@f.Tob", (String) null, (-11));
      String string0 = StringUtils.overlay("+N@f.Tob", "", 76, 2);
      assertEquals("+N", string0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)732;
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("A4:b$F2Lv(", "A4:b$F2Lv(", "A4:b$F2Lv(");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.lowerCase("\n");
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", "\n");
      assertNull(stringArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      String string2 = StringUtils.join(doubleArray0, '-', (-1), (-1));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      short[] shortArray0 = new short[10];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '\u0089', 5, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.iterator();
      String string0 = StringUtils.deleteWhitespace("lAL\"tkG~S[Tu/Q}<I");
      assertEquals("lAL\"tkG~S[Tu/Q}<I", string0);
      
      StringUtils.unwrap("lAL\"tkG~S[Tu/Q}<I", 'u');
      int int0 = StringUtils.lastOrdinalIndexOf("lAL\"tkG~S[Tu/Q}<I", "lAL\"tkG~S[Tu/Q}<I", 1334);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.getIfEmpty("lAL\"tkG~S[Tu/Q}<I", (Supplier<String>) null);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap((String) null, 'u');
      assertNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "lAL\"tkG~S[Tu/Q}<I", (CharSequence) "lAL\"tkG~S[Tu/Q}<I", 0);
      assertFalse(int1 == int0);
      
      StringUtils.repeat("lAL\"tkG~S[Tu/Q}<I", (-2318));
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<Object> iterator0 = arrayList0.iterator();
      String string3 = StringUtils.join(iterator0, 'u');
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      String string0 = StringUtils.right("S{s2Z-*B)>rY6@m", 22);
      assertEquals("S{s2Z-*B)>rY6@m", string0);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.right(" ", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      String string0 = StringUtils.strip("*v&~RH%", "*v&~RH%");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*v&~RH%";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "*v&~RH%";
      stringArray0[5] = "*v&~RH%";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      String string1 = StringUtils.join(doubleArray0, 'p');
      assertEquals("1.0p1.0p0.0", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", (String) null, "3");
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Object object0 = new Object();
      Object object1 = new Object();
      StringUtils.reverseDelimited(stringArray0[3], '-');
      StringUtils.endsWith("", "*v&~RH%");
      StringUtils.stripStart("&RV`^fbRbu+=5", (String) null);
      StringUtils.defaultIfEmpty("5?sr}$}^SYo*kR-", "Minimum abbreviation width with offset is %d");
      StringUtils.abbreviateMiddle("iy>?Azorg.ap", "*v&~RH%", (-46));
      String string3 = StringUtils.chop("J][i8");
      assertEquals("J][i", string3);
      
      String string4 = StringUtils.right("M$lb'-w", (-46));
      assertTrue(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      StringUtils.trimToEmpty("");
      StringUtils.replaceChars("org.junitpioneer.jupiter.DefaultLoca", 'I', ' ');
      StringUtils.isNotEmpty("");
      StringUtils.defaultString(",bi.6V", "org.junitpioneer.jupiter.DefaultLoca");
      StringUtils.substringAfterLast("org.junitpioneer.vintage.ExpectedExceptionExtension, ", "org.junitpioneer.vintage.ExpectedExceptionExtension, ");
      StringUtils.abbreviate(",bi.6V", 5);
      StringUtils.remove("", "");
      StringUtils.isAllUpperCase((CharSequence) null);
      StringUtils.join((short[]) null, ' ', 4, 65);
      StringUtils.replace(",bi.6V", "ib<O", ", ");
      StringUtils.isAlpha("org.junitpioneer.vintage.ExpectedExceptionExtension, ");
      StringUtils.swapCase("org.junitpioneer.jupiter.DefaultLoca");
      StringUtils.rotate((String) null, (-964));
      int int0 = StringUtils.indexOf((CharSequence) "ORG.JUNITPIONEER.JUPITER.dEFAULTlOCA", (-1163), 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      String string0 = StringUtils.unwrap("{]l(i", '2');
      assertEquals("{]l(i", string0);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = "H__hZ;:D-ev";
      StringUtils.unwrap("H__hZ;:D-ev", '[');
      charSequenceArray0[0] = (CharSequence) "H__hZ;:D-ev";
      String string1 = "";
      StringUtils.right("", 53);
      charSequenceArray0[1] = (CharSequence) "";
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-515);
      shortArray0[2] = (short)32;
      shortArray0[3] = (short) (-2729);
      shortArray0[4] = (short)76;
      shortArray0[5] = (short) (-1026);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'm', 53, 322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      StringUtils.unwrap("blank_blank_blak_2014", '\u0000');
      StringUtils.repeat((String) null, 1747);
      StringUtils.getBytes((String) null, "Threshold must not be negative");
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "blank_blank_blak_2014");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.unwrap("H__hZ;:D-ev", '[');
      assertEquals("H__hZ;:D-ev", string0);
      
      charSequenceArray0[0] = (CharSequence) "H__hZ;:D-ev";
      String string1 = StringUtils.right("Q", 53);
      assertEquals("Q", string1);
      
      charSequenceArray0[1] = (CharSequence) "Q";
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short)32;
      shortArray0[3] = (short) (-2729);
      shortArray0[4] = (short)75;
      String string2 = StringUtils.uncapitalize("Q");
      assertEquals("q", string2);
      
      StringUtils.indexOfIgnoreCase((CharSequence) "q", (CharSequence) "NnyjCm3ZbK5", (int) (short) (-515));
      String string3 = StringUtils.defaultIfEmpty("Minimum abbreviation width is %d", "*0D?56omGawQI24");
      assertEquals("Minimum abbreviation width is %d", string3);
      
      String string4 = StringUtils.abbreviateMiddle("NN#K3cG?t:txvt", "q", 77);
      assertEquals("NN#K3cG?t:txvt", string4);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      
      StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", (-3563));
      String string0 = StringUtils.repeat("Threshold must not be negative\n\r", "~'{3gl", (-3563));
      String string1 = StringUtils.prependIfMissing("", "", stringArray0);
      assertEquals("", string1);
      
      StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.replaceChars("", "CP", "Index: ");
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviate("Index: ", "", 2440, (-3563));
      assertEquals("Index: ", string3);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      String[] stringArray0 = new String[1];
      StringUtils.containsAny((CharSequence) stringArray0[0], (CharSequence[]) stringArray0);
      StringUtils.stripStart("VA,D]`fE", "VA,D]`fE");
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("VA,D]`fE", " vs ", 18, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      String string0 = StringUtils.defaultString("`*v e4D", "`*v e4D");
      String string1 = StringUtils.removeIgnoreCase("`*v e4D", "`*v e4D");
      assertEquals("", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("`*v e4D", "");
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase("`*v e4D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'a');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", "", 2151, 2151);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "<C1MyOCm ;0`HTLw", (CharSequence) "<C1MyOCm ;0`HTLw");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("b935Eunx%&BI1zc1y:", "b935Eunx%&BI1zc1y:");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      StringUtils.containsOnly((CharSequence) "The String must not be empty", "The String must not be empty");
      StringUtils.endsWithAny("The String must not be empty", charSequenceArray0);
      StringUtils.remove("", "");
      StringUtils.toRootLowerCase("The String must not be empty");
      StringUtils.rightPad("The String must not be empty", 1, 'L');
      StringUtils.getJaroWinklerDistance("The String must not be empty", "The String must not be empty");
      StringUtils.right("The String must not be empty", 1);
      StringUtils.chomp("org.apache.commons.lang3.ARrayUtils");
      StringUtils.stripAccents("");
      StringUtils.stripStart("The String must not be empty", "p");
      String string0 = StringUtils.removeIgnoreCase("y", "");
      String string1 = StringUtils.rightPad("org.apache.commons.lang3.ARrayUtils", 1, 'T');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("+N@f.Tob", "+N@f.Tob");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      StringUtils.abbreviate("", "", (-1460), (-1460));
      StringUtils.join((float[]) null, 'p');
      StringUtils.removeStartIgnoreCase("=rhlBLq9[Pr+$", "");
      StringUtils.repeat('a', (-1460));
      StringUtils.removeIgnoreCase("=rhlBLq9[Pr+$", "PFh?1&Bryr\"amx^q{J");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        Charset.forName("2S]n\"rBylIg rgR1");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 2S]n\"rBylIg rgR1
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stringUtils0;
      objectArray0[1] = (Object) stringUtils0;
      objectArray0[3] = (Object) stringUtils0;
      objectArray0[4] = (Object) stringUtils0;
      StringUtils.join(objectArray0, 'g');
      StringUtils.replace("w[*;Ya\"O%#eAGB", "DefaultTimeZone", "DefaultTimeZone");
      StringUtils.lowerCase((String) null);
      StringUtils.isAlpha("w[*;Ya\"O%#eAGB");
      StringUtils.toRootUpperCase("-xP7F.yri;!'Le");
      // Undeclared exception!
      try { 
        StringUtils.truncate("z*", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      String string0 = StringUtils.repeat(' ', (int) ' ');
      assertEquals("                                ", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "                                ", charArray0);
      assertEquals((-1), int0);
      
      StringUtils.containsNone((CharSequence) "                                ", "");
      StringUtils.substringsBetween("*WSz|>PIlS6#9JG", "*WSz|>PIlS6#9JG", "                                ");
      String string1 = StringUtils.stripEnd("                                ", (String) null);
      assertEquals("", string1);
      
      String string2 = StringUtils.remove("Threshold must not be negative", 'c');
      assertEquals("Threshold must not be negative", string2);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      String string0 = StringUtils.substringBetween("+N@f.Tob", "+N@f.Tob");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+N@f.Tob", (String) null, (-11));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      String string0 = StringUtils.wrap("?Lat5x3PJ>IS~", '%');
      assertEquals("%?Lat5x3PJ>IS~%", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "%?Lat5x3PJ>IS~%", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      StringUtils.lastIndexOf((CharSequence) "?Lat5x3PJ>IS~", (-1));
      String string1 = StringUtils.defaultString(":\"<X@-L~m");
      assertEquals(":\"<X@-L~m", string1);
      
      String string2 = StringUtils.defaultIfBlank("", " ");
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", " ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      StringUtils.repeat('7', (-1));
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string3 = StringUtils.remove(" ", 'H');
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      String string0 = StringUtils.lowerCase("D`9[B~7");
      assertNotNull(string0);
      assertEquals("d`9[b~7", string0);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.indexOf((CharSequence) "\r", (CharSequence) "");
      assertEquals(0, int0);
      
      String string0 = StringUtils.swapCase(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.jupiter.SystemPropertyExtension", (CharSequence) "org.junitpioneer.jupiter.SystemPropertyExtension");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.center("}V", (-1), "");
      assertEquals("}V", string0);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      String string0 = StringUtils.wrap("org.junitpioneer.jupiter.params.LongRange", "<C1MyOCm ;0`HTLw");
      assertEquals("<C1MyOCm ;0`HTLworg.junitpioneer.jupiter.params.LongRange<C1MyOCm ;0`HTLw", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "<C1MyOCm ;0`HTLworg.junitpioneer.jupiter.params.LongRange<C1MyOCm ;0`HTLw", (CharSequence) "<C1MyOCm ;0`HTLw");
      assertEquals(0, int0);
      
      StringUtils.isAsciiPrintable("<C1MyOCm ;0`HTLw");
      String string1 = StringUtils.replaceChars("", 'o', 'o');
      assertEquals("", string1);
      
      String string2 = StringUtils.center("Cl?9we-", 1301, "@=Xf/");
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int1);
      
      StringUtils.isNoneEmpty(charSequenceArray0);
      StringUtils.startsWithAny("@=Xf/", charSequenceArray0);
      String string3 = StringUtils.abbreviate(" ", "...", 1301);
      assertFalse(string3.equals((Object)string2));
      assertEquals(" ", string3);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", " ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      String string0 = StringUtils.strip("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.containsIgnoreCase(" ", "\r");
      StringUtils.strip("\n", " ");
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("7uan4$E");
      assertEquals("7uan4$E", string0);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      String string0 = StringUtils.stripToNull("g");
      assertEquals("g", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      String string1 = StringUtils.deleteWhitespace("z");
      assertEquals("z", string1);
      
      boolean boolean0 = StringUtils.isEmpty("z");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object1;
      objectArray0[1] = object1;
      objectArray0[2] = (Object) null;
      objectArray0[0] = (Object) "";
      String string2 = StringUtils.joinWith("Q7RXlsTR<<rQtm", objectArray0);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.leftPad("J", 2, '#');
      assertEquals("#J", string3);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("Q7RXlsTR<<rQtm", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      String string0 = StringUtils.replacePattern((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("The ChLracte* must not be null");
      Locale locale0 = Locale.JAPANESE;
      String string0 = StringUtils.lowerCase("The ChLracte* must not be null", locale0);
      assertNotNull(string0);
      assertEquals("the chlracte* must not be null", string0);
      
      boolean boolean1 = StringUtils.isWhitespace("the chlracte* must not be null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("3g&Y<V2g", 'J');
      int int0 = StringUtils.lastIndexOfAny("3g&Y<V2g", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, 'O');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", ' ');
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("F%\"V&]qHGos;&PX8^");
      assertEquals("F%\"V&]qHGos;&PX8^", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "F%\"V&]qHGos;&PX8^", "F%\"V&]qHGos;&PX8^");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("Don't clear/set the same property more than once.", "Don't clear/set the same property more than once.", "");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("G,vw}*Qw&D|^uq", "G,vw}*Qw&D|^uq", "G,vw}*Qw&D|^uq", 118);
      assertEquals("G,vw}*Qw&D|^uq", string0);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("UDf6[ZrDiqhI", "UDf6[ZrDiqhI", "UDf6[ZrDiqhI");
      assertEquals("UDf6[ZrDiqhI", string0);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("F%\"V&]qHGos;&PX8^");
      assertEquals("F%\"V&]qHGos;&PX8^", string0);
      
      String string1 = StringUtils.wrap("F%\"V&]qHGos;&PX8^", 'A');
      assertEquals("AF%\"V&]qHGos;&PX8^A", string1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'A';
      String string2 = StringUtils.join(doubleArray0, 'A');
      assertEquals("65.0", string2);
      
      String string3 = StringUtils.replaceIgnoreCase("AF%\"V&]qHGos;&PX8^A", "F%\"V&]qHGos;&PX8^", "65.0");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "A65.0A";
      objectArray0[1] = (Object) "F%\"V&]qHGos;&PX8^";
      String string4 = StringUtils.joinWith("iy>?Azor", objectArray0);
      assertEquals("A65.0Aiy>?AzorF%\"V&]qHGos;&PX8^", string4);
      
      String string5 = StringUtils.leftPad("A65.0A", (-1), 'A');
      assertTrue(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("The ChLracte* must not be null", "The ChLracte* must not be null", "The ChLracte* must not be null");
      assertEquals("The ChLracte* must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      String string0 = StringUtils.substring("", 256, 259);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 259, 11);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      StringUtils.join((Object[]) null, "C$");
      StringUtils.equals((CharSequence) null, (CharSequence) null);
      StringUtils.join((double[]) null, '}');
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1424;
      shortArray0[0] = (short)0;
      StringUtils.join(shortArray0, 't', 0, (int) (short)0);
      StringUtils.equalsIgnoreCase("", "");
      StringUtils.abbreviate("C$", (String) null, 50);
      StringUtils.countMatches((CharSequence) null, 't');
      StringUtils.left((String) null, 0);
      StringUtils.defaultString("'|{fe{WthL8;,#&", (String) null);
      StringUtils.isAsciiPrintable((CharSequence) null);
      StringUtils.defaultIfEmpty((String) null, "");
      StringUtils.difference("6P2{y@:", "");
      StringUtils.substring("", (int) (short)0, 0);
      StringUtils.stripToNull("64 x9M&x]>GSq");
      StringUtils.getDigits("");
      int int0 = StringUtils.indexOf((CharSequence) null, 0, 50);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      StringUtils.substringBetween("org.junitpioneer.vintage.ExpectedExceptionExtension", "");
      StringUtils.lastOrdinalIndexOf("", "", (-2318));
      StringUtils.contains((CharSequence) "", 2307);
      StringUtils.wrapIfMissing(", ", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      StringUtils.rotate("iy>?Azorg.apache.commons.lang3.StringUtils", 1600);
      StringUtils.abbreviate("", 1133, (-2318));
      StringUtils.join((String[]) null);
      StringUtils.containsAny((CharSequence) "", (CharSequence[]) null);
      StringUtils.getIfBlank("^4 xaDQY>J]'(t0&xE", (Supplier<String>) null);
      StringUtils.chop("iy>?Azorg.apache.commons.lang3.StringUtils");
      StringUtils.removeStartIgnoreCase("", "Locale must not be null");
      StringUtils.replaceOnceIgnoreCase(", ", "iy>?Az", "bkli5[V7N`");
      StringUtils.indexOfIgnoreCase((CharSequence) "tilsiy>?Azorg.apache.commons.lang3.StringU", (CharSequence) "");
      StringUtils.substring((String) null, 1600, 1133);
      boolean boolean0 = StringUtils.equals((CharSequence) "iy>?Az", (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      String string0 = StringUtils.rotate("$b~.:S`-", 3);
      assertEquals("`-$b~.:S", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      StringUtils.substringBetween("+N@f.Tob", "+N@f.Tob");
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+N@f.Tob", (String) null, (-11));
      StringUtils.removeIgnoreCase("org.junitpioneer.jupiter.params.IntRange", "org.junitpioneer.jupiter.params.IntRange");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "+N@f.Tob", (CharSequence) "", 16);
      StringUtils.toRootUpperCase("");
      StringUtils.trimToNull("org.junitpioneer.vintage.ExpectedExceptionExtension");
      StringUtils.stripToEmpty("org.junitpioneer.jupiter.RepeatFailedTestExtension");
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      StringUtils.joinWith("!x", stringArray0);
      StringUtils.trimToNull("org.junitpioneer.jupiter.params.IntRange");
      StringUtils.substring("Threshold must not be negative", 8, 51);
      StringUtils.equals((CharSequence) "Threshold must not be negative", (CharSequence) "+N@f.Tob");
      StringUtils.stripAccents("");
      String string0 = StringUtils.replaceChars((String) null, "a)/K", "+N@f.Tob");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      StringUtils.strip("DefaultTimeZone");
      StringUtils.removeStart("Failed to create custom temp directory", (String) null);
      StringUtils.replace("Failed to create custom temp directory", "Failed to create custom temp directory", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(vector0);
      StringUtils.join((Iterable<?>) vector0, "org.junitpioneer.jupiter.DefaultLoca");
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "Object varargs must not be null");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'h');
      assertEquals("FORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, '3');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      String string0 = StringUtils.substringBetween("XOHcS", "XOHcS");
      StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, (-2318));
      StringUtils.contains((CharSequence) "XOHcS", (-2318));
      StringUtils.wrapIfMissing((String) null, "XOHcS");
      StringUtils.rotate((String) null, (-2318));
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      StringUtils.abbreviate((String) null, (-1), (-1));
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "XOHcS";
      charSequenceArray0[7] = (CharSequence) null;
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "XOHcS";
      StringUtils.join(stringArray0);
      charSequenceArray0[8] = (CharSequence) "XOHcS";
      StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      StringUtils.getIfBlank("XOHcS", (Supplier<String>) null);
      StringUtils.chop((String) null);
      StringUtils.trim("XOHcS");
      StringUtils.replaceOnceIgnoreCase((String) null, string0, string0);
      StringUtils.indexOfIgnoreCase((CharSequence) "XOHcS", (CharSequence) " vs ");
      StringUtils.removeStart("", "XOHcS");
      StringUtils.substringAfterLast("c?\"`", "|$]KVOjt@i$i:w0y");
      StringUtils.left("\n", (-2318));
      String string1 = StringUtils.toRootUpperCase((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      String string0 = "1\"b>WQL;IG\\ZT%h";
      StringUtils.defaultIfEmpty("K\"iAbZ$wF~D2zZs^I", "1\"b>WQL;IGZT%h");
      char char0 = 'G';
      StringUtils.join((Iterable<?>) null, 'G');
      StringUtils.compare("Failed to create custom temp directoryFailed to create custom temp directory", "K\"iAbZ$wF~D2zZs^I");
      StringUtils.endsWithIgnoreCase("K\"iAbZ$wF~D2zZs^I", "K\"iAbZ$wF~D2zZs^I");
      StringUtils.repeat("gTFF^wL>r+y#ud", (String) null, (-5));
      StringUtils.isAlpha("");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        stack0.listIterator((-5));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.substring("\r", (-1), (-1));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.stripStart("\r", "");
      assertEquals("\r", string0);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      String string0 = StringUtils.removeStart("Failed to create custom temp directory", "Failed to create custom temp directory");
      String string1 = StringUtils.replace("SC|6$VN^6K", "=]b!~P'9JVF6R4gwU,e", "org", 6);
      String string2 = StringUtils.rightPad("SC|6$VN^6K", 0);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceFirst("=]b!~P'9JVF6R4gwU,e", "SC|6$VN^6K", "Failed to create custom temp directory");
      assertEquals("=]b!~P'9JVF6R4gwU,e", string3);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "=]b!~P'9JVF6R4gwU,e";
      stringArray0[1] = "SC|6$VN^6K";
      stringArray0[2] = "Search and Replace array lengths don't match: ";
      stringArray0[3] = "=]b!~P'9JVF6R4gwU,e";
      stringArray0[4] = "|+TmEqQS~Wy";
      stringArray0[5] = "SC|6$VN^6K";
      String string4 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertTrue(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1256.138F;
      StringUtils.join(floatArray0, 'P');
      StringUtils.equalsIgnoreCase("1256.138", "1256.138");
      String string0 = StringUtils.join(floatArray0, 'P', 108, 108);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      float[] floatArray0 = new float[10];
      String string0 = StringUtils.join(floatArray0, 'a');
      assertEquals("0.0a0.0a0.0a0.0a0.0a0.0a0.0a0.0a0.0a0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.toRootUpperCase("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.isAnyBlank(charSequenceArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      String string1 = StringUtils.swapCase("");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("\r", " ", "", (-1735));
      String string3 = StringUtils.toRootUpperCase(" ");
      assertNotNull(string3);
      assertEquals(" ", string3);
      
      String string4 = StringUtils.removeStart("\r", "\n");
      assertTrue(string4.equals((Object)string2));
      
      String string5 = StringUtils.stripStart("maxWith cannot be negative", "\r");
      assertEquals("maxWith cannot be negative", string5);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      StringUtils.replaceAll("s", (String) null, (String) null);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1);
      StringUtils.join((Iterable<?>) list0, 'f');
      StringUtils.substring("s", (-873), (-873));
      StringUtils.substringsBetween("Ud'5?<={g", (String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      char char0 = '-';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'Z';
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 16;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '-', 30, 1289);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      String string0 = StringUtils.join((Iterable<?>) vector0, 'S');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      String string0 = StringUtils.remove("IEaR<\"", "IEaR<\"");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'j');
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("DISPLAY", 96, (-873));
      assertNotNull(string1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'j';
      floatArray0[1] = (float) 96;
      String string2 = StringUtils.join(floatArray0, 'j', 0, 0);
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("DISPLAY", "DISPLAY", "3':YW%.^f", 96);
      assertEquals("3':YW%.^f", string3);
      
      String string4 = StringUtils.toRootUpperCase("");
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStart("", "Search and Replace array lengths don't match: ");
      assertTrue(string5.equals((Object)string2));
      
      String string6 = StringUtils.stripStart(", Length: ", "");
      assertEquals(", Length: ", string6);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "b935Eunx%&BI1zc1y:";
      stringArray0[1] = "b935Eunx%&BI1zc1y:";
      stringArray0[2] = "b935Eunx%&BI1zc1y:";
      stringArray0[3] = "b935Eunx%&BI1zc1y:";
      stringArray0[4] = "b935Eunx%&BI1zc1y:";
      stringArray0[5] = "b935Eunx%&BI1zc1y:";
      String string0 = StringUtils.replaceEach("b935Eunx%&BI1zc1y:", stringArray0, stringArray0);
      assertEquals("b935Eunx%&BI1zc1y:", string0);
      
      String string1 = StringUtils.stripStart("", "Urvn");
      String string2 = StringUtils.wrapIfMissing("Urvn", ';');
      assertEquals(";Urvn;", string2);
      
      String string3 = StringUtils.rightPad("", 0, ';');
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("\r", "", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.CANADA_FRENCH;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      locale0.getDisplayLanguage(locale1);
      locale0.getUnicodeLocaleAttributes();
      String string0 = StringUtils.lowerCase("\"6", locale0);
      int int0 = StringUtils.indexOf((CharSequence) "\"6", (CharSequence) "\"6");
      locale1.getDisplayCountry();
      StringUtils.isAllEmpty((CharSequence[]) null);
      StringUtils.center("\"6", 0, "\"6");
      String string1 = StringUtils.lowerCase("\"6");
      assertEquals("\"6", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replacePattern("org.junitpioneer.jupiter.TempDirectory$CloseablePath", "chinois", "LaunchTime");
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePath", string2);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "\"6", (CharSequence) "\"6");
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.strip("\"6");
      assertTrue(string3.equals((Object)string0));
      
      StringUtils.containsIgnoreCase("\"6", "chinois");
      String string4 = StringUtils.uncapitalize("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertEquals("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", string4);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      StringUtils.join((Object[]) null, "C$");
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "C$", "C$");
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1424;
      shortArray0[1] = (short)1424;
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "C$", (CharSequence) null);
      assertEquals((-1), int0);
      
      StringUtils.removeStart((String) null, (String) null);
      String string0 = StringUtils.substringAfterLast("org.junitpioneer.jupiter.ReportEntryExtension", "org.junitpioneer.jupiter.ReportEntryExtension");
      assertEquals("", string0);
      
      String string1 = StringUtils.left("org.junitpioneer.jupiter.TempDirectory$CloseablePathmj5?%~6r(Wv0vj-E", 13);
      String string2 = StringUtils.toRootUpperCase("org.junitpioneer.jupiter.TempDirectory$CloseablePathmj5?%~6r(Wv0vj-E");
      assertEquals("ORG.JUNITPIONEER.JUPITER.TEMPDIRECTORY$CLOSEABLEPATHMJ5?%~6R(WV0VJ-E", string2);
      
      StringUtils.left("/m#3SiUm!lVQ2", 10);
      String string3 = StringUtils.center("org.junitpion", 10);
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.equals((CharSequence) null, (CharSequence) "org.junitpion");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      String string0 = StringUtils.stripEnd("g@?2sk@IG(TvnY!t", "g@?2sk@IG(TvnY!t");
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", (-1359));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "m0o)z";
      String string0 = StringUtils.prependIfMissingIgnoreCase("m0o)z", "m0o)z", charSequenceArray0);
      assertEquals("m0o)z", string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("m0o)z", charSequenceArray0);
      assertTrue(boolean0);
      
      StringUtils.defaultIfEmpty("m0o)z", "m0o)z");
      StringUtils.join((Object[]) charSequenceArray0, (String) null, 5, 5);
      StringUtils.right((String) null, 5);
      String string1 = StringUtils.remove((String) null, '(');
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      StringUtils.defaultString(" *i7K");
      StringUtils.getLevenshteinDistance((CharSequence) " *i7K", (CharSequence) " *i7K");
      StringUtils.chop("z8<MeX*");
      StringUtils.trimToEmpty("|Ci");
      StringUtils.reverse("|Ci");
      StringUtils.join((int[]) null, 'N');
      // Undeclared exception!
      try { 
        Charset.forName("C4se*aX");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // C4se*aX
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "maxWith cannot be negative");
      Locale locale0 = Locale.FRANCE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashSet<String> hashSet0 = new HashSet<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) hashSet0);
      int int0 = StringUtils.getFuzzyDistance("", "maxWith cannot be negative", locale0);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "maxWith cannot be negative", "_MZO;Z-2W.&A9v]");
      String string0 = StringUtils.replaceIgnoreCase("maxWith cannot be negative", ":8o%iW0X", "", 122);
      assertEquals("maxWith cannot be negative", string0);
      
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[1] = (CharSequence) "_MZO;Z-2W.&A9v]";
      String string1 = StringUtils.defaultString("Illegal range. The step cannot be zero.");
      assertEquals("Illegal range. The step cannot be zero.", string1);
      
      charSequenceArray0[2] = (CharSequence) "Illegal range. The step cannot be zero.";
      charSequenceArray0[3] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[4] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[5] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[6] = (CharSequence) ":8o%iW0X";
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode(". The following paths could not be deleted (see suppressed exceptions for details): ");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      boolean boolean0 = StringUtils.equals((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", (CharSequence) charBuffer0);
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripAccents("03%!6'X%");
      assertNotNull(string0);
      assertEquals("03%!6'X%", string0);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Failed to create custom temp directory", "\"^s`c'=uW");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.iterator();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Failed to create custom temp directory";
      stringArray0[1] = " in an array of ";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("J5aty\"`!9P>l8%G", (String) null);
      assertEquals("J5aty\"`!9P>l8%G", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      int int0 = StringUtils.getFuzzyDistance("\"^s`c'=uW", " in an array of ", locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      char char0 = '1';
      StringUtils.join(objectArray0, '1', 2848, 2848);
      StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", (CharSequence) null, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "m0o)z";
      StringUtils.prependIfMissingIgnoreCase("m0o)z", "m0o)z", charSequenceArray0);
      StringUtils.equalsAnyIgnoreCase("m0o)z", charSequenceArray0);
      StringUtils.defaultIfEmpty("m0o)z", "m0o)z");
      StringUtils.replace("gE7djQB\"a$7R", "GlC1!rN(ZBX2+I", "m0o)z");
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(vector0);
      StringUtils.join((Iterable<?>) null, "Threshold must not be negative");
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte)25;
      byteArray0[8] = (byte)112;
      String string0 = StringUtils.join(byteArray0, '^');
      assertEquals("29^89^-64^71^65^54^-112^25^112", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "29^89^-64^71^65^54^-112^25^112", (int) (byte)54);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("o");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      StringUtils.reverse((String) null);
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "V");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "&f#t]_F[4w9b*5");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      String string0 = StringUtils.strip("DefaultTimeZone");
      assertEquals("DefaultTimeZone", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("DefaultTimeZone");
      String string1 = StringUtils.rotate("DefaultTimeZone", 13);
      assertEquals("faultTimeZoneDe", string1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "DefaultTimeZone", (CharSequence) "faultTimeZoneDe");
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "DefaultTimeZone";
      charSequenceArray0[1] = (CharSequence) "DefaultTimeZone";
      charSequenceArray0[2] = (CharSequence) "DefaultTimeZone";
      charSequenceArray0[3] = (CharSequence) "DefaultTimeZone";
      String string2 = StringUtils.prependIfMissingIgnoreCase("faultTimeZoneDe", "DefaultTimeZone", charSequenceArray0);
      assertEquals("DefaultTimeZonefaultTimeZoneDe", string2);
      
      String string3 = StringUtils.reverseDelimited("iy>?Az", 'j');
      assertEquals("iy>?Az", string3);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.lastOrdinalIndexOf(" ", "", (-1));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      String string0 = StringUtils.substringBetween("XOHcS", "XOHcS");
      assertNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, (-2318));
      StringUtils.contains((CharSequence) "XOHcS", (-2318));
      String string1 = StringUtils.wrapIfMissing((String) null, "XOHcS");
      assertNull(string1);
      
      StringUtils.rotate((String) null, (-2318));
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string2 = StringUtils.abbreviate((String) null, (-1), (-1));
      assertNull(string2);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "XOHcS";
      charSequenceArray0[7] = (CharSequence) null;
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "XOHcS";
      String string3 = StringUtils.join(stringArray0);
      assertEquals("XOHcS", string3);
      
      charSequenceArray0[8] = (CharSequence) "XOHcS";
      StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      String string4 = StringUtils.getIfBlank("XOHcS", (Supplier<String>) null);
      assertNotNull(string4);
      
      StringUtils.chop((String) null);
      String string5 = StringUtils.removeStartIgnoreCase(" vs ", "XOHcS");
      assertEquals(" vs ", string5);
      
      StringUtils.replaceOnceIgnoreCase((String) null, string0, string0);
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "XOHcS", (CharSequence) " vs ");
      assertTrue(int1 == int0);
      
      StringUtils.removeStart("", "XOHcS");
      String string6 = StringUtils.substringAfterLast("c?\"`", "|$]KVOjt@i$i:w0y");
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      String string0 = StringUtils.stripStart("g@?2sk@IG(TvnY!t", "g@?2sk@IG(TvnY!t");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean0 = StringUtils.equals((CharSequence) "\n", (CharSequence) "\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(30, 30);
      String string0 = StringUtils.join((Iterable<?>) hashSet0, "fde#9=LK>c$`-");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      String string0 = StringUtils.repeat('q', 0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      String string0 = null;
      StringUtils.containsNone((CharSequence) null, (String) null);
      StringUtils.contains((CharSequence) null, (-182));
      StringUtils.stripToNull("\r");
      StringUtils.split("");
      StringUtils.equals((CharSequence) "\r", (CharSequence) null);
      StringUtils.reverse((String) null);
      StringUtils.lastOrdinalIndexOf((CharSequence) null, "", (-182));
      StringUtils.join((Object[]) null, (String) null, 0, (-182));
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      StringUtils.join((Iterable<?>) arrayDeque0, (String) null);
      Locale locale0 = Locale.JAPAN;
      locale0.getDisplayLanguage();
      locale0.getExtensionKeys();
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = null;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      StringUtils.leftPad((String) null, 4655, 'K');
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = 'K';
      StringUtils.containsOnly((CharSequence) null, charArray0);
      String string0 = StringUtils.leftPad("mj5?%~6r(Wv0vj-E", (-1));
      assertEquals("mj5?%~6r(Wv0vj-E", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(charSequenceArray0[1]);
      String string1 = StringUtils.mid((String) null, (-604), (-604));
      assertNull(string1);
      
      String string2 = StringUtils.prependIfMissing("hh01MT(cH", charSequenceArray0[0], charSequenceArray0);
      assertEquals("hh01MT(cH", string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "hh01MT(cH", charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      String string0 = StringUtils.overlay("(.", "(.", 2247, 2247);
      assertEquals("(.(.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      String string0 = StringUtils.stripAccents("G2DX36IpO,9A");
      assertEquals("G2DX36IpO,9A", string0);
      
      String string1 = StringUtils.normalizeSpace("Om");
      assertEquals("Om", string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("Om");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "G2DX36IpO,9A", (-1834));
      assertNull(stringArray0);
      
      String string2 = StringUtils.overlay("Y\\^7B!eiy>?Azorg.apache.commons.lang3.StringUtils", "&b8##IN", (-1834), Integer.MIN_VALUE);
      assertEquals("&b8##INY\\^7B!eiy>?Azorg.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      String string0 = StringUtils.trim("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      StringUtils.substringBetween("+N@f.Tob", "+N@f.Tob");
      StringUtils.splitPreserveAllTokens((String) null);
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'p';
      charArray0[2] = 'C';
      StringUtils.containsOnly((CharSequence) null, charArray0);
      StringUtils.splitByCharacterTypeCamelCase("+N@f.Tob");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)47;
      try { 
        StringUtils.toString(byteArray0, "+N@f.Tob");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("Backup");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      String string1 = StringUtils.deleteWhitespace("");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.overlay("\n", "\r", (-1), (-1));
      assertEquals("\r\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.join(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      StringUtils.substringBetween("XOHcS", "XOHcS");
      StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, (-2318));
      StringUtils.getIfEmpty((String) null, (Supplier<String>) null);
      StringUtils.indexOfIgnoreCase((CharSequence) "XOHcS", (CharSequence) null, 1752);
      StringUtils.mid("XOHcS", 2500, 13);
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      String string0 = StringUtils.join(charArray0, 'D', (-1), (-2318));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("m!r\"@");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("aSP#FLTOGI9:BY_d7~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("'4>#LMMyu4M9^@");
      assertEquals(14, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      short[] shortArray0 = new short[11];
      String string0 = StringUtils.join(shortArray0, '#');
      assertNotNull(string0);
      assertEquals("0#0#0#0#0#0#0#0#0#0#0", string0);
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.leftPad("", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("F%\"V&]qHGos;&PX8^");
      assertEquals("F%\"V&]qHGos;&PX8^", string0);
      
      String string1 = StringUtils.wrap("F%\"V&]qHGos;&PX8^", 'A');
      assertEquals("AF%\"V&]qHGos;&PX8^A", string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Threshold must not be negative\n\r";
      stringArray0[1] = "Threshold must not be negative\n\r";
      stringArray0[2] = "AF%\"V&]qHGos;&PX8^A";
      StringUtils.replaceEach("Threshold must not be negative\n\r", stringArray0, stringArray0);
      String string2 = StringUtils.deleteWhitespace("\n");
      assertEquals("", string2);
      
      String string3 = StringUtils.right("org.junitpioneer.jupiter.params.Range", 8192);
      assertEquals("org.junitpioneer.jupiter.params.Range", string3);
      
      StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.params.Range", (CharSequence) "org.apache.commons.lang3.StringUtils", 20);
      String string4 = StringUtils.defaultIfEmpty("", "Failed to create custom temp directoryFailed to create custom temp directory");
      assertEquals("Failed to create custom temp directoryFailed to create custom temp directory", string4);
      
      String string5 = StringUtils.abbreviateMiddle("The Array must not be null", "h", (-2916));
      assertEquals("The Array must not be null", string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "F%\"V&]qHGos;&PX8^", (CharSequence) "The Array must not be null", 20);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'6P~jb", "Array element ", 25);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "b935EuATnxk&~I1zc1u:", "b935EuATnxk&~I1zc1u:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" but was: ", " but was: ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "'4>#LM*MDyu4M9T^@");
      StringUtils.toCodePoints("");
      String string0 = StringUtils.deleteWhitespace("");
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = '3';
      StringUtils.containsOnly((CharSequence) "", charArray0);
      String string1 = StringUtils.leftPad("Failed to delete temp directory ", 16);
      assertEquals("Failed to delete temp directory ", string1);
      
      StringUtils.isAlphanumericSpace("");
      StringUtils.mid("", 16, (-518));
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "rW46", 16);
      assertSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.overlay("", "", 16, 16);
      assertTrue(string2.equals((Object)string0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)732;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)3;
      shortArray0[3] = (short)32;
      shortArray0[4] = (short)212;
      shortArray0[5] = (short)16;
      shortArray0[6] = (short)10;
      shortArray0[7] = (short)0;
      String string3 = StringUtils.join(shortArray0, 'x');
      assertNotNull(string3);
      assertEquals("732x0x3x32x212x16x10x0", string3);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace(". The followiyg paths could not be deleted (see suppressed exceptions  or details): ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.mid("", (-1), (-1));
      assertEquals("", string0);
  }
}
