/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 16:09:03 GMT 2025
 */

package org.apache.commons.lang3.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Set;
import org.apache.commons.lang3.ClassUtils;
import org.apache.commons.lang3.reflect.MethodUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MethodUtils_ESTest extends MethodUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, true, false);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, true, true);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      try { 
        MethodUtils.invokeMethod((Object) "invoke", "format", (Object[]) classArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 2);
      classArray0[1] = class0;
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(classArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "getTypeParameters", (Class<?>[]) null);
      Object object0 = MethodUtils.invokeMethod((Object) method0, false, "getTypeParameters", (Object[]) null, (Class<?>[]) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      Class<Method> class0 = Method.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, false, "getEnumConstants", (Object[]) classArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getAnnotatedParameterTypes", classArray0);
      Object object0 = MethodUtils.invokeMethod((Object) method0, true, "getAnnotatedParameterTypes", (Object[]) classArray0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, true, "finalize");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getAnnotatedParameterTypes", classArray0);
      Object object0 = MethodUtils.invokeMethod((Object) method0, "getAnnotatedParameterTypes", (Object[]) classArray0, (Class<?>[]) classArray0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, "toString", (Object[]) null);
      assertEquals("interface java.lang.annotation.Annotation", object0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, "getSigners");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object object0 = MethodUtils.invokeExactMethod((Object) class0, "getSigners", (Object[]) null, (Class<?>[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object object0 = MethodUtils.invokeExactMethod((Object) "intern", "intern", (Object[]) null, (Class<?>[]) null);
      assertEquals("intern", object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class0, true, false);
      Object object0 = MethodUtils.invokeExactMethod((Object) class0, "getClass");
      Object object1 = MethodUtils.invokeExactMethod(object0, "getDeclaringClass", (Object[]) methodArray0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getAnnotatedParameterTypes", classArray0);
      Object object0 = MethodUtils.invokeExactMethod((Object) method0, "getAnnotatedParameterTypes", (Object[]) classArray0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class0);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 2);
      Method method0 = MethodUtils.getMatchingMethod(class0, "invoke", classArray0);
      assertEquals("public java.lang.Object java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[]) throws java.lang.IllegalAccessException,java.lang.IllegalArgumentException,java.lang.reflect.InvocationTargetException", method0.toString());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method method0 = MethodUtils.getMatchingMethod(class0, "getTypeAnnotationBytes", (Class<?>[]) null);
      assertFalse(method0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "getClass", (Class<?>[]) null);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[4];
      accessibleObjectArray0[0] = (AccessibleObject) method0;
      accessibleObjectArray0[1] = (AccessibleObject) method0;
      accessibleObjectArray0[2] = (AccessibleObject) method0;
      accessibleObjectArray0[3] = (AccessibleObject) method0;
      AccessibleObject.setAccessible(accessibleObjectArray0, true);
      Method method1 = MethodUtils.getAccessibleMethod(method0);
      assertEquals(273, method1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "0SOq<EK|G/)oUCkP?)", (Class<?>[]) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, "notify", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, "invoke", objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        MethodUtils.invokeMethod((Object) "notify", false, "notify", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, true, (String) null, (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 10);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, true, "", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      try { 
        MethodUtils.invokeMethod((Object) "wait", true, "wait", objectArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) classArray0[0], true, "equals", (Object[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 7);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, true, (String) null, (Object[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 4);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) "", true, "", (Object[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      try { 
        MethodUtils.invokeMethod((Object) "wait", false, "wait");
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, false, "notify");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, true, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) "join", false, "join");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        MethodUtils.invokeMethod((Object) "notify", "notify", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, "0SOq<EK|G/)oUCkP?)", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 6);
      try { 
        MethodUtils.invokeMethod((Object) "Axq", "Axq", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: Axq() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      Class<Method> class0 = Method.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "equals", classArray0);
      Class<?>[] classArray1 = method0.getExceptionTypes();
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) method0, "equals", (Object[]) classArray1, (Class<?>[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "getConstructor";
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, "getConstructor", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "invoke", classArray0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) method0, "invoke", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, "printModifiersIfNonzero", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      try { 
        MethodUtils.invokeMethod((Object) "invoke", "invoke", (Object[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: invoke() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      try { 
        MethodUtils.invokeMethod((Object) "notify", "notify");
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) "nopify", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        MethodUtils.invokeMethod((Object) "equals", "equals");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: equals() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "toString", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "getDeclaredAnnotations", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[2] = (Object) "equals";
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod(objectArray0[2], "equals", objectArray0, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        MethodUtils.invokeExactMethod((Object) "notify", "notify", (Object[]) null);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "No such method: ", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        MethodUtils.invokeExactMethod((Object) "notify", "notify");
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "nopify");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        MethodUtils.invokeExactMethod((Object) "nopRfy", "nopRfy");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: nopRfy() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(classArray0, classArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      // Undeclared exception!
      try { 
        MethodUtils.getOverrideHierarchy((Method) null, classUtils_Interfaces0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsWithAnnotation((Class<?>) null, (Class<? extends Annotation>) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The class must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingMethod(classArray0[0], "-+DccS", classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null class not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 2);
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingMethod(class0, "", classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingAccessibleMethod(classArray0[0], "invoke", classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.getAccessibleMethod(classArray0[0], "invoke", classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1, false, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsListWithAnnotation(class0, (Class<? extends Annotation>) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The annotation class must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 14);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsListWithAnnotation(classArray0[0], class0, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The class must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      Method method0 = MethodUtils.getMatchingMethod(class0, "notify", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "invoke", classArray0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) method0, "invoke", (Object[]) classArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 6);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getAnnotations", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 2);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "invoke", classArray0);
      Method method1 = MethodUtils.getAccessibleMethod(method0);
      assertFalse(method1.isAccessible());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 9);
      Class<Annotation> class0 = Annotation.class;
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, "getEnclosingMethod", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: getEnclosingMethod() on class: java.lang.annotation.Annotation
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 11);
      Class<Object> class0 = Object.class;
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class0, "equalParamTypes", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: equalParamTypes() on class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      try { 
        MethodUtils.invokeExactMethod((Object) "notify", "notify", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 2);
      try { 
        MethodUtils.invokeExactMethod((Object) "equals", "equals", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: equals() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class1, class1, true, false);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      try { 
        MethodUtils.invokeMethod((Object) class0, true, "getParameters", (Object[]) methodArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such method: getParameters() on object: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, true, "toString", objectArray0, (Class<?>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) "equals", true, "equals", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getAnnotatedParameterTypes", classArray0);
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = MethodUtils.getAnnotation(method0, class1, true, false);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      Class<Annotation> class0 = Annotation.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "equals", classArray0);
      Annotation annotation0 = MethodUtils.getAnnotation(method0, class0, false, false);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method method0 = MethodUtils.getMatchingMethod(class0, "synthesizeAllParams", (Class<?>[]) null);
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = MethodUtils.getAnnotation(method0, class1, false, false);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getAnnotatedParameterTypes", classArray0);
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = MethodUtils.getAnnotation(method0, class1, true, true);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getAnnotatedParameterTypes", classArray0);
      // Undeclared exception!
      try { 
        MethodUtils.getAnnotation(method0, (Class<Annotation>) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The annotation class must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getAnnotation((Method) null, class0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The method must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class0, true, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsWithAnnotation(class0, (Class<? extends Annotation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The annotation class must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      Class<Method> class0 = Method.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "equals", classArray0);
      assertNotNull(method0);
      
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.EXCLUDE;
      Set<Method> set0 = MethodUtils.getOverrideHierarchy(method0, classUtils_Interfaces0);
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      Class<Method> class0 = Method.class;
      Method method0 = MethodUtils.getMatchingMethod(class0, "getGenericInfo", classArray0);
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      Set<Method> set0 = MethodUtils.getOverrideHierarchy(method0, classUtils_Interfaces0);
      assertEquals(4160, method0.getModifiers());
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      Method method0 = MethodUtils.getMatchingMethod(class0, "equals", classArray0);
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = MethodUtils.getAnnotation(method0, class1, true, true);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        MethodUtils.invokeMethod((Object) "equals", true, "equals");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such method: equals() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingMethod(class0, "equals", classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, "invoke", (Object[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) class0;
      try { 
        MethodUtils.invokeMethod((Object) class0, "getConstructor", objectArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "invoke", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 19);
      try { 
        MethodUtils.invokeMethod((Object) "invoke", "format", (Object[]) classArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Method method0 = MethodUtils.getAccessibleMethod((Method) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 6);
      Object[] objectArray0 = MethodUtils.getVarArgs(classArray0, classArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, "invoke", (Object[]) null, classArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class0, "notify", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = MethodUtils.invokeMethod((Object) "intern", true, "intern");
      assertEquals("intern", object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) "format", "format");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Method> class0 = Method.class;
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class0, ";r:)y^?tS", (Object[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: ;r:)y^?tS() on class: java.lang.reflect.Method
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, "getDeclaredFields", (Object[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: getDeclaredFields() on class: java.lang.reflect.Method
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) "", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        MethodUtils.invokeExactMethod((Object) "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", (Object[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: The extension is active, but the corresponding annotation could not be found. (This may be a bug.)() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, "getSuperclass", (Object[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object object0 = MethodUtils.invokeMethod((Object) "intern", "intern");
      assertEquals("intern", object0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object object0 = MethodUtils.invokeExactMethod((Object) class0, "getSigners");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 4);
      try { 
        MethodUtils.invokeMethod((Object) "Test '%s' was supposed to run no longer than %d ms but ran %d ms.", true, "Test '%s' was supposed to run no longer than %d ms but ran %d ms.", (Object[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such method: Test '%s' was supposed to run no longer than %d ms but ran %d ms.() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
}
