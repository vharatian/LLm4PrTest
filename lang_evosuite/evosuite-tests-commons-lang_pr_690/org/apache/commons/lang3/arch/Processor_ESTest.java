/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 07:34:01 GMT 2025
 */

package org.apache.commons.lang3.arch;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.arch.Processor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Processor_ESTest extends Processor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Processor.Arch processor_Arch0 = Processor.Arch.BIT_32;
      Processor.Type processor_Type0 = Processor.Type.IA_64;
      Processor processor0 = new Processor(processor_Arch0, processor_Type0);
      Processor.Type processor_Type1 = processor0.getType();
      assertEquals(Processor.Type.IA_64, processor_Type1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Processor.Arch processor_Arch0 = Processor.Arch.BIT_64;
      Processor.Type processor_Type0 = Processor.Type.PPC;
      Processor processor0 = new Processor(processor_Arch0, processor_Type0);
      Processor.Arch processor_Arch1 = processor0.getArch();
      assertEquals("64-bit", processor_Arch1.getLabel());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Processor.Arch processor_Arch0 = Processor.Arch.BIT_32;
      Processor.Type processor_Type0 = Processor.Type.PPC;
      Processor processor0 = new Processor(processor_Arch0, processor_Type0);
      boolean boolean0 = processor0.isPPC();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Processor.Arch processor_Arch0 = Processor.Arch.BIT_32;
      Processor.Type processor_Type0 = Processor.Type.IA_64;
      Processor processor0 = new Processor(processor_Arch0, processor_Type0);
      boolean boolean0 = processor0.isPPC();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Processor.Arch processor_Arch0 = Processor.Arch.BIT_32;
      Processor.Type processor_Type0 = Processor.Type.IA_64;
      Processor processor0 = new Processor(processor_Arch0, processor_Type0);
      boolean boolean0 = processor0.isIA64();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Processor.Arch processor_Arch0 = Processor.Arch.BIT_64;
      Processor.Type processor_Type0 = Processor.Type.PPC;
      Processor processor0 = new Processor(processor_Arch0, processor_Type0);
      boolean boolean0 = processor0.isIA64();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Processor.Arch processor_Arch0 = Processor.Arch.BIT_64;
      Processor.Type processor_Type0 = Processor.Type.X86;
      Processor processor0 = new Processor(processor_Arch0, processor_Type0);
      boolean boolean0 = processor0.isX86();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Processor.Arch processor_Arch0 = Processor.Arch.BIT_64;
      Processor.Type processor_Type0 = Processor.Type.PPC;
      Processor processor0 = new Processor(processor_Arch0, processor_Type0);
      boolean boolean0 = processor0.isX86();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Processor.Arch processor_Arch0 = Processor.Arch.BIT_64;
      Processor.Type processor_Type0 = Processor.Type.PPC;
      Processor processor0 = new Processor(processor_Arch0, processor_Type0);
      boolean boolean0 = processor0.is64Bit();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Processor.Arch processor_Arch0 = Processor.Arch.BIT_32;
      Processor.Type processor_Type0 = Processor.Type.IA_64;
      Processor processor0 = new Processor(processor_Arch0, processor_Type0);
      boolean boolean0 = processor0.is64Bit();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Processor.Arch processor_Arch0 = Processor.Arch.BIT_32;
      Processor.Type processor_Type0 = Processor.Type.PPC;
      Processor processor0 = new Processor(processor_Arch0, processor_Type0);
      boolean boolean0 = processor0.is32Bit();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Processor.Type processor_Type0 = Processor.Type.IA_64;
      Processor.Arch processor_Arch0 = Processor.Arch.BIT_64;
      Processor processor0 = new Processor(processor_Arch0, processor_Type0);
      boolean boolean0 = processor0.is32Bit();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Processor.Arch processor_Arch0 = Processor.Arch.BIT_64;
      String string0 = processor_Arch0.getLabel();
      assertEquals("64-bit", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Processor processor0 = new Processor((Processor.Arch) null, (Processor.Type) null);
      processor0.getArch();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Processor.Arch processor_Arch0 = Processor.Arch.BIT_32;
      Processor processor0 = new Processor(processor_Arch0, (Processor.Type) null);
      processor0.getType();
  }
}
