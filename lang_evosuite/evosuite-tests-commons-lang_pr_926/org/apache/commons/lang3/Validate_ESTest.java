/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:28:22 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.nio.CharBuffer;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLTimeoutException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.FormatFlagsConversionMismatchException;
import java.util.HashMap;
import java.util.IllegalFormatConversionException;
import java.util.Map;
import java.util.MissingFormatArgumentException;
import java.util.MissingFormatWidthException;
import java.util.UnknownFormatConversionException;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.lang3.Validate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Validate_ESTest extends Validate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(0.0, 0.0, 2025.519661712946, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(0.0, 1804.966757309, (-626.997), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-3360.7114171), (-5394.0), 100.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 100.0 is not in the specified exclusive range of -3360.7114171 to -5394.0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(1.0, (-1.0), 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 1.0 is not in the specified exclusive range of 1.0 to -1.0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-1020L), (-844L), (-9L), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(4949L, 1L, 1L, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-9L), 1L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 1 is not in the specified exclusive range of -9 to 1
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(3555L, (-4537L), (-1229L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value -1229 is not in the specified exclusive range of 3555 to -4537
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 1, 1);
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(charBuffer0, charBuffer0, (Comparable<CharBuffer>) charBuffer1, "The validated array index is invalid: %d", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array index is invalid: null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-56)).when(comparable0).compareTo(any());
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((Object) null, objectArray0[2], comparable0, "GO|3rwfh", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GO|3rwfh
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Object object0 = new Object();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(3, 0).when(comparable0).compareTo(any());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((Object) arrayDeque0, object0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value null is not in the specified exclusive range of [] to java.lang.Object@7263d4c6
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Validate.inclusiveBetween(41.957026897, 3268.5033057193, 400.448873, "org.junitpioneer.jupiter.params.DisableIfArgumentExtension");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Validate.inclusiveBetween(614.2290268043157, 614.2290268043157, 614.2290268043157);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Validate.inclusiveBetween((-1791L), (-70L), (-108L), (String) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Validate.inclusiveBetween((-1L), 269L, (-1L));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Comparable<SQLNonTransientConnectionException> comparable0 = (Comparable<SQLNonTransientConnectionException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-1763)).when(comparable0).compareTo(any(java.sql.SQLNonTransientConnectionException.class));
      Validate.inclusiveBetween(sQLNonTransientConnectionException0, sQLNonTransientConnectionException0, comparable0, "The validated value is not a number", objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLClientInfoException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "}", 2824);
      Comparable<SQLNonTransientConnectionException> comparable0 = (Comparable<SQLNonTransientConnectionException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparable0).compareTo(any(java.sql.SQLNonTransientConnectionException.class));
      Validate.inclusiveBetween(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1, comparable0, "org.junitpioneer.jupiter.params.DisableIfArgumentExtension", (Object[]) sQLNonTransientConnectionExceptionArray0);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Comparable<ArrayDeque<Object>> comparable0 = (Comparable<ArrayDeque<Object>>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-1167)).when(comparable0).compareTo(any(java.util.ArrayDeque.class));
      Validate.inclusiveBetween(arrayDeque0, arrayDeque0, comparable0);
      assertTrue(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>();
      Comparable<ArrayDeque<Object>> comparable0 = (Comparable<ArrayDeque<Object>>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(5906, 2540).when(comparable0).compareTo(any(java.util.ArrayDeque.class));
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(arrayDeque0, arrayDeque1, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value null is not in the specified inclusive range of [] to []
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 2);
      // Undeclared exception!
      try { 
        Validate.validIndex(arrayDequeArray0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated array index is invalid: 2
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 3);
      ArrayDeque<Object>[] arrayDequeArray1 = Validate.validIndex(arrayDequeArray0, 0);
      assertEquals(3, arrayDequeArray1.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CharSequence charSequence0 = Validate.validIndex((CharSequence) "a@1<3Yc:HGEU", 1);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharSequence charSequence0 = Validate.notEmpty((CharSequence) "Comparator should not be null.");
      assertEquals("Comparator should not be null.", charSequence0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDequeArray0[0] = arrayDeque0;
      arrayDequeArray0[1] = arrayDequeArray0[0];
      ArrayDeque<Object>[] arrayDequeArray1 = Validate.noNullElements(arrayDequeArray0, "The validated array index{is0invali: %d", (Object[]) arrayDequeArray0);
      assertEquals(2, arrayDequeArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray1 = Validate.noNullElements(sQLNonTransientConnectionExceptionArray0);
      assertEquals(1, sQLNonTransientConnectionExceptionArray1.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Validate.validState(false, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = new Object[7];
      // Undeclared exception!
      try { 
        Validate.validIndex(objectArray0, 1213, "`xc%-b3.77ym", objectArray1);
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %-b
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CharBuffer[] charBufferArray0 = new CharBuffer[0];
      // Undeclared exception!
      try { 
        Validate.validIndex(charBufferArray0, 1, "The `date` %s is after the current date %s", (Object[]) charBufferArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      // Undeclared exception!
      try { 
        Validate.validIndex(sQLNonTransientConnectionExceptionArray0, 840, "The validated array index is invalid: %d", (Object[]) sQLNonTransientConnectionExceptionArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.sql.SQLNonTransientConnectionException
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex((Object[]) null, (-1958), "<7ukA9T8GgbB5%", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex((Object[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray1 = Validate.noNullElements(sQLNonTransientConnectionExceptionArray0);
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      // Undeclared exception!
      try { 
        Validate.validIndex(arrayDeque0, 611, "(P`Aj%Z29ty0Fl", (Object[]) sQLNonTransientConnectionExceptionArray1);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'Z'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Minimum abbreviation width is %d";
      // Undeclared exception!
      try { 
        Validate.validIndex(arrayDeque0, (-2757), "The validated collection index is invalid: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.validIndex(arrayDeque0, (-515), (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex((ArrayDeque<SQLNonTransientConnectionException>) null, (-546));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        Validate.validIndex((CharSequence) charBuffer0, 0, "&xe%v", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'v'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      CharBuffer charBuffer0 = CharBuffer.allocate(32);
      // Undeclared exception!
      try { 
        Validate.validIndex((CharSequence) charBuffer0, 32, "The string %s does not match the pattern %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ']';
      // Undeclared exception!
      try { 
        Validate.validIndex(charBuffer0, (-2146191538), "The validated arrayKinUex is invalid: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.Character
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 0);
      // Undeclared exception!
      try { 
        Validate.validIndex((CharBuffer) null, 1074, "Tst method must declare at least one parameter: ", (Object[]) arrayDequeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex((CharSequence) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Validate.notNull((HashMap<CharBuffer, ArrayDeque>) null, "_%;\u0000/r", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ';'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.notNull((CharBuffer) null, "The validated array contains null element at index: %d", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%d'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) arrayDeque0;
      // Undeclared exception!
      try { 
        Validate.notNull((SQLNonTransientConnectionException) null, "The value is invalid: %f", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // f != java.util.ArrayDeque
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 0);
      ArrayDeque<Object>[] arrayDequeArray1 = Validate.noNullElements(arrayDequeArray0, (String) null, (Object[]) arrayDequeArray0);
      // Undeclared exception!
      try { 
        Validate.notNull((Object) null, "8}k_@_Bce", (Object[]) arrayDequeArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // 8}k_@_Bce
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notNull((ArrayDeque<ArrayDeque>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.notEmpty(objectArray0, "7Ou/%jXhK", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'j'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.notEmpty(objectArray0, "%s was not annotated with %s or %s but should have been.", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      objectArray0[0] = (Object) sQLNonTransientConnectionException0;
      // Undeclared exception!
      try { 
        Validate.notEmpty((ArrayDeque<SQLNonTransientConnectionException>[]) null, "Expected exactly one annotation to provide an ArgumentSource, found %d.", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.sql.SQLNonTransientConnectionException
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((ArrayDeque<CharBuffer>[]) null, "", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // 
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated array is empty
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.notEmpty(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Object, SQLNonTransientConnectionException> hashMap0 = new HashMap<Object, SQLNonTransientConnectionException>();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, "The value %s is not in the specified inclusive range of %s to %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<SQLNonTransientConnectionException, Object> hashMap0 = new HashMap<SQLNonTransientConnectionException, Object>();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "The validated collection index is invalid: %d";
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, "The validated collection index is invalid: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Validate.notEmpty((Map<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) null, "H", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // H
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 0);
      HashMap<Object, CharBuffer> hashMap0 = new HashMap<Object, CharBuffer>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, "", (Object[]) arrayDequeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Object, SQLNonTransientConnectionException> hashMap0 = new HashMap<Object, SQLNonTransientConnectionException>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated map is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object[] objectArray0 = new Object[18];
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayDeque0, "IH4rT%;mDB[2!65", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ';'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayDeque0, "The validated collection index is invalid: %d", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%d'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ArrayDeque<SQLNonTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLNonTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 5);
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayDeque1, "The validated collection index is nvalid: %d", (Object[]) arrayDequeArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.util.ArrayDeque
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayDeque0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((ArrayDeque<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated collection is empty
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 0);
      // Undeclared exception!
      try { 
        Validate.notEmpty((CharSequence) null, "WTn|]]2e%|Ni/$", (Object[]) arrayDequeArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '|'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.notEmpty((CharSequence) null, "The value %s is not in the specified inclusive range of %s to %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        Validate.notEmpty((CharSequence) charBuffer0, "The validated array index{is0invali: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.nio.HeapCharBuffer
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((CharSequence) null, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      // Undeclared exception!
      try { 
        Validate.notBlank((CharSequence) null, "-tw#F$SS?hO%", (Object[]) sQLNonTransientConnectionExceptionArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.notBlank((CharSequence) null, "The string %s does not match the pattern %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDequeArray0[0] = arrayDeque0;
      // Undeclared exception!
      try { 
        Validate.notBlank(charBuffer0, "The validated array index{is0invali: %d", (Object[]) arrayDequeArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.util.ArrayDeque
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.notBlank((CharBuffer) null, "j-Z", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // j-Z
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notBlank((CharSequence) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated character sequence is blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((ArrayDeque<SQLNonTransientConnectionException>[]) null, ";;mj-$Q24Vy>4Buu", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 7);
      // Undeclared exception!
      try { 
        Validate.noNullElements(arrayDequeArray0, "Test method must declareat least one parameter: ", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Test method must declareat least one parameter: 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayDeque<SQLNonTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLNonTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 1);
      // Undeclared exception!
      try { 
        Validate.noNullElements(arrayDequeArray0, "!Vw:lk,sZ+hb]&h", (Object[]) arrayDequeArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((SQLNonTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      // Undeclared exception!
      try { 
        Validate.noNullElements(sQLNonTransientConnectionExceptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      SQLException sQLException0 = new SQLException("EGpM9<0#P", sQLTimeoutException0);
      sQLTimeoutException0.initCause(sQLException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLException0);
      // Undeclared exception!
      Validate.noNullElements(sQLNonTransientConnectionException0, (String) null, (Object[]) arrayDequeArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.noNullElements((SQLNonTransientConnectionException) null, "Ls:T|LVd=Rk<", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLWarning0);
      // Undeclared exception!
      Validate.noNullElements(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((SQLNonTransientConnectionException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "!O)6R&&?", "!O)6R&&?", "!O)6R&&?", objectArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 1
         // !O)6R&&?
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "kgGRvgg]/~r?K5", "The value %s is not in the specified inclusive range of %s to %s", "The value %s is not in the specified inclusive range of %s to %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "eT*Z";
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "eT*Z", "eT*Z", "The validated character sequence index is invalid: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 0);
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) null, "ddq", "ddq", (Object[]) arrayDequeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 51);
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "ejT*,-\"Z", "ejT*,-\"Z", "ejT*,-\"Z", (Object[]) arrayDequeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 1);
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "e$", "e$", "e$", (Object[]) arrayDequeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // e$
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "j6D=-;B@FvdM{[*M", "j6D=-;B@FvdM{[*M");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 11
         // j6D=-;B@FvdM{[*M
         //            ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) null, "/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "I'q\"!#gy1HV", "I'q\"!#gy1HV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "_q%=e1$H5 ^c`pu`{", 0L);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '='
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "The value %s is not in the specified inclusive range of %s to %s", (-2200.251139));
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "", 1.5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) sQLNonTransientConnectionException0, "Thevalidated state is false", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Thevalidated state is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, (Class<?>) null, "The validated value is not a number", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom((Class<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween((Object) sQLNonTransientConnectionException0, (Object) null, (Comparable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(charBuffer0, charBuffer0, (Comparable<CharBuffer>) charBuffer0, "S\u0000x%U", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'U'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "The validated array index{is0invalid: %d";
      char[] charArray0 = new char[12];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(charBuffer0, charBuffer0, (Comparable<CharBuffer>) charBuffer0, "The validated array index{is0invalid: %d", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((CharBuffer) null, (CharBuffer) null, (Comparable<CharBuffer>) null, (String) null, (Object[]) sQLNonTransientConnectionExceptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      char[] charArray0 = new char[9];
      charBuffer0.put(charArray0, 2, 2);
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(charBuffer1, charBuffer0, (Comparable<CharBuffer>) charBuffer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>();
      arrayDeque0.add(arrayDeque1);
      arrayDeque1.add(arrayDeque0);
      Comparable<ArrayDeque<Object>> comparable0 = (Comparable<ArrayDeque<Object>>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any(java.util.ArrayDeque.class));
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(arrayDeque0, arrayDeque1, comparable0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(arrayDeque0, arrayDeque0, (Comparable<ArrayDeque<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      char[] charArray0 = new char[9];
      charBuffer0.put(charArray0, 2, 2);
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(charBuffer1, charBuffer0, (Comparable<CharBuffer>) charBuffer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Validate.finite(0.0, "", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 3);
      Validate.notNaN(614.2290268043157, "The validated value is not a number", (Object[]) arrayDequeArray0);
      assertEquals(3, arrayDequeArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      CharBuffer charBuffer0 = CharBuffer.allocate(831);
      // Undeclared exception!
      try { 
        Validate.validIndex(charBuffer0, 831, "The validated state is false", objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated state is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 3);
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      arrayDeque0.add(charBuffer0);
      ArrayDeque<CharBuffer> arrayDeque1 = Validate.validIndex(arrayDeque0, 0, "l`LO8", (Object[]) arrayDequeArray0);
      assertEquals(1, arrayDeque1.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      // Undeclared exception!
      try { 
        Validate.validIndex(arrayDeque0, 1, "Timeout for vintage @Test must be positive.", (Object[]) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Timeout for vintage @Test must be positive.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CharBuffer[] charBufferArray0 = new CharBuffer[11];
      // Undeclared exception!
      try { 
        Validate.validIndex(charBufferArray0, (-57), "The validated array index is invalid: %d", (Object[]) charBufferArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated array index is invalid: null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CharBuffer[] charBufferArray0 = new CharBuffer[3];
      CharBuffer[] charBufferArray1 = Validate.validIndex(charBufferArray0, 1, (String) null, (Object[]) charBufferArray0);
      assertEquals(3, charBufferArray1.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = Validate.noNullElements(sQLNonTransientConnectionException0, (String) null, (Object[]) arrayDequeArray0);
      assertNull(sQLNonTransientConnectionException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 3);
      CharSequence charSequence0 = Validate.notBlank((CharSequence) "The validated array index is invalid: %d", "The validated array index is invalid: %d", (Object[]) arrayDequeArray0);
      assertEquals("The validated array index is invalid: %d", charSequence0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((CharSequence) "", "", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("StdIoExtension is active but no %s annotation was found.");
      CharBuffer charBuffer0 = CharBuffer.allocate(196);
      HashMap<SQLNonTransientConnectionException, CharBuffer> hashMap0 = new HashMap<SQLNonTransientConnectionException, CharBuffer>();
      hashMap0.put(sQLNonTransientConnectionException0, charBuffer0);
      Object[] objectArray0 = new Object[7];
      HashMap<SQLNonTransientConnectionException, CharBuffer> hashMap1 = Validate.notEmpty(hashMap0, "StdIoExtension is active but no %s annotation was found.", objectArray0);
      assertEquals(1, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 3);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Object object0 = new Object();
      arrayDeque0.add(object0);
      ArrayDeque<Object> arrayDeque1 = Validate.notEmpty(arrayDeque0, "The validated value is not a number", (Object[]) arrayDequeArray0);
      assertFalse(arrayDeque1.contains("The validated value is not a number"));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayDeque0, ")a@1<3Yc:HGEU", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // )a@1<3Yc:HGEU
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ArrayDeque<SQLNonTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLNonTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 3);
      Object[] objectArray0 = Validate.notEmpty((Object[]) arrayDequeArray0, ")a@1<3Yc:HGEU", (Object[]) arrayDequeArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)Validate.notNull((Object) sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = Validate.notNull((Object) "MAMgy8'Kc8#&21", "} ", objectArray0);
      assertEquals("MAMgy8'Kc8#&21", object0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1, "The validated value is not a number", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated value is not a number
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Object[] objectArray0 = new Object[2];
      Validate.isAssignableFrom(class0, class0, "The validated value is not a number", objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        Validate.isAssignableFrom(class0, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot assign a java.lang.Object to a java.sql.SQLNonTransientConnectionException
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Validate.isAssignableFrom(class0, class0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) sQLNonTransientConnectionException0, "8cl=*yj: ?,qJi%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[2];
      Validate.isInstanceOf((Class<?>) class0, (Object) class0, "", objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        Validate.isInstanceOf((Class<?>) class0, (Object) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected type: java.sql.SQLNonTransientConnectionException, actual: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        Validate.isInstanceOf(class0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected type: java.sql.SQLNonTransientConnectionException, actual: null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("FQIh&J");
      Validate.isInstanceOf((Class<?>) class0, (Object) sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Validate.exclusiveBetween((-838.586473222653), 1.0, (-0.189966508109), "blank_blank_blank_2014");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-581.2520494150543), (-1.0), (-1.0), "GYgo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GYgo
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(0.0, 0.0, 0.0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Validate.exclusiveBetween((-3121.090417), 0.7, (-402.3));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-260.6871026), (-200.1934), (-200.1934));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value -200.1934 is not in the specified exclusive range of -260.6871026 to -200.1934
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-200.1934), 0.7, (-402.3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value -402.3 is not in the specified exclusive range of -200.1934 to 0.7
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(1482L, 2783L, 2783L, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Validate.exclusiveBetween(985L, 1893L, 1860L, "?");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-1L), (-1L), (-1L), "The validated object is null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Validate.exclusiveBetween((-1L), 2661L, 1L);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-541L), (-541L), (long) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 1 is not in the specified exclusive range of -541 to -541
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((-720L), (-720L), (-720L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value -720 is not in the specified exclusive range of -720 to -720
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(1516, (-5)).when(comparable0).compareTo(any());
      Validate.exclusiveBetween((Object) null, objectArray0[2], comparable0, "G|rwf", objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = new Object();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0).when(comparable0).compareTo(any());
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween((Object) "MAMgy8'Kc8#&21", object0, comparable0, "A]aUHepoyfoAu5ON", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A]aUHepoyfoAu5ON
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Comparable<ArrayDeque<Object>> comparable0 = (Comparable<ArrayDeque<Object>>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-3966)).when(comparable0).compareTo(any(java.util.ArrayDeque.class));
      Validate.exclusiveBetween(arrayDeque0, arrayDeque0, comparable0);
      assertEquals(0, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Comparable<ArrayDeque<Object>> comparable0 = (Comparable<ArrayDeque<Object>>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1).when(comparable0).compareTo(any(java.util.ArrayDeque.class));
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        Validate.exclusiveBetween(arrayDeque0, arrayDeque0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value null is not in the specified exclusive range of [] to []
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween((-2200.251139), (-2200.251139), 6.0, "br<1,o%\"KsCQb19^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // br<1,o%\"KsCQb19^
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Validate.inclusiveBetween(2025.519661712946, 2025.519661712946, 2025.519661712946, "23._ObZ6Qv>\\W$,h");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(2025.519661712946, (-1.0), (-1.0), "23._ObZ6Qv>\\W$,h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 23._ObZ6Qv>\\W$,h
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween((-995.684926), (-1.0), 3268.5033057193);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 3268.5033057193 is not in the specified inclusive range of -995.684926 to -1.0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Validate.inclusiveBetween((-2214.102), 2408.46181, (-2214.102));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween((-714.7565), (-1768.0), (-1768.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value -1768.0 is not in the specified inclusive range of -714.7565 to -1768.0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween((long) '=', 430L, 4038L, "The validated value is not a number");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated value is not a number
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Validate.inclusiveBetween(1L, 1L, 1L, "The `date` %s is after the current date %s");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween((long) 1, (long) 1, (-1008L), ",]MCo&DcPi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ,]MCo&DcPi
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Validate.inclusiveBetween((-2864L), (-2864L), (-2864L));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(1371L, (-594L), 1576L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 1576 is not in the specified inclusive range of 1371 to -594
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(1576L, 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 0 is not in the specified inclusive range of 1576 to 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 8);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Comparable<SQLNonTransientConnectionException> comparable0 = (Comparable<SQLNonTransientConnectionException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(2117591515, 0).when(comparable0).compareTo(any(java.sql.SQLNonTransientConnectionException.class));
      Validate.inclusiveBetween(sQLNonTransientConnectionException0, sQLNonTransientConnectionException0, comparable0, "The `date` %s is after the current date %s", (Object[]) arrayDequeArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Comparable<SQLNonTransientConnectionException> comparable0 = (Comparable<SQLNonTransientConnectionException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-2884)).when(comparable0).compareTo(any(java.sql.SQLNonTransientConnectionException.class));
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(sQLNonTransientConnectionException0, sQLNonTransientConnectionException0, comparable0, "The valXdated value is not a nu*ber", (Object[]) arrayDequeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The valXdated value is not a nu*ber
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Validate.inclusiveBetween(charBuffer0, charBuffer0, (Comparable<CharBuffer>) charBuffer0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      CharBuffer charBuffer0 = CharBuffer.allocate('U');
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        Validate.inclusiveBetween(charBuffer1, charBuffer0, (Comparable<CharBuffer>) charBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 is not in the specified inclusive range of U\u0000 to \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 36);
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "kgDGRv8g]%~rf?K5", "kgDGRv8g]%~rf?K5", "kgDGRv8g]%~rf?K5", (Object[]) arrayDequeArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '~'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Validate.matchesPattern((CharSequence) "/", "/", "/", objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.matchesPattern((CharSequence) "=|M", "=|M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string =|M does not match the pattern =|M
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Validate.matchesPattern((CharSequence) "p", "p");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Validate.validState(false, "=", objectArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // =
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      Validate.validState(true, "org.junitpioneer.jupiter.params.DisableIfArgumentExtension", (Object[]) sQLNonTransientConnectionExceptionArray0);
      assertEquals(7, sQLNonTransientConnectionExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validState(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The validated state is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Validate.validState(true);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      CharSequence charSequence0 = Validate.validIndex((CharSequence) "The validated array index{is0invali: %d", 3, "The validated array index{is0invali: %d", objectArray0);
      assertEquals("The validated array index{is0invali: %d", charSequence0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        Validate.validIndex(charBuffer0, Integer.MIN_VALUE, "7%(c16Hj", objectArray0);
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = c, Flags = (
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("~.oY#@nJs><.,%v,7", "Tst method must declare at least one parameter: ");
      arrayDeque0.add(sQLNonTransientConnectionException0);
      ArrayDeque<Object> arrayDeque1 = Validate.validIndex(arrayDeque0, 0);
      assertSame(arrayDeque0, arrayDeque1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        Validate.validIndex(arrayDeque0, (-1), "The value %s is not in the specified inclusive range of %s to %s", (Object[]) sQLNonTransientConnectionExceptionArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        Validate.validIndex(objectArray0, 641, "p/$p%|UqAWi&Hoe7", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '|'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "_%\r";
      // Undeclared exception!
      try { 
        Validate.noNullElements(objectArray0, "_%\r", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '\r'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 2);
      // Undeclared exception!
      try { 
        Validate.notBlank(charBuffer0, "The validated array index{is0invali: %d", (Object[]) arrayDequeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array index{is0invali: null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CharSequence charSequence0 = Validate.notBlank((CharSequence) "kgDGRv8g]%~rf?K5");
      assertEquals("kgDGRv8g]%~rf?K5", charSequence0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((CharSequence) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated character sequence is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      CharSequence charSequence0 = Validate.notEmpty((CharSequence) "H", "H", objectArray0);
      assertEquals("H", charSequence0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      HashMap<Object, SQLNonTransientConnectionException> hashMap0 = new HashMap<Object, SQLNonTransientConnectionException>();
      hashMap0.put(sQLNonTransientConnectionException0, sQLNonTransientConnectionException0);
      HashMap<Object, SQLNonTransientConnectionException> hashMap1 = Validate.notEmpty(hashMap0);
      assertSame(hashMap0, hashMap1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.add(arrayDeque0);
      ArrayDeque<Object> arrayDeque1 = Validate.notEmpty(arrayDeque0);
      assertEquals(1, arrayDeque1.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 0);
      ArrayDeque<Object>[] arrayDequeArray1 = Validate.noNullElements(arrayDequeArray0, "Tst method must declare at least one parameter: ", (Object[]) arrayDequeArray0);
      // Undeclared exception!
      try { 
        Validate.notEmpty((Object[]) arrayDequeArray1, "Tst method must declare at least one parameter: ", (Object[]) arrayDequeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tst method must declare at least one parameter: 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated expression is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Validate.isTrue(true);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Validate.isTrue(false, ", '", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // , '
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Validate.isTrue(true, "The validated value is not a number", objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, (String) null, (-2200.251139));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Validate.isTrue(true, (String) null, (-2200.251139));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "Bam#K_yf", 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bam#K_yf
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Validate.isTrue(true, "The validated character sequence index is invalid: %d", 528L);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated character sequence is empty
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Validate.finite((-2675.56628));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object[] objectArray1 = Validate.notEmpty(objectArray0);
      assertEquals(6, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = Validate.noNullElements(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(arrayDeque0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated collection is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        Validate.validIndex(arrayDeque0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated collection index is invalid: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Validate.notNaN(2722.027927);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notBlank((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated character sequence is blank
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Validate validate0 = new Validate();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.validIndex((CharSequence) "", 3403);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The validated character sequence index is invalid: 3403
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((HashMap<Object, SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated map is empty
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = Validate.noNullElements(objectArray0);
      HashMap<CharBuffer, Object> hashMap0 = new HashMap<CharBuffer, Object>();
      // Undeclared exception!
      try { 
        Validate.notEmpty(hashMap0, "%R@T}Hoaa:OA~li]f", objectArray1);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'R'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
}
