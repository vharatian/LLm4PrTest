/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:25:07 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.commons.lang3.JavaVersion;
import org.apache.commons.lang3.SystemUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SystemUtils_ESTest extends SystemUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = SystemUtils.isOSVersionMatch("}3W)C^:[jDqdoF", "}3W)C^:[jDqdoF");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = SystemUtils.isOSNameMatch("r]CF5K'P@I\"!vts0", "r]CF5K'P@I\"!vts0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = SystemUtils.isJavaVersionMatch("Windows 95", "Windows 95");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_1_7;
      boolean boolean0 = SystemUtils.isJavaVersionAtMost(javaVersion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_16;
      boolean boolean0 = SystemUtils.isJavaVersionAtLeast(javaVersion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      File file0 = SystemUtils.getUserHome();
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser/LLm4PrTest/lang_experiments");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      File file0 = SystemUtils.getUserDir();
      assertTrue(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      File file0 = SystemUtils.getJavaIoTmpDir();
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-8-openjdk-amd64/jre");
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file0 = SystemUtils.getJavaHome();
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-8-openjdk-amd64/jre");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "r]CF5K'P@I\"!vts0");
      File file0 = SystemUtils.getJavaHome();
      assertEquals("jre", file0.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = SystemUtils.getEnvironmentVariable("XJ=jj@v", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = SystemUtils.getEnvironmentVariable("10.1", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemUtils.isOSVersionMatch("Java Virtual Machine Specification", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.SystemUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemUtils.isOSNameMatch("AN(mgJ/qj^", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemUtils.isOSMatch("1.8", "1.8", (String) null, "Private Build");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemUtils.isJavaVersionMatch("AN(mgJ/qj^", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemUtils.isJavaVersionAtMost((JavaVersion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.JavaVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemUtils.isJavaVersionAtLeast((JavaVersion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.JavaVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemUtils.getEnvironmentVariable((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.ProcessEnvironment$Variable", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = SystemUtils.isOSVersionMatch((String) null, "1.8.0_462-8u462-ga~us1-0ubuntu2~24.04.2-b08");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = SystemUtils.isOSNameMatch((String) null, ")X-!)mH/0c");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = SystemUtils.isOSMatch("JAVA_14", "Irix", "", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = SystemUtils.isOSMatch("Irix", "r9)", "]E(7*Gtei )u0k3b", "Windows 10Linux");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = SystemUtils.isOSMatch("/usr/lib/jvm/java-8-openjdk-amd64/jre", (String) null, (String) null, "6.11.0-1018-azure");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = SystemUtils.isOSMatch("Windows 10Linux", "[ ", "Windows 10Linux", "[ ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = SystemUtils.isOSMatch((String) null, "K&#'t", "NetBSD", "Windows 2003");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = SystemUtils.isJavaVersionMatch((String) null, "Windows 10Linux");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = SystemUtils.getEnvironmentVariable("}`HLFa.", "JAVA_RECENT");
      assertEquals("JAVA_RECENT", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = SystemUtils.getEnvironmentVariable("_", "R#]uD*NcB~@[b,VhJ@");
      assertEquals("/home/azureuser/LLm4PrTest/lang_experiments/.venv/bin/python3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = SystemUtils.getHostName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SystemUtils systemUtils0 = new SystemUtils();
      assertFalse(SystemUtils.IS_OS_FREE_BSD);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = SystemUtils.isJavaAwtHeadless();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      File file0 = SystemUtils.getUserHome();
      assertFalse(file0.isHidden());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      File file0 = SystemUtils.getUserDir();
      assertTrue(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      File file0 = SystemUtils.getJavaHome();
      assertEquals("/usr/lib/jvm/java-8-openjdk-amd64", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = SystemUtils.getUserName();
      assertEquals("azureuser", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_RECENT;
      boolean boolean0 = SystemUtils.isJavaVersionAtLeast(javaVersion0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_RECENT;
      boolean boolean0 = SystemUtils.isJavaVersionAtMost(javaVersion0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      File file0 = SystemUtils.getJavaIoTmpDir();
      assertFalse(file0.isHidden());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = SystemUtils.getUserName("r]CF5K'P@I\"!vts0");
      assertEquals("azureuser", string0);
  }
}
