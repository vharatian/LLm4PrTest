/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:15:02 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RandomUtils_ESTest extends RandomUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = RandomUtils.nextDouble(35.388244618071, 3045.5);
      assertEquals(35.388244618071, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      float float0 = RandomUtils.nextFloat();
      assertEquals(2.7222588E38F, float0, 0.01F);
      
      long long0 = RandomUtils.nextLong(0L, 1485L);
      assertEquals((-1188L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = RandomUtils.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      long long0 = RandomUtils.nextLong();
      assertEquals(922337203685477632L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = RandomUtils.nextInt(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      float float0 = RandomUtils.nextFloat();
      assertEquals(2.7222588E38F, float0, 0.01F);
      
      int int0 = RandomUtils.nextInt(3, 573005940);
      assertEquals((-428465834), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      float float0 = RandomUtils.nextFloat();
      assertEquals(2.7222588E38F, float0, 0.01F);
      
      float float1 = RandomUtils.nextFloat(1.0F, 3120.6F);
      assertEquals((-2494.6802F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      RandomUtils.nextFloat();
      float float0 = RandomUtils.nextFloat();
      assertEquals((-2.7222588E38F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      double double0 = RandomUtils.nextDouble();
      assertEquals(1.2583851944036209E308, double0, 0.01);
      
      RandomUtils.nextDouble((double) Integer.MAX_VALUE, 1.2583851944036209E308);
      long long0 = RandomUtils.nextLong();
      assertEquals((-6456360425798342656L), long0);
      
      int int0 = RandomUtils.nextInt();
      assertEquals((-2147483646), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      float float0 = RandomUtils.nextFloat();
      assertEquals(2.7222588E38F, float0, 0.01F);
      
      double double0 = RandomUtils.nextDouble();
      assertEquals((-1.4381545078898526E308), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = RandomUtils.nextBytes(0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float float0 = RandomUtils.nextFloat((float) 3, (float) 922337203685477632L);
      assertEquals(3.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = RandomUtils.nextLong(0L, 1850L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = RandomUtils.nextInt(3, 573005940);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float float0 = RandomUtils.nextFloat((float) 0, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextFloat((-26.775318F), (-26.775318F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextFloat(523.764F, (-3500.5403F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = RandomUtils.nextDouble((double) 0, (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextDouble((double) (-5534023222112865280L), (double) 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextDouble(1.7976931348623157E308, (double) 1610L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = RandomUtils.nextLong(2226L, 2226L);
      assertEquals(2226L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextLong((-2810L), (-2810L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextLong((-1L), (-2150L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextInt((-645), (-645));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextInt(932, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = RandomUtils.nextBytes(1610);
      assertEquals(1610, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextBytes((-1499));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Count cannot be negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = RandomUtils.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = RandomUtils.nextInt();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = RandomUtils.nextInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = RandomUtils.nextBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = RandomUtils.nextLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RandomUtils randomUtils0 = new RandomUtils();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      float float0 = RandomUtils.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
  }
}
