/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:17:13 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang3.StringEscapeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringEscapeUtils_ESTest extends StringEscapeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeCsv("\"dr\"rf@=J_4");
      assertEquals("\"dr\"rf@=J_4", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeCsv("\u0017");
      assertEquals("\u0017", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringEscapeUtils.CsvUnescaper stringEscapeUtils_CsvUnescaper0 = new StringEscapeUtils.CsvUnescaper();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringEscapeUtils_CsvUnescaper0.translate((CharSequence) null, (-661), (Writer) stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // CsvUnescaper should never reach the [1] index
         //
         verifyException("org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringEscapeUtils.CsvEscaper stringEscapeUtils_CsvEscaper0 = new StringEscapeUtils.CsvEscaper();
      StringWriter stringWriter0 = new StringWriter(1342);
      // Undeclared exception!
      try { 
        stringEscapeUtils_CsvEscaper0.translate((CharSequence) "", 1342, (Writer) stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // CsvEscaper should never reach the [1] index
         //
         verifyException("org.apache.commons.lang3.StringEscapeUtils$CsvEscaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJson((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJson("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJava((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJava("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeHtml4((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeHtml4("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeHtml3("]Q71r?E");
      assertEquals("]Q71r?E", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeHtml3("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeEcmaScript((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeEcmaScript("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeCsv((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeCsv("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml11("5w=>");
      assertEquals("5w=&gt;", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml11("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml10((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml10("}SvlI|2l*gC`&");
      assertEquals("}SvlI|2l*gC`&amp;", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJson((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJson("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJava((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJava("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeHtml4((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeHtml4("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeHtml3((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeHtml3("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeEcmaScript("Ugx8lz");
      assertEquals("Ugx8lz", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeEcmaScript("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeCsv((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeCsv("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "[\\u";
      // Undeclared exception!
      try { 
        StringEscapeUtils.unescapeJson(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Less than 4 hex digits in unicode value: '\\u' due to end of CharSequence
         //
         verifyException("org.apache.commons.lang3.text.translate.UnicodeUnescaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "\\u";
      // Undeclared exception!
      try { 
        StringEscapeUtils.unescapeJava(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Less than 4 hex digits in unicode value: '\\u' due to end of CharSequence
         //
         verifyException("org.apache.commons.lang3.text.translate.UnicodeUnescaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "\\u";
      // Undeclared exception!
      try { 
        StringEscapeUtils.unescapeEcmaScript(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Less than 4 hex digits in unicode value: '\\u' due to end of CharSequence
         //
         verifyException("org.apache.commons.lang3.text.translate.UnicodeUnescaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringEscapeUtils.unescapeCsv("\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeCsv("\"\"\"\"");
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringEscapeUtils.CsvUnescaper stringEscapeUtils_CsvUnescaper0 = new StringEscapeUtils.CsvUnescaper();
      StringWriter stringWriter0 = new StringWriter();
      stringEscapeUtils_CsvUnescaper0.translate((CharSequence) "\"1.H Pk>Sq|!", (Writer) stringWriter0);
      assertEquals("\"1.H Pk>Sq|!", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeCsv("=`}u<(>9Dh");
      assertEquals("=`}u<(>9Dh", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeCsv("hjwaGt<d{%-a|VO");
      assertEquals("hjwaGt<d{%-a|VO", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeCsv("\"+!6%^iJsUe*=GrJ>\"");
      assertEquals("\"\"\"+!6%^iJsUe*=GrJ>\"\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeEcmaScript((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJava(".wi/\"");
      assertEquals(".wi/\\\"", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("h:YK(IR0");
      assertEquals("h:YK(IR0", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJson("\"dr\"rf@=J_4");
      assertEquals("\\\"dr\\\"rf@=J_4", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeHtml4("&iuml;");
      assertEquals("\u00EF", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeEcmaScript("\u0019");
      assertEquals("\u0019", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeHtml3((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJava("\u0019");
      assertEquals("\u0019", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeHtml3("F&+\u000E");
      assertEquals("F&amp;+\u000E", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeHtml4("\u0015");
      assertEquals("\u0015", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml10("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml11((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeCsv("\"+!6%^iJsUe*=GrJ>\"");
      assertEquals("\"+!6%^iJsUe*=GrJ>\"", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJson("\"1.H Pk>Sq|!");
      assertEquals("\"1.H Pk>Sq|!", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringEscapeUtils stringEscapeUtils0 = new StringEscapeUtils();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringEscapeUtils.CsvUnescaper stringEscapeUtils_CsvUnescaper0 = new StringEscapeUtils.CsvUnescaper();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringEscapeUtils_CsvUnescaper0.translate((CharSequence) "\u0019", 33, (Writer) stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // CsvUnescaper should never reach the [1] index
         //
         verifyException("org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringEscapeUtils.CsvEscaper stringEscapeUtils_CsvEscaper0 = new StringEscapeUtils.CsvEscaper();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringEscapeUtils_CsvEscaper0.translate((CharSequence) "=`}u<(>9Dh", (-1220), (Writer) stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // CsvEscaper should never reach the [1] index
         //
         verifyException("org.apache.commons.lang3.StringEscapeUtils$CsvEscaper", e);
      }
  }
}
