/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:38:15 GMT 2025
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.concurrent.AbstractCircuitBreaker;
import org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class EventCountCircuitBreaker_ESTest extends EventCountCircuitBreaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-2321), (-2321), timeUnit0);
      AbstractCircuitBreaker.State abstractCircuitBreaker_State0 = AbstractCircuitBreaker.State.OPEN;
      eventCountCircuitBreaker0.changeState(abstractCircuitBreaker_State0);
      System.setCurrentTimeMillis((-2321));
      Integer integer0 = new Integer((-2321));
      boolean boolean0 = eventCountCircuitBreaker0.incrementAndCheckState(integer0);
      assertFalse(eventCountCircuitBreaker0.isClosed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(903, 903, timeUnit0, 876, (-1L), timeUnit1);
      assertEquals(876, eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals((-60000000000L), eventCountCircuitBreaker0.getClosingInterval());
      assertEquals(903, eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals(78019200000000000L, eventCountCircuitBreaker0.getOpeningInterval());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0, timeUnit0, 1388, 0, timeUnit0);
      System.setCurrentTimeMillis(0);
      eventCountCircuitBreaker0.now();
      assertEquals(0, eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals(1388, eventCountCircuitBreaker0.getClosingThreshold());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0L, timeUnit0, 0, 0L, timeUnit0);
      eventCountCircuitBreaker0.now();
      assertEquals(0, eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals(0, eventCountCircuitBreaker0.getClosingThreshold());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis((-1836L));
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-145), (-669L), timeUnit0, (-145), (-765L), timeUnit0);
      eventCountCircuitBreaker0.now();
      assertEquals((-145), eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals((-145), eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals((-669000000L), eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals((-765000000L), eventCountCircuitBreaker0.getClosingInterval());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(4252, 1L, timeUnit0, 4252);
      Integer integer0 = new Integer(4252);
      boolean boolean0 = eventCountCircuitBreaker0.incrementAndCheckState(integer0);
      assertTrue(boolean0);
      assertEquals(1000000L, eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals(4252, eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals(4252, eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals(1000000L, eventCountCircuitBreaker0.getClosingInterval());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(1, 2772L, timeUnit0, 1);
      Integer integer0 = new Integer(418);
      eventCountCircuitBreaker0.incrementAndCheckState(integer0);
      Integer integer1 = new Integer((-225));
      boolean boolean0 = eventCountCircuitBreaker0.incrementAndCheckState(integer1);
      assertFalse(eventCountCircuitBreaker0.isClosed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0, timeUnit0);
      boolean boolean0 = eventCountCircuitBreaker0.incrementAndCheckState();
      assertFalse(eventCountCircuitBreaker0.isClosed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, (-1648L), timeUnit0);
      int int0 = eventCountCircuitBreaker0.getOpeningThreshold();
      assertEquals((-1648000000L), eventCountCircuitBreaker0.getClosingInterval());
      assertEquals(0, int0);
      assertEquals((-1648000000L), eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals(0, eventCountCircuitBreaker0.getClosingThreshold());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(903, 903, timeUnit0, 876, (-1L), timeUnit0);
      int int0 = eventCountCircuitBreaker0.getOpeningThreshold();
      assertEquals(78019200000000000L, eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals((-86400000000000L), eventCountCircuitBreaker0.getClosingInterval());
      assertEquals(903, int0);
      assertEquals(876, eventCountCircuitBreaker0.getClosingThreshold());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0L, timeUnit0, 0, 0L, timeUnit0);
      eventCountCircuitBreaker0.getOpeningInterval();
      assertEquals(0, eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals(0, eventCountCircuitBreaker0.getOpeningThreshold());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-2599), (-2599), timeUnit0);
      long long0 = eventCountCircuitBreaker0.getOpeningInterval();
      assertEquals((-2599000000L), eventCountCircuitBreaker0.getClosingInterval());
      assertEquals((-2599), eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals((-2599), eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals((-2599000000L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0L, timeUnit0, 0, 0L, timeUnit0);
      int int0 = eventCountCircuitBreaker0.getClosingThreshold();
      assertEquals(0, int0);
      assertEquals(0, eventCountCircuitBreaker0.getOpeningThreshold());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(903, 903, timeUnit0, 876, (-1L), timeUnit0);
      int int0 = eventCountCircuitBreaker0.getClosingThreshold();
      assertEquals((-86400000000000L), eventCountCircuitBreaker0.getClosingInterval());
      assertEquals(876, int0);
      assertEquals(78019200000000000L, eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals(903, eventCountCircuitBreaker0.getOpeningThreshold());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0L, timeUnit0, 0, 0L, timeUnit0);
      eventCountCircuitBreaker0.getClosingInterval();
      assertEquals(0, eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals(0, eventCountCircuitBreaker0.getClosingThreshold());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(903, 903, timeUnit0, 876, (-1L), timeUnit0);
      long long0 = eventCountCircuitBreaker0.getClosingInterval();
      assertEquals(78019200000000000L, eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals((-86400000000000L), long0);
      assertEquals(903, eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals(876, eventCountCircuitBreaker0.getClosingThreshold());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EventCountCircuitBreaker eventCountCircuitBreaker0 = null;
      try {
        eventCountCircuitBreaker0 = new EventCountCircuitBreaker(2663, 2663, (TimeUnit) null, 2663, 2663, (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.concurrent.EventCountCircuitBreaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EventCountCircuitBreaker eventCountCircuitBreaker0 = null;
      try {
        eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-1982), (-1982), (TimeUnit) null, (-1982));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.concurrent.EventCountCircuitBreaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EventCountCircuitBreaker eventCountCircuitBreaker0 = null;
      try {
        eventCountCircuitBreaker0 = new EventCountCircuitBreaker(1198, 1198, (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.concurrent.EventCountCircuitBreaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-2321), (-2321), timeUnit0);
      // Undeclared exception!
      try { 
        eventCountCircuitBreaker0.incrementAndCheckState((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.concurrent.EventCountCircuitBreaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-157), 437L, timeUnit0, 1347);
      int int0 = eventCountCircuitBreaker0.getOpeningThreshold();
      assertEquals(1347, eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals(437000L, eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals((-157), int0);
      assertEquals(437000L, eventCountCircuitBreaker0.getClosingInterval());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(1, 2772L, timeUnit0, 1);
      long long0 = eventCountCircuitBreaker0.getOpeningInterval();
      assertEquals(166320000000000L, eventCountCircuitBreaker0.getClosingInterval());
      assertEquals(1, eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals(166320000000000L, long0);
      assertEquals(1, eventCountCircuitBreaker0.getOpeningThreshold());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(6, 6, timeUnit0, 6);
      AbstractCircuitBreaker.State abstractCircuitBreaker_State0 = AbstractCircuitBreaker.State.OPEN;
      eventCountCircuitBreaker0.changeState(abstractCircuitBreaker_State0);
      boolean boolean0 = eventCountCircuitBreaker0.checkState();
      assertTrue(eventCountCircuitBreaker0.isClosed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0, timeUnit0);
      AbstractCircuitBreaker.State abstractCircuitBreaker_State0 = AbstractCircuitBreaker.State.OPEN;
      eventCountCircuitBreaker0.changeState(abstractCircuitBreaker_State0);
      boolean boolean0 = eventCountCircuitBreaker0.checkState();
      assertFalse(eventCountCircuitBreaker0.isClosed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0, timeUnit0);
      eventCountCircuitBreaker0.open();
      boolean boolean0 = eventCountCircuitBreaker0.checkState();
      assertTrue(eventCountCircuitBreaker0.isOpen());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-2321), (-2321), timeUnit0);
      int int0 = eventCountCircuitBreaker0.getClosingThreshold();
      assertEquals((-2321), int0);
      assertEquals((-2321), eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals((-2321000000000L), eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals((-2321000000000L), eventCountCircuitBreaker0.getClosingInterval());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-2062), (-2062), timeUnit0);
      eventCountCircuitBreaker0.close();
      assertEquals((-123720000000000L), eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals((-2062), eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals((-123720000000000L), eventCountCircuitBreaker0.getClosingInterval());
      assertEquals((-2062), eventCountCircuitBreaker0.getOpeningThreshold());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(21, 21, timeUnit0);
      boolean boolean0 = eventCountCircuitBreaker0.incrementAndCheckState();
      assertTrue(boolean0);
      assertEquals(1814400000000000L, eventCountCircuitBreaker0.getClosingInterval());
      assertEquals(21, eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals(1814400000000000L, eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals(21, eventCountCircuitBreaker0.getOpeningThreshold());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(3463, 3463, timeUnit0, 3463);
      long long0 = eventCountCircuitBreaker0.getClosingInterval();
      assertEquals(3463, eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals(12466800000000000L, eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals(3463, eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals(12466800000000000L, long0);
  }
}
