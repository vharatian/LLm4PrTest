/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:22:57 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("H'akjFzG:MR:52");
      assertEquals("H'akjFzG:MR:52", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("H'akjFzG:MR:52");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("H'akjFzG:MR:52");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.substringAfter("\n", "++L");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Locale locale0 = Locale.forLanguageTag("Cloneable type ");
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals(0, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      String string2 = StringUtils.join(intArray0, 'U', 5, 5);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "H'akjFzG:MR:52";
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) 0;
      String string3 = StringUtils.join(objectArray0, '/', 2, 5);
      assertEquals(6, objectArray0.length);
      assertEquals("0/0/", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("_GCw]ljHA2?`4=d");
      assertEquals("_GCw]ljHA2?`4=d", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("_GCw]ljHA2?`4=d");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-839.0F);
      floatArray0[1] = 414.7064F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-37.7531F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      String string1 = StringUtils.join(floatArray0, '2', 1, 3);
      assertArrayEquals(new float[] {(-839.0F), 414.7064F, 0.0F, 0.0F, 1.0F, (-37.7531F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals("414.706420.0", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultString("414.706420.0");
      assertEquals("414.706420.0", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("", 4453, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isEmpty(string2);
      assertFalse(boolean0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.defaultIfBlank(string2, string2);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) string3;
      charSequenceArray0[1] = (CharSequence) string3;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) string3;
      charSequenceArray0[4] = (CharSequence) string3;
      charSequenceArray0[5] = (CharSequence) string2;
      charSequenceArray0[6] = (CharSequence) "";
      String string4 = StringUtils.replaceIgnoreCase("@CartesianTest not found.", "Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals("@CartesianTest not found.", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      charSequenceArray0[7] = (CharSequence) "@CartesianTest not found.";
      // Undeclared exception!
      StringUtils.isAllBlank(charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      String string0 = "\r\n";
      String string1 = StringUtils.difference("\r\n", "\r\n");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\r\n";
      charSequenceArray0[1] = (CharSequence) "\r\n";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\r\n", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("\r\n");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[2], charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.getDigits("9A");
      assertEquals("9", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBefore("", "Q6l*");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.chomp("9", "9A");
      assertEquals("9", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      
      double double0 = StringUtils.getJaroWinklerDistance("9", "");
      assertEquals(0.0, double0, 0.01);
      
      int int1 = 109;
      String string5 = StringUtils.substringAfter("tY|~w^)=YYGLIH", 109);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 109;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'Y', (-1), 2147483645);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringBetween("\r", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase("\r");
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = "\r";
      int int0 = StringUtils.indexOfAny((CharSequence) " ", " ");
      assertEquals(0, int0);
      
      int[] intArray0 = new int[16];
      intArray0[1] = 0;
      intArray0[1] = 0;
      intArray0[0] = 0;
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "...");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      intArray0[5] = (-1);
      String[] stringArray2 = StringUtils.split("", "0RC.\"7sj&cMK,h");
      assertEquals(0, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string2 = StringUtils.join(intArray0, 'O', 0, 8);
      assertEquals(16, intArray0.length);
      assertEquals("0O0O0O0O0O-1O0O0", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      String string0 = StringUtils.overlay("C", "*>G38}>M7(9|", (-3913), 77);
      assertEquals("*>G38}>M7(9|", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("*>G38}>M7(9|");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "*>G38}>M7(9|", 77, (-984));
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = null;
      String string1 = StringUtils.stripEnd("\n", (String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase(" ");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)94;
      shortArray0[1] = (short) (-298);
      shortArray0[2] = (short)5;
      shortArray0[3] = (short)669;
      shortArray0[4] = (short)3367;
      shortArray0[5] = (short) (-1992);
      String string2 = StringUtils.replaceOnceIgnoreCase("\n", "\n", "\r");
      assertEquals("\r", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      StringUtils.join(shortArray0, '1', (-95626888), 931);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toString(byteArray0, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray1 = StringUtils.getBytes("#G(~bQhe", (String) null);
      assertArrayEquals(new byte[] {(byte)35, (byte)71, (byte)40, (byte)126, (byte)98, (byte)81, (byte)104, (byte)101}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string1 = "*Ig+/Lr\"ps`L q!F";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("*Ig+/Lr\"ps`L q!F", supplier0);
      assertEquals("*Ig+/Lr\"ps`L q!F", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.defaultIfBlank("*Ig+/Lr\"ps`L q!F", "*Ig+/Lr\"ps`L q!F");
      assertEquals("*Ig+/Lr\"ps`L q!F", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = '=';
      charArray0[2] = '\"';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '\"', (-2926), 751);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      short[] shortArray0 = new short[6];
      String string0 = StringUtils.join(shortArray0, 'T', (int) (short)0, 5);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals("0T0T0T0T0", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes("org.junitpioneer.jupiter.EnvironmentVariableExtension", (String) null);
      assertEquals(53, byteArray0.length);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      StringUtils.leftPad("org.junitpioneer.jupiter.EnvironmentVariableExtension", 65536, ':');
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (-1148);
      shortArray0[2] = (short)26;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1483);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, ' ', Integer.MIN_VALUE, (int) (short) (-1148));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      String string0 = StringUtils.wrap("Minimum abbreviation width with offset is %d", '\u000B');
      assertEquals("\u000BMinimum abbreviation width with offset is %d\u000B", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("\u000BMinimum abbreviation width with offset is %d\u000B");
      assertEquals("\u000BMinimum abbreviation width with offset is %d\u000B", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      String string0 = StringUtils.strip("ExceptionWasThrown");
      assertEquals("ExceptionWasThrown", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "ExceptionWasThrown", (char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("ExceptionWasThrown");
      assertEquals(18, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.stripStart("bJ^U", "bJ^U");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.substringBeforeLast("bJ^U", "'a}~t<^ZebPjtp>B/v");
      assertEquals("bJ^U", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfterLast("%s was not anotated with @ArgumentsSource but should have been.%s was not anotated with @ArgumentsSource but should have been.", (-53));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = new String[0];
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string4);
      
      int int0 = StringUtils.countMatches((CharSequence) "%s was not anotated with @ArgumentsSource but should have been.%s was not anotated with @ArgumentsSource but should have been.", 'L');
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAlpha("");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-53);
      doubleArray0[2] = (double) 'L';
      doubleArray0[3] = (double) (-53);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'L', 0, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      // Undeclared exception!
      StringUtils.center("", 65536, "$");
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringUtils0;
      objectArray0[1] = (Object) stringUtils0;
      objectArray0[2] = (Object) stringUtils0;
      objectArray0[3] = (Object) stringUtils0;
      objectArray0[4] = (Object) stringUtils0;
      objectArray0[5] = (Object) stringUtils0;
      String string0 = StringUtils.joinWith("\n", objectArray0);
      assertEquals(6, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.StringUtils@1\norg.apache.commons.lang3.StringUtils@1\norg.apache.commons.lang3.StringUtils@1\norg.apache.commons.lang3.StringUtils@1\norg.apache.commons.lang3.StringUtils@1\norg.apache.commons.lang3.StringUtils@1", 108);
      assertEquals(19, int0);
      
      String string1 = StringUtils.repeat("\r", (-4412));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("", "maxWith cannot be negative");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "%s was not annotated with @ArgumentsSource but should have been.\r", (CharSequence) "xd7>EYR");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[1] = '\'';
      charArray0[2] = 'U';
      charArray0[3] = '/';
      charArray0[4] = '\"';
      charArray0[5] = 'p';
      String string0 = StringUtils.join(charArray0, '.', 0, 6);
      assertArrayEquals(new char[] {'$', '\'', 'U', '/', '\"', 'p'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("$.'.U./.\".p", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", 10);
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars("\n", "", "doesn't match any regular expression.");
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("\n"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertFalse(arrayList0.contains("\n"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, 'X');
      assertFalse(arrayList0.contains("\n"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(".");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      double double0 = StringUtils.getJaroWinklerDistance("2.}W?`A@y6]oK", ".");
      assertEquals(0.69, double0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = '-';
      charArray0[2] = 'R';
      charArray0[3] = '<';
      charArray0[4] = '.';
      charArray0[5] = 'x';
      charArray0[6] = 'd';
      charArray0[7] = 'd';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ".", charArray0);
      assertArrayEquals(new char[] {'', '-', 'R', '<', '.', 'x', 'd', 'd'}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.chomp("+*3");
      assertEquals("+*3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("\n", 8192);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1650L;
      longArray0[1] = 2368L;
      longArray0[2] = (-1773L);
      longArray0[3] = (-17L);
      longArray0[4] = 1L;
      char char0 = '.';
      // Undeclared exception!
      StringUtils.join(longArray0, '.', (-1968526675), 62);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      String string0 = StringUtils.rotate("...", (-139));
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("...");
      assertEquals(3, int0);
      
      String string1 = StringUtils.leftPad("...", 3, 'x');
      assertEquals("...", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "...", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.defaultIfBlank("...", "...");
      assertEquals("...", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.deleteWhitespace("...");
      assertEquals("...", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.trimToNull("...");
      assertEquals("...", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-56);
      String string5 = StringUtils.join(byteArray0, 'Y', (int) (byte)0, (int) (byte)4);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)15, (byte)72, (byte)9, (byte)0, (byte) (-56)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("4Y0Y0Y15", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.center((String) null, 18, 'l');
      assertNull(string1);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ", (String) null, 2431);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, 'l');
      assertNull(stringArray1);
      
      String string2 = StringUtils.substringBetween("XAyLB*-7{#tg_", "4w.B`;L<'", "maxWith c");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      String string0 = StringUtils.leftPad("UoDwdVVN*x", (-2737), "HhjKYO_ [`Z<UM");
      assertEquals("UoDwdVVN*x", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)27;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'Q', Integer.MAX_VALUE, (-165));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase("%<B3a]|Qna O", "%<B3a]|Qna O", (CharSequence[]) null);
      assertEquals("%<B3a]|Qna O", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '.';
      charArray0[2] = 'O';
      int int0 = StringUtils.indexOfAny((CharSequence) "%<B3a]|Qna O", charArray0);
      assertArrayEquals(new char[] {'&', '.', 'O'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(11, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.stripEnd("\n", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      String string0 = StringUtils.difference("0#wjJ(1M=c?fMR81(", "0#wjJ(1M=c?fMR81(");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "0#wjJ(1M=c?fMR81(";
      int int0 = StringUtils.indexOfAny((CharSequence) "0#wjJ(1M=c?fMR81(", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("org.apache.commons.lang3.StringUtils", "p", "hMzsNHLrHY");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = 'U';
      charArray0[2] = 'Z';
      charArray0[3] = '7';
      charArray0[4] = 'Y';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '.', 0, 56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("vsW?cfy?-l>H\"c", '#');
      assertEquals("#vsW?cfy?-l>H\"c#", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "#vsW?cfy?-l>H\"c#", charArray0);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("vsW?cfy?-l>H\"c");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      String string0 = StringUtils.chomp("G;JOEX1c;6%9d@u+KBQG;JOEX1c;6%9d@u+KBQ");
      assertEquals("G;JOEX1c;6%9d@u+KBQG;JOEX1c;6%9d@u+KBQ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("=pYJR_c/", '3');
      assertEquals("3=pYJR_c/3", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("<mw", 13, "=pYJR_c/");
      assertEquals("<mw=pYJR_c/", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.wrap(" ", 'm');
      assertEquals("m m", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst(" ", " ", "P)1&$[k5ty.+0_mS:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 3835, "");
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase(string0, "");
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize(string1);
      assertNotNull(string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = '?';
      charArray0[2] = '\"';
      charArray0[3] = '|';
      charArray0[4] = 't';
      charArray0[5] = '*';
      charArray0[6] = '%';
      charArray0[7] = '^';
      charArray0[8] = 'o';
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(935);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(935, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(935, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(935, charBuffer0.capacity());
      assertEquals(935, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(935, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(935, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(935, charBuffer0.capacity());
      assertEquals(935, charBuffer0.length());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) charBuffer0, (CharSequence) charBuffer0, 935);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, 's');
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("0", 's');
      assertEquals("s0s", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "s0s", (CharSequence) "0");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("(\n");
      assertFalse(boolean0);
      
      String string0 = StringUtils.chomp("(\n");
      assertEquals("(", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      String string0 = StringUtils.left("#oQE;#7m3\"/", (-271));
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-271);
      longArray0[2] = 0L;
      longArray0[4] = (long) 'm';
      String string1 = StringUtils.join(longArray0, 'm', 107, 107);
      assertArrayEquals(new long[] {(-271L), 0L, 0L, 0L, 109L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "_07:v=1~j!%b", (CharSequence) "#oQE;#7m3\"/", 89);
      assertEquals(12, int0);
      
      String string2 = StringUtils.chomp("f\n");
      assertEquals("f", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.wrapIfMissing("E/dsxcXaDokAH2~z(!u", 'm');
      assertEquals("mE/dsxcXaDokAH2~z(!um", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      String string0 = StringUtils.overlay("Fw#", (String) null, 1506, 1506);
      assertEquals("Fw#", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad((String) null, 1506);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad("", 1506, (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("Fw#");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) string2, 1506);
      assertEquals(1506, int0);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.uncapitalize((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.unwrap("...", (String) null);
      assertEquals("...", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, 1506);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) string2;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 8192, "");
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)5;
      String string1 = StringUtils.join(byteArray0, ':');
      assertArrayEquals(new byte[] {(byte)64, (byte)64, (byte)5}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("64:64:5", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) "64:64:5");
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("XS)wqF>yGRilmQF", 'X');
      assertEquals("XS)wqF>yGRilmQFX", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.removePattern("gsO|<$Foqp*", "\r");
      assertEquals("gsO|<$Foqp*", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("23WQ4x`hAI0Q", 'N');
      assertEquals("23WQ4x`hAI0Q", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("\n", "\r");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "gsO|<$Foqp*", (CharSequence) "\r");
      assertEquals(0, int0);
      
      String string2 = StringUtils.swapCase("Object varargs must not be null");
      assertEquals("oBJECT VARARGS MUST NOT BE NULL", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.chop("gsO|<$Foqp*");
      assertEquals("gsO|<$Foqp", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.DisabledUntilExtension", 'o');
      assertEquals("org.junitpioneer.jupiter.DisabledUntilExtensiono", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("Strings must not be null");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-91L);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'D', 122, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = StringUtils.unwrap("%s was not annotated with @ArgumentsSource but should have been.", '\u0000');
      assertEquals("%s was not annotated with @ArgumentsSource but should have been.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      String string0 = StringUtils.chomp("q9hAQoQ@n-Q<h1L-G'%5v $.1_\r");
      assertEquals("q9hAQoQ@n-Q<h1L-G'%5v $.1_", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      String string0 = "\r";
      String string1 = StringUtils.stripAccents("\r");
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "D9q$A#9,";
      String string3 = StringUtils.unwrap("\r ", "D9q$A#9,");
      assertEquals("\r ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("YgFBRB(o?yz;trB9qe", "\r");
      assertFalse(boolean0);
      
      String string4 = StringUtils.EMPTY;
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = "org.junitpioneer.jupiter.params.ShortRange";
      // Undeclared exception!
      StringUtils.leftPad("org.junitpioneer.jupiter.params.ShortRange", 65536);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      String string0 = StringUtils.chomp("\r\n");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      int int0 = 4726;
      int int1 = 1586;
      String string0 = StringUtils.center("hx3onVWTQ]", 1586, "+#7wgGKVQ`ME");
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("\n ");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      char char0 = 'V';
      String string2 = StringUtils.rightPad(" \r", 4726, 'V');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "+#7wgGKVQ`ME";
      charSequenceArray0[1] = (CharSequence) "hx3onVWTQ]";
      charSequenceArray0[2] = (CharSequence) "+#7wgGKVQ`ME";
      charSequenceArray0[3] = (CharSequence) " \r";
      charSequenceArray0[4] = (CharSequence) "hx3onVWTQ]";
      charSequenceArray0[5] = (CharSequence) " \r";
      charSequenceArray0[6] = (CharSequence) string0;
      charSequenceArray0[7] = (CharSequence) "+#7wgGKVQ`ME";
      charSequenceArray0[8] = (CharSequence) "hx3onVWTQ]";
      String string3 = StringUtils.appendIfMissingIgnoreCase("hx3onVWTQ]", "", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("hx3onVWTQ]", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("n@XiNnmZHydt.V");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance("\" should ae a parenM context.", string2);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(" \rSFWf_7U9?A");
      assertEquals("SFWf_7U9?A", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("]T#eL");
      assertEquals("]T#eL", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.removeEnd("\n", " ");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("E'6SNZx]L}8A", "Minimum abbreviation width is %d");
      assertEquals("E'6SNZx]L}8A", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\n", 32);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Minimum abbreviation width is %d", (char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("E'6SNZx]L}8A");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.rotate("org.junitpioneer.jupiter.CartesianProductTestExtension,91aIk$C7c1**", 2729);
      assertEquals("upiter.CartesianProductTestExtension,91aIk$C7c1**org.junitpioneer.j", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 32;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 2729;
      longArray0[5] = (long) 2729;
      longArray0[6] = (long) 32;
      longArray0[7] = 0L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '<', 1, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 8192, "");
      assertNotNull(string0);
      
      String string1 = StringUtils.left(string0, 519);
      assertEqualsstring1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace
      assertTrue(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(519));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertFalse(linkedList0.contains(519));
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      boolean boolean1 = linkedList0.offer
      assertFalse(linkedList0.contains(519));
      assertTrue(linkedList0.contains
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "org.junitpioneer.jupiter.EnvironmentVariableExtension");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStartIgnoreCase(" ", " ");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.reverse("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) " ", 13);
      assertFalse(boolean0);
      
      String string3 = StringUtils.repeat("5_P^EwT", 2295);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      // Undeclared exception!
      StringUtils.countMatches((CharSequence) string3, 'r');
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.");
      assertEquals(30, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceIgnoreCase("G;JOEX1c;6%", "Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.", "");
      assertEquals("G;JOEX1c;6%", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("y-*hY", 1, "&-CwXH+g1!l^Y");
      assertEquals("y-*hY", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, "G;JOEX1c;6%");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (-1203.9679);
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      String string3 = StringUtils.join(doubleArray0, 'T', 1, 7);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, (-1203.9679), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals("1.0T1.0T1.0T-1203.9679T1.0T1.0", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.length("1.0T1.0T1.0T-1203.9679T1.0T1.0");
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      String string0 = StringUtils.replaceAll("YHoV,A*sKT6Sv|7`M)", "NL:M`+ih*rfMi=_2ET", "YHoV,A*sKT6Sv|7`M)");
      assertEquals("YHoV,A*sKT6Sv|7`M)", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Strings must not be null");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[3] = (Object) "YHoV,A*sKT6Sv|7`M)";
      objectArray0[4] = (Object) "NL:M`+ih*rfMi=_2ET";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "YHoV,A*sKT6Sv|7`M)";
      String string1 = StringUtils.join(objectArray0, "NL:M`+ih*rfMi=_2ET", 3, 4);
      assertEquals(7, objectArray0.length);
      assertEquals("YHoV,A*sKT6Sv|7`M)", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphanumeric("NL:M`+ih*rfMi=_2ET");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      String string0 = StringUtils.leftPad("(8-Mx#!3JxGUl $", 110);
      assertEquals("                                                                                               (8-Mx#!3JxGUl $", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("                                                                                               (8-Mx#!3JxGUl $");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("(8-Mx#!3JxGUl $", "L", 1873);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad("ou6(", 2796, (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("(8-Mx#!3JxGUl $");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.abbreviate("                                                                                               (8-Mx#!3JxGUl $", "*", 110, 92);
      assertEquals("*                                                                            (8-Mx#!3JxGUl $", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      String string0 = StringUtils.rightPad("%s: Could not resolve parameter by name (%s).", 3341, "");
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("%s: Could not resolve parameter by name (%s).");
      assertEquals("%s: Could not resolve parameter by name (%s).", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((byte[]) null, '[');
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("Minimum abbreviation width with offset is %d", '1');
      assertEquals("1Minimum abbreviation width with offset is %d1", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[5] = '1';
      charArray0[6] = '[';
      // Undeclared exception!
      StringUtils.containsAny((CharSequence) string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("%s does not impleme", "org.junitpioneer.vintage.ExpectedExceptionExtension0[+NT1'un:&<c", 24);
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("%s does not impleme", 24, "Threshold must not be negative");
      assertEquals("%s does not implemeThres", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("%s does not impleme");
      assertEquals("%s does not impleme", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.uncapitalize("%s does not impleme");
      assertEquals("%s does not impleme", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.center("%s does not impleme", (-86));
      assertEquals("%s does not impleme", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.deleteWhitespace("%s does not impleme");
      assertEquals("%sdoesnotimpleme", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "%s does not impleme", (CharSequence) "%sdoesnotimpleme");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("sumer<T> interface.>fZE>^x;%LGCu", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      String string0 = StringUtils.rightPad("Timeout for vintage @Test must be positive.r-@kO#", 885, "p");
      assertEquals("Timeout for vintage @Test must be positive.r-@kO#pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "Timeout for vintage @Test must be positive.r-@kO#pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", (CharSequence) "Timeout for vintage @Test must be positive.r-@kO#");
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, 's');
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("Minimum abbreviation width with offset is %d");
      assertEquals("Minimumabbreviationwidthwithoffsetis%d", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[1] = (CharSequence) "0";
      charSequenceArray0[2] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[3] = (CharSequence) "0";
      charSequenceArray0[4] = (CharSequence) "0";
      String string2 = StringUtils.SPACE;
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[5] = (CharSequence) " ";
      charSequenceArray0[6] = (CharSequence) "hd3tdZs}P[o,^k2iHp";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric(charSequenceArray0[3]);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.removeEnd("hd3tdZs}P[o,^k2iHp", "i\"iW/");
      assertEquals("hd3tdZs}P[o,^k2iHp", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, 'v');
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("Z\"K:aWhyeJrJ Pw%:", "Z\"K:aWhyeJrJ Pw%:", "Z\"K:aWhyeJrJ Pw%:");
      assertEquals("Z\"K:aWhyeJrJ Pw%:", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("89F^", 'l');
      assertEquals("l89F^l", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("l89F^l", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.ordinalIndexOf("(", "(", (-1205));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-69);
      // Undeclared exception!
      StringUtils.join(byteArray0, 'l', (-1994091956), 12);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      String string0 = StringUtils.rightPad("%s: Could not resolve parameter by name (%s).", 3341, "");
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) string0;
      charSequenceArray0[1] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      charSequenceArray0[2] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      charSequenceArray0[3] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      String string0 = StringUtils.wrap("Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.");
      assertEquals("Illegal range. The step cannot be zero.Illegal range. The step cannot be zero.Illegal range. The step cannot be zero.", string0);
      assertNotNull(string0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertEquals(5, enumSet0.size());
      assertNotNull(enumSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean0 = enumSet0.add(locale_FilteringMode0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(5, enumSet0.size());
      assertFalse(boolean0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(5, enumSet0.size());
      assertNotNull(iterator0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Illegal range. The step cannot be zero.";
      stringArray0[1] = "Illegal range. The step cannot be zero.Illegal range. The step cannot be zero.Illegal range. The step cannot be zero.";
      stringArray0[2] = "Illegal range. The step cannot be zero.Illegal range. The step cannot be zero.Illegal range. The step cannot be zero.";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.getCommonPrefix(stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("Illegal range. The step cannot be zero.", string1);
      assertNotNull(string1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", 10);
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars("\n", "\n", "\n");
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("\n");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      String string1 = StringUtils.joinWith("", objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.unwrap("...", '{');
      assertEquals("...", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '0';
      charArray0[3] = '{';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "...", charArray0);
      assertArrayEquals(new char[] {'{', '{', '0', '{'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.getDigits("...");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "...", (CharSequence) "...");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.repeat("", 321);
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean2 = StringUtils.contains((CharSequence) "", 0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string5 = StringUtils.chomp("");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string6 = StringUtils.abbreviate("Y!gF|", "", 127, 0);
      assertEquals("Y!gF|", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      
      charSequenceArray0[6] = (CharSequence) "Y!gF|";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "...";
      boolean boolean3 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase(".(w[pE1dpwhQJ", "t1r!x]9");
      assertEquals(".(w[pE1dpwhQJ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha(".(w[pE1dpwhQJ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("!?!q0ziN#~'hbCB.", "!?!q0ziN#~'hbCB.");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha("!?!q0ziN#~'hbCB.");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.substringAfter("d% si htdiw noitaiverbba m", 37);
      assertEquals(" si htdiw noitaiverbba m", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      String string0 = StringUtils.substringBefore("9UW9l.*%^W4\u0000]f", "9UW9l.*%^W4\u0000]f");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '2';
      charArray0[5] = '2';
      int int0 = StringUtils.indexOfAny((CharSequence) "9UW9l.*%^W4\u0000]f", charArray0);
      assertArrayEquals(new char[] {'9', '2', '2', '2', '2', '2', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("\r", "\r");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("\" should have a parent context.", 54, "\" should have a parent context.");
      assertEquals("\" should ha\" should have a parent context.\" should hav", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.left("\" should ha\" should have a parent context.\" should hav", 54);
      assertEquals("\" should ha\" should have a parent context.\" should hav", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("\" should ha\" should have a parent context.\" should hav", "\r");
      assertFalse(boolean0);
      
      String string4 = StringUtils.removeEndIgnoreCase("\" should ha\" should have a parent context.\" should hav", (String) null);
      assertEquals("\" should ha\" should have a parent context.\" should hav", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.abbreviate((String) null, 54);
      assertNull(string5);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "\" should ha\" should have a parent context.\" should hav");
      assertEquals((-1), int0);
      
      String string6 = StringUtils.substringAfterLast("\" should ha\" should have a parent context.\" should hav", (-1));
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.removeIgnoreCase((String) null, "");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      String string0 = StringUtils.substringBefore("]T#eL", "]T#eL");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceFirst("\n\r", "]T#eL", "r+a${;>Jmok$L%b[<");
      assertEquals("\n\r", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("]T#eL", "4CD");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n\r");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", "aM1^>!?:q3", false);
      assertEquals((-11), int0);
      
      boolean boolean1 = StringUtils.isNotEmpty("4CD");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.substringsBetween("Locale must not be null", "4CD", (String) null);
      assertNull(stringArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'u';
      int int1 = StringUtils.indexOfAny((CharSequence) "Using both name and index parameter targeting in a single @DisableIfArgument is not permitted.", charArray0);
      assertArrayEquals(new char[] {'2', 'u'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(71, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Strings must not be null", "`Yb");
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("|aM=tD9NRK", "Minimum abbreviation width is %d");
      assertEquals("|aM=tD9NRK", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Minimum abbreviation width is %d");
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      objectArray0[3] = (Object) "Minimum abbreviation width is %d";
      objectArray0[4] = (Object) "Minimum abbreviation width is %d";
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[5] = object3;
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "Threshold must not be negative", 4, 3284);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("_tCw]vljHA2F`4d");
      assertEquals("_tCw]vljHA2F`4d", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertEquals(5, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertEquals(5, enumSet0.size());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.stripToEmpty("_tCw]vljHA2F`4d");
      assertEquals("_tCw]vljHA2F`4d", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.compare("LJTyb`1", (String) null, true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      String string0 = StringUtils.replaceAll((String) null, "72J(Pk/m]P9H5z,1\"", "72J(Pk/m]P9H5z,1\"");
      assertNull(string0);
      
      String string1 = StringUtils.repeat("72J(Pk/m]P9H5z,1\"", 987);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast((String) null, "/u!ySqvfZ},p@+0T9");
      assertNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = '5';
      String string3 = StringUtils.join(charArray0, '\\', 165, 7);
      assertArrayEquals(new char[] {'\'', '5'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      
      char char0 = 'S';
      // Undeclared exception!
      StringUtils.reverseDelimited(string1, 'S');
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      String string0 = StringUtils.upperCase("r");
      assertEquals("R", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("R");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      int int0 = 8192;
      String string0 = "";
      String string1 = StringUtils.rightPad("ct", 8192, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("ct", string1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      StringUtils.repeat(';', 8192);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", (int) (byte)14);
      assertEquals("Minimum abb...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Minimum abb...", "Minimum abb...");
      assertFalse(boolean0);
      
      String string1 = StringUtils.reverse(", Length: 0");
      assertEquals("0 :htgneL ,", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("Minimum abb...", (int) (byte)14, 'B');
      assertEquals("Minimum abb...", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("\r", "\r");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeEnd("@&E", "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("@&E", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeStartIgnoreCase("@&E", "\nrg(eEb@jc5TZ*@Ic<l");
      assertEquals("@&E", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.stripEnd("lo+w*1@YTsaOpK_[Pzy", "ti`+\"ThvS}9>S2_");
      assertEquals("lo+w*1@YTsaOpK_[Pzy", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\nrg(eEb@jc5TZ*@Ic<l";
      stringArray0[1] = "AZ).bz";
      stringArray0[2] = "X9lr";
      stringArray0[3] = "?tD&5j9, }GFDl8 iva";
      stringArray0[4] = "@&E";
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("\nrg(eEb@jc5TZ*@Ic<l", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsWhitespace("ti`+\"ThvS}9>S2_");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "AZ).bz", (CharSequence) "@&E");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.rightPad("lo+w*1@YTsaOpK_[Pzy", 20, "w^7;}");
      assertEquals("lo+w*1@YTsaOpK_[Pzyw", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.substringBefore("X9lr", "@&E");
      assertEquals("X9lr", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, (String) null, 105, 64);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.chop((String) null);
      assertNull(string1);
      
      int int0 = 3835;
      String string2 = "($WDti`+\"ThvS}9>S2_";
      String string3 = StringUtils.rightPad("($WDti`+\"ThvS}9>S2_", 94, '3');
      assertEquals("($WDti`+\"ThvS}9>S2_333333333333333333333333333333333333333333333333333333333333333333333333333", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      
      // Undeclared exception!
      StringUtils.repeat(")K`z6U3", Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEnd(" ", "\r");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsIgnoreCase(" ", "\r");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeAll(" ", "\r");
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) " ");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isWhitespace(" ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.replaceIgnoreCase("1;m", " ", "Value must not be empty");
      assertEquals("1;m", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      long[] longArray0 = new long[25];
      longArray0[0] = (-1021L);
      longArray0[1] = (long) 0;
      boolean boolean2 = StringUtils.isAlphanumeric(" ");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isNotEmpty(" ");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "1;m";
      int int2 = StringUtils.indexOfAny((CharSequence) "Value must not be empty", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(5, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int[] intArray0 = StringUtils.toCodePoints("1;m");
      assertArrayEquals(new int[] {49, 59, 109}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      String string0 = StringUtils.mid("\u0001(P\"!-DhwrS\"!4", 57, 55);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("_07:v=1~j!%b", 55);
      assertEquals(":v=1~j!%b", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeEndIgnoreCase("_07:v=1~j!%b", "");
      assertEquals("_07:v=1~j!%b", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "\u0001(P\"!-DhwrS\"!4", (CharSequence) "_07:v=1~j!%b");
      assertEquals(14, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "_07:v=1~j!%b", 55);
      assertEquals(2, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.leftPad("\n", (-1));
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase("Exactly one type of input must be provided in the @");
      assertEquals("exactly one type of input must be provided in the @", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "exactly one type of input must be provided in the @";
      String string2 = StringUtils.replaceEach("\n", stringArray0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", " ");
      assertEquals(0, int0);
      
      String[] stringArray1 = new String[8];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "\n";
      stringArray1[1] = "";
      stringArray1[2] = " vs ";
      stringArray1[3] = "";
      stringArray1[5] = "\r";
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      String string3 = StringUtils.join((Iterable<?>) serviceLoader0, (String) null);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      stringArray1[6] = "\n";
      stringArray1[7] = " ";
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertEquals(8, stringArray2.length);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.deleteWhitespace("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "I", "I");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, 321);
      assertNull(string0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 321;
      floatArray0[1] = (float) 321;
      floatArray0[2] = (float) 321;
      floatArray0[3] = (float) 321;
      floatArray0[4] = (float) 321;
      floatArray0[5] = (float) 321;
      floatArray0[6] = (float) 321;
      floatArray0[7] = (float) 321;
      floatArray0[8] = (float) 321;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, ':', 3, 321);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeStart(" ", "FccD-$(ck");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("nDc@OzaX", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1084);
      String string0 = StringUtils.replaceChars("\"*}uww,#$h4]+{", 'o', '#');
      assertEquals("\"*}uww,#$h4]+{", string0);
      assertNotNull(string0);
      
      String string1 = "' is no valid ISO-8601 string.";
      String string2 = StringUtils.rightPad("' is no valid ISO-8601 string.", (int) (byte)14, 'I');
      assertEquals("' is no valid ISO-8601 string.", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "*KFt8!", (int) (short) (-1084));
      assertFalse(boolean0);
      
      String string3 = StringUtils.mid("\"*}uww,#$h4]+{", (-804), (byte)14);
      assertEquals("\"*}uww,#$h4]+{", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        Charset.forName("maxWith cannot be negative");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      String string0 = StringUtils.repeat('g', 160);
      assertEquals("gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      charArray0[6] = 'I';
      charArray0[7] = 'g';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg", charArray0);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'g', 'g', 'I', 'g'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chomp("O`f");
      assertEquals("O`f", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("O`f", (-1), "gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg");
      assertEquals("O`f", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.left("O`f", (-6373));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAllLowerCase("O`f");
      assertFalse(boolean0);
      
      String string4 = StringUtils.substringBeforeLast("", "O`f");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.left("O`f", 160);
      assertEquals("O`f", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) 'g';
      objectArray0[3] = (Object) 'g';
      objectArray0[4] = (Object) 'g';
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "O`f", 160, 692);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 160
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Exactly one type of input must be provided in the @", 321);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[3] = 'r';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Exactly one type of input must be provided in the @", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'r', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.chop("YC");
      assertEquals("Y", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("Exactly one type of input must be provided in the @", "Y");
      assertEquals("Exactly one type of input must be provided in the @", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2971);
      shortArray0[1] = (short)1854;
      String string3 = StringUtils.join(shortArray0, 'r', (int) (short)1854, (int) (short) (-2971));
      assertArrayEquals(new short[] {(short) (-2971), (short)1854}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("k");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringAfterLast("g`uFMN}n0,kAd!s4;", "k");
      assertEquals("Ad!s4;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.appendIfMissingIgnoreCase("%s: Could not resolve parameter by name (%s).", "} 6f]Bcj>_S;!_K o", stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals("%s: Could not resolve parameter by name (%s).} 6f]Bcj>_S;!_K o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("%s: Could not resolve parameter by name (%s).} 6f]Bcj>_S;!_K o", "%s: Could not resolve parameter by name (%s).");
      assertEquals("%s: Could not resolve parameter by name (%s).} 6f]Bcj>_S;!_K o", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      String string0 = StringUtils.truncate((String) null, 0, 0);
      assertNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = '|';
      charArray0[2] = ';';
      charArray0[3] = 'I';
      charArray0[4] = 'F';
      charArray0[5] = '4';
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'&', '|', ';', 'I', 'F', '4'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("maxWith cannot be negative");
      assertEquals("maxwith cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("maxwith cannot be negative", "maxwith cannot be negative");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAsciiPrintable("maxwith cannot be negative");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "maxWith cannot be negative";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "maxwith cannot be negative";
      objectArray0[3] = (Object) null;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "maxWith cannot be negative";
      objectArray0[6] = (Object) "maxWith cannot be negative";
      objectArray0[7] = (Object) "maxWith cannot be negative";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "maxWith cannot be negative", 4, 3212);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.replaceAll("Strings must not be null", stringArray0[0], stringArray0[0]);
      assertEquals(7, stringArray0.length);
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trim("org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replacePattern((String) null, "org.junitpioneer.jupiter.json.AbstractJsonSourceBasedArgumentsProvider", (String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Strings must not be null", (String) null);
      assertTrue(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("org.apache.commons.lang3.exception.CloneFailedException", supplier0);
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.split((String) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("0[+NT1}un:&<c", "0[+NT1}un:&<c");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "org.junitpioneer.jupiter.params.IntRange";
      String string2 = null;
      int int0 = StringUtils.compare("org.junitpioneer.jupiter.params.IntRange", (String) null, false);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      // Undeclared exception!
      StringUtils.join(objectArray0, 'U', (-38420141), 44);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.replaceAll("Strings must not be null", stringArray0[0], stringArray0[0]);
      assertEquals(7, stringArray0.length);
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "Strings must not be null", 3, 4);
      assertEquals(7, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      String string0 = StringUtils.leftPad("J7A0xd'F", 73);
      assertEquals("                                                                 J7A0xd'F", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("J7A0xd'F");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "                                                                 J7A0xd'F", (CharSequence) "J7A0xd'F");
      assertEquals(65, int0);
      
      String string1 = StringUtils.substringAfterLast("J7A0xd'F", ";U`75XLU`0");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceIgnoreCase("Seach and Replace array lengths don't match: ", "0[+NT1}un:&<c", "value must not be empty", 73);
      assertEquals("Seach and Replace array lengths don't match: ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripEnd(";U`75XLU`0", ";U`75XLU`0");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.repeat("org.junitpioneer.jupiter.json.JsonClasspathSourceArgumentsProvider)AYe@-C{;;+.0T|Y*N", (-2972));
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 73, 2);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      String string0 = StringUtils.chop("ExceptionWasThrown");
      assertEquals("ExceptionWasThrow", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "ExceptionWasThrown";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "ExceptionWasThrown";
      objectArray0[4] = (Object) "ExceptionWasThrow";
      objectArray0[5] = (Object) "ExceptionWasThrow";
      objectArray0[6] = (Object) "ExceptionWasThrown";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "ExceptionWasThrow", 160, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      String string0 = "CartesianTest can not have an empty display name.";
      String string1 = StringUtils.trimToNull("CartesianTest can not have an empty display name.");
      assertEquals("CartesianTest can not have an empty display name.", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "CartesianTest can not have an empty display name.", charArray0);
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) '8';
      objectArray0[1] = (Object) '8';
      objectArray0[2] = (Object) "CartesianTest can not have an empty display name.";
      objectArray0[3] = (Object) "CartesianTest can not have an empty display name.";
      objectArray0[4] = (Object) '8';
      objectArray0[5] = (Object) '8';
      objectArray0[6] = (Object) "CartesianTest can not have an empty display name.";
      objectArray0[7] = (Object) '8';
      String string2 = StringUtils.join(objectArray0, "Q", 1251, (-5241));
      assertEquals(8, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlpha("CartesianTest can not have an empty display name.");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string3 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string3);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "Q", (-2028178998), 27);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore(" ", " ");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceFirst(" ", " ", " ");
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("aM1^>!?:q3", "`L&>B");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("jM{_Q\"Q{:RoqI,y)t", "jM{_Q\"Q{:RoqI,y)t", false);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isNotEmpty("`L&>B");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.substringsBetween("Using both name and index parameter targeting in a single @DisableIfArgument is not permitted.", "Using both name and index parameter targeting in a single @DisableIfArgument is not permitted.", "X'b8A&,}y:qi");
      assertNull(stringArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '^';
      charArray0[2] = 'u';
      charArray0[3] = '\"';
      int int1 = StringUtils.indexOfAny((CharSequence) "Using both name and index parameter targeting in a single @DisableIfArgument is not permitted.", charArray0);
      assertArrayEquals(new char[] {'2', '^', 'u', '\"'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(71, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 92, "Minimum abbreviation width is %d");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[1] = 38;
      intArray0[2] = (int) 'J';
      intArray0[3] = (int) 'J';
      intArray0[4] = 92;
      String string1 = StringUtils.join(intArray0, 'J', 108, (-728));
      assertArrayEquals(new int[] {0, 38, 74, 74, 92}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.defaultString((String) null);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split((String) null, 'J');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("2.?'@Q6]o");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeEnd("2.?'@Q6]o", "2.?'@Q6]o");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("CartesianProductTest can not have a non-empty display name.", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = priorityQueue0.add(object0);
      assertTrue(priorityQueue0.contains(object0));
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.IGNORE_EXTENDED_RANGES, locale_FilteringMode0);
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, "Oxy84");
      assertTrue(priorityQueue0.contains(object0));
      assertFalse(priorityQueue0.contains("Oxy84"));
      assertEquals(1, priorityQueue0.size());
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      String string1 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'G';
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'r';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      charArray0[4] = 'r';
      charArray0[5] = 'G';
      charArray0[6] = 'G';
      charArray0[7] = 'r';
      charArray0[8] = 'r';
      String string0 = StringUtils.join(charArray0, 'G');
      assertArrayEquals(new char[] {'G', 'r', 'G', 'G', 'r', 'G', 'G', 'r', 'r'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("GGrGGGGGrGGGGGrGr", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trim("s1%J/");
      assertEquals("s1%J/", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.truncate("s1%J/", 71, 71);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "s1%J/", (CharSequence) "", 4);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.removeEnd("\n", " ");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("\r", "", "\r");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\r";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("\r", string2);
      assertNotNull(string2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = ":; _dZb4V18iIRJ";
      String string1 = StringUtils.reverseDelimited(":; _dZb4V18iIRJ", 'J');
      assertEquals(":; _dZb4V18iIR", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWithAny(":; _dZb4V18iIR", stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      String string2 = "";
      String string3 = "_";
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("_");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ":; _dZb4V18iIRJ", (CharSequence) ":; _dZb4V18iIR");
      assertEquals(0, int0);
      
      int int1 = 1585;
      String string4 = "org.junitpioneer.jupiter.CartesianEnumArgumentsProvider";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("org.junitpioneer.jupiter.CartesianEnumArgumentsProvider", (-297));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string1 = StringUtils.substringAfterLast("", 101);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.join(charArray0, 'r');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.leftPad("\n", (-1));
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("\n", "\n");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("\r");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[1] = (int) 'd';
      intArray0[2] = (int) 'd';
      intArray0[3] = (int) 'd';
      intArray0[4] = (int) 'd';
      intArray0[5] = (int) 'd';
      String string1 = StringUtils.join(intArray0, 'd');
      assertArrayEquals(new int[] {0, 100, 100, 100, 100, 100}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals("0d100d100d100d100d100", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("\r", "\r", "9:ie$7.");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 7
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      String string0 = StringUtils.center("xhdu", 67, "\" should have a parent context.");
      assertEquals("\" should have a parent context.xhdu\" should have a parent context.\"", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.difference("Ox[hO7SM\"]ZTKdP}", "cQU=nZ&1V 'cQU=nZ&1V '");
      assertEquals("cQU=nZ&1V 'cQU=nZ&1V '", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore(" ", " ");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceFirst(" ", " ", " ");
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("aM1^>!?:q3", "`L&>B");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("jM{_Q\"Q{:RoqI,y)t", "jM{_Q\"Q{:RoqI,y)t", false);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isNotEmpty("`L&>B");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) " ", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.leftPad("0kyf!A1q", 16, "Method `");
      assertEquals("Method `0kyf!A1q", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfBlank("Method `", supplier0);
      assertEquals("Method `", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, "xmY.x&Pt2aP&NOpGUU'");
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = '~';
      charArray0[2] = 'D';
      String string2 = StringUtils.join(charArray0, '8');
      assertArrayEquals(new char[] {'D', '~', 'D'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("D8~8D", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trim("~w/S3>40~jz_");
      assertEquals("~w/S3>40~jz_", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.abbreviateMiddle("~w/S3>40~jz_", "D8~8D", 7);
      assertEquals("~D8~8D_", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("l", "E<wj=OA[u-9V?|M");
      assertEquals("l", string0);
      assertNotNull(string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains("l"));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains("l"));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      boolean boolean0 = stack0.add((Object) listIterator0);
      assertFalse(stack0.contains("l"));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(boolean0);
      
      char char0 = '/';
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, '/');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      String string0 = "1'";
      String string1 = StringUtils.replaceChars("1'", "1'", "1'");
      assertEquals("1'", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.length("1'");
      assertEquals(2, int0);
      
      String string2 = "Strings must not be null";
      String string3 = StringUtils.center("1'", 2, "Strings must not be null");
      assertEquals("1'", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "1'");
      assertNotNull(predicate0);
      
      boolean boolean0 = priorityQueue0.removeIf(predicate0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(boolean0);
      
      Iterator<Locale.FilteringMode> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      boolean boolean1 = priorityQueue0.add(locale_FilteringMode0);
      assertTrue(priorityQueue0.contains(locale_FilteringMode0));
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char char0 = ';';
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, ';');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      String string0 = StringUtils.center("kl~7tcvw^e6]HLb5ltW ", 4305, "v");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("v", "v");
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((int[]) null, 'V');
      assertNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProviderArray and element cannot both be null", "2kcN");
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProviderArray and element cannot both be null", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "kl~7tcvw^e6]HLb5ltW ", (CharSequence) "<mO");
      assertEquals(0, int0);
      
      String string3 = StringUtils.abbreviateMiddle("*Gr`br'Q;kVa", "*Gr`br'Q;kVa", 12);
      assertEquals("*Gr`br'Q;kVa", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("kl~7tcvw^e6]HLb5ltW "));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string4 = StringUtils.join((Iterable<?>) linkedList0, " A");
      assertFalse(linkedList0.contains("kl~7tcvw^e6]HLb5ltW "));
      assertEquals(0, linkedList0.size());
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean1 = StringUtils.isAlpha("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProviderArray and element cannot both be null");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string5 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2471L;
      String string0 = "*KFt8!yyyyyyyy";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("*KFt8!yyyyyyyy", 2147483645, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("The character ", 'W');
      assertEquals("WThe character W", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStart("2_", "2_");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "ti`+\"ThvS}9>S", charArray0);
      assertArrayEquals(new char[] {'W', 'W'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "The character ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.strip("", "");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.remove("Comparator should not be null.", 'W');
      assertEquals("Comparator should not be null.", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = "";
      String string6 = StringUtils.normalizeSpace("");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      
      int int0 = 2466;
      String string7 = StringUtils.repeat('k', 2466);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)774;
      shortArray0[1] = (short)103;
      shortArray0[2] = (short)242;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, ')', 1, 2466);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 'z');
      assertNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("_tCw]vljHA2F`4d", (CharSequence) null, 2542);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayDeque0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = StringUtils.toRootLowerCase("org.apache.commons.lang3.ArrayUtils");
      assertEquals("org.apache.commons.lang3.arrayutils", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfBlank("org.apache.commons.lang3.ArrayUtils", supplier0);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllLowerCase("org.apache.commons.lang3.ArrayUtils");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripStart(" ", (String) null);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.right("^a<}1z8#cw?^lm&", (-1));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.toRootLowerCase((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.repeat("SzF;D|", 40);
      assertEquals("SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|SzF;D|", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.ArrayUtils", (CharSequence) "org.apache.commons.lang3.ArrayUtils");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'z');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.defaultString("hPPf(.1gu^}urW6<", "25");
      assertEquals("hPPf(.1gu^}urW6<", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "<mO.>+ ");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string1 = StringUtils.replaceFirst("?W'QlsU ", "Cannot clear and set the following entries at the same time: ", "hPPf(.1gu^}urW6<");
      assertEquals("?W'QlsU ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("org.junitpioneer.jupiter.EnvironmentVariableExtension", (-1));
      assertEquals("org.junitpioneer.jupiter.EnvironmentVariableExtension", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.truncate("", 0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "<mO.>+ ", 0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("<mO.>+ ", "Cannot clear and set the following entries at the same time: ", false);
      assertEquals((-7), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.", '\"');
      assertEquals("\"This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.\"", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.";
      stringArray0[1] = "\"This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.\"";
      stringArray0[2] = "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.";
      stringArray0[3] = "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.";
      stringArray0[4] = "\"This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.\"";
      stringArray0[5] = "\"This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.\"";
      stringArray0[6] = "\"This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.\"";
      String string1 = StringUtils.replaceEach("\"This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.\"", stringArray0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("\"This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.\"", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultIfEmpty((String) null, "\"This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.\"");
      assertEquals("\"This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.\"", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      short[] shortArray0 = new short[0];
      String string3 = StringUtils.join(shortArray0, '\"');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.replaceAll("\r", "", "\r");
      assertEquals("\r\r\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase(" ", "\n");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat("\n", (-30));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBeforeLast("\r\r\r", "");
      assertEquals("\r\r\r", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "xd7>EYR");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = '\'';
      char char0 = '5';
      charArray0[2] = '5';
      charArray0[3] = 'w';
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "\r\r\r";
      objectArray0[1] = (Object) 'p';
      objectArray0[2] = (Object) '5';
      objectArray0[3] = (Object) " ";
      objectArray0[4] = (Object) '\'';
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'C', 2, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("", 322, (String) null);
      assertEquals("                                                                                                                                                                                                                                                                                                                                  ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "                                                                                                                                                                                                                                                                                                                                  ";
      charSequenceArray0[1] = (CharSequence) "                                                                                                                                                                                                                                                                                                                                  ";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "...";
      String string3 = StringUtils.appendIfMissingIgnoreCase("", "0o)8", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "                                                                                                                                                                                                                                                                                                                                  ", (CharSequence) "", 4309);
      assertEquals(322, int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(charSequenceArray0[5]);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      String string0 = StringUtils.substringAfter("(vUzowgkj!,bS", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      String string0 = StringUtils.substringBefore("G;JOEX1c.;6% ", "G;JOEX1c.;6% ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.repeat("G;JOEX1c.;6% ", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      String string0 = StringUtils.removeEnd("%s was not annotated with @ArgumentsSource but should have been.", "%s was not annotated with @ArgumentsSource but should have been.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate((String) null, "%s was not annotated with @ArgumentsSource but should have been.", 716);
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "%s was not annotated with @ArgumentsSource but should have been.", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      String string0 = StringUtils.substringBefore("s>ZP7I", "s>ZP7I");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.appendIfMissing(" PiOW{", "M", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals(" PiOW{M", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(" PiOW{M").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertEquals(" PiOW{M", charSequence0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace(" PiOW{M");
      assertFalse(boolean0);
      
      String string2 = StringUtils.LF;
      assertEquals("\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "M", charArray0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.abbreviateMiddle("M", "s>ZP7I", (-1610612734));
      assertEquals("M", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.join((double[]) null, '{', 9, 717);
      assertNull(string4);
      
      String string5 = StringUtils.chomp("\n");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      
      String string6 = StringUtils.replaceChars("Sd~k-fd5R /7%UL", "M", "ezD,V0:O");
      assertEquals("Sd~k-fd5R /7%UL", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.stripToNull("\n");
      assertNull(string7);
      
      byte[] byteArray0 = StringUtils.getBytes("M", (String) null);
      assertArrayEquals(new byte[] {(byte)77}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string8 = StringUtils.defaultString("e<G'K");
      assertEquals("e<G'K", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("0[+NT1}un:&<c", "0[+NT1}un:&<c");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("0[+NT1}un:&<c", "org.junitpioneer.jupiter.params.IntRange", "<mO", 2788);
      assertEquals("0[+NT1}un:&<c", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceIgnoreCase((String) null, "0[+NT1}un:&<c", "org.junitpioneer.jupiter.params.IntRange");
      assertNull(string2);
      
      String string3 = StringUtils.repeat("t", 2651);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.substringBetween("Locale must not be null", "0[+NT1}un:&<c");
      assertNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.chomp("");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.params.IntRange", "org.junitpioneer.jupiter.params.IntRange", 234);
      assertEquals(41, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", '*');
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny("t", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("0[+NT1}un:&<c");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("HdtZy!wh>u", "72 &M1$tft/8ICMethod `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d].");
      assertEquals(0.39, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      String string0 = StringUtils.substringBefore("sZP7I", "org.junitpioneer.jupiter.paams.Range");
      assertEquals("sZP7I", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "sZP7I", (CharSequence) "sZP7I");
      assertEquals(0, int0);
      
      String string1 = StringUtils.unwrap("tf/j0t-K", '\u0019');
      assertEquals("tf/j0t-K", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "sZP7I";
      boolean boolean0 = StringUtils.equalsAny("org.junitpioneer.jupiter.paams.Range", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains('\u0019'));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add((Object) "tf/j0t-K");
      assertTrue(linkedList0.contains("tf/j0t-K"));
      assertFalse(linkedList0.contains('\u0019'));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      boolean boolean2 = linkedList0.add((Object) locale_FilteringMode0);
      assertTrue(linkedList0.contains("tf/j0t-K"));
      assertFalse(linkedList0.contains('\u0019'));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertTrue(linkedList0.contains("tf/j0t-K"));
      assertFalse(linkedList0.contains('\u0019'));
      assertEquals(2, linkedList0.size());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, "org.junitpioneer.jupiter.paams.Range");
      assertTrue(linkedList0.contains("tf/j0t-K"));
      assertFalse(linkedList0.contains('\u0019'));
      assertEquals(2, linkedList0.size());
      assertEquals("tf/j0t-Korg.junitpioneer.jupiter.paams.RangeAUTOSELECT_FILTERING", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean3 = StringUtils.isNumeric("tf/j0t-Korg.junitpioneer.jupiter.paams.RangeAUTOSELECT_FILTERING");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      boolean boolean4 = StringUtils.isMixedCase("sZP7I");
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      String string0 = StringUtils.leftPad("<mO", 4305, '3');
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceAll("<mO", "<mO", string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(".Li%`v/6kR,n91$3", string0, 21);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      assertTrue(string0.equals((Object)string1));
      
      String string2 = StringUtils.EMPTY;
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank(".Li%`v/6kR,n91$3");
      assertFalse(boolean0);
      
      String string3 = StringUtils.leftPad("CmRj=6Fn9'r0QeQSPg/3LGfyq:;kqF", 21, "org.junitpioneer.jupiter.ReportEntryExtension");
      assertEquals("CmRj=6Fn9'r0QeQSPg/3LGfyq:;kqF", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Locale must not be null", "Locale must not be null");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceFirst("", "Locale must not be null", "Class %s not found, referenced in method %s");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("X{9]", "e-3i}Q ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("aM1^>!?:q3");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("%s was not annotated with %s or %s but should have been.", "", true);
      assertEquals(56, int0);
      
      boolean boolean1 = StringUtils.isNotEmpty("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("Q(;D[Sb0HN;82H_HI5Oo$hv7c<mO.>+", "", "Oo$hv7c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.stripEnd("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviateMiddle("wJwB", "", 3781);
      assertEquals("wJwB", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "wJwB", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.abbreviateMiddle("'D4", "(+Y.9.:", 1);
      assertEquals("'D4", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.upperCase("'D4");
      assertEquals("'D4", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "(+Y.9.:", (CharSequence) "'D4");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String string5 = StringUtils.abbreviate("Aborting to protect against StackOverflowError - output of one loop is the input of another", "'D4", 1087, 9);
      assertEquals("'D4nother", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string6 = StringUtils.join((float[]) null, '8');
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '~');
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize("\n\r");
      assertEquals("\n\r", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "\n\r", '~');
      assertEquals(0, int0);
      
      Vector<String> vector0 = new Vector<String>();
      assertFalse(vector0.contains("\n\r"));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, '~', 0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 100
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "(^MoF_&*GQF>mhkM+");
      assertEquals("(^MoF_&*GQF>mhkM+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("(^MoF_&*GQF>mhkM+", "(^MoF_&*GQF>mhkM+");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("(^MoF_&*GQF>mhkM+");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.getDigits("Search and Replace array lengths don't match: ");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("(^MoF_&*GQF>mhkM+", 0, 'w');
      assertEquals("(^MoF_&*GQF>mhkM+", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceAll("", "Search and Replace array lengths don't match: ", "Object varargs must not be null");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.substringBefore("(^MoF_&*GQF>mhkM+", "");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringBefore("\n", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.US;
      assertSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertNotNull(locale1);
      
      String string0 = StringUtils.removeEndIgnoreCase("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = locale1.getDisplayLanguage();
      assertSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("English", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = locale0.getScript();
      assertSame(locale0, locale1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains(string1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) linkedHashSet0);
      assertFalse(linkedHashSet0.contains(string1));
      assertFalse(list0.contains(string1));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string3 = Locale.lookupTag(vector0, list0);
      assertFalse(linkedHashSet0.contains(string1));
      assertFalse(list0.contains(string1));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(string3);
      
      String string4 = locale1.getDisplayScript();
      assertSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      
      Locale locale2 = Locale.TAIWAN;
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("zh_TW", locale2.toString());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("TW", locale2.getCountry());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      
      String string5 = StringUtils.wrap("Minimum abbreviation width is %d", "H-d;q82BOFFGUY");
      assertEquals("H-d;q82BOFFGUYMinimum abbreviation width is %dH-d;q82BOFFGUY", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.chomp("\n");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      
      String string7 = StringUtils.leftPad("bI?#1cH", 56);
      assertEquals("                                                 bI?#1cH", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.replaceChars("8j'", "", "W#P|");
      assertEquals("8j'", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      
      String string9 = StringUtils.unwrap("Es*wdNgph4WE<l*#", '>');
      assertEquals("Es*wdNgph4WE<l*#", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '\"');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.toRootLowerCase("\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase(" ", "\n");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat("\n", 198);
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.difference("\r", " ");
      assertEquals(" ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.wrapIfMissing("1.\"mGO-/%t*M$Q\"g\"E!", "");
      assertEquals("1.\"mGO-/%t*M$Q\"g\"E!", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.wrap("\n", "xc#+Q,cU[bfQr>MGX");
      assertEquals("xc#+Q,cU[bfQr>MGX\nxc#+Q,cU[bfQr>MGX", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertEquals(5, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertEquals(5, enumSet0.size());
      assertNotNull(iterator0);
      
      String string6 = StringUtils.join((Iterator<?>) null, '\u000F');
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'V');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("", (-991), "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.trimToEmpty("glhX6Q%~nGz7Sd7");
      assertEquals("glhX6Q%~nGz7Sd7", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeEndIgnoreCase("Minimum abbreviation width is %d", "9gA{~E)(Lc!9IUh");
      assertEquals("Minimum abbreviation width is %d", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.abbreviate("glhX6Q%~nGz7Sd7", (-1), 1131);
      assertEquals("glhX6Q%~nGz7Sd7", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "glhX6Q%~nGz7Sd7", (CharSequence) "");
      assertEquals(15, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String[] stringArray0 = new String[7];
      stringArray0[0] = "G_SM";
      charSequenceArray0[0] = (CharSequence) "G_SM";
      stringArray0[2] = "G_SM";
      stringArray0[4] = "G_SM";
      String string0 = StringUtils.defaultIfBlank("G_SM", "k,1u!F");
      assertEquals("G_SM", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "G_SM", (CharSequence) "k,1u!F");
      assertEquals(0, int0);
      
      String string1 = StringUtils.wrap(",8:Z>R-I8LW", stringArray0[1]);
      assertEquals(7, stringArray0.length);
      assertEquals(",8:Z>R-I8LW", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("OA4.yP:5?p");
      assertEquals("OA4.yP:5?p", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeStart("G_SM", "G_SM");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.replaceIgnoreCase("nw|/a2", "Strings must not be null", ">0Bl");
      assertEquals("nw|/a2", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.repeat("+F(}|8:~l`!KdFa1HB4;tFW&LtvO@v)+", 1);
      assertEquals("+F(}|8:~l`!KdFa1HB4;tFW&LtvO@v)+", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      char char0 = 'k';
      String string1 = StringUtils.reverseDelimited(" ", 'k');
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) " ");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split(" ", " ", 2836);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.rotate(" ", (-42));
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-117);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '~', 0, 111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      String string0 = StringUtils.upperCase("r");
      assertEquals("R", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("r", "r", 16);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      String string0 = StringUtils.stripEnd("pL?`X ", "pL?`X ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("", (String) null, true);
      assertEquals(1, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 295);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = " has no clone method";
      int int2 = StringUtils.compareIgnoreCase((String) null, " has no clone method", true);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string2 = "Extension context \"";
      Locale locale0 = new Locale("BpW(", "Extension context \"", "BpW(");
      assertEquals("EXTENSION CONTEXT \"", locale0.getCountry());
      assertEquals("bpw(_EXTENSION CONTEXT \"_BpW(", locale0.toString());
      assertEquals("BpW(", locale0.getVariant());
      assertEquals("bpw(", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.GERMAN;
      assertNotSame(locale1, locale0);
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = locale0.getDisplayCountry(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("EXTENSION CONTEXT \"", locale0.getCountry());
      assertEquals("bpw(_EXTENSION CONTEXT \"_BpW(", locale0.toString());
      assertEquals("BpW(", locale0.getVariant());
      assertEquals("bpw(", locale0.getLanguage());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("EXTENSION CONTEXT \"", string3);
      assertNotNull(string3);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains(string1));
      assertNotSame(locale0, locale1);
      assertEquals("EXTENSION CONTEXT \"", locale0.getCountry());
      assertEquals("bpw(_EXTENSION CONTEXT \"_BpW(", locale0.toString());
      assertEquals("BpW(", locale0.getVariant());
      assertEquals("bpw(", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(locale0.equals((Object)locale1));
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(" has no clone method", charSequenceArray0[0], locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      String string0 = StringUtils.center("%s: Could not resolve parameter by name (%s).", 91, 'r');
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrr%s: Could not resolve parameter by name (%s).rrrrrrrrrrrrrrrrrrrrrrr", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("rrrrrrrrrrrrrrrrrrrrrrr%s: Could not resolve parameter by name (%s).rrrrrrrrrrrrrrrrrrrrrrr", (-1153), "62Gy8r%vfTyZW$R");
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrr%s: Could not resolve parameter by name (%s).rrrrrrrrrrrrrrrrrrrrrrr", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("YZ\t5v\"ik>AdjfOq", "62Gy8r%vfTyZW$R", "org.apache.commons.lang3.StringUtils");
      assertNull(stringArray0);
      
      String string2 = StringUtils.chop(";> |");
      assertEquals(";> ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string3);
      
      String string4 = StringUtils.getDigits("W~g*(2%p%SNe#=");
      assertEquals("2", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.join((Iterable<?>) null, 'r');
      assertNull(string5);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("org.apache.commons.lang3.StringUtils"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "~>jZ$0!!n:ISMD", (-1153), 27);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1153
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      String string0 = StringUtils.join((Iterable<?>) null, '9');
      assertNull(string0);
      
      try { 
        StringUtils.toString(byteArray0, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\r", (CharSequence) "", Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeEnd("\r", "");
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("\r", 26, "\r");
      assertEquals("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.removeStart("\r", (String) null);
      assertEquals("\r", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.abbreviateMiddle("\r", "\r", 5);
      assertEquals("\r", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "\r");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.upperCase("");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "Acc>)2`zF]Z[Q&zrs`");
      assertTrue(boolean0);
      
      String string6 = StringUtils.substring("ExceptionWasThrown", 5, (-1));
      assertEquals("tionWasThrow", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.overlay("e+Y.(.:", "", (-1), 321);
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'G';
      intArray0[1] = (int) 'G';
      intArray0[1] = (int) 'G';
      String string0 = StringUtils.join(intArray0, 'd');
      assertArrayEquals(new int[] {71, 71, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("71d71d0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replacePattern("71d71d0", "71d71d0", "71d71d0");
      assertEquals("71d71d0", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate("71d71d0", "t", 2, 2);
      assertEquals("7t", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.trimToNull("7t");
      assertEquals("7t", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'V');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("4vlqh|m[m|2", "", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.getDigits("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.rightPad("", 0, '=');
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      
      String string5 = StringUtils.replaceAll("Object varargs must not be null", (String) null, "");
      assertEquals("Object varargs must not be null", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited(" ", 'k');
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) " ");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split(" ", "\"T*Vx|EEkG0'4", 2836);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.abbreviate("", 1664, 108);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.appendIfMissingIgnoreCase(" ", "", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(" ", string3);
      assertNotNull(string3);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String[] stringArray2 = StringUtils.split("The character ", " ", 1664);
      assertEquals(2, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string4 = StringUtils.stripAccents("org.junitpioneer.jupiter.StdIoExtension");
      assertEquals("org.junitpioneer.jupiter.StdIoExtension", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray3 = StringUtils.splitByCharacterTypeCamelCase(" ");
      assertEquals(1, stringArray3.length);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertNotNull(stringArray3);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      
      boolean boolean0 = StringUtils.isMixedCase("\"T*Vx|EEkG0'4");
      assertTrue(boolean0);
      
      String[] stringArray4 = StringUtils.split("Test method must declare at least one parameter: ", "");
      assertEquals(1, stringArray4.length);
      assertNotSame(stringArray4, stringArray0);
      assertNotSame(stringArray4, stringArray3);
      assertNotSame(stringArray4, stringArray1);
      assertNotSame(stringArray4, stringArray2);
      assertNotNull(stringArray4);
      assertFalse(stringArray4.equals((Object)stringArray0));
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "The character ", (CharSequence[]) stringArray3);
      assertEquals(1, stringArray3.length);
      assertNotSame(stringArray3, stringArray4);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertTrue(boolean1);
      assertFalse(stringArray3.equals((Object)stringArray4));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray5 = StringUtils.stripAll(stringArray1, "Gb%VJH-&2;");
      assertEquals(2, stringArray1.length);
      assertEquals(2, stringArray5.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray5);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray4);
      assertNotSame(stringArray1, stringArray3);
      assertNotSame(stringArray5, stringArray3);
      assertNotSame(stringArray5, stringArray4);
      assertNotSame(stringArray5, stringArray1);
      assertNotSame(stringArray5, stringArray2);
      assertNotSame(stringArray5, stringArray0);
      assertNotNull(stringArray5);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray4));
      assertFalse(stringArray1.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Gb%VJH-&2;", (CharSequence) "The character ");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.leftPad("K6LX,8m3hK~FJ^", 0, "");
      assertEquals("K6LX,8m3hK~FJ^", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean2 = StringUtils.isAllUpperCase("The character ");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.lowerCase("G_SM");
      assertEquals("g_sm", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "g_sm";
      String string1 = StringUtils.wrapIfMissing("ZnYB+p;%%m?XN3#", '[');
      assertEquals("[ZnYB+p;%%m?XN3#[", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "[ZnYB+p;%%m?XN3#[";
      String string2 = StringUtils.leftPad("G_SM", (-304), "[ZnYB+p;%%m?XN3#[");
      assertEquals("G_SM", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "G_SM";
      String string3 = StringUtils.toRootLowerCase("g_sm");
      assertEquals("g_sm", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      charSequenceArray0[3] = (CharSequence) "g_sm";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfBlank("VuBA", supplier0);
      assertEquals("VuBA", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isAllLowerCase(charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.stripStart("-m;$y|d,2", "g_sm");
      assertEquals("-m;$y|d,2", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      locale_FilteringModeArray0[4] = locale_FilteringMode0;
      locale_FilteringModeArray0[5] = locale_FilteringMode0;
      locale_FilteringModeArray0[6] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(7, locale_FilteringModeArray0.length);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(7, locale_FilteringModeArray0.length);
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      
      String string6 = StringUtils.join(iterator0, 'E');
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(7, locale_FilteringModeArray0.length);
      assertEquals(1, enumSet0.size());
      assertEquals("IGNORE_EXTENDED_RANGES", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.replaceChars("VuBA", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertEquals("VB", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      
      String string8 = StringUtils.deleteWhitespace("Z>9i#q@5a7");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      String string0 = StringUtils.replaceChars("fp-9-m2+{w^8", ":{4{ol$", (String) null);
      assertEquals("fp-9-m2+w^8", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) " ";
      String[] stringArray0 = new String[8];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[3] = " ";
      stringArray0[4] = " ";
      stringArray0[5] = "~>p61p]";
      stringArray0[6] = " ";
      stringArray0[7] = " ";
      String string1 = StringUtils.replaceEach(" ", stringArray0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) " ");
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringAfterLast("\n", " ");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, "CL6~5", "Strings must not be null", 2494);
      assertNull(string3);
      
      String string4 = StringUtils.stripEnd("CL6~5", " ");
      assertEquals("CL6~5", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.normalizeSpace("");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.substringsBetween("~#MsKeGDJ kE", "org.junitpioneer.vintage.TimeoutExtension", " ");
      assertNull(stringArray1);
      
      String string6 = StringUtils.substringBeforeLast("g`", "*y4i2f AO");
      assertEquals("g`", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) " ", (CharSequence) "g`");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", charSequenceArray0[0], 0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) " ", (-612), (-2619));
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      String string7 = StringUtils.rightPad("CL6~5", 5, "~>p61p]");
      assertEquals("CL6~5", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      String string0 = StringUtils.leftPad("(8-Mx#!3JxGUl $", 110);
      assertEquals("                                                                                               (8-Mx#!3JxGUl $", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("                                                                                               (8-Mx#!3JxGUl $", "                                                                                               (8-Mx#!3JxGUl $");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("                                                                                               (8-Mx#!3JxGUl $");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase("org.junitpioneer.jupiter.DisableIfTestFailsExtension", "i ");
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStartIgnoreCase((String) null, ";b5");
      assertNull(string2);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = new String[3];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = ";b5";
      stringArray2[1] = "org.junitpioneer.jupiter.DisableIfTestFailsExtension";
      stringArray2[2] = "org.junitpioneer.jupiter.DisableIfTestFailsExtension";
      String string3 = StringUtils.getCommonPrefix(stringArray2);
      assertEquals(3, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      String string0 = StringUtils.difference("(?V9kmrjyQ<34", "cbs");
      assertEquals("cbs", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "xmY.x&Pt2aP&NOpGUU'");
      assertNull(string1);
      
      String string2 = StringUtils.wrap("", "cbs");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertEquals(5, enumSet0.size());
      assertNotNull(enumSet0);
      
      String string3 = StringUtils.right((String) null, 1897);
      assertNull(string3);
      
      String string4 = StringUtils.toRootLowerCase("/0sjJ(b2");
      assertEquals("/0sjj(b2", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 1897);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("cbs", ';');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("", "lQyHpV]|i#`,~E@", (-1));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad("offset cannot be negative", 55, "lQyHpV]|i#`,~E@");
      assertEquals("offset cannot be negativelQyHpV]|i#`,~E@lQyHpV]|i#`,~E@", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.trimToEmpty("sActoU`[}rE>rGf;@");
      assertEquals("sActoU`[}rE>rGf;@", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string3 = StringUtils.stripAccents("lQyHpV]|i#`,~E@");
      assertEquals("lQyHpV]|i#`,~E@", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertFalse(arrayList1.contains(string3));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      String string4 = StringUtils.stripStart(";E\"", "jI..~`?FGIv~");
      assertEquals(";E\"", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.right((String) null, 4446);
      assertNull(string5);
      
      String string6 = StringUtils.toRootLowerCase("lQyHpV]|i#`,~E@");
      assertEquals("lqyhpv]|i#`,~e@", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.repeat('Q', 14);
      assertEquals("QQQQQQQQQQQQQQ", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      
      String string8 = StringUtils.join((double[]) null, 'k');
      assertNull(string8);
      
      String string9 = StringUtils.stripStart("sActoU`[}rE>rGf;@", "lQyHpV]|i#`,~E@");
      assertEquals("sActoU`[}rE>rGf;@", string9);
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      
      String string10 = StringUtils.defaultString(": ");
      assertEquals(": ", string10);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      
      boolean boolean1 = StringUtils.isAlpha(": ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "F>FL=p8r%p0vjdoQ+,_");
      assertEquals("F>FL=p8r%p0vjdoQ+,_", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "F>FL=p8r%p0vjdoQ+,_";
      String string1 = StringUtils.stripAccents("F>FL=p8r%p0vjdoQ+,_");
      assertEquals("F>FL=p8r%p0vjdoQ+,_", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Gb%VJH-&2;");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isMixedCase("F>FL=p8r%p0vjdoQ+,_");
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2147483645;
      intArray0[1] = 99;
      intArray0[2] = 2770;
      intArray0[3] = 2147483645;
      intArray0[4] = 149;
      intArray0[6] = 99;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '>', 5, 2147483645);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Minimum abbrevQation width with ofset is %d");
      assertEquals("Minimum abbrevQation width with ofset is %d", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Minimum abbrevQation width with ofset is %d");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center((String) null, 17, 'n');
      assertNull(string1);
      
      String string2 = StringUtils.strip((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("zb=");
      assertEquals("zb=", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Iterator<?>) null, "zb=");
      assertNull(string1);
      
      String string2 = StringUtils.rotate("zb=", 26);
      assertEquals("b=z", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "b=z";
      charSequenceArray0[1] = (CharSequence) "zb=";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      String string3 = StringUtils.stripAccents("Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviation width is %d", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width is %d";
      charSequenceArray0[5] = (CharSequence) "b=z";
      String string4 = StringUtils.abbreviate("zb=", 26);
      assertEquals("zb=", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      
      charSequenceArray0[6] = (CharSequence) "zb=";
      charSequenceArray0[7] = (CharSequence) "zb=";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string5 = StringUtils.wrapIfMissing("zb=", "Cannot clone Cloneable type ");
      assertEquals("Cannot clone Cloneable type zb=Cannot clone Cloneable type ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Cannot clone Cloneable type ", charSequenceArray0[1], 2);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isNumericSpace("zb=");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumeric("zb=");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string6 = StringUtils.deleteWhitespace((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.chop("J*|ZHM:");
      assertEquals("J*|ZHM", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 26;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) 2;
      longArray0[8] = (long) 26;
      String string8 = StringUtils.join(longArray0, 'U', 2348, 2);
      assertArrayEquals(new long[] {2L, 26L, 2L, (-1L), (-1L), (-1L), (-1L), 2L, 26L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEnd(" ", "\r");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad(" ", 0, " ");
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsIgnoreCase(" ", "\r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringAfterLast("\r", 0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(" ", "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.substringBeforeLast("@i2(4Q", (String) null);
      assertEquals("@i2(4Q", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "@i2(4Q";
      charSequenceArray0[3] = (CharSequence) " ";
      String string5 = StringUtils.rotate(" ", 40);
      assertEquals(" ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      
      String string6 = StringUtils.left("@DisableIfDisplayName requires that either `contains` or `matches` is specifiedl butjboth are", 0);
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase((String) null, "`", false);
      assertEquals(1, int0);
      
      String string0 = StringUtils.stripAccents("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, 1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase((String) null, "Locale must not be null", true);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripAccents("2");
      assertEquals("2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      String string0 = StringUtils.stripEnd("pL?`X ", "pL?`X ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("", (String) null, true);
      assertEquals(1, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 295);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "pL?`X ";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int2 = StringUtils.compareIgnoreCase((String) null, " has no clone method", false);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      Locale locale0 = new Locale("BpW(", "Extension context \"", "BpW(");
      assertEquals("bpw(", locale0.getLanguage());
      assertEquals("EXTENSION CONTEXT \"", locale0.getCountry());
      assertEquals("bpw(_EXTENSION CONTEXT \"_BpW(", locale0.toString());
      assertEquals("BpW(", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.GERMAN;
      assertNotSame(locale1, locale0);
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      String string1 = locale0.getDisplayCountry(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("bpw(", locale0.getLanguage());
      assertEquals("EXTENSION CONTEXT \"", locale0.getCountry());
      assertEquals("bpw(_EXTENSION CONTEXT \"_BpW(", locale0.toString());
      assertEquals("BpW(", locale0.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("EXTENSION CONTEXT \"", string1);
      assertNotNull(string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("pL?`X "));
      assertNotSame(locale0, locale1);
      assertEquals("bpw(", locale0.getLanguage());
      assertEquals("EXTENSION CONTEXT \"", locale0.getCountry());
      assertEquals("bpw(_EXTENSION CONTEXT \"_BpW(", locale0.toString());
      assertEquals("BpW(", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(locale0.equals((Object)locale1));
      
      int int3 = StringUtils.getFuzzyDistance(" has no clone method", charSequenceArray0[0], locale0);
      assertEquals(1, charSequenceArray0.length);
      assertNotSame(locale0, locale1);
      assertEquals("bpw(", locale0.getLanguage());
      assertEquals("EXTENSION CONTEXT \"", locale0.getCountry());
      assertEquals("bpw(_EXTENSION CONTEXT \"_BpW(", locale0.toString());
      assertEquals("BpW(", locale0.getVariant());
      assertEquals(0, int3);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      String string2 = StringUtils.difference(" has no clone method", "X");
      assertEquals("X", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int4 = StringUtils.indexOf((CharSequence) "X", 40, 27);
      assertEquals((-1), int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      
      String[] stringArray0 = StringUtils.split(" has no clone method");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertFalse(arrayDeque0.contains(locale1));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Locale locale2 = Locale.lookup(linkedList0, arrayDeque0);
      assertFalse(arrayDeque0.contains(locale1));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, linkedList0.size());
      assertNull(locale2);
      
      Set<Character> set1 = locale1.getExtensionKeys();
      assertNotSame(locale1, locale0);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertNotNull(set1);
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = StringUtils.repeat(" AR_<;!9r(,U.", (-2421));
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.unwrap("", "EXTENSION CONTEXT \"");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.capitalize("Extension context \"");
      assertEquals("Extension context \"", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.overlay("", " AR_<;!9r(,U.", (-2421), (-2421));
      assertEquals(" AR_<;!9r(,U.", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.swapCase(" AR_<;!9r(,U.");
      assertEquals(" ar_<;!9R(,u.", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      String string0 = StringUtils.substringAfter("0k#", ">7khZ(k,x<Z{Kg");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.swapCase("The character must not be null");
      assertEquals("tHE CHARACTER MUST NOT BE NULL", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("b7C-&!L1wh1e?yb5b+H");
      assertEquals("b7C-&!L1wh1e?yb5b+H", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.defaultIfBlank("5", "Strings mustDnot be null");
      assertEquals("5", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Strings mustDnot be null", (CharSequence) "");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substringAfter("", (-449));
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.wrap("", "uq%@T");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.chomp("5");
      assertEquals("5", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.defaultString("D~");
      assertEquals("D~", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.defaultString(" ");
      assertEquals(" ", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      
      int int1 = StringUtils.ordinalIndexOf("tHE CHARACTER MUST NOT BE NULL", " ", 27);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("oeE%`oTXht:|\"g5", "xd7>EYR");
      assertEquals("oeE%`oTXht:|\"g5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("Strings must not be null");
      assertEquals("Stringsmustnotbenull", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "oeE%`oTXht:|\"g5", (CharSequence) "Stringsmustnotbenull");
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.join(byteArray0, '0');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceChars("xd7>EYR", ':', '6');
      assertEquals("xd7>EYR", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.rightPad("oeE%`oTXht:|\"g5", 0, '0');
      assertEquals("oeE%`oTXht:|\"g5", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "xd7>EYR", (int) (byte) (-50));
      assertFalse(boolean0);
      
      String string5 = StringUtils.repeat('0', (-256));
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean1 = StringUtils.isAlpha("Strings must not be null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "oeE%`oTXht:|\"g5", supplier0);
      assertEquals("oeE%`oTXht:|\"g5", charSequence0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string5));
      assertTrue(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAlphanumeric("oeE%`oTXht:|\"g5");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "oeE%`oTXht:|\"g5", (CharSequence) "xd7>EYR");
      assertEquals(15, int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "oeE%`oTXht:|\"g5";
      charSequenceArray0[1] = (CharSequence) "Strings must not be null";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean3 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare((String) null, (String) null, false);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      String string3 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string3);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.replaceIgnoreCase("Iv_7YZ s?u>%Q?4gy", "At@3#Z@", (String) null, (-1));
      assertEquals("Iv_7YZ s?u>%Q?4gy", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.startsWithAny("Iv_7YZ s?u>%Q?4gy", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string5);
      
      String string6 = StringUtils.chomp((String) null, " annotation, but there were ");
      assertNull(string6);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Iv_7YZ s?u>%Q?4gy";
      stringArray0[1] = " annotation, but there were ";
      stringArray0[2] = null;
      stringArray0[3] = " annotation, but there were ";
      stringArray0[4] = null;
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", 103);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripStart("<mO.>+", "");
      assertEquals("<mO.>+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r\n", "\r\n", 65530);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "J7}0xd'F";
      stringArray1[1] = "J7}0xd'F";
      stringArray1[2] = "%j2";
      stringArray1[3] = "%j2";
      stringArray1[4] = "%j2";
      stringArray1[5] = "%j2";
      stringArray1[6] = "%j2";
      stringArray1[7] = "J7}0xd'F";
      stringArray1[8] = "%j2";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("%j2", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 2 vs 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      String string0 = StringUtils.substringBefore("sZP7I", "org.junitpioneer.jupiter.params.Range");
      assertEquals("sZP7I", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "sZP7I", (CharSequence) "sZP7I");
      assertEquals(0, int0);
      
      String string1 = StringUtils.center("sZP7I", 67, "sZP7I");
      assertEquals("sZP7IsZP7IsZP7IsZP7IsZP7IsZP7IssZP7IsZP7IsZP7IsZP7IsZP7IsZP7IsZP7Is", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("sZP7I", "sZP7I");
      assertTrue(boolean0);
      
      String string2 = StringUtils.join((int[]) null, 'c');
      assertNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase((String) null, "sZP7IsZP7IsZP7IsZP7IsZP7IsZP7IssZP7IsZP7IsZP7IsZP7IsZP7IsZP7IsZP7Is");
      assertNull(string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "sZP7I", (CharSequence) "org.junitpioneer.jupiter.params.Range");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.abbreviateMiddle("sZP7I", "y>", 0);
      assertEquals("sZP7I", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) null, (-265));
      assertEquals((-1), int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      
      boolean boolean1 = StringUtils.isNotEmpty("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      String string0 = StringUtils.defaultString("\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "\r", Integer.MAX_VALUE);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\r", (char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("\r");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange");
      assertNull(string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains("org.junitpioneer.jupiter.params.ShortRange"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.startsWithAny("org.junitpioneer.jupiter.params.ShortRange", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.params.ShortRange");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.defaultString((String) null, "<mO8HWC2");
      assertEquals("<mO8HWC2", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.junitpioneer.jupiter.params.ShortRange", (CharSequence) "<mO8HWC2");
      assertEquals(41, int0);
      
      boolean boolean1 = StringUtils.isWhitespace("<mO8HWC2");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("<mO8HWC2", "]qMnF{QL*5|MufC[", "{8");
      assertEquals("<mO8HWC2", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.repeat("{8", 3);
      assertEquals("{8{8{8", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      String string0 = StringUtils.repeat("K ", 101);
      assertEquals("K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Strings must not be null vs ", 321);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("Strings must not be null vs ", "<MO.>+");
      assertNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[1] = 'c';
      String string2 = StringUtils.stripAccents("Strings must not be null vs ");
      assertEquals("Strings must not be null vs ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("blank_blank_blank_2014");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isMixedCase("blank_blank_blank_2014");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split((String) null, "LQ8>Iwv,WxDwXd91>");
      assertNull(stringArray1);
      
      String string3 = StringUtils.CR;
      assertEquals("\r", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\r", (CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "");
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray2.length);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      int int0 = StringUtils.indexOf((CharSequence) "\r", (CharSequence) "", 321);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string0 = StringUtils.substringBefore("@og-B}Xz_r, bA0]f0KlLmU", "@og-B}Xz_r, bA0]f0KlLmU");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.leftPad((String) null, 28, 'q');
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("@og-B}Xz_r, bA0]f0KlLmU");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.LF;
      assertEquals("\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "@og-B}Xz_r, bA0]f0KlLmU";
      charSequenceArray0[1] = (CharSequence) "@og-B}Xz_r, bA0]f0KlLmU";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      String string3 = StringUtils.center("\n", 321, "...");
      assertEquals("................................................................................................................................................................\n................................................................................................................................................................", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      charSequenceArray0[4] = (CharSequence) "................................................................................................................................................................\n................................................................................................................................................................";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "\n";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) "\n";
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", '^');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("IPUk)>d5-#)vQdn&", 0, "");
      assertEquals("IPUk)>d5-#)vQdn&", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("5S)CU;o", 3456, "IPUk)>d5-#)vQdn&");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharBuffer charBuffer0 = CharBuffer.allocate(5);
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = charBuffer0.put(':');
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.position());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(4, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1, charBuffer1.position());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(5, charBuffer1.limit());
      assertEquals(4, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(5, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertNotNull(charBuffer1);
      
      String string3 = StringUtils.remove("IPUk)>d5-#)vQdn&", '^');
      assertEquals("IPUk)>d5-#)vQdn&", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "IPUk)>d5-#)vQdn&", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "IPUk)>d5-#)vQdn&", (CharSequence) string2, 0);
      assertEquals((-1), int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("`C4Hg:KMg8'Wg|vS");
      assertEquals("`C4Hg:KMg8'Wg|vS", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithAny("`C4Hg:KMg8'Wg|vS", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "`C4Hg:KMg8'Wg|vS");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviate("Strings must not be null", 1585);
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("`C4Hg:KMg8'Wg|vS", "`C4Hg:KMg8'Wg|vS", (CharSequence[]) null);
      assertEquals("`C4Hg:KMg8'Wg|vS", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Strings must not be null", (CharSequence) "`C4Hg:KMg8'Wg|vS");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.compare("", "J}D,zvkN^hol L", false);
      assertEquals((-14), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.remove("Strings must not be null", "Strings must not be null");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "Strings must not be null", (CharSequence) "", 1585);
      assertEquals(24, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "`C4Hg:KMg8'Wg|vS", (CharSequence) "", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '<';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '<', (int) '<', 2604);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 60
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringAfter("\n", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3565.735308;
      doubleArray0[1] = 0.9259259259259259;
      doubleArray0[2] = (-1730.3191365251641);
      doubleArray0[3] = 3565.735308;
      doubleArray0[4] = (double) (-1);
      String string1 = StringUtils.join(doubleArray0, 'X');
      assertArrayEquals(new double[] {3565.735308, 0.9259259259259259, (-1730.3191365251641), 3565.735308, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals("3565.735308X0.9259259259259259X-1730.3191365251641X3565.735308X-1.0", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 3;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'o';
      longArray0[1] = (long) 'X';
      longArray0[2] = (long) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '.', (-1), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      String string0 = StringUtils.upperCase("<mO.>+");
      assertEquals("<MO.>+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("<mO.>+");
      assertEquals("<mO.>+", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllUpperCase("<MO.>+");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("<mO.>+", "<mO.>+", false);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<MO.>+";
      stringArray0[1] = "<MO.>+";
      String string2 = StringUtils.replaceEach("<MO.>+", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("<MO.>+", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = "xK*)m1Y^Em";
      int int1 = StringUtils.indexOfAny((CharSequence) "<MO.>+", "xK*)m1Y^Em");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.upperCase("<mO.>+");
      assertEquals("<MO.>+", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      
      String string5 = StringUtils.deleteWhitespace("11D:7V)C4?)JuB^l+;");
      assertEquals("11D:7V)C4?)JuB^l+;", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "<mO.>+";
      String string6 = StringUtils.abbreviate((String) null, 0, 728);
      assertNull(string6);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "xK*)m1Y^Em";
      charSequenceArray0[3] = (CharSequence) "<MO.>+";
      charSequenceArray0[4] = (CharSequence) "11D:7V)C4?)JuB^l+;";
      charSequenceArray0[5] = (CharSequence) "<MO.>+";
      int int2 = StringUtils.indexOfAny((CharSequence) "11D:7V)C4?)JuB^l+;", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("<MO.>+", "NADC3Bz.Hl(m", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 13
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("r-@kO#", ')');
      assertEquals(")r-@kO#)", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ")r-@kO#)", charArray0);
      assertArrayEquals(new char[] {')', ')', ')'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(1, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "r-@kO#", (CharSequence) ")r-@kO#)", (-1210));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.replacePattern("Only one method-level arguments source can be used with @CartesianTest", "r-@kO#", "r-@kO#");
      assertEquals("Only one method-level arguments source can be used with @CartesianTest", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNotEmpty("Only one method-level arguments source can be used with @CartesianTest");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string2 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {')', ')', ')'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(")))", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[0] = (CharSequence) ")))";
      boolean boolean1 = StringUtils.endsWithAny("r-@kO#", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNotEmpty("Only one method-level arguments source can be used with @CartesianTest");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray0 = StringUtils.split("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "offset cannot be negative");
      assertEquals(34, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.removeStartIgnoreCase("r-@kO#", ")))");
      assertEquals("r-@kO#", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "r-@kO#", charArray0);
      assertArrayEquals(new char[] {')', ')', ')'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)1431;
      shortArray0[3] = (short)26;
      String string4 = StringUtils.join(shortArray0, '|');
      assertArrayEquals(new short[] {(short)9, (short)5, (short)1431, (short)26}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals("9|5|1431|26", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2105.9473F);
      floatArray0[1] = (-2105.9473F);
      floatArray0[2] = (float) '}';
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '}');
      assertArrayEquals(new float[] {(-2105.9473F), (-2105.9473F), 125.0F, 1.0F, 1.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals("-2105.9473}-2105.9473}125.0}1.0}1.0}1.0}0.0}0.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad(" T", 77, ',');
      assertEquals(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, T", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "-2105.9473}-2105.9473}125.0}1.0}1.0}1.0}0.0}0.0", supplier0);
      assertEquals("-2105.9473}-2105.9473}125.0}1.0}1.0}1.0}0.0}0.0", charSequence0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace("-2105.9473}-2105.9473}125.0}1.0}1.0}1.0}0.0}0.0");
      assertFalse(boolean0);
      
      String string2 = StringUtils.LF;
      assertEquals("\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = '}';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\n", charArray0);
      assertArrayEquals(new char[] {',', '}'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.replaceIgnoreCase(" ", "E8#'qKZW=Q$@a<", "B");
      assertEquals(" ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      
      String string4 = StringUtils.repeat("]qMnF{QL*5|MufC[", 0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.substringAfter(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, T", " ");
      assertEquals("T", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("C^jez*1", 101);
      assertEquals("z*1", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("z*1");
      assertEquals("z*1", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Locale locale0 = new Locale("C^jez*1");
      assertEquals("", locale0.getISO3Country());
      assertEquals("c^jez*1", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("c^jez*1", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string2 = StringUtils.upperCase((String) null, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("c^jez*1", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("c^jez*1", locale0.getLanguage());
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      String string0 = StringUtils.upperCase("<mO.>+");
      assertEquals("<MO.>+", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "<MO.>+", (CharSequence) "<MO.>+", (-3515));
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEnd("<mO.>+", "<MO.>+");
      assertEquals("<mO.>+", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("<mO.>+", (-3515), "LiE");
      assertEquals("<mO.>+", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("<MO.>+");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.removeStart("<mO.>+", "\r");
      assertEquals("<mO.>+", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.defaultIfBlank("LiE", (String) null);
      assertEquals("LiE", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "<mO.>+", (CharSequence) "\r");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.substringAfter("LiE", 0);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.wrap("\r", "(0>B");
      assertEquals("(0>B\r(0>B", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.chomp("\r");
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.leftPad("\"YZ,(Yd;.%OFmaSe8^>S&", (-2988));
      assertEquals("\"YZ,(Yd;.%OFmaSe8^>S&", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      
      String string9 = StringUtils.replaceChars("(0>B", "<mO.>+", "");
      assertEquals("(0B", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      
      String string10 = StringUtils.unwrap("<mO.>+", '>');
      assertEquals("<mO.>+", string10);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string1));
      assertTrue(string10.equals((Object)string2));
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "(0>B", (CharSequence) null, (-66));
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string11 = StringUtils.substringAfter("<MO.>+", "<mO.>+");
      assertEquals("", string11);
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string1));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-2);
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      String string0 = StringUtils.substringAfter("0k#", "0k#");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.swapCase("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase("0k#");
      assertEquals("0K#", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeFirst((String) null, "0k#");
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null, (-1062));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "0K#", (CharSequence) "CartesianEnumSource annotation not found", (-2875));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("\r");
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "\r");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.difference("Node ", "Node ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[0];
      String string1 = StringUtils.join(doubleArray0, 'b');
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'b';
      longArray0[1] = (long) (-1);
      longArray0[2] = (-1174L);
      longArray0[3] = (long) (-1);
      longArray0[4] = (-710L);
      longArray0[5] = (long) '(';
      longArray0[6] = 590L;
      String string2 = StringUtils.join(longArray0, 'b', 19, 3);
      assertArrayEquals(new long[] {98L, (-1L), (-1174L), (-1L), (-710L), 40L, 590L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange");
      assertNull(string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains("org.junitpioneer.jupiter.params.ShortRange"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.substring("Tp&h1!t:',\"uK.", 199, (-513));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("16;-MDc\"p_Y");
      assertEquals("16;-MDc\"p_Y", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.reverse("org.junitpioneer.jupiter.AbstractEntryBasedExtension");
      assertEquals("noisnetxEdesaByrtnEtcartsbA.retipuj.reenoiptinuj.gro", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.EMPTY;
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "org.junitpioneer.jupiter.params.ShortRange", (CharSequence) "StdIo_System_Out", 25);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[1] = (CharSequence) "noisnetxEdesaByrtnEtcartsbA.retipuj.reenoiptinuj.gro";
      charSequenceArray0[2] = (CharSequence) "noisnetxEdesaByrtnEtcartsbA.retipuj.reenoiptinuj.gro";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "Tp&h1!t:',\"uK.";
      charSequenceArray0[5] = (CharSequence) "";
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-5124);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)5;
      String string5 = StringUtils.join(shortArray0, 'T', (int) (short)5, (int) (short)1);
      assertArrayEquals(new short[] {(short) (-5124), (short)1, (short)5}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string6 = StringUtils.getIfBlank("\n", supplier0);
      assertNull(string6);
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      String string7 = StringUtils.join(locale_FilteringModeArray0);
      assertEquals(1, locale_FilteringModeArray0.length);
      assertEquals("MAP_EXTENDED_RANGES", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.lowerCase("G_SM");
      assertEquals("g_sm", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "g_sm";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "G_SM";
      stringArray0[1] = "G_SM";
      stringArray0[2] = "G_SM";
      stringArray0[3] = "ZnYB+p;%%m?XN3#";
      stringArray0[4] = "G_SM";
      stringArray0[5] = "ZnYB+p;%%m?XN3#";
      stringArray0[6] = "G_SM";
      String string1 = StringUtils.replaceEach("G_SM", stringArray0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("G_SM", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "G_SM", "G_SM");
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.replace((String) null, "ZnYB+p;%%m?XN3#", (String) null, (-1248));
      assertNull(string2);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(comparator0);
      assertFalse(priorityQueue0.contains("G_SM"));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = priorityQueue0.add(object0);
      assertFalse(priorityQueue0.contains("G_SM"));
      assertTrue(priorityQueue0.contains(object0));
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      // Undeclared exception!
      try { 
        priorityQueue0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.replace("Node ", (String) null, (String) null, 101);
      assertEquals("Node ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("", (-113));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultIfEmpty("", (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", 850, 2796);
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("p{InCombiningDiacriticalMarks}+", (CharSequence) null, (CharSequence[]) null);
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      
      String[] stringArray0 = StringUtils.split((String) null, (String) null, (-113));
      assertNull(stringArray0);
      
      String string5 = StringUtils.stripAccents("4%d");
      assertEquals("4%d", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("p{InCombiningDiacriticalMarks}+");
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String[] stringArray2 = StringUtils.split("a,I\"qKBcxBKH~", "4%d");
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence[]) stringArray1);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray1, stringArray2);
      assertTrue(boolean1);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray3 = StringUtils.stripAll(stringArray1, "p{InCombiningDiacriticalMarks}+");
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray3.length);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray3);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertNotNull(stringArray3);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.difference("Search and Replace array lengths don't match: ", "Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.replaceAll("", "\r", "%}(VAZH~3LOI\"WpA");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.trimToNull("");
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", (String) null, (-2250));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.leftPad("Fufm", (-471), "");
      assertEquals("Fufm", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      String string6 = StringUtils.appendIfMissing("", "m^V_(zKmINf2", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      
      String string7 = StringUtils.unwrap("", "V");
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = "<mO.>+";
      String string2 = StringUtils.normalizeSpace("<mO.>+");
      assertEquals("<mO.>+", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substring("<mO.>+", 3, 7);
      assertEquals(".>+", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.lowerCase("<mO.>+");
      assertEquals("<mo.>+", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.rightPad((String) null, 256, "<mO.>+");
      assertNull(string5);
      
      String string6 = StringUtils.leftPad("<mO.>+", 771, "<mO.>+");
      assertEquals("<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO.>+<mO<mO.>+", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = 'W';
      charArray0[2] = 'h';
      charArray0[3] = 'c';
      charArray0[4] = 'P';
      // Undeclared exception!
      try { 
        charBuffer0.put(charArray0, 36, 256);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.rightPad((String) null, (-1), (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange");
      assertNull(string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains("org.junitpioneer.jupiter.params.ShortRange"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("org.junitpioneer.jupiter.params.ShortRange", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'z';
      String string1 = StringUtils.join(charArray0, 'z', 988, 988);
      assertArrayEquals(new char[] {'s', 'z'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.junitpioneer.jupiter.params.ShortRange", charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.contains(charSequenceArray0[1], charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("qGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqqGsBAz", "Y/3u`-U:nXc%2:w<#0O", (String) null, 0);
      assertEquals("qGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqqGsBAz", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripEnd("The character ", "qGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqqGsBAz");
      assertEquals("The character ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.normalizeSpace("The character ");
      assertEquals("The character", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.substringsBetween("Y/3u`-U:nXc%2:w<#0O", "Y/3u`-U:nXc%2:w<#0O", "The character ");
      assertNull(stringArray0);
      
      String string5 = StringUtils.remove("Y/3u`-U:nXc%2:w<#0O", 'z');
      assertEquals("Y/3u`-U:nXc%2:w<#0O", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.defaultString("The character");
      assertEquals("The character", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.replaceChars("Illegal range. Equal from and to will produce an empty range.", "Nt:pwV5Xbh.z~yH>i", "\r");
      assertEquals("Illegal range Equal from and o ll roduce an em range", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("&:%Rjl\u0007-&RvNu%ti ");
      assertEquals("&:%Rjl\u0007-&RvNu%ti", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"YZ,(";
      stringArray0[1] = "\"YZ,(";
      String string0 = StringUtils.replaceEach("\"YZ,(", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("\"YZ,(", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\"YZ,(", (CharSequence) "\"YZ,(");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfterLast("0[+NT1}un:&<c", "\"YZ,(");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.compare("Minimum abbreviation width is %d", "\"YZ,(", true);
      assertEquals(43, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.remove("~#MsKeGDJ kE", "\"YZ,(");
      assertEquals("~#MsKeGDJ kE", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replace("\"YZ,(", "16;-MDc\"p_Y;:Px*e", "");
      assertEquals("\"YZ,(", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "Search and Replace array lengths don't match: ", 14);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string4 = StringUtils.upperCase(",y2cp%", locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(",Y2CP%", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.difference("Minimum abbreviation width is %d", "16;-MDc\"p_Y;:Px*e");
      assertEquals("16;-MDc\"p_Y;:Px*e", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAllUpperCase("16;-MDc\"p_Y;:Px*e");
      assertFalse(boolean0);
      
      String string6 = StringUtils.repeat('R', (-1562));
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.leftPad("", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) " ", 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "_GCw]ljHA2?`4=d", (CharSequence) "_GCw]ljHA2?`4=d", 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      String string0 = StringUtils.leftPad("(8-Mx#!3JxGUl $", 34, "(8-Mx#!3JxGUl $");
      assertEquals("(8-Mx#!3JxGUl $(8-M(8-Mx#!3JxGUl $", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "(8-Mx#!3JxGUl $(8-M(8-Mx#!3JxGUl $";
      objectArray0[3] = (Object) "(8-Mx#!3JxGUl $";
      String string1 = StringUtils.left("(8-Mx#!3JxGUl $(8-M(8-Mx#!3JxGUl $", 2045);
      assertEquals("(8-Mx#!3JxGUl $(8-M(8-Mx#!3JxGUl $", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.forLanguageTag("1;m");
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      String string2 = locale1.getDisplayCountry();
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = locale0.hasExtensions();
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertFalse(boolean0);
      assertFalse(locale0.equals((Object)locale1));
      
      int int0 = StringUtils.getFuzzyDistance("(8-Mx#!3JxGUl $(8-M(8-Mx#!3JxGUl $", "MMgl_A.", locale0);
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals(4, int0);
      assertFalse(locale0.equals((Object)locale1));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "(8-Mx#!3JxGUl $(8-M(8-Mx#!3JxGUl $", 108, 108);
      assertEquals(31, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'V');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("M", "", 55);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.joinWith("M", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("M", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviateMiddle("?Ak)u:@uQG2$Q", "M", 1265);
      assertEquals("?Ak)u:@uQG2$Q", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripEnd("Threshold must not be negative", "7");
      assertEquals("Threshold must not be negative", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.remove("line.separator", "");
      assertEquals("line.separator", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "Threshold must not be negative", (CharSequence) "M", (-2689));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.overlay("Threshold must not be negative", "Threshold must not be negative", 16, 7);
      assertEquals("ThreshoThreshold must not be negativeot be negative", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "line.separator", (CharSequence) "ThreshoThreshold must not be negativeot be negative");
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = StringUtils.compareIgnoreCase("line.separator", "M");
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      String string6 = StringUtils.center("qGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqqGsBAz", 0, "M");
      assertEquals("qGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqGsBAzqqGsBAz", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.trimToEmpty("0k;LZ");
      assertEquals("0k;LZ", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains(""));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<String> iterator0 = arrayDeque0.descendingIterator();
      assertFalse(arrayDeque0.contains(""));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      String string8 = StringUtils.join(iterator0, '*');
      assertFalse(arrayDeque0.contains(""));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, 'M', (-1396), 4399);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("\n", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.remove((String) null, 'X');
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "\n", 335);
      assertNull(stringArray0);
      
      String string2 = StringUtils.appendIfMissing((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[0], charSequenceArray0[5]);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviate("", 1585);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", charSequenceArray0[1]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.defaultString("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfterLast("UNR&V.nSyR\"O7k", 1585);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.abbreviate("", "4NYK\":r6VQ[L&%|Uay", (-930), 1585);
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      
      String string5 = StringUtils.chomp("");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Strings must not be null vs ", 321);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("Strings must not be null vs ", "<MO.>+");
      assertNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      String string2 = StringUtils.replace("<MO.>+", "Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals("<MO.>+", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<MO.>+", (CharSequence) "<MO.>+", 321);
      assertEquals(0, int0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CANADA;
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = locale0.getDisplayName(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("English (United Kingdom)", string3);
      assertNotNull(string3);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.upperCase("9F[)REg' (O;N", locale0);
      assertNotSame(locale0, locale1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("9F[)REG' (O;N", string4);
      assertNotNull(string4);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "<MO.>+");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.toRootLowerCase("\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase(" ", "\n");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "+";
      String string2 = StringUtils.abbreviateMiddle((String) null, " ", (-1));
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("\n");
      assertFalse(boolean0);
      
      String string3 = StringUtils.leftPad("xy'/r,wJ%Mx", 9);
      assertEquals("xy'/r,wJ%Mx", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.chop(" <mO.>+<mO");
      assertEquals(" <mO.>+<m", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Object varargs must not be null", "\r", "Object varargs must not be null");
      assertNull(stringArray0);
      
      String string0 = StringUtils.center("Object varargs must not be null", 34, 'N');
      assertEquals("NObject varargs must not be nullNN", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("NObject varargs must not be nullNN");
      assertEquals(34, int0);
      
      String string1 = StringUtils.wrap("dMW-})GUV2iVqIun", "dMW-})GUV2iVqIun");
      assertEquals("dMW-})GUV2iVqIundMW-})GUV2iVqIundMW-})GUV2iVqIun", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("dMW-})GUV2iVqIundMW-})GUV2iVqIundMW-})GUV2iVqIun");
      assertEquals("dMW-})GUV2iVqIundMW-})GUV2iVqIundMW-})GUV2iVqIun", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.leftPad(" must be static.", 34);
      assertEquals("                   must be static.", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "                   must be static.");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringBetween("&]bzCR&A~", "...");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("\r");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) " ", (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) null);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string1 = StringUtils.getDigits("DISABLED_KEY");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "QD'J6;.0";
      String string3 = StringUtils.defaultString("Could not provide arguments because of exception.", "QD'J6;.0");
      assertEquals("Could not provide arguments because of exception.", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = "zHNGza/*g}";
      try { 
        StringUtils.getBytes("zHNGza/*g}", "DISABLED_KEY");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.chomp("\r");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, 'v', (-1480), (-1480));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("NLzqP~r[46e|[m@fP", 3757);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "NLzqP~r[46e|[m@fP", (CharSequence) "NLzqP~r[46e|[m@fP");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "NLzqP~r[46e|[m@fP");
      assertFalse(boolean0);
      
      int int1 = StringUtils.compare("rfP7(K*.A&no", "'0l8+]", false);
      assertEquals(75, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.remove("NLzqP~r[46e|[m@fP", "Node ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.replace(":0>M,?", "(/12 ;", "Locale must not be null");
      assertEquals(":0>M,?", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.wrap("QD'J6;.0", 'v');
      assertEquals("vQD'J6;.0v", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "BoR", (CharSequence) "vQD'J6;.0v", 3);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Locale locale0 = Locale.UK;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      String string5 = StringUtils.upperCase("\"EBg$", locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("\"EBG$", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.chomp("org.junitpioneer.jupiter.RetryingTestExtension", "Locale must not be null");
      assertEquals("org.junitpioneer.jupiter.RetryingTestExtension", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.rotate("\"EBg$", 3);
      assertEquals("Bg$\"E", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      String string0 = StringUtils.removeEnd("%s was not annotated with @ArgumentsSource but should have been.", "2DC~4|:e7K/wzd|,");
      assertEquals("%s was not annotated with @ArgumentsSource but should have been.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "%s was not annotated with @ArgumentsSource but should have been.", (CharSequence) "%s was not annotated with @ArgumentsSource but should have been.");
      assertEquals(1, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "2DC~4|:e7K/wzd|,", (CharSequence) "%s was not annotated with @ArgumentsSource but should have been.", 1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "%s was not annotated with @ArgumentsSource but should have been.", "h27D0^`lF`,6bi'L9K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 604);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.toRootLowerCase("\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase(" ", "\n");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.capitalize("org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("Org.junitpioneer.jupiter.params.ShortRange", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.leftPad("\r", 2045, "0o)8");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) "...", (-1));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      // Undeclared exception!
      StringUtils.rightPad("", 65536, "vrBm");
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      String string0 = StringUtils.replace(".*{[0-9]+}.*", "R|=$jfaDTyj,I", "GQ", 114);
      assertEquals(".*{[0-9]+}.*", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right(".*{[0-9]+}.*", 99);
      assertEquals(".*{[0-9]+}.*", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultIfEmpty("", "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.abbreviate("GQ", 2147483645, 2180);
      assertEquals("GQ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) ".*{[0-9]+}.*";
      charSequenceArray0[2] = (CharSequence) "GQ";
      charSequenceArray0[3] = (CharSequence) "F>FL=p8r%p0vjdoQ+,_";
      String string4 = StringUtils.removePattern("#W&<o!j.VIT^3-;?,&", (String) null);
      assertEquals("#W&<o!j.VIT^3-;?,&", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      charSequenceArray0[4] = (CharSequence) "#W&<o!j.VIT^3-;?,&";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) ".*{[0-9]+}.*";
      charSequenceArray0[7] = (CharSequence) "";
      String string5 = StringUtils.right("", 2180);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      String[] stringArray0 = StringUtils.split(".1?Kas@&^$I5\"", "org.junitpioneer.jupiter.RetryingTestExtension", 1101);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.stripAccents((String) null);
      assertNull(string6);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String[] stringArray2 = StringUtils.split("org.junitpioneer.jupiter.RetryingTestExtension", ".1?Kas@&^$I5\"");
      assertEquals(6, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.RetryingTestExtension", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray3 = StringUtils.stripAll(stringArray1, (String) null);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray3.length);
      assertSame(stringArray1, stringArray3);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotNull(stringArray3);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad("null/empty items", 6, "#");
      assertEquals("null/empty items", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" vs ", "null/empty items", 1327);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.difference("Node ", "Node ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceAll("Strings must not be null", "", "");
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("|hf)F\"KuJ");
      assertEquals("|hf)F\"KuJ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Cannot get the toString of a null object", "r", (-1));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      String string3 = StringUtils.stripEnd("\n", "Strings must not be null");
      assertEquals("\n", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.normalizeSpace("(");
      assertEquals("(", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.substringsBetween("\"YZ,(", "org.apache.commons.lang3.StringUtils", "\n");
      assertNull(stringArray1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\n", (CharSequence) "(");
      assertFalse(boolean0);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ')';
      charArray1[1] = 'z';
      charArray1[2] = 'z';
      charArray1[3] = '=';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "\n", charArray1);
      assertArrayEquals(new char[] {')', 'z', 'z', '='}, charArray1);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad(" ", (-332), "Yd;.%OFmaSe8^>S&");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.toRootUpperCase((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("<mO]hb\"}=Lq");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) " ";
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.defaultString(")l\"eEz -9(;jN2u[v*");
      assertEquals(")l\"eEz -9(;jN2u[v*", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.upperCase(")");
      assertEquals(")", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) ")", (CharSequence) null, 52);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.replaceEach(" ", (String[]) null, (String[]) null);
      assertEquals(" ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      
      boolean boolean3 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      String string6 = StringUtils.leftPad("Search and Replace array lengths don't match: ", 1567);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.wrapIfMissing(",!z", "<mO]hb\"}=Lq");
      assertEquals("<mO]hb\"}=Lq,!z<mO]hb\"}=Lq", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 52;
      intArray0[1] = 1567;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '8', (-332), 1567);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -332
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("<mO.>+", " ", "<mO.>+");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace(" ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat((String) null, (-277));
      assertNull(string2);
      
      String string3 = StringUtils.defaultString("<mO.>+");
      assertEquals("<mO.>+", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.leftPad("UvFkU7C9t1y;:>.", (-277), "9`o$G-()}GsAo");
      assertEquals("UvFkU7C9t1y;:>.", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      int int0 = StringUtils.indexOf((CharSequence) "9`o$G-()}GsAo", (CharSequence) null, 1784);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("K=5`q($Z/qC1NmKO0x1", "K=5`q($Z/qC1NmKO0x1", "G;T3[pU +~MNc,DbX");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.leftPad("\n", (-1));
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("\n", "\n");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("\r");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.repeat('I', 100);
      assertEquals("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isNotBlank("\r");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.truncate("R%q", 100, 2147483645);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.leftPad("\n", (-1), "R%q");
      assertEquals("\n", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Minimum abbreviation width is %d", " ", 2306);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.stripStart("", "\n");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Z&6>qIH%N3)(VP", "Z&6>qIH%N3)(VP");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("Locale must not be null", "\r", 4);
      assertEquals("Lo\rl", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsWhitespace("Z&6>qIH%N3)(VP");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfterLast("E8#'qKZW=Q$@a<", "offset cannot be negative");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "Lo\rl";
      charSequenceArray0[2] = (CharSequence) "E8#'qKZW=Q$@a<";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.stripEnd("", "");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, '\\', 4, 4);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      
      String string5 = StringUtils.substring("", 20, 20);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAlphanumeric(charSequenceArray0[1]);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '\\';
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 4;
      floatArray0[3] = (float) 20;
      String string6 = StringUtils.join(floatArray0, 's');
      assertArrayEquals(new float[] {92.0F, 0.0F, 4.0F, 20.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals("92.0s0.0s4.0s20.0", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.unwrap("5ee?F.,h11A@o2KQ8y", "");
      assertEquals("5ee?F.,h11A@o2KQ8y", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      String string0 = StringUtils.unwrap("xFR5y)k9,:1[cQs", (String) null);
      assertEquals("xFR5y)k9,:1[cQs", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("r]y;`KN1KF*Uyx");
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[1] = (-1);
      String string0 = StringUtils.toRootUpperCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("r]y;`KN1KF*Uyx", 5, "r|bo*K1:vWerZW8");
      assertEquals("r]y;`KN1KF*Uyx", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", (CharSequence) "r|bo*K1:vWerZW8", (-1257));
      assertEquals((-1), int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("r|bo*K1:vWerZW8"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add("$pGP");
      assertFalse(linkedList0.contains("r|bo*K1:vWerZW8"));
      assertTrue(linkedList0.contains("$pGP"));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertFalse(linkedList0.contains("r|bo*K1:vWerZW8"));
      assertTrue(linkedList0.contains("$pGP"));
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, "org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertFalse(linkedList0.contains("r|bo*K1:vWerZW8"));
      assertTrue(linkedList0.contains(string2));
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertEquals("$pGP", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.countMatches((CharSequence) "`gdCK^i", (CharSequence) "r|bo*K1:vWerZW8");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.toRootLowerCase("\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase(" ", "\n");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat("\n", 198);
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeEndIgnoreCase("xd7>EYR", " ");
      assertEquals("xd7>EYR", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "xd7>EYR");
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte) (-50);
      String string4 = StringUtils.join(byteArray0, 's');
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-41), (byte) (-37), (byte) (-20), (byte)83, (byte)106, (byte)48, (byte) (-50)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("-128s-41s-37s-20s83s106s48s-50", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.replaceChars("xd7>EYR", 's', 's');
      assertEquals("xd7>EYR", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.rightPad("\r", (int) (byte)48, 'y');
      assertEquals("\ryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\ryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy", (int) (byte)48);
      assertFalse(boolean0);
      
      String string7 = StringUtils.repeat('s', (int) (byte)48);
      assertEquals("ssssssssssssssssssssssssssssssssssssssssssssssss", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      
      boolean boolean1 = StringUtils.isAlpha("ssssssssssssssssssssssssssssssssssssssssssssssss");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string8 = StringUtils.mid("-128s-41s-37s-20s83s106s48s-50", (-1060), 13);
      assertEquals("-128s-41s-37s", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringAfter("\n", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", "");
      assertFalse(boolean0);
      
      String string1 = "gRf|2l=P,_75U";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 45
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore((String) null, "bs0#}q(~-EYhz");
      assertNull(string1);
      
      String string2 = StringUtils.deleteWhitespace(" ");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.unwrap("Illegal range. Equal from and to will produce an empty range.", 'O');
      assertEquals("Illegal range. Equal from and to will produce an empty range.", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.join((long[]) null, 'E');
      assertNull(string4);
      
      int int0 = StringUtils.countMatches((CharSequence) "Illegal range. Equal from and to will produce an empty range.", 'y');
      assertEquals(1, int0);
      
      String string5 = StringUtils.rightPad((String) null, 20, 'b');
      assertNull(string5);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "SIL6%/w^@Ep#r29]", (-1029));
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("SIL6%/w^@Ep#r29]");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "bs0#}q(~-EYhz", (CharSequence) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.chomp("(>P9&Q31i4>*n");
      assertEquals("(>P9&Q31i4>*n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "()` not found in ", (-1));
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(" vs ", 'H');
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.equalsAny("(>P9&Q31i4>*n", stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray2 = StringUtils.substringsBetween((String) null, "p{InCombiningDiacriticalMarks}+", "");
      assertNull(stringArray2);
      
      String string3 = StringUtils.abbreviate(" vs ", "", 1035, (-1));
      assertEquals(" vs ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[0], charSequenceArray0[5]);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviate("", 1585);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", charSequenceArray0[1]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.compare("hd3tdZs", "", false);
      assertEquals(8, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.remove("R%q", "}P[o,^k2iHp");
      assertEquals("R%q", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replace("hd3tdZs", "R%q", "<mO");
      assertEquals("hd3tdZs", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "<mO8HWC2", (CharSequence) "", 0);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string4 = StringUtils.upperCase("", locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("q9hAQoQ@n-Q<h1L-G'%5v $.1_\r");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.indexOfAny((CharSequence) "q9hAQoQ@n-Q<h1L-G'%5v $.1_\r", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("hdu<mO.>+");
      assertEquals("hdu<mO.>+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "hdu<mO.>+";
      String string1 = StringUtils.replaceOnce("hdu<mO.>+", "!", "z.GY6!>$O)j]]&*q)x");
      assertEquals("hdu<mO.>+", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains(string1));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = arrayDeque0.offerFirst("Threshold must not be negative");
      assertTrue(arrayDeque0.contains("Threshold must not be negative"));
      assertFalse(arrayDeque0.contains(string1));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(boolean0);
      
      Spliterator<String> spliterator0 = arrayDeque0.spliterator();
      assertTrue(arrayDeque0.contains("Threshold must not be negative"));
      assertFalse(arrayDeque0.contains(string1));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertNotNull(spliterator0);
      
      String string2 = StringUtils.toRootUpperCase("DN0Uh4`Pq<@z;Kk&");
      assertEquals("DN0UH4`PQ<@Z;KK&", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.toRootUpperCase("!");
      assertEquals("!", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.mid("?:\";4r-w", 57, 1070);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "!", (char[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "}0Z=YTMPV_%w", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 363);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeEnd(" ", (String) null);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad((String) null, 2448, "<mO");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("u*Xc90d-3Wb[c");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.removeStart(".*{[0-9]+}.*", "E-4=`3;");
      assertEquals(".*{[0-9]+}.*", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviateMiddle("E-4=`3;", " ", 0);
      assertEquals("E-4=`3;", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.defaultString(".*{[0-9]+}.*", (String) null);
      assertEquals(".*{[0-9]+}.*", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.abbreviateMiddle((String) null, "\r", (-3515));
      assertNull(string5);
      
      String string6 = StringUtils.upperCase("E-4=`3;");
      assertEquals("E-4=`3;", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) " ", (CharSequence) ")EymOh");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string7 = StringUtils.abbreviate("u*Xc90d-3Wb[c", (String) null, 363, 2448);
      assertEquals("u*Xc90d-3Wb[c", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      
      String string8 = StringUtils.repeat('0', 32);
      assertEquals("00000000000000000000000000000000", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      
      String string9 = StringUtils.join((double[]) null, 'W', 12, (-1));
      assertNull(string9);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (int) 'W';
      intArray0[2] = (-1);
      intArray0[3] = (-3696);
      intArray0[4] = 0;
      intArray0[5] = 1600;
      String string10 = StringUtils.join(intArray0, 'W', 87, (-849));
      assertArrayEquals(new int[] {0, 87, (-1), (-3696), 0, 1600}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals("", string10);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("NM0Z", "NM0Z", 2651);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringAfterLast("0[+NT1}un:&<c", "0[+NT1}un:&<c");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, 'C', 1038, (-659));
      assertEquals(0, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("NM0Z", "maxWith cannot be negative", 1881, (-659));
      assertEquals("maxWith cannot be negative", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.getIfEmpty("", (Supplier<String>) null);
      assertNull(string3);
      
      String string4 = StringUtils.center("7*L 5myL/*&", 23, "");
      assertEquals("     7*L 5myL/*&     ", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isNumeric("~#MsKeGDJ kE");
      assertFalse(boolean0);
      
      String string5 = StringUtils.replaceIgnoreCase((String) null, "", "IA!%3@-Ij5D2j}uSY!", 1618);
      assertNull(string5);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("~#MsKeGDJ kE", "}JM8@)g+93'ap", 13);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "7*L 5myL/*&", (CharSequence) "maxWith cannot be negative");
      assertEquals(25, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "<mO", 7);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.mid("7*L 5myL/*&", 2651, 540);
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.getDigits("StopatchExenion");
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.difference("", "[V(O%wZs'#J^`41GUb:");
      assertEquals("[V(O%wZs'#J^`41GUb:", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      String string0 = StringUtils.repeat("Oi", 31);
      assertEquals("OiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOi", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "OiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOi", (CharSequence) "Oi");
      assertEquals(2, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "OiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOiOi", (CharSequence) "Oi", (-369));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      String string0 = StringUtils.leftPad("(8-Mx#!3JxGUl $", 34, "(8-Mx#!3JxGUl $");
      assertEquals("(8-Mx#!3JxGUl $(8-M(8-Mx#!3JxGUl $", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "(8-Mx#!3JxGUl $(8-M(8-Mx#!3JxGUl $";
      objectArray0[3] = (Object) "(8-Mx#!3JxGUl $";
      int[] intArray0 = new int[1];
      intArray0[0] = 2045;
      String string1 = StringUtils.join(intArray0, 'J', 36, 28);
      assertArrayEquals(new int[] {2045}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop("(8-Mx#!3JxGUl $");
      assertEquals("(8-Mx#!3JxGUl ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.EMPTY;
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.unwrap("(8-Mx#!3JxGUl $(8-M(8-Mx#!3JxGUl $", 'J');
      assertEquals("(8-Mx#!3JxGUl $(8-M(8-Mx#!3JxGUl $", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "(8-Mx#!3JxGUl ", (CharSequence) "(8-Mx#!3JxGUl $(8-M(8-Mx#!3JxGUl $");
      assertEquals(14, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "(8-Mx#!3JxGUl ", charArray0);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Object> treeSet0 = new TreeSet<Object>(comparator0);
      assertFalse(treeSet0.contains(2045));
      assertNotNull(treeSet0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'V');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.rightPad("", 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'V', 3524, 2897);
      assertEquals(7, charSequenceArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[1]);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string3 = StringUtils.wrap("", "offset cannot be negative");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.join(intArray0, 'y', 2897, 100);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(charSequenceArray0[4]).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string3));
      assertTrue(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string4));
      
      String string5 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "w");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'V');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.rightPad("", 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'V', 3524, 2897);
      assertEquals(7, charSequenceArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[1]);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string3 = StringUtils.wrap("", "offset cannot be negative");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.join(intArray0, 'y', 2897, 100);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string4));
      assertTrue(charSequence0.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "Minimum abbreviation width is %d");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Minimum abbreviation width is %d");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string2);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string3 = StringUtils.replaceFirst((String) null, (String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.rotate((String) null, (-1));
      assertNull(string5);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = StringUtils.compare((String) null, (String) null, false);
      assertEquals(0, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      
      String string6 = StringUtils.repeat((String) null, 0);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      String string0 = StringUtils.substringAfter("!Exk*wQRN", "Strings must not be nulll,`UR1J6R^<.sg1=O_");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("!Exk*wQRN");
      assertTrue(boolean0);
      
      String string1 = StringUtils.swapCase("C4Xlci(^|F</`5,{E");
      assertEquals("c4xLCI(^|f</`5,{e", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("The character must not be null");
      assertEquals("The character must not be null", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("c4xLCI(^|f</`5,{e", "-2739@-548", (-1985));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.defaultIfBlank("O&5p", "The character must not be null");
      assertEquals("O&5p", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "C4Xlci(^|F</`5,{E", (CharSequence) "c4xLCI(^|f</`5,{e");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substringAfter((String) null, 508);
      assertNull(string4);
      
      String string5 = StringUtils.wrap("<MO.>+", "<mO ");
      assertEquals("<mO <MO.>+<mO ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.chomp((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.leftPad("", (-3594));
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      
      String string8 = StringUtils.chomp("Strings must not be nulll,`UR1J6R^<.sg1=O_", "...");
      assertEquals("Strings must not be nulll,`UR1J6R^<.sg1=O_", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      String string0 = StringUtils.center("[fqBPq)Bo==5(*&-", 4, "q6AC-:@6_vF%");
      assertEquals("[fqBPq)Bo==5(*&-", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length(" ");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("hdu<mO.>+");
      assertEquals("hdu<mO.>+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "hdu<mO.>+";
      String string1 = StringUtils.replaceOnce("hdu<mO.>+", "!", "z.GY6!>$O)j]]&*q)x");
      assertEquals("hdu<mO.>+", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 312.0F;
      String string2 = StringUtils.joinWith("hdu<mO.>+", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("hdu<mO.>+", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviateMiddle("x^", "hdu<mO.>+", 5);
      assertEquals("x^", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.stripEnd("x^", "`");
      assertEquals("x^", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.remove("uYqj1wK#wivvKm6f%'7", "hdu<mO.>+hdu<mO.>+");
      assertEquals("uYqj1wK#wivvKm6f%'7", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      int int0 = StringUtils.indexOf((CharSequence) "0k;LZ", (CharSequence) "hdu<mO.>+", 2);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "z.GY6!>$O)j]]&*q)x", (CharSequence) "!");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("hdu<mO.>+", (String) null);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string6 = StringUtils.center("hdu<mO.>+", 2, "Illegal range. The step cannot be zero.");
      assertEquals("hdu<mO.>+", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      
      String string7 = StringUtils.trimToEmpty("N1)q+)mMrbe$");
      assertEquals("N1)q+)mMrbe$", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.swapCase("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("9m");
      assertEquals("9m", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("FzMJy8if^Y1%", "", 79);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.defaultIfBlank((String) null, "9m");
      assertEquals("9m", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "9m", (CharSequence) "");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substringAfter("={", 0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      
      String string5 = StringUtils.wrap("b7C-&!L1wh1e?yb5b+H", "");
      assertEquals("b7C-&!L1wh1e?yb5b+H", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.chomp("I");
      assertEquals("I", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.leftPad(" or any enclosing class.n;^hiOiC)dXBUfh}", 79);
      assertEquals("                                        or any enclosing class.n;^hiOiC)dXBUfh}", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      
      int int1 = StringUtils.compareIgnoreCase("={", "R%q", false);
      assertEquals((-53), int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.endsWithAny("9m", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("org.junitpioneer.jupiter.DisableIfTestFailsExtension", "i ");
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceAll("WC2", "org.apache.commons.lang3.StringUtils", "@vqO0W*tG=U");
      assertEquals("WC2", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, "i ");
      assertFalse(boolean0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertFalse(priorityQueue0.contains("org.apache.commons.lang3.StringUtils"));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean1 = priorityQueue0.add("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertTrue(priorityQueue0.contains("org.junitpioneer.jupiter.DisableIfTestFailsExtension"));
      assertFalse(priorityQueue0.contains("org.apache.commons.lang3.StringUtils"));
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = priorityQueue0.add("org.apache.commons.lang3.StringUtils");
      assertTrue(priorityQueue0.contains("org.apache.commons.lang3.StringUtils"));
      assertFalse(priorityQueue0.contains("@vqO0W*tG=U"));
      assertEquals(2, priorityQueue0.size());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>();
      assertFalse(priorityQueue1.contains("org.apache.commons.lang3.StringUtils"));
      assertEquals(0, priorityQueue1.size());
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      
      boolean boolean3 = priorityQueue1.add("org.apache.commons.lang3.StringUtils");
      assertTrue(priorityQueue1.contains("org.apache.commons.lang3.StringUtils"));
      assertFalse(priorityQueue1.contains("@vqO0W*tG=U"));
      assertNotSame(priorityQueue1, priorityQueue0);
      assertEquals(1, priorityQueue1.size());
      assertTrue(boolean3);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string3 = StringUtils.join((Iterable<?>) priorityQueue1, (String) null);
      assertTrue(priorityQueue1.contains("org.apache.commons.lang3.StringUtils"));
      assertFalse(priorityQueue1.contains("@vqO0W*tG=U"));
      assertNotSame(priorityQueue1, priorityQueue0);
      assertEquals(1, priorityQueue1.size());
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertNotNull(string3);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("WC2", "@vqO0W*tG=U");
      assertEquals(0.47, double0, 0.01);
      
      String string4 = StringUtils.substringAfter("hdu<mO.>+hdu<mO.>+", 3304);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.unwrap(" ", " ");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      String[] stringArray0 = new String[9];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      String string0 = StringUtils.join(byteArray0, 's');
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("14", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars(stringArray0[0], 'H', 'H');
      assertEquals(9, stringArray0.length);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.abbreviateMiddle("", "{hJE<AU", 14);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 'H';
      charArray0[4] = 's';
      charArray0[5] = 't';
      charArray0[6] = 'q';
      charArray0[7] = 'H';
      charArray0[8] = 'H';
      boolean boolean3 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'H', 's', 's', 'H', 's', 't', 'q', 'H', 'H'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "}{R[wi!?", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.trimToEmpty("PXO");
      assertEquals("PXO", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.remove("]", "]");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.repeat("=o6", (String) null, 0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.abbreviateMiddle("b'cUrH.", "`*OoCJu+#S[", 0);
      assertEquals("b'cUrH.", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string6 = StringUtils.removeStartIgnoreCase("bI\"#n#v*78kn", "', has a length less than 2");
      assertEquals("bI\"#n#v*78kn", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`*OoCJu+#S[";
      stringArray0[1] = "5b%Z~s0C-:b";
      stringArray0[2] = "";
      stringArray0[3] = "+F(}|8:~l`!KdFa1HB4";
      stringArray0[4] = "+F(}|8:~l`!KdFa1HB4";
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      
      int int1 = StringUtils.indexOf((CharSequence) "+F(}|8:~l`!KdFa1HB4", (CharSequence) "`*OoCJu+#S[");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      String string0 = StringUtils.rotate("l,`UR1J6R^<.sg1=O_", (-1394));
      assertEquals("R^<.sg1=O_l,`UR1J6", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("l,`UR1J6R^<.sg1=O_", (-1394), (String) null);
      assertEquals("l,`UR1J6R^<.sg1=O_", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      String string3 = StringUtils.removeStart("l,`UR1J6R^<.sg1=O_", "Strings must not be null");
      assertEquals("l,`UR1J6R^<.sg1=O_", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.abbreviateMiddle((String) null, "wDOd", 77);
      assertNull(string4);
      
      String string5 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string5);
      
      String string6 = StringUtils.normalizeSpace("");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "wDOd");
      assertEquals(0, int0);
      
      String string7 = StringUtils.abbreviateMiddle("sZP7I\r", "6R^<.sg1=O_l,`UR1J", (-2311));
      assertEquals("sZP7I\r", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      
      String string8 = StringUtils.upperCase((String) null);
      assertNull(string8);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("(]I8", "l,`UR1J6R^<.sg1=O_", (-196), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 19
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      String string0 = StringUtils.upperCase("<mO.>+");
      assertEquals("<MO.>+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("<mO.>+", "<MO.>+");
      assertEquals("<mO.>+", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToEmpty("n$r)=u~ObNuCl+bO+c#");
      assertEquals("n$r)=u~ObNuCl+bO+c#", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.uncapitalize("Strings must not be null");
      assertEquals("strings must not be null", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      StringUtils.center("<MO.>+", 1114111);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      String string0 = StringUtils.upperCase("<mO.>+");
      assertEquals("<MO.>+", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "<MO.>+", (CharSequence) "<MO.>+", (-3515));
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEnd("<mO.>+", "<MO.>+");
      assertEquals("<mO.>+", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("n$r)=u~ObNuCl+bO+c#", "<mO.>+");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.trimToEmpty("CartesianProductTest can not have a non-empty display name.");
      assertEquals("CartesianProductTest can not have a non-empty display name.", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.uncapitalize("Strings must not be null");
      assertEquals("strings must not be null", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      StringUtils.center("<MO.>+", 1114111);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      String string0 = StringUtils.leftPad("}0=5\"f2", 8202, '5');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange");
      assertNull(string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains("org.junitpioneer.jupiter.params.ShortRange"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("org.junitpioneer.jupiter.params.ShortRange", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviate("gRf|2l=P,_75U", "{P", 55);
      assertEquals("gRf|2l=P,_75U", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("{P", "gRf|2l=P,_75U");
      assertEquals("{P", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.abbreviate((String) null, 8);
      assertNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) null, '<');
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "{P", "lgdFb&a3Y7TtI}R4");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      String string4 = StringUtils.upperCase("5b%Z~s0C-:b", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("5B%Z~S0C-:B", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((char[]) null, 'r', (-926), 256);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange");
      assertNull(string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains("org.junitpioneer.jupiter.params.ShortRange"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.join((char[]) null, 'z', 988, 988);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The String must not be empty", (CharSequence) "The String must not be empty");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "The String must not be empty", (CharSequence) null);
      assertFalse(boolean0);
      
      int int1 = StringUtils.compare("org.junitpioneer.jupiter.params.ShortRange", "=Lq", true);
      assertEquals(50, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.remove((String) null, "BoR");
      assertNull(string2);
      
      String string3 = StringUtils.replace("=Lq", "\ncP,WkF.x|q", "(8-Mx#!3JxGUl $org.apache.commons.lang3.StringUtils");
      assertEquals("=Lq", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "=Lq", (CharSequence) "=Lq", (-1967));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", 'x', 'x');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 3753);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[0] = "!m*#";
      stringArray0[3] = null;
      stringArray0[4] = "";
      stringArray0[6] = "";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("!m*#", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.compare("", "xZ", false);
      assertEquals((-2), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("!m*#", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "!m*#", (CharSequence) stringArray0[3]);
      assertEquals(7, stringArray0.length);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string3 = StringUtils.replaceEach("!m*#", stringArray0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("!m*#", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.wrapIfMissing("...", 'x');
      assertEquals("x...x", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3753;
      doubleArray0[1] = (double) 'x';
      doubleArray0[2] = 513.0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 'x';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'x', (-2), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      String string0 = StringUtils.replaceChars("<mO.>+", '[', '[');
      assertEquals("<mO.>+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("<mO.>+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("Duplicate enum constant name(s) found in ", 1109, "Duplicate enum constant name(s) found in ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate("hN7L4WpE0", 1109);
      assertEquals("hN7L4WpE0", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = 'T';
      charArray0[3] = '[';
      charArray0[4] = '{';
      charArray0[5] = '[';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "<mO.>+", charArray0);
      assertArrayEquals(new char[] {'[', '[', 'T', '[', '{', '['}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.removeEnd("hN7L4WpE0", "Duplicate enum constant name(s) found in ");
      assertEquals("hN7L4WpE0", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.truncate("hN7L4WpE0", 2, 33);
      assertEquals("7L4WpE0", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "hN7L4WpE0", (CharSequence[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string5 = StringUtils.swapCase((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.unwrap((String) null, '[');
      assertNull(string6);
      
      String[] stringArray0 = StringUtils.substringsBetween("hN7L4WpE0", (String) null, "Index: ");
      assertNull(stringArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '{';
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) '[';
      floatArray0[4] = (float) 'T';
      floatArray0[5] = (float) 'T';
      floatArray0[6] = (float) '{';
      floatArray0[7] = (float) 2;
      String string7 = StringUtils.join(floatArray0, 'T', 1109, 2);
      assertArrayEquals(new float[] {123.0F, 0.0F, 2.0F, 91.0F, 84.0F, 84.0F, 123.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringBeforeLast("xpq~8Qc[``CW", "xpq~8Qc[``CW");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("k'UE,uqwacOlZ", 'V');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "k'UE,uqwacOlZ");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "k'UE,uqwacOlZ", (CharSequence) "k'UE,uqwacOlZ");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("DefaultLocale", supplier0);
      assertEquals("DefaultLocale", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited(",Vg`l^eg.S6rU|q", 'k');
      assertEquals(",Vg`l^eg.S6rU|q", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ",Vg`l^eg.S6rU|q", (CharSequence) ",Vg`l^eg.S6rU|q");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("2'm+SH~$", ",Vg`l^eg.S6rU|q", 15);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("offset cannot be negative", "xmY.x&Pt2aP&NOpGUU'cbs");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.rightPad(",Vg`l^eg.S6rU|q", 15, 'k');
      assertEquals(",Vg`l^eg.S6rU|q", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)79;
      String string2 = StringUtils.defaultString((String) null, "4A#l");
      assertEquals("4A#l", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.repeat("0k;LZ", 108);
      assertEquals("0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ0k;LZ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("4A#l", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "vsW?cfy?-l>H\"c", "p{InCombiningDiacriticalMarks}+");
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("vsW?cfy?-l>H\"c", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "Minimum abbreviation width is %d");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Minimum abbreviation width is %d");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string2);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string3 = StringUtils.replaceFirst((String) null, (String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, (-1));
      assertNull(string4);
      
      String string5 = StringUtils.truncate("FW", 0);
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "", 0);
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      
      String string6 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      
      String string0 = StringUtils.mid(" vs ", (-1168), 127);
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints(" vs ");
      assertArrayEquals(new int[] {32, 118, 115, 32}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.truncate(" vs ", 3);
      assertEquals(" vs", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.normalizeSpace("Locale must not be null");
      assertEquals("Locale must not be null", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Locale must not be null", (CharSequence) "Locale must not be null", 127);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      boolean boolean0 = StringUtils.containsAny((CharSequence) " vs ", charArray0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.trimToNull("Locale must not be null");
      assertEquals("Locale must not be null", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      String string0 = StringUtils.replace("CmRj=6Fn9'r0QeQS", ": ", "CmRj=6Fn9'r0QeQS");
      assertEquals("CmRj=6Fn9'r0QeQS", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "CmRj=6Fn9'r0QeQS", ": ");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CANADA;
      assertNotSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en_CA", locale1.toString());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      Locale locale2 = (Locale)locale1.clone();
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en_CA", locale1.toString());
      assertEquals("en", locale2.getLanguage());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("CA", locale2.getCountry());
      assertEquals("en_CA", locale2.toString());
      assertNotNull(locale2);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      
      String string1 = locale0.getDisplayName();
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("Chinese (China)", string1);
      assertNotNull(string1);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = locale0.getDisplayScript(locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en_CA", locale1.toString());
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.getFuzzyDistance("CmRj=6Fn9'r0QeQS", ": ", locale0);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, int0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      
      String string3 = StringUtils.abbreviate("CmRj=6Fn9'r0QeQS", 2913);
      assertEquals("CmRj=6Fn9'r0QeQS", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.countMatches((CharSequence) "CmRj=6Fn9'r0QeQS", 'Q');
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Z';
      charArray0[3] = 'Q';
      charArray0[4] = 'I';
      charArray0[5] = 'Q';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Chinese (China)", charArray0);
      assertArrayEquals(new char[] {'Q', 'Q', 'Z', 'Q', 'I', 'Q'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.endsWithAny("CmRj=6Fn9'r0QeQS", (CharSequence[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.deleteWhitespace((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "sZP7I", (CharSequence) "sZP7I", 64);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeEnd("sZP7I", "\r");
      assertEquals("sZP7I", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("maxWith cannot be negative", (-3515), "9qz`})<Y@s_T+Bl`W");
      assertEquals("maxWith cannot be negative", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.removeStart((String) null, "Nt~bS,d#&");
      assertNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("smYO:)wH!XC\"jO=", (String) null, (-3515));
      assertEquals("smYO:)wH!XC\"jO=", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.stripStart("smYO:)wH!XC\"jO=", (String) null);
      assertEquals("smYO:)wH!XC\"jO=", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "maxWith cannot be negative", (CharSequence) "\r");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.abbreviateMiddle("', has a length less than 2", "M", 0);
      assertEquals("', has a length less than 2", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.upperCase("maxWith cannot be negative");
      assertEquals("MAXWITH CANNOT BE NEGATIVE", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "MAXWITH CANNOT BE NEGATIVE", (CharSequence) "', has a length less than 2");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string7 = StringUtils.abbreviate("smYO:)wH!XC\"jO=", "", (-792), (-1591));
      assertEquals("smYO:)wH!XC\"jO=", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.abbreviate("\r", "", (-1));
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore((String) null, "bs0#}q(~-EYhz");
      assertNull(string1);
      
      String string2 = StringUtils.deleteWhitespace(" ");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.unwrap("Illegal range. Equal from and to will produce an empty range.", 'O');
      assertEquals("Illegal range. Equal from and to will produce an empty range.", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.stripEnd("", "");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.wrapIfMissing("", '>');
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      
      String string6 = StringUtils.remove(" or any enclosing class.n;^hiOiC)dXBUfh}", "z`Z |I4B8Emy");
      assertEquals(" or any enclosing class.n;^hiOiC)dXBUfh}", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      
      int int0 = StringUtils.indexOf((CharSequence) "Illegal range. Equal from and to will produce an empty range.", (CharSequence) "bs0#}q(~-EYhz", 626);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("aM1^>!?:q3", "4Gw6gshM\"<Dq}F;");
      assertEquals(45, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string7 = StringUtils.center("", 508, "Threshold must not be negative");
      assertEquals("Threshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold mustThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.trimToEmpty("bs0#}q(~-EYhz");
      assertEquals("bs0#}q(~-EYhz", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.US;
      assertSame(locale1, locale0);
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("US", locale1.getCountry());
      assertEquals("en_US", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertNotNull(locale1);
      
      String string0 = StringUtils.removeEndIgnoreCase("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = locale1.getDisplayLanguage();
      assertSame(locale1, locale0);
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("US", locale1.getCountry());
      assertEquals("en_US", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("English", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = locale0.getScript();
      assertSame(locale0, locale1);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains(string1));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) linkedHashSet0);
      assertFalse(linkedHashSet0.contains(string1));
      assertFalse(list0.contains(string1));
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string3 = Locale.lookupTag(vector0, list0);
      assertFalse(linkedHashSet0.contains(string1));
      assertFalse(list0.contains(string1));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(string3);
      
      String string4 = locale1.getDisplayScript();
      assertSame(locale1, locale0);
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("US", locale1.getCountry());
      assertEquals("en_US", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      
      Locale locale2 = Locale.TAIWAN;
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("zh_TW", locale2.toString());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      String string5 = StringUtils.lowerCase("Minimum abbreviation width is %d", locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("zh_TW", locale2.toString());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("minimum abbreviation width is %d", string5);
      assertNotNull(string5);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = locale0.getDisplayLanguage();
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("English", string6);
      assertNotNull(string6);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.reverse("");
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      
      String string8 = StringUtils.EMPTY;
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string7));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = 'H';
      charArray0[2] = 'S';
      charArray0[3] = '[';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'(', 'H', 'S', '['}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("bD7wGw/7", "");
      assertEquals("bD7wGw/7", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("", (-2664), "bD7wGw/7");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2664);
      floatArray0[1] = (float) (-2664);
      floatArray0[2] = (float) (-2664);
      floatArray0[3] = (float) (-2664);
      String string2 = StringUtils.join(floatArray0, 'Q');
      assertArrayEquals(new float[] {(-2664.0F), (-2664.0F), (-2664.0F), (-2664.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals("-2664.0Q-2664.0Q-2664.0Q-2664.0", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.length("-2664.0Q-2664.0Q-2664.0Q-2664.0");
      assertEquals(31, int0);
      
      String string3 = StringUtils.unwrap("Minimum abbreviation width is %d", "\"dZc");
      assertEquals("Minimum abbreviation width is %d", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isMixedCase("-2664.0Q-2664.0Q-2664.0Q-2664.0");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 29);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.removeStartIgnoreCase("Object varargs must not be null", "");
      assertEquals("Object varargs must not be null", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.trimToEmpty("");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.replaceChars("\"dZc", "]hb\"}=Lq<mO", "Minimum abbreviation width is %d");
      assertEquals("idZc", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.center("-2664.0Q-2664.0Q-2664.0Q-2664.0", (-569), "{");
      assertEquals("-2664.0Q-2664.0Q-2664.0Q-2664.0", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("]0b", (String) null);
      assertEquals("]0b", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("tA?Zb,pP$CGMY3$:;8t");
      assertEquals("ta?zb,pp$cgmy3$:;8t", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("ta?zb,pp$cgmy3$:;8t", "g_)n6d}r");
      assertEquals("ta?zb,pp$cgmy3$:;8t", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'P';
      intArray0[1] = (int) 'P';
      String string2 = StringUtils.join(intArray0, 'O', 80, 80);
      assertArrayEquals(new int[] {80, 80}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.chop("%s %s.");
      assertEquals("%s %s", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.EMPTY;
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "g_)n6d}r", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ta?zb,pp$cgmy3$:;8t";
      stringArray0[1] = "tA?Zb,pP$CGMY3$:;8t";
      stringArray0[2] = "%s %s";
      String string5 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("ta?zb,pp$cgmy3$:;8t", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "ta?zb,pp$cgmy3$:;8t", (CharSequence) "%s %s.");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore((String) null, " ");
      assertNull(string2);
      
      String string3 = StringUtils.replaceFirst(" ", " ", " ");
      assertEquals(" ", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.unwrap("SIL6%/w^@Ep#r29]", 'y');
      assertEquals("SIL6%/w^@Ep#r29]", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = "aM1^>!?:q3";
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'y';
      longArray0[1] = (long) 'y';
      longArray0[2] = (long) 'E';
      longArray0[3] = (long) 'E';
      String string6 = StringUtils.join(longArray0, 'y');
      assertArrayEquals(new long[] {121L, 121L, 69L, 69L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("121y121y69y69y0", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      
      int int0 = StringUtils.countMatches((CharSequence) " ", 'b');
      assertEquals(0, int0);
      
      String string7 = "$QRXSrv-Jf*an[";
      // Undeclared exception!
      try { 
        StringUtils.repeat("$QRXSrv-Jf*an[", " ", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("0[+NT1'un:&<c", "0[+NT1'un:&<c", "0[+NT1'un:&<c");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 13
         // 0[+NT1'un:&<c
         //              ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Duplicate enum constant name(s) found in +F(}|8:~l`!KdFa1HB4", "Duplicate enum constant name(s) found in +F(}|8:~l`!KdFa1HB4");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("1nBDP!9VV1nBDP!9VV", '\"');
      assertEquals("\"1nBDP!9VV1nBDP!9VV\"", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("Locale must not be null", "x/3\":3");
      assertEquals("Locale must not be null", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.compareIgnoreCase("El+S$URjip/f}[KoSW", "");
      assertEquals(18, int0);
      
      String string3 = StringUtils.center("v<92m8b1F8w5XK6%-n", 420, "");
      assertEquals("                                                                                                                                                                                                         v<92m8b1F8w5XK6%-n                                                                                                                                                                                                         ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.trimToEmpty("cS,Cqy*FY_7+TD");
      assertEquals("cS,Cqy*FY_7+TD", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("#0sgbB:fIX*UO?F.t", 120, "");
      assertEquals("                                                   #0sgbB:fIX*UO?F.t                                                    ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase("#0sgbB:fIX*UO?F.t");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      String string0 = StringUtils.leftPad("(8-Mx#!3JxGUl $", 34, "(8-Mx#!3JxGUl $");
      assertEquals("(8-Mx#!3JxGUl $(8-M(8-Mx#!3JxGUl $", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "(8-Mx#!3JxGUl $(8-M(8-Mx#!3JxGUl $";
      objectArray0[3] = (Object) "(8-Mx#!3JxGUl $";
      objectArray0[4] = (Object) "(8-Mx#!3JxGUl $(8-M(8-Mx#!3JxGUl $";
      objectArray0[5] = (Object) "(8-Mx#!3JxGUl $";
      objectArray0[6] = (Object) "(8-Mx#!3JxGUl $";
      objectArray0[7] = (Object) "(8-Mx#!3JxGUl $";
      String string1 = StringUtils.join(objectArray0, '<', 34, 34);
      assertEquals(8, objectArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.overlay("(8-Mx#!3JxGUl $(8-M(8-Mx#!3JxGUl $", "(8-Mx#!3JxGUl $", 34, 7);
      assertEquals("(8-Mx#!(8-Mx#!3JxGUl $", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("(8-Mx#!3JxGUl $", supplier0);
      assertEquals("(8-Mx#!3JxGUl $", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.center("(8-Mx#!(8-Mx#!3JxGUl $", 34, "(8-Mx#!3JxGUl $");
      assertEquals("(8-Mx#(8-Mx#!(8-Mx#!3JxGUl $(8-Mx#", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isNumeric("(8-Mx#!3JxGUl $");
      assertFalse(boolean0);
      
      String string5 = StringUtils.replaceIgnoreCase("(8-Mx#!3JxGUl $", "(8-Mx#!(8-Mx#!3JxGUl $", "Xu`=", 3);
      assertEquals("(8-Mx#!3JxGUl $", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("~JjfV6|Z", "~JjfV6|Z", 3);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Xu`=", (CharSequence) "(8-Mx#!3JxGUl $");
      assertEquals(15, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "(8-Mx#!3JxGUl $", 7);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.mid("~JjfV6|Z", 34, 15);
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.getDigits("(8-Mx#!3JxGUl $");
      assertEquals("83", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "83", 1330);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) " ", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange");
      assertNull(string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains("org.junitpioneer.jupiter.params.ShortRange"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.startsWithAny("org.junitpioneer.jupiter.params.ShortRange", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.params.ShortRange");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.defaultString((String) null, "<mO8HWC2");
      assertEquals("<mO8HWC2", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.junitpioneer.jupiter.params.ShortRange", (CharSequence) "<mO8HWC2");
      assertEquals(41, int0);
      
      boolean boolean1 = StringUtils.isWhitespace("<mO8HWC2");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.abbreviateMiddle("org.junitpioneer.jupiter.params.ShortRange", "Object varargs must not be null", 41);
      assertEquals("org.jObject varargs must not be nullRange", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      double[] doubleArray0 = new double[0];
      String string3 = StringUtils.join(doubleArray0, '{', 41, 41);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Z&6>qIH%N3)(VP", "Z&6>qIH%N3)(VP");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("Locale must not be null", "\r", 4);
      assertEquals("Lo\rl", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsWhitespace("Z&6>qIH%N3)(VP");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfterLast("E8#'qKZW=Q$@a<", "offset cannot be negative");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.repeat("", 4);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "E8#'qKZW=Q$@a<";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "E8#'qKZW=Q$@a<";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.stripEnd("", "");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, '\\', 4, 4);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      
      String string6 = StringUtils.substring("", 20, 20);
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      
      int int0 = StringUtils.indexOf(charSequenceArray0[0], 4, 16);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.reverseDelimited("", '\'');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("", (-332), "<mO]hb\"}=Lq");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.toRootUpperCase("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isBlank("<mO]hb\"}=Lq");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.defaultString(" vs ");
      assertEquals(" vs ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 1815);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = ":*w";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "?<U{H|~GQ%mcm~C{J";
      stringArray0[5] = "";
      stringArray0[6] = "<mO]hb\"}=Lq";
      String string4 = StringUtils.replaceEach("C=a&soyG", stringArray0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("C=a&soyG", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean3 = StringUtils.isAlphaSpace(" vs ");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String string5 = StringUtils.leftPad("?<U{H|~GQ%mcm~C{J", 9);
      assertEquals("?<U{H|~GQ%mcm~C{J", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore((String) null, " ");
      assertNull(string2);
      
      String string3 = StringUtils.replaceFirst(" ", " ", " ");
      assertEquals(" ", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.unwrap("SIL6%/w^@Ep#r29]", 'y');
      assertEquals("SIL6%/w^@Ep#r29]", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'y';
      longArray0[1] = (long) 'y';
      longArray0[2] = (long) 'E';
      longArray0[3] = (long) 'E';
      String string5 = StringUtils.join(longArray0, 'y');
      assertArrayEquals(new long[] {121L, 121L, 69L, 69L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("121y121y69y69y0", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      int int0 = StringUtils.countMatches((CharSequence) " ", 'b');
      assertEquals(0, int0);
      
      String string6 = StringUtils.rightPad("*KFt8!", 1225, 'E');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "aM1^>!?:q3", (-1029));
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha(" ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "org.apache.commons.lang3.StringUtils", (-1149));
      assertNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = 'x';
      charArray0[2] = ' ';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'?', 'x', ' '}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase("?@V>Md>", "", false);
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compare((String) null, "");
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray1);
      
      String string1 = StringUtils.removeEnd("@og-B}Xz_r, ", "bA0]f0KlLmU");
      assertEquals("@og-B}Xz_r, ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("", (-1), "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceChars("", 'B', '\'');
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.repeat((String) null, (String) null, 32);
      assertNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle((String) null, (String) null, (-1));
      assertNull(string5);
      
      boolean boolean2 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("hdu<mO.>+");
      assertEquals("hdu<mO.>+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      String string1 = StringUtils.leftPad(";T,;c[}x8ZvSn", (-3434), 'y');
      assertEquals(";T,;c[}x8ZvSn", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceIgnoreCase("#GGOc.", "#GGOc.", "%s does not implement the CartesianAnnotationConsumer<T> interface.", 27);
      assertEquals("%s does not implement the CartesianAnnotationConsumer<T> interface.", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.prependIfMissing(";T,;c[}x8ZvSn", "#GGOc.", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("#GGOc.;T,;c[}x8ZvSn", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("hdu<mO.>+", "%s does not implement the CartesianAnnotationConsumer<T> interface.");
      assertFalse(boolean0);
      
      String string4 = StringUtils.rotate("...", (-1));
      assertEquals("...", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.containsWhitespace(";T,;c[}x8ZvSn");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        StringUtils.getBytes(";T,;c[}x8ZvSn", "org.apache.commons.lang3.StringUtils(8-Mx#!3JxGUl $");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = ')';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "(8-Mx#!3JxGUl $", charArray0);
      assertArrayEquals(new char[] {'p', ')', 'p', 'p'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.toRootLowerCase("(8-Mx#!3JxGUl $");
      assertEquals("(8-mx#!3jxgul $", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "(8-mx#!3jxgul $", (CharSequence) "(8-mx#!3jxgul $");
      assertEquals("(8-mx#!3jxgul $", charSequence0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "(8-Mx#!3JxGUl $", (CharSequence) "(8-mx#!3jxgul $", 5);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "(8-Mx#!3JxGUl $";
      charSequenceArray0[1] = (CharSequence) "(8-mx#!3jxgul $";
      charSequenceArray0[2] = (CharSequence) "(8-Mx#!3JxGUl $";
      charSequenceArray0[3] = (CharSequence) "(8-Mx#!3JxGUl $";
      charSequenceArray0[4] = (CharSequence) "(8-Mx#!3JxGUl $";
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("(8-mx#!3jxgul $", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.strip("Ohc5yfA", "(8-Mx#!3JxGUl $");
      assertEquals("Ohc5yfA", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      
      String string2 = StringUtils.stripStart("(8-mx#!3jxgul $", "(8-mx#!3jxgul $");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      
      double double0 = StringUtils.getJaroWinklerDistance("", charSequenceArray0[0]);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      String[] stringArray0 = new String[21];
      stringArray0[0] = "CartesianTest can not have an empty display name.";
      stringArray0[1] = "CartesianTest can not have an empty display name.";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(21, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeEnd("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("", 26, "");
      assertEquals("                          ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.removeStart("", (String) null);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.abbreviateMiddle("", "", 5);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.abbreviateMiddle("", "l.TxLiD]y,vgEe9GB", 30);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      
      String string6 = StringUtils.upperCase("");
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "e+Y.(.:", (CharSequence) "=V`uH&CM/U\rBz-M");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string7 = StringUtils.remove("", 'd');
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("FstpP%w,wd)^L5*F");
      assertEquals("FstpP%w,wd)^L5*F", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("FstpP%w,wd)^L5*F", "org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertEquals("P%w,wd)^L5*F", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat("@o", "FstpP%w,wd)^L5*F", (-2624));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2624);
      floatArray0[1] = (float) (-2624);
      floatArray0[2] = (float) (-2624);
      floatArray0[3] = (float) (-2624);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, ']', (-1), 116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "C^jez*1", 'B');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      String string0 = StringUtils.substringBefore("sZP7I", "org.junitpioneer.jupiter.params.Range");
      assertEquals("sZP7I", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "sZP7I", (CharSequence) "sZP7I");
      assertEquals(0, int0);
      
      String string1 = StringUtils.unwrap("tf/j0t-K", ' ');
      assertEquals("tf/j0t-K", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("`LQ&>B", '[');
      assertEquals("`LQ&>B", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      charArray0[1] = '[';
      charArray0[2] = 'M';
      charArray0[3] = ' ';
      charArray0[4] = '[';
      charArray0[5] = '[';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "org.junitpioneer.jupiter.params.Range", charArray0);
      assertArrayEquals(new char[] {' ', '[', 'M', ' ', '[', '['}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.toRootLowerCase((String) null);
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "tf/j0t-K";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "sZP7I";
      charSequenceArray0[3] = (CharSequence) "tf/j0t-K";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "sZP7I";
      charSequenceArray0[6] = (CharSequence) "sZP7I";
      boolean boolean1 = StringUtils.endsWithAny("sZP7I", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      String string4 = StringUtils.upperCase("", locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("Locale must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, (String) null, (-154), 7);
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      String string0 = StringUtils.rotate("l,`UR1J6R^<.sg1=O_", (-1394));
      assertEquals("R^<.sg1=O_l,`UR1J6", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("org.apache.commons.lang3.StringUtils", "l,`UR1J6R^<.sg1=O_", (String) null);
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.trimToNull("6R^<.sg1=O_l,`UR1J");
      assertEquals("6R^<.sg1=O_l,`UR1J", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("6R^<.sg1=O_l,`UR1J", (CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.strip("', has a length less than 2", "6R^<.sg1=O_l,`UR1J");
      assertEquals("', has a length less than 2", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.remove(";*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZC>mtPZ", 'd');
      assertEquals(";*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZC>mtPZ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.overlay((String) null, "org.junitpioneer.jupiter.params.IntRange", 818, 1376);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      String string0 = StringUtils.replace("CmRj=6Fn9'r0QeQS", "W=!@Xz", "CmRj=6Fn9'r0QeQS", (-1390));
      assertEquals("CmRj=6Fn9'r0QeQS", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("c%X;2gT|9:=Z", (-561));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultIfEmpty("CmRj=6Fn9'r0QeQS", "Y+A\"KQ68FWY?xUb^V");
      assertEquals("CmRj=6Fn9'r0QeQS", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = 2147483645;
      String string3 = StringUtils.abbreviate("F>FL=p8r%p0vjdoQ+,_", 12, 8192);
      assertEquals("F>FL=p8r%p0vjdoQ+,_", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "W=!@Xz";
      charSequenceArray0[1] = (CharSequence) "c%X;2gT|9:=Z";
      charSequenceArray0[2] = (CharSequence) "";
      String string4 = "Threshold must not be negative";
      String string5 = StringUtils.chop("Threshold must not be negative");
      assertEquals("Threshold must not be negativ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      charSequenceArray0[3] = (CharSequence) "Threshold must not be negativ";
      String string6 = StringUtils.appendIfMissingIgnoreCase("", "F>FL=p8r%p0vjdoQ+,_", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      
      String[] stringArray0 = StringUtils.split("", (String) null, 2147483645);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string7 = StringUtils.stripAccents("Y+A\"KQ68FWY?xUb^V");
      assertEquals("Y+A\"KQ68FWY?xUb^V", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "F>FL=p8r%p0vjdoQ+,_", (CharSequence) null, 8192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.difference("Node ", "Node ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "(");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("Strings must not be null", "", "");
      assertEquals("Strings must not be null", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int[] intArray0 = new int[0];
      String string3 = StringUtils.join(intArray0, 'J');
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeEndIgnoreCase("", (String) null);
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.substring("", (-2124141431), (-3532));
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.uncapitalize("\"m[B*{7Lnev");
      assertEquals("\"m[B*{7Lnev", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.reverse("c%X;2gT|9:=ZC3<LH");
      assertEquals("HL<3CZ=:9|Tg2;X%c", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.EMPTY;
      assertEquals("", string8);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string5));
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string9 = StringUtils.wrapIfMissing("Node ", (String) null);
      assertEquals("Node ", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "Node ", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) "");
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      String string0 = StringUtils.difference("#ZwP_*x.Th@Q:W", (String) null);
      assertEquals("#ZwP_*x.Th@Q:W", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.leftPad((String) null, (-1), (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceAll("", "null", "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.trimToNull("%s does not implement %s interface.");
      assertEquals("%s does not implement %s interface.", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\"^03h@ga-*.Za85", "", (-997));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.leftPad((String) null, 9, "4g");
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "j2R0^]-HL]tT-Zy[5";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "4g";
      charSequenceArray0[5] = (CharSequence) "j2R0^]-HL]tT-Zy[5";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string5 = StringUtils.appendIfMissing("null", charSequenceArray0[0], stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("null", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.join((long[]) null, '/');
      assertNull(string6);
      
      String string7 = StringUtils.overlay("|p#VY", "<mO8HWC2", (-2593), 0);
      assertEquals("<mO8HWC2|p#VY", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = StringUtils.joinWith("j2R0^]-HL]tT-Zy[5", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("\"^03h@ga-*.Za85", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      String string0 = StringUtils.leftPad("C3<LH", (-2677), "O@kY");
      assertEquals("C3<LH", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "C3<LH", (-2677));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripStart("C3<LH", (String) null);
      assertEquals("C3<LH", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("k");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, '^');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.lowerCase("G_SM");
      assertEquals("g_sm", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "g_sm";
      String string1 = StringUtils.wrapIfMissing("ZnYB+p;%%m?XN3#", '[');
      assertEquals("[ZnYB+p;%%m?XN3#[", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "[ZnYB+p;%%m?XN3#[";
      String string2 = StringUtils.leftPad("G_SM", (-304), "Threshold must not be negative");
      assertEquals("G_SM", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[2] = (CharSequence) "G_SM";
      String string3 = StringUtils.toRootLowerCase("g_sm");
      assertEquals("g_sm", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      charSequenceArray0[3] = (CharSequence) "g_sm";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfBlank("VuBA", supplier0);
      assertEquals("VuBA", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, "VuBA", 3, 3);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllLowerCase(charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string6 = StringUtils.stripStart("", "g_sm");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.right("...", (-304));
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.toRootLowerCase("");
      assertEquals("", string8);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      
      String string9 = StringUtils.substringBetween("g_sm", "");
      assertEquals("", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string5));
      
      String string10 = StringUtils.join((double[]) null, '=');
      assertNull(string10);
      
      boolean boolean1 = StringUtils.isAlpha("G_SM");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string11 = StringUtils.getIfEmpty("VuBA", (Supplier<String>) null);
      assertEquals("VuBA", string11);
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string1));
      assertTrue(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string8));
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("Ke");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Strings must not be null vs ", 321);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("Strings must not be null vs ", "<MO.>+");
      assertNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      charArray0[4] = 'z';
      charArray0[5] = 'z';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Strings must not be null vs ", charArray0);
      assertArrayEquals(new char[] {'W', 'r', 'r', 'r', 'z', 'z'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      String string0 = StringUtils.substringAfter("'mC>", "'mC>");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfEmpty("", "'mC>");
      assertEquals("'mC>", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("NM0Z", "NM0Z", 2682);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("C3!\u0002Dxb)__Wg", "!");
      assertEquals("C3!\u0002Dxb)__Wg", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceAll("LI>Rs", " vs ", "Stri");
      assertEquals("LI>Rs", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.trimToNull("offset cannot be negative");
      assertEquals("offset cannot be negative", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.compare("org.junitpioneer.jupiter.params.ByteRange", "39AJs8}V;%Y");
      assertEquals(60, int0);
      
      String string4 = StringUtils.stripEnd("xcz,e-5D_", "org.junitpioneer.jupiter.params.ByteRange");
      assertEquals("xcz,e-5D_", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.substringsBetween("3>E(ceBt9&!h", "@og-B}Xz_r, bA0]f0KlLmU", "C3!\u0002Dxb)__Wg");
      assertNull(stringArray1);
      
      String string5 = StringUtils.left("Stri", 111);
      assertEquals("Stri", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "org.junitpioneer.jupiter.params.ByteRange", (CharSequence) "KOK%-z*|`JOHJ4dVCB", 2682);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string6 = StringUtils.stripEnd("!E4d8", "39AJs8}V;%Y");
      assertEquals("!E4d", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "offset cannot be negative", (CharSequence) "!E4d");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      String string0 = StringUtils.upperCase("W(.`y/N$O?5%8KpEQ");
      assertEquals("W(.`Y/N$O?5%8KPEQ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2492.434;
      String string2 = StringUtils.join(doubleArray0, 'f');
      assertArrayEquals(new double[] {2492.434}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals("2492.434", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllUpperCase("2492.434");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertEquals(0, int0);
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.remove("(}0N~HT;#?7r\"S*", "n;.);$3I|L");
      assertEquals("(}0N~HT;#?7r\"S*", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = 'f';
      charArray0[2] = 'P';
      charArray0[3] = 'f';
      String string5 = StringUtils.join(charArray0, 'f');
      assertArrayEquals(new char[] {'/', 'f', 'P', 'f'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("/fffPff", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("  ", "  ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripEnd("`", "#5xjX\"Z`BL8{Q]_1yj");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "  ";
      stringArray0[3] = "S";
      char[] charArray0 = new char[0];
      String string1 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.getIfBlank("$", (Supplier<String>) null);
      assertEquals("$", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfterLast("uh{!B", (-442));
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "S", (CharSequence) "$");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.chomp("`");
      assertEquals("`", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.params.Range", "S", (-442));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null, '+');
      assertNull(stringArray2);
      
      boolean boolean1 = StringUtils.equalsAny("S", stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(boolean1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.removeFirst("!h661<67X6=", "$");
      assertEquals("!h661<67X6=", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.substringAfterLast("S", "#5xjX\"Z`BL8{Q]_1yj");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '^');
      assertNull(stringArray0);
      
      String string0 = StringUtils.substringAfter("Minimum abbreviation width is %d", " ");
      assertEquals("abbreviation width is %d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.center("f", 0);
      assertEquals("f", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) " ", (CharSequence) "f");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "f";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("f", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'V');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string1 = StringUtils.rightPad(":*w", (-332), "?<U{H|~GQ%mcm~C{J");
      assertEquals(":*w", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.toRootUpperCase("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace(charSequenceArray0[2]);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = StringUtils.defaultString("C=a&soyG");
      assertEquals("C=a&soyG", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.indexOf((CharSequence) "C=a&soyG", (CharSequence) "?<U{H|~GQ%mcm~C{J", 226);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "', is neither of type Map.Entry nor an Array";
      stringArray0[2] = "";
      stringArray0[3] = "C=a&soyG";
      stringArray0[4] = ":*w";
      stringArray0[5] = "?<U{H|~GQ%mcm~C{J";
      stringArray0[6] = "l!MV801QfX&7/ O";
      String string4 = StringUtils.replaceEach("l!MV801QfX&7/ O", stringArray0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("l!MV801QfX&7/ O", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean3 = StringUtils.isAlphaSpace(charSequenceArray0[0]);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string5 = StringUtils.leftPad("`'S?]Q[", (-332));
      assertEquals("`'S?]Q[", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "#a!*Q\"CO47?>smbw";
      objectArray0[1] = (Object) "#a!*Q\"CO47?>smbw";
      objectArray0[2] = (Object) "#a!*Q\"CO47?>smbw";
      objectArray0[3] = (Object) "#a!*Q\"CO47?>smbw";
      objectArray0[4] = (Object) "#a!*Q\"CO47?>smbw";
      objectArray0[5] = (Object) "#a!*Q\"CO47?>smbw";
      objectArray0[6] = (Object) "#a!*Q\"CO47?>smbw";
      String string0 = StringUtils.replaceOnceIgnoreCase("bA0]f0KlLmU", "IYszxDlYAR|UOtA[{Yb", (String) null);
      assertEquals("bA0]f0KlLmU", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "IYszxDlYAR|UOtA[{Yb";
      charSequenceArray0[1] = (CharSequence) "bA0]f0KlLmU";
      charSequenceArray0[2] = (CharSequence) "#a!*Q\"CO47?>smbw";
      charSequenceArray0[3] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("C%K2cO8}.B", 108);
      assertEquals("C%K2cO8}.B                                                                                                  ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.truncate("z@]2\"F |5j|{DpmH", 32);
      assertEquals("z@]2\"F |5j|{DpmH", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfter(",BTxtxBGIzp7X4", 108);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.wrap((String) null, "C%K2cO8}.B");
      assertNull(string4);
      
      String string5 = StringUtils.chomp("");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.leftPad((String) null, 58);
      assertNull(string6);
      
      String string7 = StringUtils.removeStartIgnoreCase("=T2CT=", "=T2CT=");
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      String string0 = StringUtils.left(" \r", 55);
      assertEquals(" \r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("_07:v=1~j!%b", " \r");
      assertEquals("_07:v=1~j!%b", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 107;
      longArray0[1] = (long) 55;
      longArray0[2] = 0L;
      longArray0[3] = (long) 55;
      longArray0[4] = (long) 'm';
      String string2 = StringUtils.join(longArray0, 'm', 107, 107);
      assertArrayEquals(new long[] {107L, 55L, 0L, 55L, 109L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "_07:v=1~j!%b", (CharSequence) " \r", 89);
      assertEquals(12, int0);
      
      String string3 = StringUtils.chomp("\r\n");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.wrapIfMissing("E/dsxcXaDokAH2~z(!u", 'm');
      assertEquals("mE/dsxcXaDokAH2~z(!um", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (int) '3', '3');
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((Comparator<? super Object>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      int[] intArray0 = StringUtils.toCodePoints("@og-B}Xz_r, bA0]f0KlLmU");
      assertEquals(23, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("@og-B}Xz_r, bA0]f0KlLmU");
      assertTrue(boolean0);
      
      String string0 = StringUtils.swapCase("', is neither of type Map.Entry nor an Array");
      assertEquals("', IS NEITHER OF TYPE mAP.eNTRY NOR AN aRRAY", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("C4*aFQHuXw\"dm'");
      assertEquals("C4*aFQHuXw\"dm'", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("C4*aFQHuXw\"dm'", "b7C-&!L1wh1e?yb5b+H", 79);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.defaultIfBlank("Aborting to protect against StackOverflowError - output of one loop is the input of another", "C4*aFQHuXw\"dm'");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringAfter((String) null, (-6534));
      assertNull(string3);
      
      String string4 = StringUtils.wrap("The String must not be empty", "uq%@T");
      assertEquals("uq%@TThe String must not be emptyuq%@T", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.chomp("R*t;t7/f x&");
      assertEquals("R*t;t7/f x&", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.leftPad((String) null, (-6534));
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      String string0 = StringUtils.trim("QD'J6;.0%<9XTd-j");
      assertEquals("QD'J6;.0%<9XTd-j", string0);
      assertNotNull(string0);
      
      int int0 = 321;
      String string1 = StringUtils.substringAfterLast("QD'J6;.0%<9XTd-j", 321);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("", "QD'J6;.0%<9XTd-j", (CharSequence[]) null);
      assertEquals("QD'J6;.0%<9XTd-j", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[5];
      char char0 = 'z';
      charArray0[1] = 'z';
      charArray0[2] = ')';
      String[] stringArray0 = new String[1];
      stringArray0[0] = "QD'J6;.0%<9XTd-j";
      String string3 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      try { 
        StringUtils.getBytes("", "!");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissingIgnoreCase("8", "\n", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("8", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.toRootLowerCase("\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase(" ", "\n");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.capitalize("org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("Org.junitpioneer.jupiter.params.ShortRange", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.rotate(" ", 2045);
      assertEquals(" ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String[] stringArray0 = new String[0];
      String string4 = StringUtils.replaceEachRepeatedly(">g&0bR%?", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(">g&0bR%?", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      charSequenceArray0[0] = (CharSequence) ">g&0bR%?";
      charSequenceArray0[1] = (CharSequence) ">g&0bR%?";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "Org.junitpioneer.jupiter.params.ShortRange";
      String string5 = StringUtils.prependIfMissing(">g&0bR%?", "\r", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(">g&0bR%?", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.leftPad("\r", 2045, "0o)8");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.left(" ", 1206);
      assertEquals(" ", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.prependIfMissingIgnoreCase("IhM!~J=dY$", "J7A0xd'F", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("J7A0xd'FIhM!~J=dY$", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("IhM!~J=dY$", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "/{9");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      String string0 = StringUtils.join(charArray0, 'q');
      assertArrayEquals(new char[] {'q', 'q', 'q', 'q'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("qqqqqqq", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.reverseDelimited("", '!');
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 129);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String[] stringArray2 = StringUtils.split("", (String) null, 23);
      assertEquals(0, stringArray2.length);
      assertSame(stringArray2, stringArray1);
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.join((Object[]) stringArray2, '!', 322, (-17));
      assertEquals(0, stringArray2.length);
      assertSame(stringArray2, stringArray1);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string4 = StringUtils.wrapIfMissing(" \r", "KIx302OU");
      assertEquals("KIx302OU \rKIx302OU", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains(string4));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Iterator<String> iterator0 = linkedHashSet0.iterator();
      assertFalse(linkedHashSet0.contains(string4));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(iterator0);
      
      String string5 = StringUtils.join(iterator0, "");
      assertFalse(linkedHashSet0.contains(string4));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("\"_<_&I|R*:Mud`bN8Nw", "Search and Replace array lengths don't match: ", false);
      assertEquals((-81), int0);
      
      String string0 = StringUtils.replaceChars("Search and Replace array lengths don't match: ", "J)|kgH", "Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lencths don't match: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.toRootUpperCase((String) null);
      assertNull(string1);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.removeStart("+F(}|8:~l`!KdFa1HB4", "");
      assertEquals("+F(}|8:~l`!KdFa1HB4", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.swapCase("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      char[] charArray0 = new char[0];
      String string4 = StringUtils.join(charArray0, 'r');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.repeat("", "", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("\n");
      assertArrayEquals(new int[] {10}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.removeEnd("org.junitpioneer.jupiter.cartesian.CartesianEnumArgumentsProvider", (String) null);
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianEnumArgumentsProvider", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      String string0 = StringUtils.difference("(?V9kmrjyQ<34", "(?V9kmrjyQ<34");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "xmY.x&Pt2aP&NOpGUU'");
      assertNull(string1);
      
      String string2 = StringUtils.mid("", 2529, (-1168));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string3 = StringUtils.replaceChars((String) null, "Jj0$fC1== ar!9*S", "N @7i0\":m`KPj");
      assertNull(string3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.rightPad("7+}xY=", 6, '');
      assertEquals("7+}xY=", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.abbreviate("/T8eM;k", 81);
      assertEquals("/T8eM;k", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripEnd("`", "#5xjX\"Z`BL8{Q]_1yj");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[5] = "`";
      stringArray0[1] = "S";
      stringArray0[2] = null;
      stringArray0[4] = "IYszxDlYAR|UOtA[{Yb";
      stringArray0[5] = "S";
      stringArray0[6] = null;
      stringArray0[1] = null;
      String string1 = StringUtils.replaceOnceIgnoreCase("IYszxDlYAR|UOtA[{Yb", "IYszxDlYAR|UOtA[{Yb", "IYszxDlYAR|UOtA[{Yb");
      assertEquals("IYszxDlYAR|UOtA[{Yb", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("t|G&Xof@@+bNJJ;AuqJ", (-2416));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.defaultIfBlank("S", "P#2,W]C~|j:6f_");
      assertEquals("S", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(stringArray0[6]);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "tp@XYmT%ec9SH.", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rightPad("...", (-3548), "QI");
      assertEquals("...", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\n\r", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      String string0 = StringUtils.leftPad("(8-Mx#!3JxGUl $", 100);
      assertEquals("                                                                                     (8-Mx#!3JxGUl $", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("                                                                                     (8-Mx#!3JxGUl $", "                                                                                     (8-Mx#!3JxGUl $");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("                                                                                     (8-Mx#!3JxGUl $");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase("org.junitpioneer.jupiter.DisableIfTestFailsExtension", "i ");
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("WC2", "org.apache.commons.lang3.StringUtils", "@vfO0W*tG=U");
      assertEquals("WC2", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.trimToNull("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("i ", "<mO", 98);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      charArray0[1] = 'z';
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      charArray0[4] = 'q';
      String string4 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'q', 'z', 'q', 'q', 'q'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("qzqqq", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank("                                                                                     (8-Mx#!3JxGUl $", supplier0);
      assertEquals("                                                                                     (8-Mx#!3JxGUl $", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.substringAfterLast("xmY.x&Pt2aP&NOpGUU'cbs", 100);
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "                                                                                     (8-Mx#!3JxGUl $", (CharSequence) "WC2");
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("WC2", "org.junitpioneer.jupiter.params.Range", 98);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("i ", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      String string8 = StringUtils.replace((String) null, "[h{B ?,&Qi)&Faz<mO", "Node ", 3383);
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      String string0 = StringUtils.substringBefore("G;JOEX1c;6% ", "G;JOEX1c;6% ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.toRootLowerCase("\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase(" ", "\n");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat("\n", 198);
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'z';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 198;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      doubleArray0[4] = (double) (-1);
      String string3 = StringUtils.join(doubleArray0, 'z');
      assertArrayEquals(new double[] {122.0, (-1.0), (-1.0), 198.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals("122.0z-1.0z-1.0z198.0z-1.0", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1330;
      shortArray0[1] = (short)959;
      shortArray0[2] = (short)17;
      shortArray0[3] = (short) (-1110);
      shortArray0[4] = (short)8;
      shortArray0[5] = (short)1573;
      String string4 = StringUtils.join(shortArray0, 'z', (int) (short)1573, 53);
      assertArrayEquals(new short[] {(short)1330, (short)959, (short)17, (short) (-1110), (short)8, (short)1573}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = '|';
      charArray0[3] = 'z';
      charArray0[4] = 'z';
      charArray0[5] = 'z';
      charArray0[6] = 'z';
      charArray0[7] = 'z';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'z', 'z', '|', 'z', 'z', 'z', 'z', 'z'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'e');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      String string0 = StringUtils.rotate("l,`UR1J6R^<.sg1=O_", (-1394));
      assertEquals("R^<.sg1=O_l,`UR1J6", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("l,`UR1J6R^<.sg1=O_", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.reverseDelimited((String) null, ')');
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate("gK~#>m\"", 14);
      assertEquals("gK~#>m\"", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.countMatches((CharSequence) "6R^<.sg1=O_l,`UR1J", 'G');
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "Threshold must not be negative");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      String string4 = locale0.getDisplayVariant();
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.upperCase("Object varargs must not be null", locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase(")kA\\16~i]z~('_<6y", (String) null);
      assertEquals(")kA\\16~i]z~('_<6y", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      String string0 = StringUtils.left("\"p7koj7P^*>d-sXzEq", 5);
      assertEquals("\"p7ko", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.lastIndexOfAny("\"p7ko", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("hdu<mO.>+");
      assertEquals("hdu<mO.>+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "hdu<mO.>+";
      String string1 = StringUtils.replaceOnce("hdu<mO.>+", "!", "z.GY6!>$O)j]]&*q)x");
      assertEquals("hdu<mO.>+", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains("hdu<mO.>+"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = arrayDeque0.offerFirst("Threshold must not be negative");
      assertTrue(arrayDeque0.contains("Threshold must not be negative"));
      assertFalse(arrayDeque0.contains("hdu<mO.>+"));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(boolean0);
      
      Spliterator<String> spliterator0 = arrayDeque0.spliterator();
      assertTrue(arrayDeque0.contains("Threshold must not be negative"));
      assertFalse(arrayDeque0.contains("hdu<mO.>+"));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertNotNull(spliterator0);
      
      String string2 = StringUtils.toRootUpperCase("DN0Uh4`Pq<@z;Kk&");
      assertEquals("DN0UH4`PQ<@Z;KK&", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.toRootUpperCase("!");
      assertEquals("!", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.mid("?:\";4r-w", 57, 1070);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.removeFirst("!", "!");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.repeat("DN0Uh4`Pq<@z;Kk&", 1070);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      double double0 = StringUtils.getJaroWinklerDistance("DN0Uh4`Pq<@z;Kk&", "DN0UH4`PQ<@Z;KK&");
      assertEquals(0.88, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase("", "Array element ");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "3G>:|K&N?Y y7", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", 'x', 'x');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 3753);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[0] = "!m*#";
      stringArray0[3] = null;
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) stringArray0[3], (CharSequence) stringArray0[3]);
      assertEquals(7, stringArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNull(string1);
      
      String string2 = StringUtils.join((String[]) null);
      assertNull(string2);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.KOREAN;
      assertSame(locale1, locale0);
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      String string3 = StringUtils.upperCase((String) null, locale1);
      assertSame(locale1, locale0);
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      String string0 = "whceO";
      String string1 = StringUtils.replaceOnceIgnoreCase("whceO", "whceO", "Strings must not be null");
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "whceO";
      charSequenceArray0[1] = (CharSequence) "whceO";
      charSequenceArray0[2] = (CharSequence) "Strings must not be null";
      String string2 = StringUtils.appendIfMissing("whceO", "Strings must not be null", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("whceO", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isMixedCase("whceO");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "whceO";
      stringArray0[1] = "Strings must not be null";
      stringArray0[3] = "whceO";
      stringArray0[4] = "whceO";
      stringArray0[5] = "Strings must not be null";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.reverseDelimited("whceO", '!');
      assertEquals("whceO", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) stringArray0[2], (CharSequence) stringArray0[2]);
      assertEquals(6, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      int int0 = StringUtils.indexOf(charSequenceArray0[0], 448);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray2 = StringUtils.split("Strings must not be null");
      assertEquals(5, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("whceO", "whceO", stringArray2);
      assertEquals(5, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals("whceO", string4);
      assertNotNull(string4);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      
      String[] stringArray3 = StringUtils.split(stringArray0[2], "Strings must not be null", 98);
      assertEquals(6, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNull(stringArray3);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '!', (-17), 98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -17
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "Minimum abbreviation width is %d");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Minimum abbreviation width is %d");
      assertEquals(0, int0);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string2 = StringUtils.replaceFirst((String) null, (String) null, (String) null);
      assertNull(string2);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string3 = StringUtils.mid("\r", 1, 7);
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.ordinalIndexOf("\r", "Minimum abbreviation width is %d", (-92));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[24];
      charSequenceArray0[7] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[15] = (CharSequence) "FW";
      String string4 = StringUtils.replaceIgnoreCase("@M4C^.+rT~q$", "P#2,W]C~|j:6f_", (String) null);
      assertEquals("@M4C^.+rT~q$", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      
      charSequenceArray0[4] = (CharSequence) "@M4C^.+rT~q$";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "\r";
      charSequenceArray0[7] = (CharSequence) "\r";
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(24, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Exactly one type of input must be provided in the @");
      assertEquals("Exactlyonetypeofinputmustbeprovidedinthe@", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("WpoY}Vkouj7U0a");
      assertEquals("wpoY}Vkouj7U0a", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("C=a&soyG", 'z');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.substringAfterLast("C=a&soyG", 6);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replaceIgnoreCase("#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw", "sAT+7", "C=a&soyG", 1933);
      assertEquals("#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("WpoY}Vkouj7U0a");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("Exactlyonetypeofinputmustbeprovidedinthe@");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(treeSet0);
      
      boolean boolean1 = treeSet0.add("O(0ac&duC/8");
      assertFalse(treeSet0.contains(string0));
      assertTrue(treeSet0.contains("O(0ac&duC/8"));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>(treeSet0);
      assertFalse(treeSet0.contains(string0));
      assertTrue(treeSet0.contains("O(0ac&duC/8"));
      assertTrue(linkedList0.contains("O(0ac&duC/8"));
      assertFalse(linkedList0.contains(string0));
      assertEquals(1, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean2 = treeSet0.add("Exactly one type of input must be provided in the @");
      assertFalse(treeSet0.contains(string0));
      assertTrue(treeSet0.contains("O(0ac&duC/8"));
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.join((Iterable<?>) linkedList0, ')');
      assertFalse(treeSet0.contains(string0));
      assertTrue(treeSet0.contains(string4));
      assertTrue(linkedList0.contains(string4));
      assertFalse(linkedList0.contains(string0));
      assertEquals(1, linkedList0.size());
      assertEquals("O(0ac&duC/8", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.stripAccents((String) null);
      assertNull(string5);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string6 = StringUtils.upperCase("Exactly one type of input must be provided in the @", locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("EXACTLY ONE TYPE OF INPUT MUST BE PROVIDED IN THE @", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Exactly one type of input must be provided in the @";
      objectArray0[1] = (Object) "WpoY}Vkouj7U0a";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "wpoY}Vkouj7U0a";
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) linkedList0;
      objectArray0[6] = (Object) "EXACTLY ONE TYPE OF INPUT MUST BE PROVIDED IN THE @";
      String string7 = StringUtils.joinWith("wpoY}Vkouj7U0a", objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals("Exactly one type of input must be provided in the @wpoY}Vkouj7U0aWpoY}Vkouj7U0awpoY}Vkouj7U0azh_CNwpoY}Vkouj7U0awpoY}Vkouj7U0awpoY}Vkouj7U0a[O(0ac&duC/8]wpoY}Vkouj7U0a[O(0ac&duC/8]wpoY}Vkouj7U0aEXACTLY ONE TYPE OF INPUT MUST BE PROVIDED IN THE @", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = " ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, int0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("Hho", '[');
      assertEquals("Hho", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      long[] longArray0 = new long[0];
      String string2 = StringUtils.join(longArray0, 'l');
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.countMatches((CharSequence) " ", '[');
      assertEquals(0, int0);
      
      String string3 = StringUtils.rightPad("", (int) 'l', '~');
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\" should have a parent context.", 1225);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("aM1^>!?:q3");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Threshold must not be negative", "Threshold must not be negative");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEnd(" ", "\r");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad(" ", 0, " ");
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsIgnoreCase(" ", "\r");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 38;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 2045;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'J', 0, 38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.toRootLowerCase("\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase(" ", "\n");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat("\n", 198);
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'z';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 198;
      doubleArray0[4] = (double) (-1);
      String string3 = StringUtils.join(doubleArray0, 'z');
      assertArrayEquals(new double[] {122.0, (-1.0), (-1.0), 198.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals("122.0z-1.0z-1.0z198.0z-1.0", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      String string0 = StringUtils.repeat("9", 14);
      assertEquals("99999999999999", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      String string0 = StringUtils.substringAfter("0k#", "0k#");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.swapCase("The character must not be null");
      assertEquals("tHE CHARACTER MUST NOT BE NULL", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("b7C-&!L1wh1e?yb5b+H");
      assertEquals("b7C-&!L1wh1e?yb5b+H", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "b7C-&!L1wh1e?yb5b+H", 79);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.join((Object[]) stringArray0, 'm', 79, 79);
      assertEquals(0, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripAccents("0k#");
      assertEquals("0k#", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      int[] intArray0 = StringUtils.toCodePoints("0k#");
      assertArrayEquals(new int[] {48, 107, 35}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      String string5 = StringUtils.wrap("", "V/-Ee\u0002rpz]^U!6##");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.join((Object[]) stringArray0, 'm', 4147, 4147);
      assertEquals(0, stringArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.join((double[]) null, '|', 4147, 79);
      assertNull(string7);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = 'm';
      charArray0[2] = '|';
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'|', 'm', '|'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string8 = StringUtils.appendIfMissingIgnoreCase("", "", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string8);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("The character must not be null");
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(33, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(30, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals(30, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=30 cap=33]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertNotNull(charset1);
      
      Charset charset2 = Charset.defaultCharset();
      assertSame(charset2, charset1);
      assertSame(charset2, charset0);
      assertTrue(charset2.canEncode());
      assertEquals("UTF-8", charset2.displayName());
      assertTrue(charset2.isRegistered());
      assertEquals("UTF-8", charset2.toString());
      assertEquals("UTF-8", charset2.name());
      assertNotNull(charset2);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "cbs", (-2872));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeEnd("`LQ&>B", "\r");
      assertEquals("`LQ&>B", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("pX1T#7ZD:}Yx7&}W\"q", (-1), "`LQ&>B");
      assertEquals("pX1T#7ZD:}Yx7&}W\"q", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("`LQ&>B", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat(")L5=7U LbJt\u0003=n", (-1232));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      String string3 = StringUtils.join(doubleArray0, 'z');
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals("-1.0", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "@og-B}Xz_r, bA0]f0KlLmU");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("G_");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat((String) null, 1405);
      assertNull(string1);
      
      String string2 = StringUtils.trimToEmpty("G_");
      assertEquals("G_", string2);
      assertNotNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("  ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("K$=c>58p", "  ", "TN<Lsd(x");
      assertNull(stringArray0);
      
      String string0 = StringUtils.center(",Dt:VhPCK?S1$-", (-2148), '&');
      assertEquals(",Dt:VhPCK?S1$-", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("W+3dB]*KS", "C=a&soyG", "Test '%s' was supposed to run no longer than %d ms.", 57);
      assertEquals("W+3dB]*KS", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid("This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.", 57, 4099);
      assertEquals("te, which is fragile. Check the Javadoc or documentation for more details.", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.length("te, which is fragile. Check the Javadoc or documentation for more details.");
      assertEquals(74, int0);
      
      int int1 = StringUtils.compare("te, which is fragile. Check the Javadoc or documentation for more details.", "C=a&soyG", false);
      assertEquals(49, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "W+3dB]*KS", (CharSequence) "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.wrapIfMissing("#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw", 'n');
      assertEquals("n#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbwn", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.stripEnd("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("'D4", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("'D4", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "'D4", (-1), (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.join((Object[]) null, 'U', 1, 160);
      assertNull(string3);
      
      String string4 = StringUtils.join((double[]) null, 'U', (-1), 1000);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (char[]) null);
      assertTrue(boolean0);
      
      String string5 = StringUtils.stripToEmpty("1yW \">=;B>X");
      assertEquals("1yW \">=;B>X", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.appendIfMissingIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "1yW \">=;B>X", (CharSequence[]) null);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another1yW \">=;B>X", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("}/w<tn$j>@b7NcE?");
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(16, byteBuffer0.remaining());
      assertEquals(16, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16 cap=17]", byteBuffer0.toString());
      assertEquals(17, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertNotNull(byteBuffer0);
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.isRegistered());
      assertNotNull(charset1);
      
      Charset charset2 = Charset.defaultCharset();
      assertSame(charset2, charset0);
      assertSame(charset2, charset1);
      assertTrue(charset2.isRegistered());
      assertEquals("UTF-8", charset2.name());
      assertEquals("UTF-8", charset2.displayName());
      assertTrue(charset2.canEncode());
      assertEquals("UTF-8", charset2.toString());
      assertNotNull(charset2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      String string7 = StringUtils.toEncodedString(byteArray0, charset1);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertSame(charset1, charset0);
      assertSame(charset1, charset2);
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.isRegistered());
      assertEquals("6", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.normalizeSpace("_tCw]vljHA2F`4d");
      assertEquals("_tCw]vljHA2F`4d", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.startsWith(charSequenceArray0[5], "");
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.substring("", 3816, 3816);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.capitalize("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are");
      assertEquals("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, 'k', 1881, 1881);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      int[] intArray0 = StringUtils.toCodePoints("_tCw]vljHA2F`4d");
      assertEquals(16, intArray0.length);
      assertNotNull(intArray0);
      
      String string5 = StringUtils.wrap((String) null, "Object varargs must not be null");
      assertNull(string5);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      String string6 = StringUtils.left("", 3816);
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAlphanumeric("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isNumericSpace(charSequenceArray0[3]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      String string7 = StringUtils.unwrap("", "");
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, 2657);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 2657);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("NM0Z", "NM0Z", 2651);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((int[]) null, 'd');
      assertNull(string0);
      
      String string1 = StringUtils.wrap((String) null, 'd');
      assertNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfterLast("0[+NT1}un:&<c", "0[+NT1}un:&<c");
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("<mO", "StopatchExenion", "~#MsKeGDJ kE", 25);
      assertEquals("<mO", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.truncate("cbs", 25);
      assertEquals("cbs", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'd';
      longArray0[1] = (long) 2651;
      longArray0[2] = (long) 'd';
      boolean boolean0 = StringUtils.isMixedCase("<mO");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.split("NM0Z", "StopatchExenion");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "NM0Z", (CharSequence[]) stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(boolean1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "");
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripEnd("`", "#5xjX\"Z`BL8{Q]_1yj");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[5] = "`";
      stringArray0[1] = "S";
      stringArray0[2] = null;
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(")`3'/c!Pzo!o#-py1>b", (String) null, (-1743));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      String string1 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'z', 'z', 'z'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("zzz", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.getIfBlank("({bat98D%za", (Supplier<String>) null);
      assertEquals("({bat98D%za", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfterLast(".@SHL^", (-1743));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "#5xjX\"Z`BL8{Q]_1yj", (CharSequence) "`");
      assertEquals(7, int0);
      
      String string4 = StringUtils.strip("Q]?3*B)7>v/C");
      assertEquals("Q]?3*B)7>v/C", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Q]?3*B)7>v/C", (CharSequence[]) stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      String string5 = StringUtils.rightPad("'>^tV294SE", 7);
      assertEquals("'>^tV294SE", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean2 = StringUtils.startsWithAny("'>^tV294SE", stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(stringArray0.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\r");
      assertFalse(boolean0);
      
      String string0 = StringUtils.chop(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\r", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean0 = priorityQueue0.add("");
      assertTrue(priorityQueue0.contains(""));
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(priorityQueue0.contains(""));
      assertFalse(priorityQueue0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertEquals(1, priorityQueue0.size());
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.compareIgnoreCase("XFbxvY%[Gt27b;", "XFbxvY%[Gt27b;");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumericSpace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.leftPad("", 0, '');
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("K ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("K ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("K");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("8!0_Yg", "N", 57);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isMixedCase("8!0_Yg");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.stripAccents("N");
      assertEquals("N", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trim("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[3] = 'r';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Exactly one type of input must be provided in th @", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'r', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      int int0 = StringUtils.compare((String) null, "CHQCKm+V8`2F8>q2%3`", false);
      assertEquals(1, int0);
      
      String string0 = StringUtils.remove("'D4", "'D4");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "The type must not be nullThe type must not be null";
      String string2 = StringUtils.substringAfter("CHQCKm+V8`2F8>q2%3`", 1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.wrapIfMissing((String) null, 'D');
      assertNull(string3);
      
      int int1 = 13;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "'D4", 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      String string0 = StringUtils.swapCase("ation width is %d");
      assertEquals("ATION WIDTH IS %D", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, "ATION WIDTH IS %D", 100, 3);
      assertNull(string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = '^';
      charArray0[2] = 'D';
      charArray0[3] = 'B';
      charArray0[4] = ']';
      charArray0[5] = 'p';
      charArray0[6] = 'Z';
      charArray0[7] = 'x';
      charArray0[8] = '(';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "ATION WIDTH IS %D", charArray0);
      assertArrayEquals(new char[] {'{', '^', 'D', 'B', ']', 'p', 'Z', 'x', '('}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '^';
      longArray0[1] = (long) 'p';
      longArray0[2] = (long) '(';
      longArray0[3] = (long) 'Z';
      longArray0[4] = (long) ']';
      longArray0[5] = (long) ']';
      longArray0[6] = (long) '(';
      String string2 = StringUtils.join(longArray0, ';');
      assertArrayEquals(new long[] {94L, 112L, 40L, 90L, 93L, 93L, 40L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals("94;112;40;90;93;93;40", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ation width is %d", '^');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", supplier0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequence0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      String string1 = StringUtils.substringBefore("'4", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("'4", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      
      int int1 = StringUtils.indexOf((CharSequence) "'4", (-1), 6);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.abbreviateMiddle("'4", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 3781);
      assertEquals("'4", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "'4", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string3 = StringUtils.abbreviateMiddle("'4", "e+Y.(.:", 1);
      assertEquals("'4", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "e+Y.(.:", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(1, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 1, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 92
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.toRootLowerCase("\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase(" ", "\n");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int[] intArray0 = new int[0];
      int int0 = StringUtils.ordinalIndexOf(" ", "\r", (-1));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.join((byte[]) null, 'P', (-1), 54);
      assertNull(string2);
      
      String string3 = StringUtils.join(intArray0, 'P', 2045, 2045);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.chop("\r");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.EMPTY;
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains(" "));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = ')';
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
      
      int int0 = StringUtils.compare("\n", "k)dY#3", true);
      assertEquals((-97), int0);
      
      String string1 = StringUtils.join((Object[]) null, 'K', (-1), 3524);
      assertNull(string1);
      
      String string2 = StringUtils.stripAccents(" ");
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      int int1 = StringUtils.indexOf((CharSequence) "0k#", (CharSequence) " ", (-1669));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\r", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.strip((String) null, " ");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      String string0 = StringUtils.leftPad("org.junitpioneer.jupiter.params.ShortRange", (-3434), 'F');
      assertEquals("org.junitpioneer.jupiter.params.ShortRange", string0);
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[4] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[5] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      String string1 = StringUtils.replaceIgnoreCase("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange", (-3434));
      assertEquals("org.junitpioneer.jupiter.params.ShortRange", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[6] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[7] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      String string2 = StringUtils.prependIfMissing("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("org.junitpioneer.jupiter.params.ShortRange", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = StringUtils.equalsIgnoreCase("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange");
      assertTrue(boolean0);
      
      String string3 = StringUtils.strip("/PhJRf-x{ \"R$", "org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("/PhJRf-x{ \"R$", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.remove("!5,55Py.wgzq79zm0w*", 'F');
      assertEquals("!5,55Py.wgzq79zm0w*", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("org.junitpioneer.jupiter.DisableIfTestFailsExtension", "i ");
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceAll("WC2", "org.apache.commons.lang3.StringUtils", "@vfO0W*tG=U");
      assertEquals("WC2", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "(8-Mx#!3JxGUl $", supplier0);
      assertEquals("(8-Mx#!3JxGUl $", charSequence0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      
      String string3 = StringUtils.substringBefore("\r", (String) null);
      assertEquals("\r", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "i ", 31, (-1038));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.join((List<?>) null, 'H', 2294, (-2083));
      assertNull(string4);
      
      String string5 = StringUtils.EMPTY;
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "WC2", (CharSequence) null);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      String string0 = StringUtils.substringBefore("wc(G7A`qLf,F!,)", (String) null);
      assertEquals("wc(G7A`qLf,F!,)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeEnd("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("", "lQyHpV]|i#`,~E@", (-1));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.rightPad("offset cannot be negative", 55, "lQyHpV]|i#`,~E@");
      assertEquals("offset cannot be negativelQyHpV]|i#`,~E@lQyHpV]|i#`,~E@", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.trimToEmpty("sActoU`[}rE>rGf;@");
      assertEquals("sActoU`[}rE>rGf;@", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.uncapitalize("Search and Replace array lengths don't match: ");
      assertEquals("search and Replace array lengths don't match: ", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", 55);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean2 = StringUtils.equals((CharSequence) "offset cannot be negativelQyHpV]|i#`,~E@lQyHpV]|i#`,~", (CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String[] stringArray1 = new String[8];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "M";
      stringArray1[1] = "offset cannot be negative";
      stringArray1[2] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray1[3] = "sActoU`[}rE>rGf;@";
      stringArray1[4] = "sActoU`[}rE>rGf;@";
      stringArray1[5] = "M";
      stringArray1[6] = "M";
      stringArray1[7] = "%s does not implement %s interface.";
      String string6 = StringUtils.replaceEachRepeatedly("offset cannot be negativelQyHpV]|i#`,~E@lQyHpV]|i#`,~", stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("offset cannot be negativelQyHpV]|i#`,~E@lQyHpV]|i#`,~", string6);
      assertNotNull(string6);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      try { 
        StringUtils.getBytes("K$=c>58p", "M");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.normalizeSpace("_tCw]vljHA?O2F4d");
      assertEquals("_tCw]vljHA?O2F4d", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.startsWith(charSequenceArray0[5], "");
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.substring("", 3816, 3816);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.capitalize("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are");
      assertEquals("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.containsWhitespace("_tCw]vljHA?O2F4d");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.join((int[]) null, 's', 0, (-2754));
      assertNull(string4);
      
      String string5 = StringUtils.repeat((String) null, 0);
      assertNull(string5);
      
      String string6 = StringUtils.center("", 12, '^');
      assertEquals("^^^^^^^^^^^^", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)10;
      String string7 = StringUtils.replaceOnceIgnoreCase("+.Y4>@!-&", "//", (String) null);
      assertEquals("+.Y4>@!-&", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.left("", 12);
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string1));
      
      String string9 = StringUtils.defaultIfBlank((String) null, "");
      assertEquals("", string9);
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string8));
      
      String string10 = StringUtils.wrapIfMissing("//", "#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw");
      assertEquals("#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw//#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw", string10);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      String string0 = StringUtils.substringAfter("0k#", "0k#");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.swapCase("The character must not be null");
      assertEquals("tHE CHARACTER MUST NOT BE NULL", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("b7C-&!L1wh1e?yb5b+H");
      assertEquals("b7C-&!L1wh1e?yb5b+H", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "b7C-&!L1wh1e?yb5b+H", 79);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.join((Object[]) stringArray0, 'm', 79, 79);
      assertEquals(0, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.stripAccents("0k#");
      assertEquals("0k#", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      int[] intArray0 = StringUtils.toCodePoints("0k#");
      assertArrayEquals(new int[] {48, 107, 35}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      String string5 = StringUtils.wrap("", "V/-Ee\u0002rpz]^U!6##");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.join(intArray0, '|', 79, 58);
      assertArrayEquals(new int[] {48, 107, 35}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      
      String string7 = StringUtils.join((Object[]) stringArray0, '|');
      assertEquals(0, stringArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", (Supplier<CharSequence>) null);
      assertNull(charSequence0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("0k#");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string8 = StringUtils.join(intArray0, '@', (int) 'm', 79);
      assertArrayEquals(new int[] {48, 107, 35}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("", string8);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      
      boolean boolean2 = StringUtils.isEmpty("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string9 = StringUtils.abbreviate("", "`LQ&>B", 79);
      assertEquals("", string9);
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string7));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-1362), 58);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("0k#");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "tHE CHARACTER MUST NOT BE NULL", (CharSequence[]) stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals((-1), int1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      String string0 = StringUtils.removePattern("()` not found in ", "present");
      assertEquals("()` not found in ", string0);
      assertNotNull(string0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(comparator0);
      assertFalse(priorityQueue0.contains("present"));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = priorityQueue0.add(object1);
      assertTrue(priorityQueue0.contains(object1));
      assertFalse(priorityQueue0.contains("present"));
      assertNotSame(object1, object0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      
      boolean boolean1 = priorityQueue0.add(object4);
      assertTrue(priorityQueue0.contains(object4));
      assertFalse(priorityQueue0.contains(object2));
      assertNotSame(object4, object3);
      assertNotSame(object4, object0);
      assertNotSame(object4, object2);
      assertNotSame(object4, object1);
      assertEquals(2, priorityQueue0.size());
      assertTrue(boolean1);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertTrue(boolean1 == boolean0);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertEquals(Locale.FilteringMode.IGNORE_EXTENDED_RANGES, locale_FilteringMode1);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      
      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, (String) null);
      assertTrue(priorityQueue0.contains(object4));
      assertFalse(priorityQueue0.contains(object2));
      assertEquals(2, priorityQueue0.size());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((double[]) null, '6', (-2039), 706);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2739);
      shortArray0[1] = (short) (-1178);
      String string0 = StringUtils.join(shortArray0, '@');
      assertArrayEquals(new short[] {(short) (-2739), (short) (-1178)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals("-2739@-1178", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trim("-2739@-1178");
      assertEquals("-2739@-1178", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-2739@-1178";
      stringArray0[1] = "-2739@-1178";
      stringArray0[2] = "_Y";
      stringArray0[3] = "-2739@-1178";
      stringArray0[4] = "-2739@-1178";
      stringArray0[5] = "-2739@-1178";
      String string2 = StringUtils.replaceEach("_Y", stringArray0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("_Y", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "-2739@-1178");
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.replace("\n", "+F(}|8:~l`!KdFa1HB4", "+F(}|8:~l`!KdFa1HB4", (-225));
      assertEquals("\n", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(comparator0);
      assertFalse(priorityQueue0.contains('@'));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode0);
      
      boolean boolean0 = priorityQueue0.add(locale_FilteringMode0);
      assertFalse(priorityQueue0.contains('@'));
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = priorityQueue0.add(object0);
      assertTrue(priorityQueue0.contains(object0));
      assertFalse(priorityQueue0.contains('@'));
      assertEquals(2, priorityQueue0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = priorityQueue0.add(object0);
      assertTrue(priorityQueue0.contains(object0));
      assertFalse(priorityQueue0.contains('@'));
      assertEquals(3, priorityQueue0.size());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.join((Iterable<?>) priorityQueue0, "-2739@-1178");
      assertTrue(priorityQueue0.contains(object0));
      assertFalse(priorityQueue0.contains('@'));
      assertEquals(3, priorityQueue0.size());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("GE", (-1937), (-225));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.range(locale_FilteringMode0, locale_FilteringMode1);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertEquals(3, enumSet0.size());
      assertNotNull(enumSet0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertEquals(3, enumSet0.size());
      assertNotNull(iterator0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      
      String string0 = StringUtils.join(iterator0, "_GCw]ljHA2?`4=d");
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertEquals(3, enumSet0.size());
      assertEquals("AUTOSELECT_FILTERING_GCw]ljHA2?`4=dEXTENDED_FILTERING_GCw]ljHA2?`4=dIGNORE_EXTENDED_RANGES", string0);
      assertNotNull(string0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Strings must not be null vs ", charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      String string0 = StringUtils.trim("QD'J6;.0%<9XTd-j");
      assertEquals("QD'J6;.0%<9XTd-j", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("QD'J6;.0%<9XTd-j", 321);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("", "QD'J6;.0%<9XTd-j", (CharSequence[]) null);
      assertEquals("QD'J6;.0%<9XTd-j", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = 'z';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = 'K';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "QD'J6;.0%<9XTd-j", charArray0);
      assertArrayEquals(new char[] {'r', 'z', ')', ')', 'K'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Object varargs mst not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      int int0 = 118;
      String string0 = StringUtils.rotate("CartesianProductTest can not have a non-empty display name.", 118);
      assertEquals("CartesianProductTest can not have a non-empty display name.", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "CartesianProductTest can not have a non-empty display name.", (CharSequence) "CartesianProductTest can not have a non-empty display name.");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("CartesianProductTest can not have a non-empty display name.", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("CartesianProductTest can not have a non-empty display name.");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 's';
      charArray0[2] = 'z';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 's', 0, 988);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '#', 102, 102);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'V');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.rightPad("", 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.truncate("gU;Z[lZA)@gz", 0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBefore("OkEBYU4LVo0WvdM,", " or any enclosing class.");
      assertEquals("OkEBYU4LVo0WvdM,", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("OkEBYU4LVo0WvdM,", charSequenceArray0[3]);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[4]);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.reverse(" or any enclosing class.");
      assertEquals(".ssalc gnisolcne yna ro ", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.EMPTY;
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "fxZ'", (CharSequence) "OkEBYU4LVo0WvdM,");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      boolean boolean2 = StringUtils.containsAny(charSequenceArray0[4], (CharSequence) null);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string6 = StringUtils.replaceChars("", "eZc6D+>", "a");
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.prependIfMissing("org.junitpioneer.jupiter.DefaultLocaleExtension+F(}|8:~l`!KdFa1HB4", "org.junitpioneer.jupiter.DefaultLocaleExtension+F(}|8:~l`!KdFa1HB4", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension+F(}|8:~l`!KdFa1HB4", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", (-1), 'x');
      assertEquals("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", supplier0);
      assertEquals("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", charSequence0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      
      String string2 = StringUtils.substringBefore("0k", ",7^H]!*O");
      assertEquals("0k", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      
      int int1 = StringUtils.indexOf((CharSequence) "CmRj=6Fn9'r0QeQS", (-727), 742);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.abbreviateMiddle("", "0k", 6);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string4 = StringUtils.abbreviateMiddle("'4", "", (-2557));
      assertEquals("'4", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      
      String string5 = StringUtils.upperCase("cNNCc~5#bs#M");
      assertEquals("CNNCC~5#BS#M", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", (CharSequence) "");
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      
      String string6 = StringUtils.abbreviate("'4", "FstpP%w,wd)^L5*F", 14, 742);
      assertEquals("'4", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)charSequence0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.wrap(" ", " ");
      assertEquals("   ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("   ", (-205));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "   ", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((Comparator<? super Object>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      boolean boolean0 = priorityQueue0.add(locale_Category0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, "@og-B}Xz_r, bA0]f0KlLmU");
      assertFalse(priorityQueue0.contains("@og-B}Xz_r, bA0]f0KlLmU"));
      assertEquals(1, priorityQueue0.size());
      assertEquals("FORMAT", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("Method `", (String) null);
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("FORMAT", "FORMAT");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumericSpace("FORMAT");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.leftPad("@og-B}Xz_r, bA0]f0KlLmU", 1, '');
      assertEquals("@og-B}Xz_r, bA0]f0KlLmU", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "@og-B}Xz_r, bA0]f0KlLmU", (CharSequence) "@og-B}Xz_r, bA0]f0KlLmU", 1);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "Method `";
      stringArray0[3] = null;
      stringArray0[4] = "@og-B}Xz_r, bA0]f0KlLmU";
      String string2 = StringUtils.right("PW/hZSE8", 2347);
      assertEquals("PW/hZSE8", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance(stringArray0[3], "@og-B}Xz_r, bA0]f0KlLmU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.removeEnd("", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "\r");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Stream<Object> stream0 = priorityQueue0.parallelStream();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(stream0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.IGNORE_EXTENDED_RANGES, locale_FilteringMode0);
      
      boolean boolean0 = priorityQueue0.add(locale_FilteringMode0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[20];
      objectArray0[0] = (Object) stream0;
      objectArray0[1] = (Object) stream0;
      objectArray0[2] = (Object) "a/g{zxa|Txp]cP+h(";
      objectArray0[3] = (Object) "5sykqv.";
      objectArray0[4] = (Object) "@og-B}Xz_r, bA0]f0KlLmU";
      objectArray0[5] = (Object) locale_FilteringMode0;
      objectArray0[6] = (Object) "5sykqv.";
      String string0 = StringUtils.join(objectArray0, 'c');
      assertEquals(20, objectArray0.length);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("a/g{zxa|Txp]cP+h(", "5sykqv.");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.stripEnd("5sykqv.", "java.util.stream.ReferencePipeline$Head@7e035682cjava.util.stream.ReferencePipeline$Head@7e035682ca/g{zxa|Txp]cP+h(c5sykqv.c@og-B}Xz_r, bA0]f0KlLmUcIGNORE_EXTENDED_RANGESc5sykqv.ccccccccccccc");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[21];
      charSequenceArray0[0] = (CharSequence) "java.util.stream.ReferencePipeline$Head@7e035682cjava.util.stream.ReferencePipeline$Head@7e035682ca/g{zxa|Txp]cP+h(c5sykqv.c@og-B}Xz_r, bA0]f0KlLmUcIGNORE_EXTENDED_RANGESc5sykqv.ccccccccccccc";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "java.util.stream.ReferencePipeline$Head@7e035682cjava.util.stream.ReferencePipeline$Head@7e035682ca/g{zxa|Txp]cP+h(c5sykqv.c@og-B}Xz_r, bA0]f0KlLmUcIGNORE_EXTENDED_RANGESc5sykqv.ccccccccccccc";
      boolean boolean2 = StringUtils.endsWithAny("a/g{zxa|Txp]cP+h(", charSequenceArray0);
      assertEquals(21, charSequenceArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.remove("a/g{zxa|Txp]cP+h(", 'B');
      assertEquals("a/g{zxa|Txp]cP+h(", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[3], (CharSequence) "", 99);
      assertEquals(21, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(21, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      
      boolean boolean3 = StringUtils.isEmpty("java.util.stream.ReferencePipeline$Head@7e035682cjava.util.stream.ReferencePipeline$Head@7e035682ca/g{zxa|Txp]cP+h(c5sykqv.c@og-B}Xz_r, bA0]f0KlLmUcIGNORE_EXTENDED_RANGESc5sykqv.ccccccccccccc");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, 'G');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = ')';
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
      
      int int0 = StringUtils.compare("\n", "k)dY#3", true);
      assertEquals((-97), int0);
      
      String string1 = StringUtils.join((Object[]) null, 'K', (-1), 3524);
      assertNull(string1);
      
      String string2 = StringUtils.stripAccents(" ");
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string3 = StringUtils.wrap("0k#", "Strings mustDnot be null");
      assertEquals("Strings mustDnot be null0k#Strings mustDnot be null", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.join((int[]) null, 'K', 3524, (-1));
      assertNull(string4);
      
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) null, (Supplier<CharSequence>) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Strings mustDnot be null0k#Strings mustDnot be null");
      assertFalse(boolean0);
      
      String string5 = StringUtils.join((int[]) null, ';', (-1), (-1));
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      String string0 = StringUtils.stripStart("9", "");
      assertEquals("9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.difference("Node ", "Node ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "(");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Node ";
      stringArray0[4] = "";
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = 'c';
      charArray0[2] = '^';
      charArray0[3] = '*';
      charArray0[4] = '1';
      charArray0[5] = 'U';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'i', 'c', '^', '*', '1', 'U'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.toRootLowerCase("r4gI9)~EsC)>");
      assertEquals("r4gi9)~esc)>", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "(", (CharSequence) "(", (-1));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("r4gI9)~EsC)>", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.strip("jcU<sNh", "");
      assertEquals("jcU<sNh", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'i', 'c', '^', '*', '1', 'U'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      String string0 = StringUtils.substringBefore("Locale must not be null", "%s %s.");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "Locale must not be null";
      charSequenceArray0[2] = (CharSequence) "Locale must not be null";
      String string1 = StringUtils.reverseDelimited("8j:TT 5*mOTw)Ze", '`');
      assertEquals("8j:TT 5*mOTw)Ze", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[3] = (CharSequence) "8j:TT 5*mOTw)Ze";
      charSequenceArray0[4] = (CharSequence) "%s %s.";
      Locale locale0 = new Locale("/PhJRf-x{ \"R$abX*\r", "Locale must not be null", "@og-B}Xz_r, bA0]f0KlLmU");
      assertEquals("/phjrf-x{ \"r$abx*\r_LOCALE MUST NOT BE NULL_@og-B}Xz_r, bA0]f0KlLmU", locale0.toString());
      assertEquals("LOCALE MUST NOT BE NULL", locale0.getCountry());
      assertEquals("/phjrf-x{ \"r$abx*\r", locale0.getLanguage());
      assertEquals("@og-B}Xz_r, bA0]f0KlLmU", locale0.getVariant());
      assertNotNull(locale0);
      
      String string2 = StringUtils.lowerCase("Locale must not be null", locale0);
      assertEquals("/phjrf-x{ \"r$abx*\r_LOCALE MUST NOT BE NULL_@og-B}Xz_r, bA0]f0KlLmU", locale0.toString());
      assertEquals("LOCALE MUST NOT BE NULL", locale0.getCountry());
      assertEquals("/phjrf-x{ \"r$abx*\r", locale0.getLanguage());
      assertEquals("@og-B}Xz_r, bA0]f0KlLmU", locale0.getVariant());
      assertEquals("locale must not be null", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[5] = (CharSequence) "locale must not be null";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.joinWith("DN0UH4`PQ<@Z;KK&", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("...DN0UH4`PQ<@Z;KK&Locale must not be nullDN0UH4`PQ<@Z;KK&Locale must not be nullDN0UH4`PQ<@Z;KK&8j:TT 5*mOTw)ZeDN0UH4`PQ<@Z;KK&%s %s.DN0UH4`PQ<@Z;KK&locale must not be null", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-247);
      String string5 = StringUtils.join(shortArray0, '`', 2465, (int) (short) (-247));
      assertArrayEquals(new short[] {(short) (-247)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.joinWith("K5<'>&T.Iyt", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("...K5<'>&T.IytLocale must not be nullK5<'>&T.IytLocale must not be nullK5<'>&T.Iyt8j:TT 5*mOTw)ZeK5<'>&T.Iyt%s %s.K5<'>&T.Iytlocale must not be null", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("", 54, "\" should have a parent context.");
      assertEquals("\" should have a parent cont\" should have a parent cont", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("\" should have a parent cont\" should have a parent cont", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.removeEndIgnoreCase("", "\" should have a parent cont\" should have a parent cont");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.EMPTY;
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("", "", (String) null);
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      
      String string5 = StringUtils.rightPad("\" should have a parent context.", 160, "C=a&soyG");
      assertEquals("\" should have a parent context.C=a&soyGC=a&soyGC=a&soyGC=a&soyGC=a&soyGC=a&soyGC=a&soyGC=a&soyGC=a&soyGC=a&soyGC=a&soyGC=a&soyGC=a&soyGC=a&soyGC=a&soyGC=a&soyGC", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isBlank("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "&]bzCR&A~";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean3 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String string6 = StringUtils.repeat("\" should have a parent cont\" should have a parent cont", (-2171));
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      String string0 = StringUtils.leftPad("(8-Mx#!3JxGUl $", 100);
      assertEquals("                                                                                     (8-Mx#!3JxGUl $", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("                                                                                     (8-Mx#!3JxGUl $", "                                                                                     (8-Mx#!3JxGUl $");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("                                                                                     (8-Mx#!3JxGUl $");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase("org.junitpioneer.jupiter.DisableIfTestFailsExtension", "i ");
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("WC2", "org.apache.commons.lang3.StringUtils", "@vfO0W*tG=U");
      assertEquals("WC2", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.trimToNull("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("i ", "<mO", 98);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      charArray0[1] = 'z';
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      charArray0[4] = 'q';
      String string4 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'q', 'z', 'q', 'q', 'q'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("qzqqq", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank("                                                                                     (8-Mx#!3JxGUl $", supplier0);
      assertEquals("                                                                                     (8-Mx#!3JxGUl $", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.substringAfterLast("xmY.x&Pt2aP&NOpGUU'cbs", 100);
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "                                                                                     (8-Mx#!3JxGUl $", (CharSequence) "WC2");
      assertEquals((-1), int0);
      
      String string7 = StringUtils.chomp("i ");
      assertEquals("i ", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("WC2", "org.junitpioneer.jupiter.params.Range", 98);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("WC2", '2');
      assertEquals(2, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      boolean boolean2 = StringUtils.equalsAny("WC2", stringArray2);
      assertEquals(2, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(boolean2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string8 = StringUtils.wrap((String) null, " F|00@hv(-hX_N");
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp(" ");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      String string0 = StringUtils.substringAfter("0k#", ">7khZ(k,x<Z{Kg");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.swapCase("The character must not be null");
      assertEquals("tHE CHARACTER MUST NOT BE NULL", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("b7C-&!L1wh1e?yb5b+H");
      assertEquals("b7C-&!L1wh1e?yb5b+H", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "b7C-&!L1wh1e?yb5b+H", 79);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.defaultIfBlank("5", "Strings mustDnot be null");
      assertEquals("5", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Strings mustDnot be null", (CharSequence) "");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substringAfter("", (-449));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.wrap("", "uq%@T");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.chomp("5");
      assertEquals("5", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.leftPad("", 321);
      assertEquals("                                                                                                                                                                                                                                                                                                                                 ", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      String string0 = StringUtils.substringBefore("sZP7I", "org.junitpioneer.jupiter.params.Range");
      assertEquals("sZP7I", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "sZP7I", (CharSequence) "sZP7I");
      assertEquals(0, int0);
      
      String string1 = StringUtils.unwrap("tf/j0t-K", '[');
      assertEquals("tf/j0t-K", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("`LQ&>B", '[');
      assertEquals("`LQ&>B", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2913;
      doubleArray0[2] = 100.0;
      String[] stringArray0 = StringUtils.splitByWholeSeparator("`LQ&>B", "`LQ&>B", 2913);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.wrap(".v6/5zM/>:`bb`S,eA", '[');
      assertEquals("[.v6/5zM/>:`bb`S,eA[", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "[.v6/5zM/>:`bb`S,eA[", (CharSequence) "tf/j0t-K", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.abbreviate("org.junitpioneer.jupiter.params.Range", "tf/j0t-K", (-631), 30);
      assertEquals("org.junitpioneer.jupittf/j0t-K", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      String string0 = StringUtils.center("V;jjO7", 54, "+{0+=#`WBlgdFb&a3Y7TtI}R4");
      assertEquals("+{0+=#`WBlgdFb&a3Y7TtI}RV;jjO7+{0+=#`WBlgdFb&a3Y7TtI}R", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("IvK$O", 54);
      assertEquals("IvK$O", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("+{0+=#`WBlgdFb&a3Y7TtI}R4", "IvK$O");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeEndIgnoreCase("+{0+=#`WBlgdFb&a3Y7TtI}RV;jjO7+{0+=#`WBlgdFb&a3Y7TtI}R", "g$=p=Wq@SNL-yaXj");
      assertEquals("+{0+=#`WBlgdFb&a3Y7TtI}RV;jjO7+{0+=#`WBlgdFb&a3Y7TtI}R", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.center("H -0Q+asA@K&QyF)W", 54);
      assertEquals("                  H -0Q+asA@K&QyF)W                   ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "a~{In^SG#MRd8", (CharSequence) "g$=p=Wq@SNL-yaXj");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "g$=p=Wq@SNL-yaXj";
      charSequenceArray0[1] = (CharSequence) "+{0+=#`WBlgdFb&a3Y7TtI}RV;jjO7+{0+=#`WBlgdFb&a3Y7TtI}R";
      charSequenceArray0[2] = (CharSequence) "+{0+=#`WBlgdFb&a3Y7TtI}RV;jjO7+{0+=#`WBlgdFb&a3Y7TtI}R";
      charSequenceArray0[3] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[4] = (CharSequence) "IvK$O";
      charSequenceArray0[5] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[6] = (CharSequence) "+{0+=#`WBlgdFb&a3Y7TtI}R4";
      charSequenceArray0[7] = (CharSequence) "V;jjO7";
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = StringUtils.countMatches(charSequenceArray0[4], 'q');
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string4 = StringUtils.rightPad("+{0+=#`WBlgdFb&a3Y7TtI}RV;jjO7+{0+=#`WBlgdFb&a3Y7TtI}R", (-5012), 'a');
      assertEquals("+{0+=#`WBlgdFb&a3Y7TtI}RV;jjO7+{0+=#`WBlgdFb&a3Y7TtI}R", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      byte[] byteArray0 = new byte[0];
      String string5 = StringUtils.join(byteArray0, 'Q', 100, (-1029));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean3 = StringUtils.contains((CharSequence) "", 1225);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 1100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.unwrap("", 'K');
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Object[]) stringArray0, "Va:UZ16qL`p");
      assertEquals(0, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(":0>M,?", "Geg57;:`_sSE^+x4");
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertTrue(boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'K';
      longArray0[1] = (long) 'V';
      longArray0[1] = (long) '!';
      String string3 = StringUtils.join(longArray0, 'E');
      assertArrayEquals(new long[] {75L, 33L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("75E33E0", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      byte[] byteArray0 = StringUtils.getBytes("", (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string4 = StringUtils.rotate((String) null, 55);
      assertNull(string4);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Va:UZ16qL`p", (CharSequence) "BpW(");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Geg57;:`_sSE^+x4", "dGY%KdnP\"");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, 323);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, ' ', (int) (short) (-3091), (-2346));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3091
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.normalizeSpace("_tCw]vljHA?O2F4d");
      assertEquals("_tCw]vljHA?O2F4d", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.startsWith(charSequenceArray0[5], "");
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.substring("", 3816, 3816);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.capitalize("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are");
      assertEquals("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean2 = StringUtils.containsWhitespace("_tCw]vljHA?O2F4d");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.join((int[]) null, 's', 0, (-2754));
      assertNull(string4);
      
      String string5 = StringUtils.repeat((String) null, 0);
      assertNull(string5);
      
      String string6 = StringUtils.center("", 12, '^');
      assertEquals("^^^^^^^^^^^^", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)14;
      shortArray0[2] = (short)4;
      shortArray0[3] = (short)99;
      shortArray0[4] = (short)3;
      shortArray0[5] = (short)2008;
      shortArray0[6] = (short)160;
      shortArray0[7] = (short) (-949);
      shortArray0[8] = (short) (-2840);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 's', (-480), 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -480
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) ':';
      String string0 = "{5|F!\"";
      String string1 = StringUtils.repeat("{5|F!\"", 2373);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeFirst("{5|F!\"", "x`k$f");
      assertEquals("{5|F!\"", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.ordinalIndexOf(string1, "{5|F!\"", 102);
      assertEquals(606, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)9;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '^', 3, 1168);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = StringUtils.upperCase("Threshold must not be negative", locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("THRESHOLD MUST NOT BE NEGATIVE", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "THRESHOLD MUST NOT BE NEGATIVE";
      String string1 = StringUtils.unwrap("]", '_');
      assertEquals("]", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "Threshold must not be negative");
      assertNull(stringArray0);
      
      String string2 = StringUtils.remove((String) null, 'D');
      assertNull(string2);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (double) 2913;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-386.23901);
      doubleArray0[4] = (double) '_';
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) '[';
      doubleArray0[7] = (double) 0;
      String string3 = StringUtils.join(doubleArray0, '[', 0, 0);
      assertArrayEquals(new double[] {0.7, 2913.0, 0.0, (-386.23901), 95.0, 0.0, 91.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphanumeric("M");
      assertTrue(boolean0);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertFalse(set0.contains('['));
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string4 = StringUtils.mid("THRESHOLD MUST NOT BE NEGATIVE", (-1818), 7);
      assertEquals("THRESHO", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = StringUtils.ordinalIndexOf("THRESHOLD MUST NOT BE NEGATIVE", charSequenceArray0[0], 7);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("0x);EEIGzdwDH_");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", 'x', 'x');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 3753);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.defaultString("", "z=}36a}h");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "z=}36a}h");
      assertEquals(4, charSequenceArray0.length);
      assertEquals(8, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("", (String) null, "]qMnF{QL*5|MufC[");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      String string3 = locale0.getExtension('x');
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertNull(string3);
      
      String string4 = locale0.getExtension('x');
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertNull(string4);
      
      String string5 = StringUtils.lowerCase("^Q.*", locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("^q.*", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.reverse("");
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.EMPTY;
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "z=}36a}h");
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string8 = StringUtils.left((String) null, 40);
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.");
      assertEquals(30, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.left((String) null, 38);
      assertNull(string1);
      
      String string2 = StringUtils.stripToNull("Strings must not be null");
      assertEquals("Strings must not be null", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange");
      assertNull(string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains("org.junitpioneer.jupiter.params.ShortRange"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.rotate("e+m=W'", 21);
      assertEquals("=W'e+m", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)39;
      String string2 = StringUtils.join(byteArray0, '&', (-15), (-718));
      assertArrayEquals(new byte[] {(byte) (-82), (byte)39}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 37);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((double[]) null, ']', (-1), 507);
      assertNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = ']';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", charArray0);
      assertArrayEquals(new char[] {']', ']', ']', ']'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Charset.forName("<MO.>+Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <MO.>+Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'V');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.unwrap("", ']');
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Object[]) stringArray0, "Va:UZ16qL`p");
      assertEquals(0, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(":0>M,?", "wGeg57;:`_sSE^+x4");
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertTrue(boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("wGeg57;:`_sSE^+x4", "k/;^");
      assertEquals(3, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string3 = StringUtils.remove("#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw", ',');
      assertEquals("#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw", (-859));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray3 = StringUtils.stripAll(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray3.length);
      assertNotSame(stringArray0, stringArray2);
      assertSame(stringArray0, stringArray3);
      assertNotSame(stringArray0, stringArray1);
      assertSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertNotNull(stringArray3);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAny("4lP~;&>+8w-Ncp.", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringAfter("\r", " ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "(^MoF_&*GQF>mhkM+");
      assertEquals("(^MoF_&*GQF>mhkM+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("(^MoF_&*GQF>mhkM+", "(^MoF_&*GQF>mhkM+");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '{';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Search and Replace array lengths don't match: ", charArray0);
      assertArrayEquals(new char[] {'{', '{', '{'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviateMiddle("(^MoF_&*GQF>mhkM+", "1;m", 39);
      assertEquals("(^MoF_&*GQF>mhkM+", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((double[]) null, '{', (-1287), 2018);
      assertNull(string2);
      
      String string3 = StringUtils.chomp((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.substringAfter("1;m", (String) null);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.removeEnd("Sd~k-fd5R /7%UL", "(^MoF_&*GQF>mhkM+");
      assertEquals("Sd~k-fd5R /7%UL", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("kG)N\"M5\"{G", "kG)N\"M5\"{G");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Gf<Ao&+j#Gt#NDbv", "Gf<Ao&+j#Gt#NDbv");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      String string0 = "In%";
      String string1 = StringUtils.substringAfter("In%", "qdh7sH*");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "In%", '@');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string2 = "org.junitpioneer.jupiter.params.ShortRange";
      int int2 = 4686;
      String string3 = StringUtils.replace("lOziKgpoR", "In%", "org.junitpioneer.jupiter.params.ShortRange", 4686);
      assertEquals("lOziKgpoR", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.abbreviate("", 64);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      int int3 = StringUtils.countMatches((CharSequence) "lOziKgpoR", (CharSequence) "lOziKgpoR");
      assertEquals(1, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      String string5 = StringUtils.removeStartIgnoreCase("In%", "In%");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = "!";
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[1] = (CharSequence) "lOziKgpoR";
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Charset.forName("lOziKgpoR");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // lOziKgpoR
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2105.9473F);
      floatArray0[1] = (-2105.9473F);
      floatArray0[2] = (float) '}';
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      String string0 = StringUtils.rotate("Object varargs must not be null", (-2832));
      assertEquals("rgs must not be nullObject vara", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny("rgs must not be nullObject vara", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.deleteWhitespace("Object varargs must not be null");
      assertEquals("Objectvarargsmustnotbenull", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Objectvarargsmustnotbenull", (CharSequence[]) null);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Object varargs must not be null", (-1), 4);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOf((CharSequence) "Object varargs must not be null", (CharSequence) "Object varargs must not be null", (-2832));
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Object varargs must not be null";
      stringArray0[1] = "Object varargs must not be null";
      stringArray0[2] = "rgs must not be nullObject vara";
      stringArray0[3] = "Object varargs must not be null";
      stringArray0[4] = "rgs must not be nullObject vara";
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("Object varargs must not be null", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.strip("p{InCombiningDiacriticalMarks}+", "PAO?*h.<DT a;Tdu8x");
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("+r!?Vo36D");
      assertEquals("+r!?Vo36D", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.appendIfMissing("+r!?Vo36D", "+r!?Vo36D", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("+r!?Vo36D", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "+r!?Vo36D", (CharSequence) "+r!?Vo36D");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+r!?Vo36D";
      String string2 = StringUtils.center("+r!?Vo36D", 0, 'H');
      assertEquals("+r!?Vo36D", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains("+r!?Vo36D"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<String> iterator0 = arrayDeque0.descendingIterator();
      assertFalse(arrayDeque0.contains("+r!?Vo36D"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, (String) null);
      assertFalse(arrayDeque0.contains("+r!?Vo36D"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.replaceOnce("z.GY6!>$O)j]]&*q)x", "+r!?Vo36D", "!");
      assertEquals("z.GY6!>$O)j]]&*q)x", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      Spliterator<String> spliterator0 = arrayDeque0.spliterator();
      assertFalse(arrayDeque0.contains("+r!?Vo36D"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(spliterator0);
      
      String string5 = StringUtils.toRootUpperCase("z.GY6!>$O)j]]&*q)x");
      assertEquals("Z.GY6!>$O)J]]&*Q)X", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.toRootUpperCase("Z.GY6!>$O)J]]&*Q)X");
      assertEquals("Z.GY6!>$O)J]]&*Q)X", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      
      String string7 = StringUtils.mid("!", 0, 57);
      assertEquals("!", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      
      String string8 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", 57);
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      
      String string9 = StringUtils.overlay("Search and Replace array lengths don't match: ", "d429z^tWnL@>q:y", 127, 0);
      assertEquals("d429z^tWnL@>q:y", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'J', 'k');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("0XxkR;R'plxrrHcW#", (String) null);
      assertEquals("0XxkR;R'plxrrHcW#", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "maxWith cannot be negative";
      String string2 = StringUtils.joinWith("maxWith cannot be negative", objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substring((String) null, (-10), (-10));
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, (String) null, (int) 'J');
      assertNull(string4);
      
      String string5 = StringUtils.capitalize("XYbwRW<~vE6UPGBl&v9");
      assertEquals("XYbwRW<~vE6UPGBl&v9", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.getDigits("5,C4Lr@R~.NF6~WZz");
      assertEquals("546", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      String string0 = StringUtils.upperCase("<mO.>+");
      assertEquals("<MO.>+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("<mO.>+");
      assertEquals("<mO.>+", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllUpperCase("<MO.>+");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "<MO.>+", (CharSequence) "<mO.>+");
      assertEquals(0, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string2 = StringUtils.leftPad("$w{FT8^H", 2874, "Bl52>x77fy'aQY");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.chop((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.substring((String) null, 0);
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "<MO.>+";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) string2;
      charSequenceArray0[3] = (CharSequence) "<MO.>+";
      charSequenceArray0[4] = (CharSequence) string2;
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertEquals(5, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertEquals(5, enumSet0.size());
      assertNotNull(iterator0);
      
      String string5 = StringUtils.join(iterator0, '\"');
      assertEquals(5, enumSet0.size());
      assertEquals("AUTOSELECT_FILTERING\"EXTENDED_FILTERING\"IGNORE_EXTENDED_RANGES\"MAP_EXTENDED_RANGES\"REJECT_EXTENDED_RANGES", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.wrapIfMissing("<MO.>+", "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }");
      assertEquals("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }<MO.>+Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)14;
      String string7 = StringUtils.join(byteArray0, '<', 649, (int) (byte)13);
      assertArrayEquals(new byte[] {(byte)11, (byte)13, (byte)14}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.strip("LOC0AmGjy)<", "...");
      assertEquals("LOC0AmGjy)<", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, '?');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", '[');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      
      String string0 = StringUtils.substringBefore("...", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "...";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.joinWith("zz]s#|33ZEZNYp@r", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("...zz]s#|33ZEZNYp@rzz]s#|33ZEZNYp@rzz]s#|33ZEZNYp@rzz]s#|33ZEZNYp@r...", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "zz]s#|33ZEZNYp@r";
      stringArray0[2] = "...zz]s#|33ZEZNYp@rzz]s#|33ZEZNYp@rzz]s#|33ZEZNYp@rzz]s#|33ZEZNYp@r...";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)97;
      shortArray0[1] = (short)4098;
      String string3 = StringUtils.join(shortArray0, '9', (int) (short)4098, (int) (short)4098);
      assertArrayEquals(new short[] {(short)97, (short)4098}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.joinWith("Bl52>x77fy'aQY", stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("Bl52>x77fy'aQYzz]s#|33ZEZNYp@rBl52>x77fy'aQY...zz]s#|33ZEZNYp@rzz]s#|33ZEZNYp@rzz]s#|33ZEZNYp@rzz]s#|33ZEZNYp@r...", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeEndIgnoreCase("", "w)BvAysU#fDg*2*|8)");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("\n");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("j2R0^]-HL]tT-Zy[5");
      assertEquals("j2R0^]-HL]tT-Zy[5", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.unwrap("", '*');
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.center("", (-1), '*');
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = StringUtils.join((short[]) null, 'S', 17, (int) (short) (-2840));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      String[] stringArray0 = new String[16];
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'V');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.remove("llUAww<m", '.');
      assertEquals("llUAww<m", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("Jk> ", 108);
      assertEquals("Jk> ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "llUAww<m", 10);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.normalizeSpace("_tCw]vljHA2F`4d");
      assertEquals("_tCw]vljHA2F`4d", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.startsWith(charSequenceArray0[5], "");
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.substring("", 3816, 3816);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.capitalize("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are");
      assertEquals("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.leftPad("                                                                                     (8-Mx#!3JxGUl $OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", 5, "0o)8");
      assertEquals("                                                                                     (8-Mx#!3JxGUl $OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "                                                                                     (8-Mx#!3JxGUl $OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", charSequenceArray0[3], 5);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(5, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) null, (CharSequence) "0o)8");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = ')';
      charArray0[2] = 'K';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {'p', ')', 'K'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.toRootLowerCase(" ");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\n";
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "\n", (-1));
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase(" ", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.strip("", "Ohc5yfA");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      String string0 = StringUtils.remove(" \rSFWf_7U9?A", 'W');
      assertEquals(" \rSFf_7U9?A", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chomp("]+kPDqj;");
      assertEquals("]+kPDqj;", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("\" should ae a parenM context.");
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviate("\" should ae a parenM context.", "N", 18, 18);
      assertEquals("Na parenM context.", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("", 54, "\" should have a parent context.");
      assertEquals("\" should have a parent cont\" should have a parent cont", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("\" should have a parent cont\" should have a parent cont", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.removeEndIgnoreCase("", "\" should have a parent cont\" should have a parent cont");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.EMPTY;
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.mid("\" should have a parent cont\" should have a parent cont", (-1), (-2277));
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.substringAfterLast("", (-1089));
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      
      String string6 = StringUtils.abbreviate("\" should have a parent cont\" should have a parent cont", "&]bzCR&A~", 57, 52);
      assertEquals("&]bzCR&A~ve a parent cont\" should have a parent cont", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("+r!?Vo36D");
      assertEquals("+r!?Vo36D", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.appendIfMissing("+r!?Vo36D", "+r!?Vo36D", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("+r!?Vo36D", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "+r!?Vo36D", (CharSequence) "+r!?Vo36D");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+r!?Vo36D";
      String string2 = StringUtils.center("+r!?Vo36D", 0, 'H');
      assertEquals("+r!?Vo36D", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains(string0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<String> iterator0 = arrayDeque0.descendingIterator();
      assertFalse(arrayDeque0.contains(string0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, (String) null);
      assertFalse(arrayDeque0.contains(string0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.replaceOnce("z.GY6!>$O)j]]&*q)x", "+r!?Vo36D", "!");
      assertEquals("z.GY6!>$O)j]]&*q)x", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      Spliterator<String> spliterator0 = arrayDeque0.spliterator();
      assertFalse(arrayDeque0.contains("+r!?Vo36D"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(spliterator0);
      
      String string5 = StringUtils.toRootUpperCase("z.GY6!>$O)j]]&*q)x");
      assertEquals("Z.GY6!>$O)J]]&*Q)X", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.toRootUpperCase("Z.GY6!>$O)J]]&*Q)X");
      assertEquals("Z.GY6!>$O)J]]&*Q)X", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.unwrap("!", 'g');
      assertEquals("!", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("+r!?Vo36D"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string8 = StringUtils.join((List<?>) arrayList0, 'g', (-57557325), (-57557325));
      assertFalse(arrayList0.contains("+r!?Vo36D"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.unwrap(" ", 'C');
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEnd(" ", "\r");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad(" ", 0, " ");
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsIgnoreCase(" ", "\r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.repeat("0k;LZ", 0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      String string4 = StringUtils.join(doubleArray0, 'z');
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals("0.0z0.0z0.0z0.0z0.0z0.0z0.0", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isNumeric("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("G_SM", "\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("G_SM");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.normalizeSpace("offset cannot be negative");
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase("5NADC3Bz.Hl(m");
      assertEquals("5nadc3bZ.hL(M", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeFirst("Locale must not be null", "");
      assertEquals("Locale must not be null", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Locale must not be null", (CharSequence) "5nadc3bZ.hL(M", 1507);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "offset cannot be negative", (CharSequence) "H]<m#:z+a+zz", 1507);
      assertEquals(24, int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = StringUtils.isNumeric("5nadc3bZ.hL(M");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isMixedCase("G_SM");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringAfter("", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.wrapIfMissing("\n", "\r");
      assertEquals("\r\n\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("", (-1));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      String string0 = StringUtils.upperCase("<mO.>+");
      assertEquals("<MO.>+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("<mO.>+");
      assertEquals("<mO.>+", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllUpperCase("<MO.>+");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "<MO.>+", (CharSequence) "<mO.>+");
      assertEquals(0, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string2 = StringUtils.remove("7k=p7l+.Wwu@t)uwj", 'm');
      assertEquals("7k=p7l+.Wwu@t)uwj", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.wrapIfMissing("No @DisabledUntil annotation found on element", 'x');
      assertEquals("xNo @DisabledUntil annotation found on elementx", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.replaceChars("No @DisabledUntil annotation found on element", "8HWC2<mO", "<mO.>+");
      assertEquals("No @DisabledUntil annotation found on eleent", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "No @DisabledUntil annotation found on eleent", 0, 32);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isEmpty("7k=p7l+.Wwu@t)uwj");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains('m'));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains('m'));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, "No @DisabledUntil annotation found on eleent");
      assertFalse(stack0.contains('m'));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("<mO.>+", " ", ")l\"eEz -9(;jN2u[v*");
      assertNull(string1);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains(")l\"eEz -9(;jN2u[v*"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string2 = StringUtils.substring(" ", 3, 3);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.lowerCase(")l\"eEz -9(;jN2u[v*");
      assertEquals(")l\"eez -9(;jn2u[v*", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.split("O.h 6n");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.upperCase("O3;VCr9s@Oqp67");
      assertEquals("O3;VCR9S@OQP67", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "O3;VCr9s@Oqp67", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.abbreviate("The `date` %s is after the current date %s", "", 199);
      assertEquals("The `date` %s is after the current date %s", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      String string6 = StringUtils.strip("");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("#W&<o!j.VIT^3-;?,&", (String[]) null, (String[]) null);
      assertEquals("#W&<o!j.VIT^3-;?,&", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("#W&<o!j.VIT^3-;?,&");
      assertEquals(18, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "#W&<o!j.VIT^3-;?,&", (CharSequence) "#W&<o!j.VIT^3-;?,&");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("#W&<o!j.VIT^3-;?,&", 108, "org.junitpioneer.jupiter.SystemPropertyExtension");
      assertEquals("#W&<o!j.VIT^3-;?,&org.junitpioneer.jupiter.SystemPropertyExtensionorg.junitpioneer.jupiter.SystemPropertyExt", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.abbreviateMiddle("B>e", ":0>M,?", 108);
      assertEquals("B>e", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "B>e", (CharSequence) "org.junitpioneer.jupiter.SystemPropertyExtension");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) ":0>M,?", (-1856));
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string3 = StringUtils.wrapIfMissing(";LZ", "0k");
      assertEquals("0k;LZ0k", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string3));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains(string3));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      boolean boolean2 = linkedList0.add("0k;LZ0k");
      assertTrue(linkedList0.contains(string3));
      assertFalse(linkedList0.contains(":0>M,?"));
      assertNotSame(linkedList0, linkedList1);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean2);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.join((Iterable<?>) linkedList0, '9');
      assertTrue(linkedList0.contains(string3));
      assertFalse(linkedList0.contains(":0>M,?"));
      assertNotSame(linkedList0, linkedList1);
      assertEquals(1, linkedList0.size());
      assertEquals("0k;LZ0k", string4);
      assertNotNull(string4);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.uncapitalize("+{0+=#`WBlgdFb&a3Y7TtI}R4");
      assertEquals("+{0+=#`WBlgdFb&a3Y7TtI}R4", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      String string0 = StringUtils.leftPad("(8-Mx#!3JxGUl $", 100);
      assertEquals("                                                                                     (8-Mx#!3JxGUl $", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("                                                                                     (8-Mx#!3JxGUl $", "                                                                                     (8-Mx#!3JxGUl $");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("                                                                                     (8-Mx#!3JxGUl $");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase("org.junitpioneer.jupiter.DisableIfTestFailsExtension", "i ");
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("WC2", "org.apache.commons.lang3.StringUtils", "@vfO0W*tG=U");
      assertEquals("WC2", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.trimToNull("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("i ", "<mO", 100);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.join((Object[]) stringArray0, 'd');
      assertEquals(1, stringArray0.length);
      assertEquals("i ", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean2 = StringUtils.equalsIgnoreCase((CharSequence) null, "i ");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string5 = StringUtils.stripEnd("<mO", "<mO");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      boolean boolean3 = StringUtils.endsWithAny("@vfO0W*tG=U", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string6 = StringUtils.remove("@vfO0W*tG=U", '4');
      assertEquals("@vfO0W*tG=U", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.appendIfMissing("(8-Mx#!3JxGUl $", "@vfO0W*tG=U", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("(8-Mx#!3JxGUl $@vfO0W*tG=U", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.abbreviate("j2R0^", "", 109, 16);
      assertEquals("j2R0^", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      String string0 = StringUtils.leftPad("(8-Mx#!3JxGUl $", 100);
      assertEquals("                                                                                     (8-Mx#!3JxGUl $", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("                                                                                     (8-Mx#!3JxGUl $", "                                                                                     (8-Mx#!3JxGUl $");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("                                                                                     (8-Mx#!3JxGUl $");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.center("                                                                                     (8-Mx#!3JxGUl $", 0, '<');
      assertEquals("                                                                                     (8-Mx#!3JxGUl $", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains("                                                                                     (8-Mx#!3JxGUl $"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<String> iterator0 = arrayDeque0.descendingIterator();
      assertFalse(arrayDeque0.contains("                                                                                     (8-Mx#!3JxGUl $"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertFalse(arrayDeque0.contains("                                                                                     (8-Mx#!3JxGUl $"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replaceOnce((String) null, "Classpath resource [", "K%XMNUW}&@");
      assertNull(string3);
      
      Spliterator<String> spliterator0 = arrayDeque0.spliterator();
      assertFalse(arrayDeque0.contains("                                                                                     (8-Mx#!3JxGUl $"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(spliterator0);
      
      String string4 = StringUtils.toRootUpperCase((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.toRootUpperCase("Classpath resource [");
      assertEquals("CLASSPATH RESOURCE [", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.mid("K%XMNUW}&@", 0, 0);
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.substringAfterLast("PM", 57);
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      
      String string8 = StringUtils.abbreviate((String) null, "doesn't contain any substring.", 57, 57);
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.difference("Node ", "Node ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "(");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Node ";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("Node ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.compare((String) null, "!m*#", true);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.join((Object[]) stringArray0, 'l', 1916, (-1));
      assertEquals(7, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string4 = StringUtils.wrap("", (String) null);
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '~', (-1), 3524);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", 'x', 'x');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 3753);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string1 = StringUtils.replaceAll("Strings must not be null", "", "");
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("d;|9QifZ}5,Za/gd");
      assertEquals("d;|9QifZ}5,Za/gd", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Cannot get the toString of a null object", "", 8);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'z';
      charArray0[2] = 'q';
      charArray0[3] = 'z';
      charArray0[4] = 'q';
      charArray0[5] = 'z';
      charArray0[6] = 'q';
      charArray0[7] = 'x';
      String string3 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'q', 'z', 'q', 'z', 'q', 'z', 'q', 'x'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("qzqzqzqx", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.getIfBlank("qzqzqzqx", (Supplier<String>) null);
      assertEquals("qzqzqzqx", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.substringAfterLast("empty", 73);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "|hf)F\"KuJ", (CharSequence) "Strings must not be null");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "org.junitpioneer.jupiter.params.ShortRange", 1);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeEnd("%s was not annotated with @ArgumentsSource but should have been.", "org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("%s was not annotated with @ArgumentsSource but should have been.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("%s was not annotated with @ArgumentsSource but should have been.", (-3434), "The String must not be empty");
      assertEquals("%s was not annotated with @ArgumentsSource but should have been.", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("%s was not annotated with @ArgumentsSource but should have been.");
      assertEquals("%s was not annotated with @ArgumentsSource but should have been.", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("o[t5m*!JPL0HI=co3GU", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.defaultString("<mO8HWC2", (String) null);
      assertEquals("<mO8HWC2", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<mO8HWC2", charSequenceArray0[2]);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(8, int0);
      
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[5]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("", ".vm@Hl", "]qMnF{QL*5|MufC[");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      String string3 = locale0.getExtension('S');
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNull(string3);
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertEquals(188, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = locale0.getExtension('r');
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNull(string4);
      
      String string5 = StringUtils.lowerCase((String) null, locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNull(string5);
      
      String string6 = StringUtils.reverse("offset cannot be negative");
      assertEquals("evitagen eb tonnac tesffo", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.EMPTY;
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0[0], charSequenceArray0[3]);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string8 = StringUtils.substringAfterLast("STc:Nv3?:z|&%", (String) null);
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringAfterLast("\n", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited(",Vg`l^eg.S6rU|q", 'k');
      assertEquals(",Vg`l^eg.S6rU|q", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ",Vg`l^eg.S6rU|q", (CharSequence) ",Vg`l^eg.S6rU|q");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("2'm+SH~$", ",Vg`l^eg.S6rU|q", 15);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("offset cannot be negative", "xmY.x&Pt2aP&NOpGUU'cbs");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.rotate("0k;LZ", 0);
      assertEquals("0k;LZ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-128);
      byteArray0[8] = (byte)3;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'V', 0, 1975);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      String string0 = StringUtils.difference("org.junitpioneer.jupiter.DisabledUntilExtension", "Bl52>x77fy'aQY");
      assertEquals("Bl52>x77fy'aQY", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("", "Bl52>x77fy'aQY", "\n");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.trimToNull("\n");
      assertNull(string3);
      
      int int0 = StringUtils.compare("y[szt&s&", "");
      assertEquals(8, int0);
      
      String string4 = StringUtils.stripEnd("0XxkR;R'plxrrHcW#", "org.junitpioneer.jupiter.DisabledUntilExtension");
      assertEquals("0XxkR;R'plxrrHcW#", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.normalizeSpace((String) null);
      assertNull(string5);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "vh`[Iqt1p fne0", "Test '%s' was supposed to run no longer than %d ms.");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "G]7", (CharSequence) "Bl52>x77fy'aQY", (-122));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Bl52>x77fy'aQY");
      assertFalse(boolean0);
      
      String string6 = StringUtils.join((long[]) null, 'i');
      assertNull(string6);
      
      String string7 = StringUtils.join((Object[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.difference(":[}?,lBLl&vlF@", ":[}?,lBLl&vlF@");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ":[}?,lBLl&vlF@", (CharSequence) "", 21);
      assertEquals(14, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) "", 23);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      String string0 = StringUtils.upperCase("<mO.>+");
      assertEquals("<MO.>+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("<mO.>+");
      assertEquals("<mO.>+", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllUpperCase("<MO.>+");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("<mO.>+", "<mO.>+", false);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string2 = StringUtils.join(intArray0, '/');
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("0", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeEndIgnoreCase("1nBDP!9VV1nBDP!9VV", "7Ov");
      assertEquals("1nBDP!9VV1nBDP!9VV", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "m?", (CharSequence) "<MO.>+");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.substring("}Y$*ZvC%C", 0, 0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.uncapitalize("1nBDP!9VV1nBDP!9VV");
      assertEquals("1nBDP!9VV1nBDP!9VV", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.reverse("/otH00d{C[");
      assertEquals("[C{d00Hto/", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.EMPTY;
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "[C{d00Hto/", (CharSequence) "", 2210);
      assertEquals(10, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      String string0 = StringUtils.difference("(?V9kmrjyQ<34", "cbs");
      assertEquals("cbs", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "xmY.x&Pt2aP&NOpGUU'");
      assertNull(string1);
      
      String string2 = StringUtils.wrap("", "cbs");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.unwrap((String) null, '\'');
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "(?V9kmrjyQ<34", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = ')';
      charArray0[2] = 'K';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {'p', ')', 'K'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.toRootLowerCase("\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\n";
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "\n", (-1));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip("", "Ohc5yfA");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "\r");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substring((String) null, (-1));
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("\n", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", "", "null/empty items", 256);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "null/empty items", charArray0);
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '`';
      longArray0[1] = (long) 256;
      String string1 = StringUtils.join(longArray0, '`');
      assertArrayEquals(new long[] {96L, 256L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals("96`256", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((int[]) null, '`', (-538), (-538));
      assertNull(string2);
      
      int int1 = StringUtils.indexOf((CharSequence) null, 0, 20);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.substringAfterLast(")@K#Rqnr6`:C_k", (-538));
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.leftPad("", 2, "96`256");
      assertEquals("96", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.chop("null/empty items");
      assertEquals("null/empty item", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) ")@K#Rqnr6`:C_k";
      charSequenceArray0[2] = (CharSequence) "";
      String string6 = StringUtils.substring((String) null, (-538));
      assertNull(string6);
      
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "96`256";
      charSequenceArray0[6] = (CharSequence) "96";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertEquals(5, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertEquals(5, enumSet0.size());
      assertNotNull(iterator0);
      
      String string7 = StringUtils.join(iterator0, '`');
      assertEquals(5, enumSet0.size());
      assertEquals("AUTOSELECT_FILTERING`EXTENDED_FILTERING`IGNORE_EXTENDED_RANGES`MAP_EXTENDED_RANGES`REJECT_EXTENDED_RANGES", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      String string0 = StringUtils.strip("_GCw]ljHA2?`4=d");
      assertEquals("_GCw]ljHA2?`4=d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      String string0 = "l,`UR1J6R^<.sg1=O_\\";
      int int0 = (-1405);
      String string1 = StringUtils.rotate("l,`UR1J6R^<.sg1=O_", (-1405));
      assertEquals(",`UR1J6R^<.sg1=O_l", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "";
      boolean boolean0 = StringUtils.isNumericSpace("l,`UR1J6R^<.sg1=O_");
      assertFalse(boolean0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOf((CharSequence) "l,`UR1J6R^<.sg1=O_", 4524);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String string3 = StringUtils.defaultString("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int3 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      String string4 = "ctXh~m8iO|a~wzO^";
      String string5 = StringUtils.strip("ctXh~m8iO|a~wzO^");
      assertEquals("ctXh~m8iO|a~wzO^", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.defaultString("The `date` %s is after the current date %s", "");
      assertEquals("The `date` %s is after the current date %s", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = "\\FccD-$(ck";
      try { 
        StringUtils.getBytes("", "FccD-$(ck");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.normalizeSpace("_tCw]vljHA2F`4d");
      assertEquals("_tCw]vljHA2F`4d", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.startsWith(charSequenceArray0[5], "");
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.substring("", 3816, 3816);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "_tCw]vljHA2F`4d";
      stringArray0[1] = "_tCw]vljHA2F`4d";
      stringArray0[2] = null;
      stringArray0[3] = "_tCw]vljHA2F`4d";
      stringArray0[4] = "_tCw]vljHA2F`4d";
      stringArray0[5] = "_tCw]vljHA2F`4d";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", "0W!eL&+\"VU<(`|@r");
      assertEquals(0, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", 'x', 'x');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 3753);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[0] = "!m*#";
      stringArray0[3] = null;
      stringArray0[4] = "";
      stringArray0[6] = "";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("!m*#", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.compare("", "xZ", false);
      assertEquals((-2), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.center("xZ", (-2));
      assertEquals("xZ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "!m*#", (CharSequence) "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(7, stringArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = StringUtils.getBytes("\r", (String) null);
      assertArrayEquals(new byte[] {(byte)13}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, '\'');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center((String) null, 67, "9qz`})<Y@s_T+Bl`W");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, "hdu");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((int[]) null, '/');
      assertNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase((String) null, "9qz`})<Y@s_T+Bl`W");
      assertNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\" should have a parent context.", (CharSequence) "");
      assertEquals(0, int0);
      
      String string4 = StringUtils.abbreviateMiddle((String) null, "", 67);
      assertNull(string4);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "hdu", (CharSequence) "hdu");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", 0);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string5 = StringUtils.leftPad("hdu", 48);
      assertEquals("                                             hdu", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.wrapIfMissing((String) null, '#');
      assertNull(string6);
      
      String string7 = StringUtils.remove("U150cy*!", "*,r57aBxE:cX+J");
      assertEquals("U150cy*!", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = StringUtils.substringBetween("*,r57aBxE:cX+J", "org.junitpioneer.jupiter.DisableIfTestFailsExtension", ";L");
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, '0');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Stream<Object> stream0 = priorityQueue0.parallelStream();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(stream0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = priorityQueue0.add(object0);
      assertTrue(priorityQueue0.contains(object0));
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stream0;
      objectArray0[1] = (Object) priorityQueue0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) priorityQueue0;
      objectArray0[7] = (Object) priorityQueue0;
      String string0 = StringUtils.join(objectArray0, 'P');
      assertEquals(8, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("#-odsgI7$\"51Z>", "cbsxmY.x&Pt2aP&NOpGUU'");
      assertEquals("#-odsgI7$\"51Z>", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, "#-odsgI7$\"51Z>");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.stripEnd(" ", "matches '%s'.");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "java.util.stream.ReferencePipeline$Head@8cdab6aP[java.lang.Object@20288aa3]PPjava.lang.Object@20288aa3PPP[java.lang.Object@20288aa3]P[java.lang.Object@20288aa3]";
      String string3 = StringUtils.substringBefore("...", "cbsxmY.x&Pt2aP&NOpGUU'");
      assertEquals("...", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "...";
      charSequenceArray0[3] = (CharSequence) "#-odsgI7$\"51Z>";
      boolean boolean2 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.remove("matches '%s'.", '[');
      assertEquals("matches '%s'.", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean3 = StringUtils.isAlpha("#-odsgI7$\"51Z>");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      String string0 = StringUtils.removeStart(" \rPFW_U90A", " \rPFW_U90A");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "Minimum abbreviation width is %d");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Minimum abbreviation width is %d");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string2);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string3 = StringUtils.replaceFirst((String) null, (String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.center((String) null, 2147483645);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String string5 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string5);
      
      byte[] byteArray1 = StringUtils.getBytes((String) null, ".U~7v");
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("0k", 'V');
      assertEquals("0k", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "0k", (CharSequence) "0k");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("M", "0k", 55);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad(":0>M,?", (int) 'V', ":0>M,?");
      assertEquals(":0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.trimToEmpty(":0>M,?");
      assertEquals(":0>M,?", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.uncapitalize("Va:UZ16qL`p");
      assertEquals("va:UZ16qL`p", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.rightPad("Invalid exceptionStatus", 0);
      assertEquals("Invalid exceptionStatus", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.truncate("ExceptionWasThrown", 55);
      assertEquals("ExceptionWasThrown", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) ":0>M,?", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compare("Va:UZ16qL`p", "DN0UH4`PQ<@Z;KK&", false);
      assertEquals(18, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = StringUtils.indexOfAny((CharSequence) "Va:UZ16qL`p", "0k");
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("NM0Z", "NM0Z", 2682);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((int[]) null, 'd');
      assertNull(string0);
      
      String string1 = StringUtils.wrap((String) null, 'd');
      assertNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfterLast("0[+NT1}un:&<c", "0[+NT1}un:&<c");
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("<mO", "StopatchExenion", "~#MsKeGDJ kE", 25);
      assertEquals("<mO", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.truncate("cbs", 25);
      assertEquals("cbs", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 'd';
      longArray0[1] = (long) 2682;
      longArray0[2] = (long) 'd';
      String string5 = StringUtils.join(longArray0, '6', 160, 12);
      assertArrayEquals(new long[] {0L, 2682L, 100L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("NM0Z", "StopatchExenion");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = 'd';
      charArray0[2] = '6';
      charArray0[3] = 'd';
      charArray0[4] = '6';
      charArray0[5] = '6';
      charArray0[6] = '6';
      charArray0[7] = '6';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "0[+NT1}un:&<c", charArray0);
      assertArrayEquals(new char[] {'6', 'd', '6', 'd', '6', '6', '6', '6'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.strip("0k", "~#MsKeGDJ kE");
      assertEquals("0", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      String string0 = StringUtils.substringBefore("s>ZP7I", "org.junitpioneer.jupiter.params.Range");
      assertEquals("s>ZP7I", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("s>ZP7I", '[');
      assertEquals("s>ZP7I", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("s>ZP7I", "s>ZP7I");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.joinWith("s>ZP7I", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.abbreviateMiddle("C`}l/eDL(j4g", "M", 420);
      assertEquals("C`}l/eDL(j4g", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripEnd("s>ZP7I", "1nBDP!9VV1nBDP!9VV");
      assertEquals("s>ZP7I", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = StringUtils.leftPad("", 420);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                    ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.wrapIfMissing("0k;LZ", 'E');
      assertEquals("E0k;LZE", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.remove("s>ZP7I", "z`Z |I4B8Emy");
      assertEquals("s>ZP7I", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      
      String string8 = StringUtils.stripToEmpty(", ");
      assertEquals(",", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) "s>ZP7I", (CharSequence) "                                                                                                                                                                                                                                                                                                                                                                                                                                    ", 420);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "1nBDP!9VV1nBDP!9VV", (CharSequence) "0k;LZ");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("org.junitpioneer.jupiter.params.Range", "ZkXg}u'cZ-wSB");
      assertEquals((-11), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, (-2630), 50);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, (-2630), 65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = 0;
      String string1 = StringUtils.center("\" should have a parent context.", 54, " ");
      assertEquals("           \" should have a parent context.            ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceChars("\" should have a parent context.", "...", "");
      assertEquals("\" should have a parent context", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfter("hG>-(K@SgH3&p5", 54);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("\" should have a parent context", "");
      assertTrue(boolean0);
      
      char char0 = 'z';
      String string4 = StringUtils.removeEndIgnoreCase("\" should have a parent context.", "R=#`\"w|!");
      assertEquals("\" should have a parent context.", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.join((int[]) null, 'z', 122, 122);
      assertNull(string5);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) " ");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string6 = StringUtils.EMPTY;
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("9A%/)fxy", (-324), (-2861));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\r", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      String string0 = StringUtils.center("", 108, '!');
      assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
      String string1 = StringUtils.replaceOnce("/'^Zx", "", "1k{_yjG&{yk?");
      assertEquals("/'^Zx", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Spliterator<String> spliterator0 = arrayDeque0.spliterator();
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(spliterator0);
      
      String string2 = StringUtils.toRootUpperCase("Threshold must not be negative");
      assertEquals("THRESHOLD MUST NOT BE NEGATIVE", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.toRootUpperCase("|1PoE");
      assertEquals("|1POE", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.mid((String) null, (-2332), (-35));
      assertNull(string4);
      
      String string5 = StringUtils.substringAfterLast("/'^Zx", (-35));
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.abbreviate("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", "aM1^>!?:q3", (-2332), 108);
      assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-35);
      floatArray0[1] = (float) '!';
      floatArray0[2] = (-616.7373F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 108;
      String string7 = StringUtils.join(floatArray0, 'l');
      assertArrayEquals(new float[] {(-35.0F), 33.0F, (-616.7373F), 0.0F, 108.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals("-35.0l33.0l-616.7373l0.0l108.0", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      String string0 = StringUtils.chomp("1nBDP!9VV", "1nBDP!9VV");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat('Z', (int) 'Z');
      assertEquals("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "1nBDP!9VV", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.substringBetween("", "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("1nBDP!9VV"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean3 = linkedList0.add((Object) "");
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains("1nBDP!9VV"));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains("1nBDP!9VV"));
      assertEquals(1, linkedList0.size());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, 'Z');
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains("1nBDP!9VV"));
      assertEquals(1, linkedList0.size());
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "1nBDP!9VV", (int) 'Z', (int) 'Z');
      assertEquals((-1), int0);
      
      String string4 = StringUtils.abbreviate("", 63);
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringBetween("\n", "", "\n");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("&4m 9=x@0/*!", "&4m 9=x@0/*!");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.toRootLowerCase("\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase(" ", "\n");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\n";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("0W!eL&+\"VU<(`|@r", "\n");
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string0 = StringUtils.substringBefore("@og-B}Xz_r, bA0]f0KlLmU", "@og-B}Xz_r, bA0]f0KlLmU");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      String string0 = StringUtils.leftPad("(8-Mx#!3JxGUl $", 100);
      assertEquals("                                                                                     (8-Mx#!3JxGUl $", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("                                                                                     (8-Mx#!3JxGUl $", "                                                                                     (8-Mx#!3JxGUl $");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("                                                                                     (8-Mx#!3JxGUl $");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.repeat('O', 100);
      assertEquals("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isNotBlank("                                                                                     (8-Mx#!3JxGUl $");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "(8-Mx#!3JxGUl $";
      charSequenceArray0[1] = (CharSequence) "                                                                                     (8-Mx#!3JxGUl $";
      charSequenceArray0[2] = (CharSequence) "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO";
      String string2 = StringUtils.truncate("{B\"GNwl=X[", (int) (byte)0, 2101);
      assertEquals("{B\"GNwl=X[", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeStart("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", "                                                                                     (8-Mx#!3JxGUl $");
      assertEquals("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.compareIgnoreCase("Extension context \"", "+{0+=#`WBlgdFb&a3Y7TtI}R4");
      assertEquals(58, int0);
      
      boolean boolean3 = StringUtils.startsWithIgnoreCase("DN0UH4`PQ<@Z;KK&", "\"YZ,(");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      boolean boolean4 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      
      String string4 = StringUtils.removeStartIgnoreCase(";qCz", "Threshold must not be negative");
      assertEquals(";qCz", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean5 = StringUtils.isAlphanumeric(";qCz");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("                                                                                     (8-Mx#!3JxGUl $", ",'.hw");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "Minimum abbreviation width is %d");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.join((int[]) null, 'X');
      assertNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase((String) null, "[p]5e54z/.<4");
      assertNull(string2);
      
      String string3 = StringUtils.remove("", "Minimum abbreviation width is %d");
      assertEquals("", string3);
      assertNotNull(string3);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string4 = StringUtils.abbreviateMiddle("", "FccD-$(ck", (-92));
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = StringUtils.lastIndexOf((CharSequence) "FccD-$(ck", (-1171));
      assertEquals((-1), int4);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      
      String string5 = StringUtils.wrapIfMissing("Kd*bzp*]P-Z6j,:`", "");
      assertEquals("Kd*bzp*]P-Z6j,:`", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string4));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertFalse(priorityQueue0.contains(string4));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>(priorityQueue0);
      assertFalse(priorityQueue0.contains(string4));
      assertFalse(linkedList1.contains(string4));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(linkedList1);
      assertFalse(priorityQueue0.contains(string4));
      assertFalse(linkedList1.contains(string4));
      assertFalse(priorityQueue1.contains("Minimum abbreviation width is %d"));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, priorityQueue1.size());
      assertNotNull(priorityQueue1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      String string6 = StringUtils.join((Iterable<?>) priorityQueue1, 'l');
      assertFalse(priorityQueue0.contains(string4));
      assertFalse(linkedList1.contains(string4));
      assertFalse(priorityQueue1.contains("Minimum abbreviation width is %d"));
      assertNotSame(linkedList1, linkedList0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, priorityQueue1.size());
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.uncapitalize("DN0UH4`PQ<@Z;KK&");
      assertEquals("dN0UH4`PQ<@Z;KK&", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.wrapIfMissing(" ", "");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(":2[}3];:", "UO5 %,q=");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.join(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      float[] floatArray0 = new float[5];
      String string0 = StringUtils.join(floatArray0, 'R');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals("0.0R0.0R0.0R0.0R0.0", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("0.0R0.0R0.0R0.0R0.0", "0.0R0.0R0.0R0.0R0.0", 4);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToNull("0.0R0.0R0.0R0.0R0.0");
      assertEquals("0.0R0.0R0.0R0.0R0.0", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("8wh9%", 4, (-3053));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.lowerCase("34)C&qVZV#z-gI</'vV");
      assertEquals("34)c&qvzv#z-gi</'vv", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.split("");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.upperCase("34)C&qVZV#z-gI</'vV");
      assertEquals("34)C&QVZV#Z-GI</'VV", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = '7';
      charArray0[2] = 'l';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      String string5 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'R', '7', 'l', 'R', 'R', 'R'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("R7lRRR", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfBlank("0.0R0.0R0.0R0.0R0.0", supplier0);
      assertEquals("0.0R0.0R0.0R0.0R0.0", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      
      String string7 = StringUtils.substringAfterLast("S?;fd5NXwi|oFQ", 4);
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "R7lRRR", (CharSequence) "8wh9%");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      String string0 = "l,`UR1J6R^<.sg1=O_\\";
      String string1 = StringUtils.rotate("l,`UR1J6R^<.sg1=O_", (-1394));
      assertEquals("R^<.sg1=O_l,`UR1J6", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = null;
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "6R^<.sg1=O_l,`UR1J", (String) null);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CANADA;
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      Locale locale2 = (Locale)locale1.clone();
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale2.getVariant());
      assertEquals("CA", locale2.getCountry());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en_CA", locale2.toString());
      assertEquals("en", locale2.getLanguage());
      assertNotNull(locale2);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      
      String string3 = locale0.getDisplayName();
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("Chinese (China)", string3);
      assertNotNull(string3);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = locale0.getDisplayScript(locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = locale0.getScript();
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      Locale locale3 = Locale.JAPANESE;
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertEquals("ja", locale3.getLanguage());
      assertEquals("ja", locale3.toString());
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getISO3Country());
      assertEquals("", locale3.getCountry());
      assertEquals("jpn", locale3.getISO3Language());
      assertNotNull(locale3);
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      
      int int0 = StringUtils.getFuzzyDistance("", "Chinese (China)", locale3);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertEquals("ja", locale3.getLanguage());
      assertEquals("ja", locale3.toString());
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getISO3Country());
      assertEquals("", locale3.getCountry());
      assertEquals("jpn", locale3.getISO3Language());
      assertEquals(0, int0);
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      
      boolean boolean1 = StringUtils.isWhitespace("6R^<.sg1=O_l,`UR1J");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("org.junitpioneer.jupiter.StopwatchExtension");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=org.junitpioneer.jupiter.stopwatchextension
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", (String) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.difference("\r", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains(string0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<String> iterator0 = arrayDeque0.iterator();
      assertFalse(arrayDeque0.contains(string0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, '>');
      assertFalse(arrayDeque0.contains(string0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\r";
      stringArray0[1] = "\r";
      stringArray0[2] = "\n";
      stringArray0[3] = "\n";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("\n", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEnd(" ", "\r");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad(" ", 0, " ");
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsIgnoreCase(" ", "\r");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[5] = 0;
      String string3 = StringUtils.remove(" ", "\r");
      assertEquals(" ", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.replace("(eAn5|", "hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!hdu<mO.>+!!", (String) null);
      assertEquals("(eAn5|", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.replace("J22G3<", "16;-MDc\"p_Y;:Px*e", (String) null);
      assertEquals("J22G3<", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "J22G3<", (CharSequence) "(eAn5|", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.KOREAN;
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      String string6 = StringUtils.upperCase((String) null, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertNull(string6);
      assertFalse(locale1.equals((Object)locale0));
      
      String string7 = StringUtils.difference("~d_", "[t0-J8!p@");
      assertEquals("[t0-J8!p@", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      
      boolean boolean1 = StringUtils.isAllUpperCase("~d_");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string8 = StringUtils.repeat('J', 100);
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      boolean boolean0 = StringUtils.startsWithAny(" ", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.upperCase("Or(](", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.truncate("NLQ", 65536, 65536);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = StringUtils.upperCase("Threshold must not be negative", locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("THRESHOLD MUST NOT BE NEGATIVE", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "THRESHOLD MUST NOT BE NEGATIVE";
      charSequenceArray0[1] = (CharSequence) "THRESHOLD MUST NOT BE NEGATIVE";
      charSequenceArray0[2] = (CharSequence) "THRESHOLD MUST NOT BE NEGATIVE";
      charSequenceArray0[3] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[4] = (CharSequence) "THRESHOLD MUST NOT BE NEGATIVE";
      charSequenceArray0[5] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[6] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[7] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.startsWithAny("THRESHOLD MUST NOT BE NEGATIVE", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Threshold must not be negative");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.defaultString("z=}36a}h", "kdysW");
      assertEquals("z=}36a}h", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "THRESHOLD MUST NOT BE NEGATIVE", (CharSequence) "<mO8HWC2");
      assertEquals(29, int0);
      
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[3]);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("]qMnF{QL*5|MufC[", "emptyj2R0^]-HL]tT-Zy[5", "xmY.x&Pt2aP&NOpGUU'");
      assertEquals("]qMnF{QL*5|MufC[", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertNotSame(locale1, locale0);
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = locale0.getExtension('S');
      assertNotSame(locale0, locale1);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNull(string3);
      assertFalse(locale0.equals((Object)locale1));
      
      String string4 = locale0.getExtension('S');
      assertNotSame(locale0, locale1);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNull(string4);
      assertFalse(locale0.equals((Object)locale1));
      
      String string5 = StringUtils.lowerCase("", locale1);
      assertNotSame(locale1, locale0);
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.reverse((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.EMPTY;
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "]qMnF{QL*5|MufC[");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(comparator0);
      assertFalse(priorityQueue0.contains(""));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, (String) null);
      assertFalse(priorityQueue0.contains(""));
      assertEquals(0, priorityQueue0.size());
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.repeat("tp@XYmT%ec9SH.", (-3548));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      String string0 = StringUtils.strip("@:%Rj,\u0007-&RvNu%ti ");
      assertEquals("@:%Rj,\u0007-&RvNu%ti", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("@:%Rj,\u0007-&RvNu%ti");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      String string0 = StringUtils.repeat("Loc7ke must no/ be null", 5058);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) string0;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      String string1 = StringUtils.prependIfMissingIgnoreCase((String) null, "Loc7ke must no/ be null", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      String string0 = StringUtils.chomp("Method `CartesianProductTest.Sets ");
      assertEquals("Method `CartesianProductTest.Sets ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Method `CartesianProductTest.Sets ", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      String string0 = StringUtils.prependIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty(charSequenceArray0[0], supplier0);
      assertEquals(2, charSequenceArray0.length);
      assertNull(charSequence0);
      
      String string1 = StringUtils.substringBefore("'4", "+{0+=#`WBlgdFb&a3Y7TtI}R4");
      assertEquals("'4", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat('4', (-2348));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "", (-369), (-2348));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.abbreviateMiddle("wJwB", "wd :H:t", (-315));
      assertEquals("wJwB", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "+{0+=#`WBlgdFb&a3Y7TtI}R4", (CharSequence) null);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string4 = StringUtils.abbreviateMiddle("'4", "'4", 4810);
      assertEquals("'4", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.upperCase("+{0+=#`WBlgdFb&a3Y7TtI}R4");
      assertEquals("+{0+=#`WBLGDFB&A3Y7TTI}R4", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.prependIfMissing("5sykqv.0Q=3DMUK{,", (CharSequence) null, charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("5sykqv.0Q=3DMUK{,", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      
      String string7 = StringUtils.overlay("j2R0^", "'4", 1087, 13);
      assertEquals("j2R0^'4", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("wd :H:t", charset0);
      assertArrayEquals(new byte[] {(byte)119, (byte)100, (byte)32, (byte)58, (byte)72, (byte)58, (byte)116}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.repeat("@og-B}Xz_r, bA0]f0KlLmU", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) (-1);
      String string1 = StringUtils.join(doubleArray0, 'z');
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals("-1.0z-1.0z-1.0z-1.0z-1.0z-1.0z-1.0z-1.0z-1.0", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isWhitespace("-1.0z-1.0z-1.0z-1.0z-1.0z-1.0z-1.0z-1.0z-1.0");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("", 'F');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "#a!*Q\"CO47?>smbw";
      objectArray0[1] = (Object) "#a!*Q\"CO47?>smbw";
      objectArray0[2] = (Object) "#a!*Q\"CO47?>smbw";
      objectArray0[3] = (Object) "#a!*Q\"CO47?>smbw";
      String string0 = StringUtils.reverseDelimited("#a!*Q\"CO47?>smbw", 'A');
      assertEquals("#a!*Q\"CO47?>smbw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", 2676);
      assertEquals("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.countMatches((CharSequence) "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", 'G');
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "#a!*Q\"CO47?>smbw", "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CANADA;
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      String string2 = StringUtils.upperCase("#a!*Q\"CO47?>smbw", locale1);
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("#A!*Q\"CO47?>SMBW", string2);
      assertNotNull(string2);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", "\r");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "\n\r", "\n\r");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      String string0 = StringUtils.strip("rO%Zg=lUO}+{<2$9$nZ");
      assertEquals("rO%Zg=lUO}+{<2$9$nZ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("rO%Zg=lUO}+{<2$9$nZ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.leftPad("rO%Zg=lUO}+{<2$9$nZ", 11, "rO%Zg=lUO}+{<2$9$nZ");
      assertEquals("rO%Zg=lUO}+{<2$9$nZ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("K'(qD/r`EB.|@@_*)", "rO%Zg=lUO}+{<2$9$nZ");
      assertEquals("K'(qD/r`EB.|@@_*)", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeStartIgnoreCase("K'(qD/r`EB.|@@_*)", "rO%Zg=lUO}+{<2$9$nZ");
      assertEquals("K'(qD/r`EB.|@@_*)", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "rO%Zg=lUO}+{<2$9$nZ", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = StringUtils.toCodePoints("K'(qD/r`EB.|@@_*)");
      assertEquals(17, intArray0.length);
      assertNotNull(intArray0);
      
      String string4 = StringUtils.substringAfter("K'(qD/r`EB.|@@_*)", " does not have data element at ");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "K'(qD/r`EB.|@@_*)", (CharSequence) "K'(qD/r`EB.|@@_*)");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOf((CharSequence) " does not have data element at ", (-1392));
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String string5 = StringUtils.substringBeforeLast("", "K'(qD/r`EB.|@@_*)");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("<mO.>+", " ", ")l\"eEz -9(;jN2u[v*");
      assertNull(string1);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains("<mO.>+"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add("kwtb");
      assertFalse(arrayList0.contains("<mO.>+"));
      assertTrue(arrayList0.contains("kwtb"));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      ArrayList arrayList1 = (ArrayList)arrayList0.clone();
      assertFalse(arrayList0.contains("<mO.>+"));
      assertTrue(arrayList0.contains("kwtb"));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertNotNull(arrayList1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "<mO.>+";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      int int0 = StringUtils.indexOfAny((CharSequence) ")l\"eEz -9(;jN2u[v*", charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      String string0 = "CmRj=6Fn9\\'r0QeQS";
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string1 = " vs ";
      String string2 = "*8Qx,P";
      String string3 = StringUtils.mid("*8Qx,P", (-1168), (-1168));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int[] intArray0 = StringUtils.toCodePoints(" vs ");
      assertArrayEquals(new int[] {32, 118, 115, 32}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      
      String string4 = StringUtils.truncate("xmY.x&Pt2aP&NOpGUU'cbs", 127);
      assertEquals("xmY.x&Pt2aP&NOpGUU'cbs", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.replaceChars("b", "xmY.x&Pt2aP&NOpGUU'cbs", "CmRj=6Fn9'r0QeQS");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.trimToNull("");
      assertNull(string6);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string7 = StringUtils.substringBeforeLast((String) null, " vs ");
      assertNull(string7);
      
      String string8 = "emptyj2R0^]-HL]tT-Zy[5";
      // Undeclared exception!
      try { 
        Charset.forName("emptyj2R0^]-HL]tT-Zy[5");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // emptyj2R0^]-HL]tT-Zy[5
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "1+i(1|-^ Jpf[ED");
      assertEquals("1+i(1|-^ Jpf[ED", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      String string1 = StringUtils.getIfEmpty("EJs_Hcmv-t}v31?-", (Supplier<String>) null);
      assertEquals("EJs_Hcmv-t}v31?-", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultString("tzJX,>#!g=LT^CY");
      assertEquals("tzJX,>#!g=LT^CY", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains("EJs_Hcmv-t}v31?-"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0);
      assertFalse(arrayDeque0.contains("EJs_Hcmv-t}v31?-"));
      assertFalse(list0.contains("EJs_Hcmv-t}v31?-"));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0);
      assertFalse(arrayDeque0.contains("EJs_Hcmv-t}v31?-"));
      assertFalse(list1.contains("EJs_Hcmv-t}v31?-"));
      assertNotSame(list1, list0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      
      String string3 = locale0.getDisplayName();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.getFuzzyDistance("EJs_Hcmv-t}v31?-", "EJs_Hcmv-t}v31?-", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals(49, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "tzJX,>#!g=LT^CY", 49);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 2326);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("", (-1723));
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "w)BvAysU#fDg*2*|8)");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("", "\n", "<mO");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.trimToNull("j2R0^]-HL]tT-Zy[5");
      assertEquals("j2R0^]-HL]tT-Zy[5", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("7", "tzJX,>#!g=LT^CY", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      String string4 = StringUtils.leftPad("='<r+(", (-1), "w)BvAysU#fDg*2*|8)");
      assertEquals("='<r+(", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string5 = StringUtils.appendIfMissing("='<r+(", "j2R0^]-HL]tT-Zy[5", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("='<r+(j2R0^]-HL]tT-Zy[5", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.join((long[]) null, '1');
      assertNull(string6);
      
      String string7 = StringUtils.substringAfter("", (-1));
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      String string0 = StringUtils.leftPad("(8-Mx#!3JxGUl $", 100);
      assertEquals("                                                                                     (8-Mx#!3JxGUl $", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("                                                                                     (8-Mx#!3JxGUl $", "                                                                                     (8-Mx#!3JxGUl $");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("                                                                                     (8-Mx#!3JxGUl $");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.repeat('O', 100);
      assertEquals("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isNotBlank("                                                                                     (8-Mx#!3JxGUl $");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "(8-Mx#!3JxGUl $";
      charSequenceArray0[1] = (CharSequence) "                                                                                     (8-Mx#!3JxGUl $";
      charSequenceArray0[2] = (CharSequence) "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO";
      charSequenceArray0[3] = (CharSequence) "(8-Mx#!3JxGUl $";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty(charSequenceArray0[1], supplier0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("                                                                                     (8-Mx#!3JxGUl $", charSequence0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "                                                                                     (8-Mx#!3JxGUl $", (-1235), 100);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.substringAfter("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", (int) 'A');
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean3 = StringUtils.isAsciiPrintable(charSequenceArray0[2]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string3 = StringUtils.rightPad("", 1127, 'A');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      
      int int2 = StringUtils.countMatches(charSequenceArray0[2], (CharSequence) "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO");
      assertEquals(5, charSequenceArray0.length);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Aborting to protect against StackOverflowError - output of one loop is the input of another", "=s+#6e`", "\"YZ,(");
      assertNull(string0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = 748.8013187;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1124.90877);
      doubleArray0[5] = 1806.115597139473;
      String string1 = StringUtils.truncate("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d].", (int) (byte)0, 22);
      assertEquals("Method `%s` must regis", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart((String) null, "\"YZ,(");
      assertNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase("DN0UH4`PQ<@Z;KK&", (String) null);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("DN0UH4`PQ<@Z;KK&", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      String string0 = StringUtils.difference("Node ", "Node ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "(");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Node ";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("Node ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.compare((String) null, "!m*#", true);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.leftPad("`", (-878), "8u>X3hYD<@\"'M3,qh");
      assertEquals("`", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "", 5);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) "", (CharSequence) "`");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      String string0 = StringUtils.substringBetween("_GCw]ljHA2?`4=d", "_GCw]ljHA2?`4=d", "_GCw]ljHA2?`4=d");
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "_GCw]ljHA2?`4=d", (CharSequence) null, (-295));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rightPad("eo", (-295), "");
      assertEquals("eo", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Aborting to protect against StackOverflowError - output of one loop is the input of another", "=s+#6e`", "\"YZ,(");
      assertNull(string0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = 748.8013187;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1124.90877);
      doubleArray0[5] = 1806.115597139473;
      String string1 = StringUtils.truncate("sCl'", (int) (byte)0, 39);
      assertEquals("sCl'", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart((String) null, "\"YZ,(");
      assertNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase("DN0UH4`PQ<@Z;KK&", (String) null);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("DN0UH4`PQ<@Z;KK&", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "sCl'", (CharSequence) null, 1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "=s+#6e`";
      stringArray0[1] = null;
      stringArray0[2] = "=s+#6e`";
      stringArray0[3] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray0[4] = null;
      stringArray0[5] = "\"YZ,(";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '}', 11, 11);
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      String string0 = StringUtils.replacePattern("matches '%s'.", "matches '%s'.", (String) null);
      assertEquals("matches '%s'.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("matches '%s'.");
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, "V9)");
      assertNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("org.juntpioneer.jupiter.AbstractEntryBasedExtension", 101);
      assertEquals("nsion", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Cannot get the toString of a null object", "r", (-1));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.difference("Node ", "Node ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "(");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("Strings must not be null", "", "");
      assertEquals("Strings must not be null", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.trimToNull("|hf)F\"KuJ");
      assertEquals("|hf)F\"KuJ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Cannot get the toString of a null object", "r", (-1));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'q';
      String string4 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'z', 'z', 'q'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("zzq", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank("clone", supplier0);
      assertEquals("clone", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.substringAfterLast("S?;fd5NXwi|oFQ", 100);
      assertEquals("5NXwi|oFQ", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "|hf)F\"KuJ", (CharSequence) "zzq");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.toRootUpperCase((String) null);
      assertNull(string1);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.removeStart("+F(}|8:~l`!KdFa1HB4", "");
      assertEquals("+F(}|8:~l`!KdFa1HB4", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.swapCase("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.remove("8HWC2<mO", 'Q');
      assertEquals("8HWC2<mO", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.wrapIfMissing("No @DisabledUntil annotation found on element", 'Q');
      assertEquals("QNo @DisabledUntil annotation found on elementQ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      int int2 = StringUtils.indexOf((CharSequence) "8HWC2<mO", (-65), 49);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.difference("Node ", "Node ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "(");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("Strings must not be null", "", "");
      assertEquals("Strings must not be null", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.trimToNull("|hf)F\"KuJ");
      assertEquals("|hf)F\"KuJ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Cannot get the toString of a null object", "r", (-1));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'q';
      int int1 = StringUtils.indexOfAny((CharSequence) "Cannot get the toString of a null object", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("Cannot get the toSt", charSequence0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      
      String string4 = StringUtils.join((Object[]) stringArray0, (String) null, 1064, (-607));
      assertEquals(2, stringArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", 3);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string5 = StringUtils.join((Object[]) stringArray0, "Strings must not be null", 1064, 1064);
      assertEquals(2, stringArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(comparator0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 35;
      intArray0[1] = (-1);
      intArray0[2] = 35;
      intArray0[3] = (-2337);
      String string0 = StringUtils.join(intArray0, 'T', (-2337), (-2337));
      assertArrayEquals(new int[] {35, (-1), 35, (-2337)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, ">>6+g(Vs5w", (-2748), (-2965));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "bvz", 33, 33);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.repeat((String) null, 1537);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.replaceAll("Strings must not be null", stringArray0[0], stringArray0[0]);
      assertEquals(7, stringArray0.length);
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Strings must not be null", 108);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 16, 42);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripToEmpty("R:");
      assertEquals("R:", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'V');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.unwrap("", ']');
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Object[]) stringArray0, "Va:UZ16qL`p");
      assertEquals(0, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(":0>M,?", "wGeg57;:`_sSE^+x4");
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertTrue(boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) ']';
      longArray0[1] = (long) 'V';
      longArray0[1] = (long) '!';
      String string3 = StringUtils.join(longArray0, 'E');
      assertArrayEquals(new long[] {93L, 33L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("93E33E0", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'V');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.rightPad(":0>M,?", 1225, 'E');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.contains((CharSequence) string4, (-1029));
      assertFalse(boolean1);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "maxWith cannot be negative", (CharSequence) "maxWith cannot be negative");
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "maxWith cannot be negative", 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, 'w');
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited(",Vg`l^eg.S6rU|q", 'k');
      assertEquals(",Vg`l^eg.S6rU|q", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ",Vg`l^eg.S6rU|q", (CharSequence) ",Vg`l^eg.S6rU|q");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("2'm+SH~$", ",Vg`l^eg.S6rU|q", 15);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("offset cannot be negative", "xmY.x&Pt2aP&NOpGUU'cbs");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.rotate("0k;LZ", 0);
      assertEquals("0k;LZ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      String string2 = StringUtils.join((long[]) null, 'c', (int) (byte)101, (-572));
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray2 = StringUtils.split(",Vg`l^eg.S6rU|q", "null/empty items");
      assertEquals(3, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("NM0Z", "NM0Z", 2682);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((int[]) null, 'd');
      assertNull(string0);
      
      String string1 = StringUtils.wrap((String) null, 'd');
      assertNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfterLast("0[+NT1}un:&<c", "0[+NT1}un:&<c");
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("<mO", "StopatchExenion", "~#MsKeGDJ kE", 25);
      assertEquals("<mO", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.truncate("cbs", 25);
      assertEquals("cbs", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'd';
      longArray0[1] = (long) 2682;
      longArray0[2] = (long) 'd';
      String string5 = StringUtils.join(longArray0, '6', 160, 12);
      assertArrayEquals(new long[] {100L, 2682L, 100L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("NM0Z", "StopatchExenion");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      String string0 = StringUtils.replace("CmRj=6Fn9'r0QeQS", ": ", "CmRj=6Fn9'r0QeQS");
      assertEquals("CmRj=6Fn9'r0QeQS", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "CmRj=6Fn9'r0QeQS", ": ");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CANADA;
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en_CA", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      Locale locale2 = (Locale)locale1.clone();
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en_CA", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("en_CA", locale2.toString());
      assertEquals("CA", locale2.getCountry());
      assertNotNull(locale2);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      
      String string1 = locale0.getDisplayName();
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("Chinese (China)", string1);
      assertNotNull(string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = locale0.getDisplayScript(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en_CA", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertFalse(priorityQueue0.contains(": "));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean1 = priorityQueue0.add("CmRj=6Fn9'r0QeQS");
      assertTrue(priorityQueue0.contains("CmRj=6Fn9'r0QeQS"));
      assertFalse(priorityQueue0.contains(": "));
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "a/g{zxa|Txp]cP+h(";
      objectArray0[2] = (Object) locale1;
      objectArray0[3] = (Object) locale0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      String string3 = StringUtils.join(objectArray0, 'd');
      assertEquals(6, objectArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean2 = StringUtils.equalsIgnoreCase(": ", "");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.stripEnd("T4@fmb'+8SSF", (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.trimToEmpty("N3RJ)y");
      assertEquals("N3RJ)y", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.remove((String) null, "maxWith cannot be negative");
      assertNull(string6);
      
      boolean boolean3 = StringUtils.isBlank("N3RJ)y");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.remove((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((Comparator<? super Object>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) priorityQueue0;
      Stream<Object> stream0 = priorityQueue0.parallelStream();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(stream0);
      
      Locale locale0 = new Locale("#W&<o!j.VIT^3-;?,&", "|J+VtY5P1k", "#W&<o!j.VIT^3-;?,&");
      assertEquals("#w&<o!j.vit^3-;?,&", locale0.getLanguage());
      assertEquals("#w&<o!j.vit^3-;?,&_|J+VTY5P1K_#W&<o!j.VIT^3-;?,&", locale0.toString());
      assertEquals("|J+VTY5P1K", locale0.getCountry());
      assertEquals("#W&<o!j.VIT^3-;?,&", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = locale0.getScript();
      assertEquals("#w&<o!j.vit^3-;?,&", locale0.getLanguage());
      assertEquals("#w&<o!j.vit^3-;?,&_|J+VTY5P1K_#W&<o!j.VIT^3-;?,&", locale0.toString());
      assertEquals("|J+VTY5P1K", locale0.getCountry());
      assertEquals("#W&<o!j.VIT^3-;?,&", locale0.getVariant());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = ", '";
      String string2 = StringUtils.replaceFirst("", "@og-B}Xz_r, bA0]f0KlLmU", ", '");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.getFuzzyDistance("@og-B}Xz_r, bA0]f0KlLmU", "", locale0);
      assertEquals("#w&<o!j.vit^3-;?,&", locale0.getLanguage());
      assertEquals("#w&<o!j.vit^3-;?,&_|J+VTY5P1K_#W&<o!j.VIT^3-;?,&", locale0.toString());
      assertEquals("|J+VTY5P1K", locale0.getCountry());
      assertEquals("#W&<o!j.VIT^3-;?,&", locale0.getVariant());
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isWhitespace("#W&<o!j.VIT^3-;?,&");
      assertFalse(boolean0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange(", '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=, '
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("  ", "  ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((byte[]) null, 's');
      assertNull(string0);
      
      String string1 = StringUtils.replaceChars("  ", '(', '(');
      assertEquals("  ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat(";*iABK%)3bt8yLf", "C>mtPZ", 25);
      assertEquals(";*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLf", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.abbreviateMiddle("X!HesR/j@^Dr", "  ", 25);
      assertEquals("X!HesR/j@^Dr", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) ";*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLf";
      charSequenceArray0[1] = (CharSequence) "X!HesR/j@^Dr";
      charSequenceArray0[2] = (CharSequence) ";*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLf";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "X!HesR/j@^Dr";
      charSequenceArray0[5] = (CharSequence) "  ";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      String string0 = StringUtils.join(byteArray0, 's');
      assertEquals(14, byteArray0.length);
      assertEquals("0s0s0s0s0s0s0s0s0s0s0s0s0s0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.defaultIfBlank("<mO8HWC2", "\r");
      assertEquals("<mO8HWC2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      String string0 = StringUtils.removePattern("k", "k");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("k");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.replaceChars(stringArray0[0], 'H', 'H');
      assertEquals(9, stringArray0.length);
      assertNull(string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.getCommonPrefix(stringArray1);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'J', 'k');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("0XxkR;R'plxrrHcW#", (String) null);
      assertEquals("0XxkR;R'plxrrHcW#", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "maxWith cannot be negative";
      String string2 = StringUtils.joinWith("maxWith cannot be negative", objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-116);
      byteArray0[8] = (byte)104;
      String string3 = StringUtils.join(byteArray0, 'F', (int) (byte)13, (int) (byte)4);
      assertArrayEquals(new byte[] {(byte)127, (byte)13, (byte)72, (byte)4, (byte) (-1), (byte)101, (byte)4, (byte) (-116), (byte)104}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'n', 23, 23);
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      String string0 = StringUtils.center("", 108, '!');
      assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
      String string1 = StringUtils.replaceOnceIgnoreCase((String) null, "", "");
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
      charSequenceArray0[3] = (CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.repeat("org.junitpioneer.jupiter.json.JsonFileSourceArgumentsProvider", 100);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(31, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(31, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(comparator0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string0 = StringUtils.removeFirst("'C?R;l*qJyss-sS=", "The `date` %s is after the current date %s");
      assertEquals("'C?R;l*qJyss-sS=", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("'C?R;l*qJyss-sS=", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "'C?R;l*qJyss-sS=";
      stringArray0[1] = "'C?R;l*qJyss-sS=";
      stringArray0[2] = "The `date` %s is after the current date %s";
      stringArray0[3] = "'C?R;l*qJyss-sS=";
      stringArray0[4] = "'C?R;l*qJyss-sS=";
      stringArray0[5] = "'C?R;l*qJyss-sS=";
      stringArray0[6] = ">U|a|V8{&r>-[Q\"%";
      stringArray0[7] = "'C?R;l*qJyss-sS=";
      stringArray0[8] = "The `date` %s is after the current date %s";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBeforeLast("L", ">U|a|V8{&r>-[Q\"%");
      assertEquals("L", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("#W&<o!j.VIT^3-;?,&", "0XxkR;R'plxrrHcW#", 762);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.wrap("P}AmPR=", '&');
      assertEquals("&P}AmPR=&", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.appendIfMissing((String) null, "'C?R;l*qJyss-sS=", (CharSequence[]) null);
      assertNull(string4);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Failed to read file ", (String) null);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, '\'');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center((String) null, 67, "9qz`})<Y@s_T+Bl`W");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, "hdu");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((int[]) null, '/');
      assertNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase((String) null, "9qz`})<Y@s_T+Bl`W");
      assertNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\" should have a parent context.", (CharSequence) "");
      assertEquals(0, int0);
      
      String string4 = StringUtils.abbreviateMiddle((String) null, "", 67);
      assertNull(string4);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "hdu", (CharSequence) "hdu");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.rightPad("", 0);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      
      String string6 = StringUtils.overlay("hdu", "9qz`})<Y@s_T+Bl`W", 0, 90);
      assertEquals("9qz`})<Y@s_T+Bl`W", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.replacePattern((String) null, "ai/R)w", (String) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("#W&<o!j.VIT^3-;?,&", (String[]) null, (String[]) null);
      assertEquals("#W&<o!j.VIT^3-;?,&", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("#W&<o!j.VIT^3-;?,&");
      assertEquals(18, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "#W&<o!j.VIT^3-;?,&", (CharSequence) "#W&<o!j.VIT^3-;?,&");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("#W&<o!j.VIT^3-;?,&", 108, "org.junitpioneer.jupiter.SystemPropertyExtension");
      assertEquals("#W&<o!j.VIT^3-;?,&org.junitpioneer.jupiter.SystemPropertyExtensionorg.junitpioneer.jupiter.SystemPropertyExt", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.trimToEmpty("Va:UZ16qL`p");
      assertEquals("Va:UZ16qL`p", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.uncapitalize("#W&<o!j.VIT^3-;?,&");
      assertEquals("#W&<o!j.VIT^3-;?,&", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.center("Va:UZ16qL`p", (-166));
      assertEquals("Va:UZ16qL`p", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      
      boolean boolean2 = StringUtils.equals((CharSequence) ":0>M,?", (CharSequence) "#W&<o!j.VIT^3-;?,&");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string5 = StringUtils.replaceEachRepeatedly(":0>M,?", (String[]) null, (String[]) null);
      assertEquals(":0>M,?", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      try { 
        StringUtils.getBytes("#W&<o!j.VIT^3-;?,&", "maxWith cannot be negative");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("Threshold must not be negative", (String) null, true);
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(";", (String) null, 1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Aborting to protect against StackOverflowError - output of one loop is the input of another", "=s+#6e`", "\"YZ,(");
      assertNull(string0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = 748.8013187;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1124.90877);
      doubleArray0[5] = 1806.115597139473;
      String string1 = StringUtils.truncate("sCl'", (int) (byte)0, 22);
      assertEquals("sCl'", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart((String) null, "\"YZ,(");
      assertNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase("DN0UH4`PQ<@Z;KK&", (String) null);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("DN0UH4`PQ<@Z;KK&", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("W`/;H=", (String) null, false);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripAccents("W`/;H=");
      assertEquals("W`/;H=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      String string0 = StringUtils.capitalize("nu38b");
      assertEquals("Nu38b", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      String string0 = StringUtils.leftPad("(8-Mx#!3JxGUl $", 100);
      assertEquals("                                                                                     (8-Mx#!3JxGUl $", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("                                                                                     (8-Mx#!3JxGUl $", "                                                                                     (8-Mx#!3JxGUl $");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("                                                                                     (8-Mx#!3JxGUl $");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.repeat('O', 100);
      assertEquals("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isNotBlank("                                                                                     (8-Mx#!3JxGUl $");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "(8-Mx#!3JxGUl $";
      charSequenceArray0[1] = (CharSequence) "                                                                                     (8-Mx#!3JxGUl $";
      charSequenceArray0[2] = (CharSequence) "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO";
      charSequenceArray0[3] = (CharSequence) "(8-Mx#!3JxGUl $";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("contains '%s'.", supplier1);
      assertEquals("contains '%s'.", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.defaultString(" ");
      assertEquals(" ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      String string4 = locale0.getDisplayName();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = StringUtils.getFuzzyDistance(charSequenceArray0[1], "iDQxtj1m@=.V~'2']", locale0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      stringArray0[1] = "contains '%s'.";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 8192, "");
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripEnd("`", "#5xjX\"Z`BL8{Q]_1yj");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "`";
      stringArray0[1] = "S";
      stringArray0[2] = null;
      stringArray0[3] = "#5xjX\"Z`BL8{Q]_1yj";
      stringArray0[4] = "IYszxDlYAR|UOtA[{Yb";
      stringArray0[5] = "S";
      stringArray0[6] = null;
      stringArray0[7] = null;
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("`", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("C=a&soyG", 49, "S");
      assertEquals("C=a&soyGSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isBlank("C=a&soyGSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsWhitespace("`");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.join((int[]) null, 'j', 35, 49);
      assertNull(string3);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "S";
      objectArray0[1] = (Object) "`";
      objectArray0[2] = (Object) "S";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "C=a&soyGSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS";
      objectArray0[5] = (Object) string3;
      objectArray0[6] = (Object) "`";
      objectArray0[7] = (Object) "IYszxDlYAR|UOtA[{Yb";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "Threshold must not be negative", 454, 1354);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 454
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      short[] shortArray0 = new short[14];
      String string0 = StringUtils.join(shortArray0, 'k');
      assertEquals(14, shortArray0.length);
      assertEquals("0k0k0k0k0k0k0k0k0k0k0k0k0k0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayDeque0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      int int0 = 368;
      // Undeclared exception!
      try { 
        StringUtils.join(list0, 'N', (-1401), 368);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1401
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, 'B', (int) 'B', 329);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 329
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      String string0 = StringUtils.substring("", (-2131), (-2131));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("", ")r]BGx", "6_|7H5MR20EhW-E");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split(")r]BGx");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.upperCase("The `date` %s is after the current date %s");
      assertEquals("THE `DATE` %S IS AFTER THE CURRENT DATE %S", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf("THE `DATE` %S IS AFTER THE CURRENT DATE %S", "", 3531);
      assertEquals(42, int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 42;
      String string3 = StringUtils.join(floatArray0, 'X', 1192, 11);
      assertArrayEquals(new float[] {42.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains(string2));
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      assertFalse(set1.contains(string2));
      assertSame(set1, set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertNotNull(set1);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("-ml}Tw~!eNV", charset0);
      assertEquals(11, byteArray0.length);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes("-Zn", (Charset) null);
      assertArrayEquals(new byte[] {(byte)45, (byte)90, (byte)110}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      String string0 = StringUtils.center("V:*(qiS2dtmc", 1586, "ErsA`4H8H8mtpAm^");
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNotNull(string1);
      
      String string2 = StringUtils.right("ErsA`4H8H8mtpAm^", 1275);
      assertEquals("ErsA`4H8H8mtpAm^", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      String string3 = StringUtils.join(byteArray0, 'V');
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals("-1V0", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("ErsA`4H8H8mtpAm^", "-1V0");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("hx3onVWTQ]", "Rh^B3x&5>EBn)");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("UseSV?a!B#yV@XO>uw", "Hn $dnOLC", (-2453));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("V:*(qiS2dtmc", 'V');
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.substringBetween("R$4>l38.RAfsX$c", "!:z", "+#7wgGKVQ`ME");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      String string0 = StringUtils.center("hx3onVWTQ]", 1586, "+#7wgGKVQ`ME");
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("\n ");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("\" should ae a parenM context.", string0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("\n ", "hx3onVWTQ]");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+#7wgGKVQ`ME", "\r", (-1075));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(string0, 'V');
      assertEquals(134, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.substringBetween("\" should ae a parenM context.", "\n ", "\r");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.equalsAny("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("org.junitpioneer.jupiter.params.Range");
      assertFalse(boolean0);
      
      String string0 = StringUtils.reverseDelimited("org.junitpioneer.jupiter.params.Range", 'e');
      assertEquals("r.params.Ranger.jupiteorg.junitpion", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'x');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      String string0 = StringUtils.rotate("l,`UR1J6R^<.sg1=O_", (-1394));
      assertEquals("R^<.sg1=O_l,`UR1J6", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("l,`UR1J6R^<.sg1=O_", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.trimToEmpty("M");
      assertEquals("M", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.uncapitalize("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.center("", 0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean2 = StringUtils.equals((CharSequence) "", (CharSequence) "M");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      try { 
        StringUtils.getBytes("`Y<yrk0", "l,`UR1J6R^<.sg1=O_");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      String string0 = StringUtils.difference("(?V9kmrjyQ<34", "cbs");
      assertEquals("cbs", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "xmY.x&Pt2aP&NOpGUU'");
      assertNull(string1);
      
      String string2 = StringUtils.replaceChars("xmY.x&Pt2aP&NOpGUU'", 'D', 'D');
      assertEquals("xmY.x&Pt2aP&NOpGUU'", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.rightPad((String) null, 3835, 'R');
      assertNull(string3);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-5635);
      String string4 = StringUtils.join(shortArray0, 'D');
      assertArrayEquals(new short[] {(short) (-5635)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("-5635", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank("xmY.x&Pt2aP&NOpGUU'", supplier0);
      assertEquals("xmY.x&Pt2aP&NOpGUU'", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean0 = StringUtils.isNotEmpty("xmY.x&Pt2aP&NOpGUU'");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWith((CharSequence) null, "xmY.x&Pt2aP&NOpGUU'");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.replaceOnceIgnoreCase("doesn't match any regular expression.", "}oj<}l=[ul<", "r]y;`KN1KF*Uyx");
      assertEquals("doesn't match any regular expression.", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "doesn't match any regular expression.", (CharSequence) "xmY.x&Pt2aP&NOpGUU'");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "0[+NT1'un:&<c", (CharSequence) "u");
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("hdu<mO.>+");
      assertEquals("hdu<mO.>+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "hdu<mO.>+";
      int int0 = StringUtils.indexOf((CharSequence) "hdu<mO.>+", (-1));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrap("hdu<mO.>+", '');
      assertEquals("hdu<mO.>+", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("Object varargs must not be null", "Object varargs must not be null", "`t*;*+VAIA'0L", (-1));
      assertEquals("`t*;*+VAIA'0L", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "`t*;*+VAIA'0L", (CharSequence) "`t*;*+VAIA'0L");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "ZIy\"vf_a^*1-Xs3f", (CharSequence) "ZIy\"vf_a^*1-Xs3f");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string3 = StringUtils.wrap("|_VoH7Z18EMV@f_K", '');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "|_VoH7Z18EMV@f_K", supplier0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string3));
      
      int int3 = StringUtils.indexOf((CharSequence) "ZIy\"vf_a^*1-Xs3f", (-1), 3);
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      String string4 = StringUtils.join((List<?>) null, '', (-2973), (-541997210));
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("hdu<mO.>+");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.substring("Comparator should not be null.", (-1), 1);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      
      int int4 = StringUtils.getLevenshteinDistance((CharSequence) "Object varargs must not be null", (CharSequence) "hdu<mO.>+");
      assertEquals(30, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      
      String string6 = StringUtils.wrap("_Z_o|\u0007Q/z", 'X');
      assertEquals("X_Z_o|\u0007Q/zX", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "Minimum abbreviation width is %d");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.US;
      assertSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertNotNull(locale1);
      
      String string1 = StringUtils.removeEndIgnoreCase("Minimum abbreviation width is %d", " ");
      assertEquals("Minimum abbreviation width is %d", string1);
      assertNotNull(string1);
      
      String string2 = locale1.getDisplayLanguage();
      assertSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("English", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = locale0.getScript();
      assertSame(locale0, locale1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = locale1.getDisplayScript();
      assertSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      Locale locale2 = Locale.TAIWAN;
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("TW", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("TWN", locale2.getISO3Country());
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      
      String string5 = StringUtils.lowerCase(" ", locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("TW", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals(" ", string5);
      assertNotNull(string5);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = locale0.getDisplayLanguage();
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("English", string6);
      assertNotNull(string6);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.reverse("");
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.EMPTY;
      assertEquals("", string8);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      
      String string9 = StringUtils.stripToNull("p");
      assertEquals("p", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      
      int int2 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) "Minimum abbreviation width is %d");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) " ";
      String string10 = StringUtils.join(objectArray0, 'I');
      assertEquals(1, objectArray0.length);
      assertEquals(" ", string10);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.normalizeSpace("_tCw]vljHA2F`4d");
      assertEquals("_tCw]vljHA2F`4d", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.startsWith(charSequenceArray0[5], "");
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.defaultString("_tCw]vljHA2F`4d");
      assertEquals("_tCw]vljHA2F`4d", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      CharSequence[] charSequenceArray0 = null;
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringBefore("!", "cbs");
      assertEquals("!", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "!", (CharSequence) "!");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.stripStart("cbs", "cbs");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("!", "g/^NKAQi:Q,R+BZG");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.remove("Xd8E|ygE", '[');
      assertEquals("Xd8E|ygE", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = (-1650.76644113);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 's', (-1), 127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      String string0 = StringUtils.difference("&t.L=hWG_;G<Ts^F", "@og-B}Xz_r, bA0]f0KlLmU");
      assertEquals("@og-B}Xz_r, bA0]f0KlLmU", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("uQ2 a'$n8&@Ti", "%)'$s,QJZFk:Xua7V]");
      assertEquals("uQ2 a'$n8&@Ti", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("}% <i,Wt}p(PBtx/{", (String) null, (String) null);
      assertEquals("}% <i,Wt}p(PBtx/{", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.trimToNull("fFsvTH *wTnpo");
      assertEquals("fFsvTH *wTnpo", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "@og-B}Xz_r, bA0]f0KlLmU", 36);
      assertNull(stringArray0);
      
      String string4 = StringUtils.valueOf((char[]) null);
      assertNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank("og-B}Xz_r, ", supplier0);
      assertEquals("og-B}Xz_r, ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.substringAfterLast((String) null, 36);
      assertNull(string6);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "5sykqv.");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      String string0 = StringUtils.leftPad("<mO", 4305, '3');
      assertNotNull(string0);
      
      Locale locale0 = new Locale("C!", "");
      assertEquals("", locale0.getCountry());
      assertEquals("c!", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("c!", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "0Q=3DMUK{,";
      objectArray0[2] = (Object) "0Q=3DMUK{,";
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) null;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[6] = object1;
      String string1 = StringUtils.joinWith("<mO", objectArray0);
      assertEquals(7, objectArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("C!", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceFirst("0Q=3DMUK{,", "", "C!");
      assertEquals("C!0Q=3DMUK{,", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithAny("\" should ae a parenM context.", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.defaultString("<mO8HWC2", (String) null);
      assertEquals("<mO8HWC2", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<mO8HWC2", charSequenceArray0[2]);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(8, int0);
      
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[5]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("", ".vm@Hl", "]qMnF{QL*5|MufC[");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      String string3 = locale0.getExtension('S');
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNull(string3);
      
      String string4 = locale0.getExtension('r');
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNull(string4);
      
      String string5 = StringUtils.lowerCase((String) null, locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNull(string5);
      
      String string6 = StringUtils.reverse("offset cannot be negative");
      assertEquals("evitagen eb tonnac tesffo", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.EMPTY;
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0[0], charSequenceArray0[3]);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((Comparator<? super Object>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      String string0 = StringUtils.substringBetween("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "@og-B}Xz_r, bA0]f0KlLmU", 329);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      int int2 = StringUtils.countMatches((CharSequence) "@og-B}Xz_r, bA0]f0KlLmU", (CharSequence) null);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string2 = null;
      String string3 = StringUtils.getDigits((String) null);
      assertNull(string3);
      
      String string4 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string5 = StringUtils.defaultString("Aborting to protect against StackOverflowError - output of one loop is the input of another", "The `date` %s is after the current date %s");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      
      String string6 = "The `date` %s is after the current date %s";
      try { 
        StringUtils.getBytes("Aborting to protect against StackOverflowError - output of one loop is the input of another", "The `date` %s is after the current date %s");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.removeAll(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("'D4", "");
      assertEquals("'D4", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'G');
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Th", (CharSequence) "Th", 14);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"YZ,(";
      stringArray0[1] = "\"YZ,(";
      String string0 = StringUtils.replaceEach("\"YZ,(", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("\"YZ,(", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\"YZ,(", (CharSequence) "\"YZ,(");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfterLast("0[+NT1}un:&<c", "\"YZ,(");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.compare("Minimum abbreviation width is %d", "\"YZ,(", true);
      assertEquals(43, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.remove("~#MsKeGDJ kE", "\"YZ,(");
      assertEquals("~#MsKeGDJ kE", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replace("\"YZ,(", "16;-MDc\"p_Y;:Px*e", "");
      assertEquals("\"YZ,(", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "Search and Replace array lengths don't match: ", 14);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string4 = StringUtils.replace("Search and Replace array lengths don't match: ", "\"YZ,(", "");
      assertEquals("Search and Replace array lengths don't match: ", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "0[+NT1}un:&<c", Integer.MAX_VALUE);
      assertEquals(31, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      Locale locale1 = Locale.UK;
      assertSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertNotNull(locale1);
      
      String string5 = StringUtils.upperCase("ixi MB+uI1WkZIa", locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("IXI MB+UI1WKZIA", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange");
      assertNull(string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains("org.junitpioneer.jupiter.params.ShortRange"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("org.junitpioneer.jupiter.params.ShortRange", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'z';
      String string1 = StringUtils.join(charArray0, 'z', 988, 988);
      assertArrayEquals(new char[] {'s', 'z'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.junitpioneer.jupiter.params.ShortRange", charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.contains(charSequenceArray0[1], charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int1 = StringUtils.compare("R%q", "", true);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.remove("BoR", "org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("BoR", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replace("(8-Mx#!3JxGUl $org.apache.commons.lang3.StringUtils", "bA0]f0KlLmU", "BoR");
      assertEquals("(8-Mx#!3JxGUl $org.apache.commons.lang3.StringUtils", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int2 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "(8-Mx#!3JxGUl $org.apache.commons.lang3.StringUtils", 988);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(43, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      String string4 = StringUtils.upperCase("(8-Mx#!3JxGUl $org.apache.commons.lang3.StringUtils", locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("(8-MX#!3JXGUL $ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      String string0 = StringUtils.leftPad(" ", 3145);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "2.}W?`A@y6]oK", (CharSequence) ".", 3145);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) " ", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.replaceAll("Strings must not be null", stringArray0[0], stringArray0[0]);
      assertEquals(7, stringArray0.length);
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Cannot get the toString of a null object", stringArray0[1], 8);
      assertEquals(7, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.removeIgnoreCase("org.apache.commons.lang3.exception.CloneFailedException", "org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.truncate("org.apache.commons.lang3.exception.CloneFailedException", 14);
      assertEquals("org.apache.com", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.normalizeSpace("Strings must not be null");
      assertEquals("Strings must not be null", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.swapCase("org.apache.com");
      assertEquals("ORG.APACHE.COM", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "ORG.APACHE.COM", (CharSequence) "Locale must not be null", (-1062));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Strings must not be null", 8);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.isNumeric("org.apache.commons.lang3.exception.CloneFailedException");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("Strings must not be null");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 126);
      assertNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'q';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'b', 'q'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      String string0 = StringUtils.replace("", "Object varargs must not be null", "Object varargs must not be null", 99);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("", 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultIfEmpty("x1-q.y%>CmSUK~BQ}t", "F>FL=p8r%p0vjdoQ+,_");
      assertEquals("x1-q.y%>CmSUK~BQ}t", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "x1-q.y%>CmSUK~BQ}t";
      charSequenceArray0[1] = (CharSequence) "x1-q.y%>CmSUK~BQ}t";
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.abbreviate("", 0, 0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "F>FL=p8r%p0vjdoQ+,_";
      String string4 = StringUtils.appendIfMissingIgnoreCase("7C_Qb", "", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals("7C_Qb", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String[] stringArray0 = StringUtils.split("@", "Gb%VJH-&2;", 32);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.stripAccents("");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("7C_Qb");
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[4], (CharSequence) "F>FL=p8r%p0vjdoQ+,_", 458);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(29, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      charArray0[1] = '';
      charArray0[2] = '@';
      charArray0[3] = 'n';
      charArray0[4] = 'J';
      charArray0[5] = '=';
      charArray0[6] = 'h';
      charArray0[7] = 'q';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'K', '', '@', 'n', 'J', '=', 'h', 'q'}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "\r", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      String string0 = StringUtils.abbreviate("org.junitpioneer.jupiter.StdIoExtension", 1452, 1452);
      assertEquals("org.junitpioneer.jupiter.StdIoExtension", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("B$>w00U3vq[]", (-1836));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "org.junitpioneer.jupiter.StdIoExtension", 1452);
      assertEquals(39, int0);
      
      String string2 = StringUtils.repeat('A', (-2060));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.junitpioneer.jupiter.StdIoExtension";
      stringArray0[1] = "org.junitpioneer.jupiter.StdIoExtension";
      stringArray0[2] = "org.junitpioneer.jupiter.StdIoExtension";
      stringArray0[3] = "";
      stringArray0[4] = "B$>w00U3vq[]";
      stringArray0[5] = "";
      stringArray0[6] = "org.junitpioneer.jupiter.StdIoExtension";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("org.junitpioneer.jupiter.StdIoExtension", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("kG)N\"M5\"{G");
      assertEquals("kG)N\"M5\"{G", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      String string0 = StringUtils.replace("CmRj=6Fn9'r0QeQS", ": ", "CmRj=6Fn9'r0QeQS");
      assertEquals("CmRj=6Fn9'r0QeQS", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "CmRj=6Fn9'r0QeQS", ": ");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertFalse(priorityQueue0.contains("CmRj=6Fn9'r0QeQS"));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean1 = priorityQueue0.add("@og-B}Xz_r, bA0]f0KlLmU");
      assertFalse(priorityQueue0.contains("CmRj=6Fn9'r0QeQS"));
      assertTrue(priorityQueue0.contains("@og-B}Xz_r, bA0]f0KlLmU"));
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.deleteWhitespace("CmRj=6Fn9'r0QeQS");
      assertEquals("CmRj=6Fn9'r0QeQS", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isNumericSpace(": ");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "CmRj=6Fn9'r0QeQS";
      charSequenceArray0[1] = (CharSequence) "@og-B}Xz_r, bA0]f0KlLmU";
      charSequenceArray0[2] = (CharSequence) "CmRj=6Fn9'r0QeQS";
      charSequenceArray0[3] = (CharSequence) "CmRj=6Fn9'r0QeQS";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) ": ", supplier0);
      assertEquals(": ", charSequence0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      
      charSequenceArray0[4] = (CharSequence) ": ";
      charSequenceArray0[5] = (CharSequence) ": ";
      boolean boolean3 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      String string0 = StringUtils.replacePattern("", "p36B", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "p36B";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "p36B";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "p36B", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) (-1);
      String string1 = StringUtils.defaultString("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string2 = locale0.getDisplayName();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int2 = StringUtils.getFuzzyDistance(charSequenceArray0[3], "", locale0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      String string0 = StringUtils.replacePattern("", "p36B", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "p36B";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "p36B";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "p36B", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) (-1);
      int int2 = 90;
      String string1 = StringUtils.join(doubleArray0, 'G', 90, (-1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), (-1.0), 0.0, (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertFalse(set0.contains('G'));
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string2 = StringUtils.trimToNull("?vb");
      assertEquals("?vb", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = null;
      int int3 = StringUtils.compare((String) null, "N+L{jQ[U9Z{#'$G5|S`");
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("line.separator", 57, (-3543));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("o|DsHzhyO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      String string0 = StringUtils.difference("QQf0]G[:4BRP-k$Ap", "xmY.x&Pt2aP&NOpGUU'cbs");
      assertEquals("xmY.x&Pt2aP&NOpGUU'cbs", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "%s: Could not resolve parameter by name (%s).");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("QQf0]G[:4BRP-k$Ap", "", "%s: Could not resolve parameter by name (%s).");
      assertEquals("%s: Could not resolve parameter by name (%s).Q%s: Could not resolve parameter by name (%s).Q%s: Could not resolve parameter by name (%s).f%s: Could not resolve parameter by name (%s).0%s: Could not resolve parameter by name (%s).]%s: Could not resolve parameter by name (%s).G%s: Could not resolve parameter by name (%s).[%s: Could not resolve parameter by name (%s).:%s: Could not resolve parameter by name (%s).4%s: Could not resolve parameter by name (%s).B%s: Could not resolve parameter by name (%s).R%s: Could not resolve parameter by name (%s).P%s: Could not resolve parameter by name (%s).-%s: Could not resolve parameter by name (%s).k%s: Could not resolve parameter by name (%s).$%s: Could not resolve parameter by name (%s).A%s: Could not resolve parameter by name (%s).p%s: Could not resolve parameter by name (%s).", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.trimToNull("\n");
      assertNull(string3);
      
      int int0 = StringUtils.compare("xmY.x&Pt2aP&NOpGUU'cbs", "xmY.x&Pt2aP&NOpGUU'cbs");
      assertEquals(0, int0);
      
      String string4 = StringUtils.stripEnd("mb_s1ur>Q$y}", "Invalid exceptionStatus");
      assertEquals("mb_s1ur>Q$y}", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.normalizeSpace("Strings must not be null");
      assertEquals("Strings must not be null", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = "\\u";
      String[] stringArray0 = StringUtils.substringsBetween("G]7", "Strings must not be null", string6);
      assertNull(stringArray0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "xmY.x&Pt2aP&NOpGUU'cbs", (CharSequence) "\n", (-2196));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("QQf0]G[:4BRP-k$Ap");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(comparator0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.repeat("@og-B}Xz_r, bA0]f0KlLmU", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, "xmY.x&Pt2aP&NOpGUU'");
      assertNull(string0);
      
      String string1 = StringUtils.replaceChars("xmY.x&Pt2aP&NOpGUU'", 'D', 'D');
      assertEquals("xmY.x&Pt2aP&NOpGUU'", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad((String) null, 3835, 'R');
      assertNull(string2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-5635);
      String string3 = StringUtils.join(shortArray0, 'D');
      assertArrayEquals(new short[] {(short) (-5635)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("-5635", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.replaceOnce((String) null, "xmY.x&Pt2aP&NOpGUU'", (String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = StringUtils.stripStart("", "0Q=3DMUK{,");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "0Q=3DMUK{,");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.toRootUpperCase("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.replaceEachRepeatedly("<mO", (String[]) null, (String[]) null);
      assertEquals("<mO", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.unwrap("", '-');
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string5 = StringUtils.join((List<?>) arrayList0, "Qk}", 55, 1);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)charSequence0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '-';
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 55;
      String string6 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {45.0F, 1.0F, 55.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals("45.0C1.0C55.0", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = "0r\"WD`aI{Pq(lZ_";
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst(" ", "0r\"WD`aI{Pq(lZ_", "0r\"WD`aI{Pq(lZ_");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 7
         // 0r\"WD`aI{Pq(lZ_
         //        ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase(" ", "\r", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      String string0 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"YZ,(";
      stringArray0[1] = "\"YZ,(";
      String string0 = StringUtils.replaceEach("\"YZ,(", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("\"YZ,(", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("1nBDP!9VV1nBDP!9VV", "Failed to read file ");
      assertEquals((-21), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("hdu<mB.>+", (String) null);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.removeFirst("line.separator", "W4$M9]QP>~NN~~g3p");
      assertEquals("line.separator", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrap("\"YZ,(", "The `untilDate` string '");
      assertEquals("The `untilDate` string '\"YZ,(The `untilDate` string '", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("The `untilDate` string '\"YZ,(The `untilDate` string '", "\"YZ,(");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-21);
      String string3 = StringUtils.join(intArray0, 'I');
      assertArrayEquals(new int[] {(-21)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("-21", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.removeEndIgnoreCase("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", "");
      assertEquals("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains((-21)));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string5 = StringUtils.join((List<?>) linkedList0, 'I', 322, (-21));
      assertFalse(linkedList0.contains((-21)));
      assertEquals(0, linkedList0.size());
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("\"YZ,(");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.substring("line.separator", (-21), 48);
      assertEquals("line.separator", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.rightPad("Strings must not be null", 322);
      assertEquals("Strings must not be null                                                                                                                                                                                                                                                                                                          ", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      
      boolean boolean2 = StringUtils.isAllBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(boolean2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains(string4));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<String> iterator0 = arrayDeque0.descendingIterator();
      assertFalse(arrayDeque0.contains(string4));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      String string8 = StringUtils.join(iterator0, ';');
      assertFalse(arrayDeque0.contains(string4));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "maxWith cannot be negative", (CharSequence) "maxWith cannot be negative");
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.split(" ", "maxWith cannot be negative", 1);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("maxWith cannot be negative");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.abbreviateMiddle("maxWith cannot be negative", " ", 1);
      assertEquals("maxWith cannot be negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", supplier0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequence0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      String string1 = StringUtils.substringBefore("'4", "wd :H:t");
      assertEquals("'4", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      
      int int1 = StringUtils.indexOf((CharSequence) "'4", (-1), 6);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.abbreviateMiddle("wJwB", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 3781);
      assertEquals("wJwB", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "wJwB", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string3 = StringUtils.abbreviateMiddle("'4", "e+Y.(.:", 1);
      assertEquals("'4", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.upperCase("'4");
      assertEquals("'4", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.prependIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "'4", (CharSequence[]) null);
      assertEquals("'4Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "e+Y.(.:", (CharSequence) "'4");
      assertEquals(0, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      
      String string6 = StringUtils.overlay("Aborting to protect against StackOverflowError - output of one loop is the input of another", "4euE)*N1KjGKqX", 1087, 1087);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another4euE)*N1KjGKqX", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)charSequence0));
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      float[] floatArray0 = new float[0];
      char char0 = '\'';
      String string0 = StringUtils.join(floatArray0, '\'');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEnd("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("", 0, "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.trim("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = "e";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("e", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      String string0 = StringUtils.chop(">");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "ReportEntry");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, '%');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "w)BvAysU#fDg*2*|8)");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop("\n");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.trimToNull("j2R0^]-HL]tT-Zy[5");
      assertEquals("j2R0^]-HL]tT-Zy[5", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.unwrap("", '*');
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.join((Object[]) null, "");
      assertNull(string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.json.AbstractJsonArgumentsProvider", "i~ecp+bZcm4O");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(15, stringArray0.length);
      assertFalse(boolean0);
      
      String string6 = StringUtils.join((long[]) null, '1');
      assertNull(string6);
      
      int int1 = StringUtils.countMatches((CharSequence) "j2R0^]-HL]tT-Zy[5", '*');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((Comparator<? super Object>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      boolean boolean0 = priorityQueue0.add(locale_Category0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, "@og-B}Xz_r, bA0]f0KlLmU");
      assertFalse(priorityQueue0.contains("@og-B}Xz_r, bA0]f0KlLmU"));
      assertEquals(1, priorityQueue0.size());
      assertEquals("FORMAT", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("Method `", (String) null);
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("FORMAT", "FORMAT");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumericSpace("FORMAT");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.leftPad("@og-B}Xz_r, bA0]f0KlLmU", 1, '');
      assertEquals("@og-B}Xz_r, bA0]f0KlLmU", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "@og-B}Xz_r, bA0]f0KlLmU", (CharSequence) "@og-B}Xz_r, bA0]f0KlLmU", 1);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "Method `";
      stringArray0[3] = null;
      stringArray0[4] = "@og-B}Xz_r, bA0]f0KlLmU";
      stringArray0[5] = "@og-B}Xz_r, bA0]f0KlLmU";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", 'x', 'x');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 3753);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[0] = "!m*#";
      stringArray0[3] = null;
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("~q", "!m*#", 101);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("org.junitpioneer.jupiter.DisableIfTestFailsExtension", supplier0);
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfterLast(";=;4|", Integer.MAX_VALUE);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "clone", (CharSequence) "");
      assertEquals(5, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat('g', (-1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string2 = StringUtils.trimToEmpty("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.uncapitalize("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      String[] stringArray0 = new String[0];
      String string4 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string4);
      
      try { 
        StringUtils.getBytes("", "<mO.>+");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      float[] floatArray0 = new float[5];
      String string0 = StringUtils.join(floatArray0, 'R');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals("0.0R0.0R0.0R0.0R0.0", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("0.0R0.0R0.0R0.0R0.0", "0.0R0.0R0.0R0.0R0.0", 4);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToNull("0.0R0.0R0.0R0.0R0.0");
      assertEquals("0.0R0.0R0.0R0.0R0.0", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("8wh9%", 4, (-3053));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.lowerCase("34)C&qVZV#z-gI</'vV");
      assertEquals("34)c&qvzv#z-gi</'vv", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.split("");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals((-1), int0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.abbreviate("FccD-$(ck", "", 2125);
      assertEquals("FccD-$(ck", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "34)c&qvzv#z-gi</'vv");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.truncate("0.0R0.0R0.0R0.0R0.0", 866);
      assertEquals("0.0R0.0R0.0R0.0R0.0", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String[] stringArray2 = StringUtils.split("0.0R0.0R0.0R0.0R0.0", "cbs");
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "34)C&qVZV#z-gI</'vV";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "FccD-$(ck";
      charSequenceArray0[3] = (CharSequence) "34)c&qvzv#z-gi</'vv";
      charSequenceArray0[4] = (CharSequence) "34)C&qVZV#z-gI</'vV";
      charSequenceArray0[5] = (CharSequence) "0.0R0.0R0.0R0.0R0.0";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "8wh9%";
      charSequenceArray0[8] = (CharSequence) "";
      int int2 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains('R'));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        arrayList0.listIterator(8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      float[] floatArray0 = new float[5];
      String string0 = StringUtils.join(floatArray0, 'R');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals("0.0R0.0R0.0R0.0R0.0", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("0.0R0.0R0.0R0.0R0.0", "0.0R0.0R0.0R0.0R0.0", 4);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToNull("0.0R0.0R0.0R0.0R0.0");
      assertEquals("0.0R0.0R0.0R0.0R0.0", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("8wh9%", 4, (-3053));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.lowerCase("34)C&qVZV#z-gI</'vV");
      assertEquals("34)c&qvzv#z-gi</'vv", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.split("");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.upperCase("34)C&qVZV#z-gI</'vV");
      assertEquals("34)C&QVZV#Z-GI</'VV", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals((-1), int0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.abbreviate("FccD-$(ck", "", 2125);
      assertEquals("FccD-$(ck", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "34)c&qvzv#z-gi</'vv");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string6 = StringUtils.truncate("0.0R0.0R0.0R0.0R0.0", 866);
      assertEquals("0.0R0.0R0.0R0.0R0.0", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string7 = StringUtils.removePattern(")jz.}}z1q-0HB]Mw", "0.0R0.0R0.0R0.0R0.0");
      assertEquals(")jz.}}z1q-0HB]Mw", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "Y ", (CharSequence) "Y ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeAll("(\n", "(\n");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 2
         // (
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "_GCw]ljHA2?`4d";
      objectArray0[1] = (Object) "_GCw]ljHA2?`4d";
      String string0 = StringUtils.join(objectArray0, "_GCw]ljHA2?`4d");
      assertEquals(3, objectArray0.length);
      assertEquals("_GCw]ljHA2?`4d_GCw]ljHA2?`4d_GCw]ljHA2?`4d_GCw]ljHA2?`4d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "Minimum abbreviation width is %d");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Minimum abbreviation width is %d");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.replaceAll("0Q=3DMU", "Minimum abbreviation width is %d", (String) null);
      assertEquals("0Q=3DMU", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.startsWith("0Q=3DMU", "0Q=3DMU");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("\r", (String) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("0Q=3DMU");
      assertEquals(5, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte) (-81);
      String string4 = StringUtils.trim("0Q=3DMU");
      assertEquals("0Q=3DMU", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      String string0 = StringUtils.substringBefore("s>ZP7I", "org.junitpioneer.jupiter.params.Range");
      assertEquals("s>ZP7I", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("s>ZP7I", '[');
      assertEquals("s>ZP7I", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("s>ZP7I", "s>ZP7I");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.joinWith("s>ZP7I", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviateMiddle("M", "M", 420);
      assertEquals("M", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripEnd("s>ZP7I", "1nBDP!9VV1nBDP!9VV");
      assertEquals("s>ZP7I", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.wrapIfMissing("0k;LZ", 'E');
      assertEquals("E0k;LZE", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.remove("s>ZP7I", "z`Z |I4B8Emy");
      assertEquals("s>ZP7I", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "s>ZP7I", (CharSequence) "s>ZP7I", 420);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "1nBDP!9VV1nBDP!9VV", (CharSequence) "0k;LZ");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("org.junitpioneer.jupiter.params.Range", "ZkXg}u'cZ-wSB");
      assertEquals((-11), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string7 = StringUtils.center("s>ZP7I", (-11), (String) null);
      assertEquals("s>ZP7I", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = StringUtils.trimToEmpty("0k;LZ");
      assertEquals("0k;LZ", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", charSequenceArray0[4]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.swapCase("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultString("#W&<o!j.VIT^3-;?,&", "Minimum abbreviation width with offset is %d");
      assertEquals("#W&<o!j.VIT^3-;?,&", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray1 = new CharSequence[0];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray1);
      assertEquals(0, charSequenceArray1.length);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertTrue(boolean2);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.repeat("#W&<o!j.VIT^3-;?,&", 100);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 57, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 41);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "");
      assertEquals(0, int0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertFalse(arrayDeque0.contains("\n"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      String string0 = StringUtils.join((Iterable<?>) arrayDeque0, '\'');
      assertFalse(arrayDeque0.contains("\n"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "&4m 9=x@0/*!", "&4m 9=x@0/*!");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "&4m 9=x@0/*!", (CharSequence) "&4m 9=x@0/*!", (-3934));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string1 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.upperCase("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.center("", (-1), 'x');
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.swapCase(".3dhJ0O84]!l/PcL{r");
      assertEquals(".3DHj0o84]!L/pCl{R", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.substring("Threshold must not be negative", 99);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.replaceOnceIgnoreCase("", (String) null, "");
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains(""));
      assertNotNull(treeSet0);
      
      NavigableSet<Object> navigableSet0 = treeSet0.tailSet((Object) "", true);
      assertFalse(treeSet0.contains(""));
      assertFalse(navigableSet0.contains(""));
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      assertNotNull(navigableSet0);
      
      String string7 = StringUtils.join((Iterable<?>) treeSet0, "org.apache.commons.lang3.ArrayUtils");
      assertFalse(treeSet0.contains(""));
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.leftPad("", (-1), " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) " ";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[8];
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.startsWithAny("org.junitpioneer.jupiter.params.ShortRange", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("\r", "\r", locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithAny(" ", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("q9hAQoQ@n-Q<h1L-G'%5v $.1_\r", "q9hAQoQ@n-Q<h1L-G'%5v $.1_\r", locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(79, int0);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      String string0 = StringUtils.upperCase("<mO.>+");
      assertEquals("<MO.>+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("<mO.>+");
      assertEquals("<mO.>+", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllUpperCase("<MO.>+");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "<MO.>+", (CharSequence) "<mO.>+");
      assertEquals(0, int0);
      
      String string2 = StringUtils.wrap("^aDI4_=1Y3xil5e", "\r");
      assertEquals("\r^aDI4_=1Y3xil5e\r", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.abbreviate("<MO.>+", "Node ", 32, 52);
      assertEquals("<MO.>+", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.remove("^aDI4_=1Y3xil5e", 'U');
      assertEquals("^aDI4_=1Y3xil5e", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.right("&D", 27);
      assertEquals("&D", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      int int1 = StringUtils.compare("Node ", "NryAh", true);
      assertEquals((-3), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)12;
      shortArray0[1] = (short) (-148);
      shortArray0[2] = (short)9;
      shortArray0[3] = (short)51;
      shortArray0[4] = (short)5;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-875);
      shortArray0[7] = (short)261;
      shortArray0[8] = (short)4;
      String string0 = StringUtils.join(shortArray0, '&');
      assertArrayEquals(new short[] {(short)12, (short) (-148), (short)9, (short)51, (short)5, (short)1, (short) (-875), (short)261, (short)4}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals("12&-148&9&51&5&1&-875&261&4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("hdu", 67, "hdu");
      assertEquals("hduhduhduhduhduhduhduhduhduhduhdhduhduhduhduhduhduhduhduhduhduhduhd", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("hduhduhduhduhduhduhduhduhduhduhdhduhduhduhduhduhduhduhduhduhduhduhd", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("hduhduhduhduhduhduhduhduhduhduhdhduhduhduhduhduhduhduhduhduhduhduhd");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("{displayName}", "jM{_Q\"Q{:RoqI,y)t", false);
      assertEquals(17, int0);
      
      boolean boolean2 = StringUtils.isNotEmpty("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "{displayName}";
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.join((short[]) null, 'Q');
      assertNull(string2);
      
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "{displayName}";
      charSequenceArray0[5] = (CharSequence) "";
      String string3 = StringUtils.difference("nTn$-", (String) null);
      assertEquals("nTn$-", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      charSequenceArray0[6] = (CharSequence) "nTn$-";
      int int1 = StringUtils.indexOfAny((CharSequence) "hdu", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      short[] shortArray0 = new short[1];
      String string0 = StringUtils.join(shortArray0, 'm');
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      String string0 = StringUtils.stripEnd("4lP~;&>+8Ew-Ncp.", "4lP~;&>+8Ew-Ncp.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "4lP~;&>+8Ew-Ncp.", (CharSequence) "");
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.defaultString("<mO8HWC2", (String) null);
      assertEquals("<mO8HWC2", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<mO8HWC2", charSequenceArray0[2]);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(8, int0);
      
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[5]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("", ".vm@Hl", "]qMnF{QL*5|MufC[");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray1 = new CharSequence[8];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      charSequenceArray1[1] = (CharSequence) "";
      charSequenceArray1[2] = (CharSequence) "";
      charSequenceArray1[3] = (CharSequence) "<mO8HWC2";
      String string3 = StringUtils.joinWith((String) null, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      charSequenceArray1[4] = (CharSequence) "";
      charSequenceArray1[5] = (CharSequence) "";
      charSequenceArray1[6] = (CharSequence) ".vm@Hl";
      charSequenceArray1[7] = (CharSequence) null;
      boolean boolean2 = StringUtils.endsWithAny(charSequenceArray0[4], charSequenceArray1);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(8, charSequenceArray1.length);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(boolean2);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      String string0 = StringUtils.replacePattern("", "p36B", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "p36B";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "p36B";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "p36B", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) (-1);
      String string1 = StringUtils.join(doubleArray0, 'G', 90, (-1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), (-1.0), 0.0, (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int2 = StringUtils.indexOf((CharSequence) "", charSequenceArray0[2], 3689);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "p36B";
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("p36B", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.strip("p{InCombiningDiacriticalMarks}+", "p36B");
      assertEquals("{InCombiningDiacriticalMarks}+", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      String string0 = StringUtils.repeat('O', Integer.MIN_VALUE);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2105.9473F);
      floatArray0[1] = (-2105.9473F);
      floatArray0[2] = (float) '}';
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 512.0F;
      String string0 = StringUtils.join(floatArray0, '}');
      assertArrayEquals(new float[] {(-2105.9473F), (-2105.9473F), 125.0F, 1.0F, 1.0F, 1.0F, 0.0F, 512.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals("-2105.9473}-2105.9473}125.0}1.0}1.0}1.0}0.0}512.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad(" T", 77, ',');
      assertEquals(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, T", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "-2105.9473}-2105.9473}125.0}1.0}1.0}1.0}0.0}512.0", supplier0);
      assertEquals("-2105.9473}-2105.9473}125.0}1.0}1.0}1.0}0.0}512.0", charSequence0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isNumericSpace("-2105.9473}-2105.9473}125.0}1.0}1.0}1.0}0.0}512.0");
      assertFalse(boolean0);
      
      String string2 = StringUtils.LF;
      assertEquals("\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = '}';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\n", charArray0);
      assertArrayEquals(new char[] {',', '}'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.abbreviateMiddle("", "k(", 77);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.leftPad(" \r", 0);
      assertEquals(" \r", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      
      String string5 = StringUtils.repeat('}', 0);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.substringBetween("GMT", "!", " \r");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      String string0 = StringUtils.replaceChars("$5=[i+8q},Rrz5Q\",!a", "$5=[i+8q},Rrz5Q\",!a", "...");
      assertEquals("....", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, 'S');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      String string0 = StringUtils.substringAfter("BpW(", 22);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviate("gRf|2l=P,_75U", "BpW(", 22);
      assertEquals("gRf|2l=P,_75U", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.reverseDelimited("gRf|2l=P,_75U", 'A');
      assertEquals("gRf|2l=P,_75U", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviate("lgdFb&a3Y7TtI}R4", 2676);
      assertEquals("lgdFb&a3Y7TtI}R4", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.countMatches((CharSequence) "BpW(", 'G');
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "gRf|2l=P,_75U", "");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string4 = StringUtils.upperCase("gRf|2l=P,_75U", locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("GRF|2L=P,_75U", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("hdu<mO.>+");
      assertEquals("hdu<mO.>+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "hdu<mO.>+";
      int int0 = StringUtils.indexOf((CharSequence) "hdu<mO.>+", (-1));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrap("hdu<mO.>+", '');
      assertEquals("hdu<mO.>+", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("Object varargs must not be null", "Object varargs must not be null", "`t*[*+VNIA'0L", (-1));
      assertEquals("`t*[*+VNIA'0L", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "`t*[*+VNIA'0L", (CharSequence) "`t*[*+VNIA'0L");
      assertTrue(boolean0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains("`t*[*+VNIA'0L"));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("`t*[*+VNIA'0L"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertFalse(linkedList1.contains("`t*[*+VNIA'0L"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      String string3 = StringUtils.defaultString("hdu<mO.>+");
      assertEquals("hdu<mO.>+", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "hdu<mO.>+", (CharSequence) "hdu<mO.>+", 76);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.firstNonEmpty(stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNull(string4);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.strip((String) null, "`t*[*+VNIA'0L");
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "`t*[*+VNIA'0L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "#*#T#)Y");
      assertTrue(boolean0);
      
      String string0 = StringUtils.getIfEmpty("", (Supplier<String>) null);
      assertNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("a<^F7fLn=", "org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("org.junitpioneer.jupiter.params.ShortRangea<^F7fLn=org.junitpioneer.jupiter.params.ShortRange", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string1);
      
      String string2 = "";
      int int0 = StringUtils.indexOfAny((CharSequence) null, "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "z.GY6!>$O)j]]&*q)x", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains(string0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      String string1 = "Threshold must not be negative";
      boolean boolean0 = arrayDeque0.offerFirst("");
      assertTrue(arrayDeque0.contains(string0));
      assertFalse(arrayDeque0.contains("z.GY6!>$O)j]]&*q)x"));
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean0);
      
      Spliterator<String> spliterator0 = arrayDeque0.spliterator();
      assertTrue(arrayDeque0.contains(string0));
      assertFalse(arrayDeque0.contains("z.GY6!>$O)j]]&*q)x"));
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertNotNull(spliterator0);
      
      String string2 = StringUtils.toRootUpperCase("#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw");
      assertEquals("#A!*Q\"CO47?>SMBW#A!*Q\"CO47?>SMBW#A!*Q\"CO47?>SMBW#A!*Q\"CO47?>SMBW#A!*Q\"CO47?>SMBW#A!*Q\"CO47?>SMBW#A!*Q\"CO47?>SMBW#A!*Q\"CO47?>SMBW#A!*Q\"CO47?>SMBW#A!*Q\"CO47?>SMBW#A!*Q\"CO47?>SMBW#A!*Q\"CO47?>SMBW#A!*Q\"CO47?>SMBW#A!*Q\"CO47?>SMBW", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.toRootUpperCase("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = "`$ZI`wmh5)1P";
      String string5 = StringUtils.mid("`$ZI`wmh5)1P", 1070, 1070);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      int int0 = 0;
      String string6 = StringUtils.substringAfterLast("`$ZI`wmh5)1P", 0);
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("`$ZI`wmh5)1P", "The `untilDate` string '", 700, (-2013265917));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 25
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.defaultString("H", "\r");
      assertEquals("H", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("H", "q~d5m7`^=", 104);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.uncapitalize("\r");
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("\r", (-1));
      assertEquals("\r", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "q~d5m7`^=", (CharSequence) "\r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceEachRepeatedly("(_%nu", stringArray0, (String[]) null);
      assertEquals(1, stringArray0.length);
      assertEquals("(_%nu", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      try { 
        StringUtils.getBytes("\r", "'D4");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      String string0 = StringUtils.leftPad("n", 2, '1');
      assertEquals("1n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "1n", 2);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrap("1n", '');
      assertEquals("1n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("ZIy\"vf_a^*1-Xs3f", "", "`t*;*+VAIA'0L", 2);
      assertEquals("ZIy\"vf_a^*1-Xs3f", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "n", (CharSequence) "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "n", (CharSequence) "1n");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "`t*;*+VAIA'0L";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.trimToEmpty("3SF-PJ`\"BLt9Wi~E@g");
      assertEquals("3SF-PJ`\"BLt9Wi~E@g", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.uncapitalize("WGu1&\"W-Qy$b&yb9$");
      assertEquals("wGu1&\"W-Qy$b&yb9$", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean3 = StringUtils.equals((CharSequence) "WGu1&\"W-Qy$b&yb9$", (CharSequence) "`t*;*+VAIA'0L");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      boolean boolean4 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "n";
      stringArray0[1] = "n";
      stringArray0[2] = "wGu1&\"W-Qy$b&yb9$";
      stringArray0[3] = "1n";
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.replaceEachRepeatedly("j2R0^", stringArray0, stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(4, stringArray0.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("j2R0^", string5);
      assertNotNull(string5);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      try { 
        StringUtils.getBytes("Supplied value must be a valid byte literal between -128 and 127: [", "n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      String string0 = "`XtN;4g<13]wPUo\\f";
      String string1 = StringUtils.abbreviate("`XtN;4g<13]wPUo\f", 76, 321);
      assertEquals("`XtN;4g<13]wPUo\f", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "I]IHZM%-L+Qvw:@$_/";
      String string3 = StringUtils.substringAfter("I]IHZM%-L+Qvw:@$_/", 76);
      assertEquals("+Qvw:@$_/", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "I]IHZM%-L+Qvw:@$_/", (CharSequence) "+Qvw:@$_/", 321);
      assertEquals(9, int0);
      
      String string4 = StringUtils.repeat('a', 9);
      assertEquals("aaaaaaaaa", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = StringUtils.compare("YroM!]yQY-O`g0", "A?77,BA%/TO{}D", true);
      assertEquals(24, int1);
      assertFalse(int1 == int0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "`XtN;4g<13]wPUo\f";
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[2] = object1;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'Z', 9, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      String string0 = StringUtils.leftPad("(8-Mx#!3JxGUl $", 100);
      assertEquals("                                                                                     (8-Mx#!3JxGUl $", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("                                                                                     (8-Mx#!3JxGUl $", "                                                                                     (8-Mx#!3JxGUl $");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("                                                                                     (8-Mx#!3JxGUl $");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.repeat('O', 100);
      assertEquals("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isNotBlank("                                                                                     (8-Mx#!3JxGUl $");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "(8-Mx#!3JxGUl $";
      charSequenceArray0[1] = (CharSequence) "                                                                                     (8-Mx#!3JxGUl $";
      charSequenceArray0[2] = (CharSequence) "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO";
      charSequenceArray0[3] = (CharSequence) "(8-Mx#!3JxGUl $";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty(charSequenceArray0[1], supplier0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("                                                                                     (8-Mx#!3JxGUl $", charSequence0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "                                                                                     (8-Mx#!3JxGUl $", (-1235), 100);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.substringAfter("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", (int) 'A');
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      
      boolean boolean3 = StringUtils.isAsciiPrintable(charSequenceArray0[2]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string3 = StringUtils.substring("                                                                                     (8-Mx#!3JxGUl $", (-1235), 148);
      assertEquals("                                                                                     (8-Mx#!3JxGUl $", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)charSequence0));
      
      String string4 = StringUtils.rightPad("ho", (-1));
      assertEquals("ho", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      String string0 = StringUtils.rotate("Method `", 48);
      assertEquals("Method `", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("hdu<mO.>+");
      assertEquals("hdu<mO.>+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "hdu<mO.>+";
      int int0 = StringUtils.indexOf((CharSequence) "hdu<mO.>+", (-1));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrap("hdu<mO.>+", '');
      assertEquals("hdu<mO.>+", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("Object varargs must not be null", "Object varargs must not be null", "`t*;*+VAIA'0L", (-1));
      assertEquals("`t*;*+VAIA'0L", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "`t*;*+VAIA'0L", (CharSequence) "`t*;*+VAIA'0L");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "ZIy\"vf_a^*1-Xs3f", (CharSequence) "ZIy\"vf_a^*1-Xs3f");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String string3 = StringUtils.wrap("|_VoH7Z18EMV@f_K", '');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "|_VoH7Z18EMV@f_K", supplier0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      
      int int3 = StringUtils.indexOf((CharSequence) "ZIy\"vf_a^*1-Xs3f", (-1), 3);
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      String string4 = StringUtils.join((List<?>) null, '', (-2973), (-541997210));
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("hdu<mO.>+");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.substring("Comparator should not be null.", (-1), 1);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.rotate("+\th? hh]r'CW", (-1521));
      assertEquals("'CW+\th? hh]r", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.strip("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEnd(" ", "\r");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad(" ", 0, " ");
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsIgnoreCase(" ", "\r");
      assertFalse(boolean0);
      
      int int1 = 0;
      int int2 = StringUtils.lastIndexOf((CharSequence) " ", 0, 0);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      String string3 = "#[*xmRU";
      String string4 = StringUtils.substring("#[*xmRU", (-282), (-282));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.removeStart("", " ");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.join((Object[]) null, 'a', 2486, 0);
      assertNull(string6);
      
      String string7 = StringUtils.defaultIfBlank(" ", (String) null);
      assertNull(string7);
      
      String string8 = StringUtils.join((double[]) null, 'a', 2486, (-1));
      assertNull(string8);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsNone((CharSequence) " ", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("/Cf", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty(charSequenceArray0[4], supplier0);
      assertEquals(8, charSequenceArray0.length);
      assertNull(charSequence0);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[3], 6, (-1038));
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string0 = StringUtils.join((List<?>) null, 'F', 2294, (-1));
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(charSequenceArray0[3]);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("1PIKMBxt:1:fsam", 37);
      assertEquals("1PIKMBxt:1:fsam                      ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      String string0 = "l,`UR1J6R^<.sg1=O_\\";
      int int0 = (-1405);
      String string1 = StringUtils.rotate("l,`UR1J6R^<.sg1=O_", (-1405));
      assertEquals(",`UR1J6R^<.sg1=O_l", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "";
      boolean boolean0 = StringUtils.isNumericSpace("l,`UR1J6R^<.sg1=O_");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "l,`UR1J6R^<.sg1=O_", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOf((CharSequence) "l,`UR1J6R^<.sg1=O_", 4524);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string3 = StringUtils.defaultString("l,`UR1J6R^<.sg1=O_");
      assertEquals("l,`UR1J6R^<.sg1=O_", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int3 = StringUtils.countMatches((CharSequence) "", (CharSequence) "l,`UR1J6R^<.sg1=O_");
      assertEquals(0, int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      
      String string4 = "ctXh~m8iO|a~wzO^";
      String string5 = StringUtils.getDigits("ctXh~m8iO|a~wzO^");
      assertEquals("8", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.defaultString("The `date` %s is after the current date %s", "l,`UR1J6R^<.sg1=O_");
      assertEquals("The `date` %s is after the current date %s", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = "\\FccD-$(ck";
      try { 
        StringUtils.getBytes("", "FccD-$(ck");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      String string0 = "Minimum abbreviation width is %d";
      String string1 = StringUtils.substringBetween((String) null, "Minimum abbreviation width is %d");
      assertNull(string1);
      
      String string2 = StringUtils.getDigits("h\":Yz$<e2{");
      assertEquals("2", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "h\":Yz$<e2{";
      String string3 = StringUtils.joinWith((String) null, charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("h\":Yz$<e2{", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "h\":Yz$<e2{";
      charSequenceArray0[2] = (CharSequence) "Minimum abbreviation width is %d";
      charSequenceArray0[3] = (CharSequence) "h\":Yz$<e2{";
      charSequenceArray0[4] = (CharSequence) "h\":Yz$<e2{";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "h\":Yz$<e2{";
      charSequenceArray0[7] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 'L';
      String string4 = StringUtils.join(longArray0, 'L');
      assertArrayEquals(new long[] {0L, 0L, 0L, 76L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals("0L0L0L76", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      int int1 = StringUtils.countMatches(charSequenceArray0[1], '-');
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null, "%6~{W|=c]3|I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      String string0 = StringUtils.unwrap("`}A$DlHg#@45W!VMW?5zf", "null/empty items");
      assertEquals("`}A$DlHg#@45W!VMW?5zf", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      String string0 = StringUtils.swapCase("Vx89O A:!xQ9`s[[^");
      assertEquals("vX89o a:!Xq9`S[[^", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("vX89o a:!Xq9`S[[^", (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.swapCase("StopwatchExtension");
      assertEquals("sTOPWATCHeXTENSION", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("vX89o a:!Xq9`S[[^", (-170), 127);
      assertEquals("vX89o a:!Xq9`S[[^", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.toRootLowerCase("sTOPWATCHeXTENSION");
      assertEquals("stopwatchextension", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = 'z';
      charArray0[2] = 'B';
      charArray0[3] = ']';
      charArray0[4] = '?';
      charArray0[5] = '9';
      charArray0[6] = 'V';
      charArray0[7] = 'v';
      String string4 = StringUtils.replaceAll((String) null, (String) null, "8HW");
      assertNull(string4);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, (CharSequence) "sTOPWATCHeXTENSION");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.unwrap("sTOPWATCHeXTENSION", "org.junitpioneer.jupiter.json.AbstractJsonArgumentsProvider");
      assertEquals("sTOPWATCHeXTENSION", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "stopwatchextension";
      stringArray0[1] = "sTOPWATCHeXTENSION";
      stringArray0[2] = "sTOPWATCHeXTENSION";
      stringArray0[3] = "vm}%";
      stringArray0[4] = "StopwatchExtension";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "stopwatchextension");
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase(" ", "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.LF;
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      String string0 = StringUtils.replace("", "Object varargs must not be null", "Object varargs must not be null", 99);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("", 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeEndIgnoreCase(" ", "', has a length less than 2");
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceAll((String) null, "\n", "");
      assertNull(string3);
      
      String string4 = StringUtils.trimToNull((String) null);
      assertNull(string4);
      
      int int0 = StringUtils.compare("", "b|#;E?OF]");
      assertEquals((-9), int0);
      
      String string5 = StringUtils.stripEnd("j2R0^]-HL]tT-Zy[5", "");
      assertEquals("j2R0^]-HL]tT-Zy[5", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.normalizeSpace(" ");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "StopwatchExtension", "null comparator");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.normalizeSpace("\r");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "!m*#";
      boolean boolean0 = StringUtils.isAllUpperCase("!m*#");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("!m*#", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      String string0 = StringUtils.replacePattern("", "p36B", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "p36B";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "p36B";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "p36B", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) (-1);
      String string1 = StringUtils.join(doubleArray0, 'G', 90, (-1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), (-1.0), 0.0, (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int2 = StringUtils.indexOf((CharSequence) "", charSequenceArray0[2], 3689);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "p36B";
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("p36B", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int3 = StringUtils.getLevenshteinDistance(charSequenceArray0[1], (CharSequence) "p36B");
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.replaceIgnoreCase("", "p36B", "]qMnF{QL*5|MufC[");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.endsWithAny("]qMnF{QL*5|MufC[", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.endsWithAny("NLzqP~l[46e|[m@fP", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("NLzqP~l[46e|[m@fP");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      String string0 = StringUtils.difference("waybDg;jVQ<", "waybDg;jVQ<");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("", "8HWC2");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "ucPFf]M.B";
      String string3 = StringUtils.wrap(" ", "<mO");
      assertEquals("<mO <mO", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "waybDg;jVQ<";
      String string4 = StringUtils.removeStart(" ", "FccD-$(ck");
      assertEquals(" ", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "ucPFf]M.B", (CharSequence) " ");
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate(" ", (-675));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange", (String) null);
      assertNull(string0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("org.junitpioneer.jupiter.params.ShortRange"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.join((List<?>) arrayList0, "b?[M", (-1681), (-1681));
      assertFalse(arrayList0.contains("org.junitpioneer.jupiter.params.ShortRange"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "sarX4ZAC$h0DP{ux+0<";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'r', (-99), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("", 'u');
      assertEquals("", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      String string2 = StringUtils.join(byteArray0, 'C', (-1925), (-1925));
      assertArrayEquals(new byte[] {(byte) (-89)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = '[';
      charArray0[2] = '>';
      charArray0[3] = '7';
      charArray0[4] = 'S';
      charArray0[5] = 'C';
      charArray0[6] = '6';
      charArray0[7] = '[';
      charArray0[8] = 'l';
      String string0 = StringUtils.join(charArray0, '6', 1437, 119);
      assertArrayEquals(new char[] {'=', '[', '>', '7', 'S', 'C', '6', '[', 'l'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeEndIgnoreCase((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.trimToNull((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.unwrap((String) null, '*');
      assertNull(string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, (String) null);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("eW6jPI@*K|;IA_", "...");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.join((long[]) null, 'S');
      assertNull(string5);
      
      int int1 = StringUtils.countMatches(charSequenceArray0[0], '*');
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = Charset.isSupported("org.junitpioneer.jupiter.CartesianProductTestExtension");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int2 = StringUtils.compare("...", "", false);
      assertEquals(3, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string6 = StringUtils.join((char[]) null, 'O');
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = StringUtils.join(charArray0, 'r');
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("\u0000r\u0000r\u0000r\u0000r\u0000r\u0000", string0);
      
      String string1 = StringUtils.replaceChars("\u0000r\u0000r\u0000r\u0000r\u0000r\u0000", 'r', 'r');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 512.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-2789.719F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2789.719F);
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substring("", 0, (-938));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("", "The `date` %s is after the current date %s", ")r]BGx");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.split("");
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.upperCase("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf("The `date` %s is after the current date %s", "", 0);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      assertFalse(list0.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      int int1 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      charArray0[1] = '}';
      String string4 = StringUtils.join(charArray0, '}');
      assertArrayEquals(new char[] {'}', '}'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("}}}", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "The `date` %s is after the current date %s", (CharSequence) "}}}");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String string5 = StringUtils.abbreviate("", (-836));
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      String string0 = StringUtils.difference("waybDg;jVQ<", "cbs");
      assertEquals("cbs", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("8HWC2", "<mO");
      assertEquals("<mO8HWC2<mO", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeAll("cbs", (String) null);
      assertEquals("cbs", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "p36B";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("p36B", charSequence0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-2739));
      assertEquals((-1), int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfBlank("5sykqv.0Q=3DMUK{,", supplier0);
      assertEquals("5sykqv.0Q=3DMUK{,", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      
      String[] stringArray0 = StringUtils.substringsBetween("A4^%X2 ", "p36B", "cbs");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("p{InCombiningDiacriticalMarks}+", "z", "z");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(31, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "Aborting to protect against StackOverflowError - output of one loop is the input of another", 11, 3138);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 31
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      String string0 = StringUtils.difference("waybDg;jVQ<", "waybDg;jVQ<");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("", "8HWC2");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrap(" ", "<mO");
      assertEquals("<mO <mO", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "waybDg;jVQ<";
      charSequenceArray0[1] = (CharSequence) "ucPFf]M.B";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("waybDg;jVQ<", charSequence0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      
      int int0 = (-3109);
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "ucPFf]M.B", (-3109), (-2757));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3109
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "0Q=3DMUK{,", (CharSequence) "");
      assertEquals(0, int0);
      
      String string0 = StringUtils.removeIgnoreCase("@CartesianProductTest not found.", ".b,YxQiR:aS#");
      assertEquals("@CartesianProductTest not found.", string0);
      assertNotNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("@CartesianProductTest not found.").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertEquals("@CartesianProductTest not found.", charSequence0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsIgnoreCase("@CartesianProductTest not found.", "@CartesianProductTest not found.");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.removeStart("0Q=3DMUK{,", "5sykqv.");
      assertEquals("0Q=3DMUK{,", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      
      String string2 = StringUtils.swapCase("Value must not be empty");
      assertEquals("vALUE MUST NOT BE EMPTY", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.remove("", '\"');
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "0Q=3DMUK{,";
      charSequenceArray0[1] = (CharSequence) "Value must not be empty";
      charSequenceArray0[2] = (CharSequence) "@CartesianProductTest not found.";
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int1 = StringUtils.compareIgnoreCase("0Q=3DMUK{,", "\"2j]u3JVN:|u");
      assertEquals(14, int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.isAlphanumeric("5sykqv.");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(" &;%=]Dk?*shW");
      assertEquals("&;%=]Dk?*shW", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((Comparator<? super Object>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      boolean boolean0 = priorityQueue0.add(locale_Category0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      
      String string0 = StringUtils.deleteWhitespace("@og-B}Xz_r, bA0]f0KlLmU");
      assertEquals("@og-B}Xz_r,bA0]f0KlLmU", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isNumericSpace("@og-B}Xz_r,bA0]f0KlLmU");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      String string0 = StringUtils.substringBefore("\r", "\r");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("+r!?Vo36D");
      assertEquals("+r!?Vo36D", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.appendIfMissing("\"9nmu,lWz< LW7tqb", "+r!?Vo36D", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("\"9nmu,lWz< LW7tqb+r!?Vo36D", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("+r!?Vo36D", "+r!?Vo36D");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "+r!?Vo36D", (CharSequence) "");
      assertEquals(9, int0);
      
      String string3 = StringUtils.replaceIgnoreCase("The `date` %s is after the current date %s", "\"YZ,(", "The `date` %s is after the current date %s");
      assertEquals("The `date` %s is after the current date %s", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.remove("Db1eg;k", "+r!?Vo36D");
      assertEquals("Db1eg;k", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) " ", (CharSequence) " ");
      assertEquals(1, int0);
      
      String string1 = StringUtils.rightPad(" ", 1, " ");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("+r!?Vo36D");
      assertEquals("+r!?Vo36D", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.appendIfMissing(":!Zd5;-%a^xGP(y]0B1", "+r!?Vo36D", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals(":!Zd5;-%a^xGP(y]0B1+r!?Vo36D", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ":!Zd5;-%a^xGP(y]0B1+r!?Vo36D", (CharSequence) "+r!?Vo36D");
      assertEquals(19, int0);
      
      String string2 = StringUtils.replaceIgnoreCase((String) null, "0+\"YO\"XbBUG=WvEw", " is not in the range '0' - '9'");
      assertNull(string2);
      
      String string3 = StringUtils.remove("0+\"YO\"XbBUG=WvEw", "0+\"YO\"XbBUG=WvEw");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.rightPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-1482), "xmY.x&Pt2aP&NOpGUU'");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("\n", " ", (CharSequence[]) null);
      assertEquals("\n ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("Aborting to protect against StackOverflowError - output of one loop is the input of another", "0Q=3DMU");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "0Q=3DMU", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals((-1), int0);
      
      int int1 = 51;
      int int2 = StringUtils.indexOf((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", 51);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(0, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      String string2 = StringUtils.getDigits("WLe");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.defaultString("", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      try { 
        StringUtils.getBytes("0Q=3DMU", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "w)BvAysU#fDg*2*|8)");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("", "\n", "<mO");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.trimToNull("j2R0^]-HL]tT-Zy[5");
      assertEquals("j2R0^]-HL]tT-Zy[5", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.compare("", "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      String string4 = StringUtils.stripEnd("Invalid exceptionStatus", "w)BvAysU#fDg*2*|8)");
      assertEquals("Invalid exceptionStatu", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.normalizeSpace("9u/pQL=EIto'rl$.V");
      assertEquals("9u/pQL=EIto'rl$.V", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String[] stringArray0 = StringUtils.substringsBetween("9u/pQL=EIto'rl$.V", "9qz`})<Y@s_T+Bl`W", "StopwatchExtension");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("hdu<mO.>+");
      assertEquals("hdu<mO.>+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "hdu<mO.>+";
      String string1 = StringUtils.replaceOnce("hdu<mO.>+", "!", "z.GY6!>$O)j]]&*q)x");
      assertEquals("hdu<mO.>+", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains("hdu<mO.>+"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = arrayDeque0.offerFirst("Threshold must not be negative");
      assertTrue(arrayDeque0.contains("Threshold must not be negative"));
      assertFalse(arrayDeque0.contains("hdu<mO.>+"));
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean0);
      
      Spliterator<String> spliterator0 = arrayDeque0.spliterator();
      assertTrue(arrayDeque0.contains("Threshold must not be negative"));
      assertFalse(arrayDeque0.contains("hdu<mO.>+"));
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertNotNull(spliterator0);
      
      String string2 = StringUtils.toRootUpperCase("DN0Uh4`Pq<@z;Kk&");
      assertEquals("DN0UH4`PQ<@Z;KK&", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.toRootUpperCase("!");
      assertEquals("!", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.mid("?:\";4r-w", 57, 1070);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.substringAfterLast("!", 57);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.abbreviate("-PV=:iGQ~&", "DN0UH4`PQ<@Z;KK&", 57, 57);
      assertEquals("-PV=:iGQ~&", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.remove("xmY.x&Pt2aP&NOpGUU'cbs", '-');
      assertEquals("xmY.x&Pt2aP&NOpGUU'cbs", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.right("r]y;`KN1KF*Uyx", 13);
      assertEquals("]y;`KN1KF*Uyx", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      
      double double0 = StringUtils.getJaroWinklerDistance("z.GY6!>$O)j]]&*q)x", "?:\";4r-w");
      assertEquals(0.0, double0, 0.01);
      
      String string9 = StringUtils.toRootLowerCase("");
      assertEquals("", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("\"p7koj7P^*>d-sXzEq", "3j'ff_BwCg");
      assertEquals(0.39, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      String string0 = StringUtils.repeat("", 108);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isWhitespace(" ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.repeat("\n", 8198);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      String string0 = StringUtils.repeat("Fw#", 2350);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.repeat("\r", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((Comparator<? super Object>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, "@og-B}Xz_r, bA0]f0KlLmU");
      assertFalse(priorityQueue0.contains("@og-B}Xz_r, bA0]f0KlLmU"));
      assertEquals(0, priorityQueue0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.repeat("", 248);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale0 = Locale.US;
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      String string0 = StringUtils.leftPad("org.junitpioneer.jupiter.params.ShortRange", (-3434), 'F');
      assertEquals("org.junitpioneer.jupiter.params.ShortRange", string0);
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[4] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[5] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      String string1 = StringUtils.replaceIgnoreCase("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange", (-3434));
      assertEquals("org.junitpioneer.jupiter.params.ShortRange", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[6] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[7] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      String string2 = StringUtils.prependIfMissing("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("org.junitpioneer.jupiter.params.ShortRange", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty(charSequenceArray0[4], supplier0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("org.junitpioneer.jupiter.params.ShortRange", charSequence0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      
      String string3 = StringUtils.substringBefore("wd :H:t", "org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("wd :H:t", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOf(charSequenceArray0[3], 6, (-1038));
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.join((List<?>) null, 'F', 2294, (-1));
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(charSequenceArray0[3]);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string5 = StringUtils.substring("org.junitpioneer.jupiter.params.ShortRange", 28, 13);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.rightPad("1PIKMBxt:1:fsam", 37);
      assertEquals("1PIKMBxt:1:fsam                      ", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.replaceChars("\r", "\n", "\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      String string0 = StringUtils.mid(" vs ", (-1168), 127);
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints(" vs ");
      assertArrayEquals(new int[] {32, 118, 115, 32}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.truncate(" vs ", 3);
      assertEquals(" vs", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceChars("W??H41xa.,C/a", "org.junitpioneer.jupiter.params.Range", "org.junitpioneer.jupiter.params.Range");
      assertEquals("W??H41xa.,C/a", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.trimToNull(" vs ");
      assertEquals("vs", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfEmpty("Threshold must not be negative", supplier0);
      assertEquals("Threshold must not be negative", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.defaultString("iDQxtj1m@=.V~'2']");
      assertEquals("iDQxtj1m@=.V~'2']", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string6 = locale0.getDisplayName();
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "\n");
      assertFalse(boolean0);
      
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("", (-1));
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", 1732);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "{");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "0[+<rNT5'un:&Ac", (CharSequence) "0[+<rNT5'un:&Ac");
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "0[+<rNT5'un:&Ac", 1);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("0[+<rNT5'un:&Ac");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("M", "M");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '-', (-2617), 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2617
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.split("\n");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("<mO.>+", " ", ")l\"eEz -9(;jN2u[v*");
      assertNull(string1);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains(")l\"eEz -9(;jN2u[v*"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string2 = StringUtils.join((List<?>) arrayList0, ")l\"eEz -9(;jN2u[v*", 199, (-282));
      assertFalse(arrayList0.contains(")l\"eEz -9(;jN2u[v*"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substring(" ", 3, (-282));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.lowerCase("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      
      String string5 = "O.h 6n";
      String[] stringArray0 = StringUtils.split("O.h 6n");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.upperCase("O3;VCr9s@Oqp67");
      assertEquals("O3;VCR9S@OQP67", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "O3;VCr9s@Oqp67", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.abbreviate("The `date` %s is after the current date %s", "", 199);
      assertEquals("The `date` %s is after the current date %s", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-282));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      String string0 = StringUtils.substringBefore("s>ZP7I", "org.junitpioneer.jupiter.params.Range");
      assertEquals("s>ZP7I", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "s>ZP7I", (CharSequence) "s>ZP7I");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "s>ZP7I";
      boolean boolean0 = StringUtils.startsWithAny("org.junitpioneer.jupiter.params.Range", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = "";
      String string2 = "$g\"LQo{";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("$g\"LQo{");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.defaultString((String) null, "\r");
      assertEquals("\r", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "s>ZP7I", charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = ":cx";
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      char char0 = '_';
      // Undeclared exception!
      try { 
        locale0.getExtension('_');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: _
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "Minimum abbreviation width is %d");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Minimum abbreviation width is %d");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.replaceAll("0Q=3DMU", "Minimum abbreviation width is %d", (String) null);
      assertEquals("0Q=3DMU", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.startsWith("0Q=3DMU", "0Q=3DMU");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("\r", (String) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("0Q=3DMU");
      assertEquals(5, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte) (-81);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '6', 22, 115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.difference("", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("<mO", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("<mO", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("<mO", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "<mO");
      assertEquals("<mO", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      int int1 = StringUtils.compare("q", (String) null);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.stripEnd("&ncI{6~_", "W{5^I!");
      assertEquals("&ncI{6~_", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.normalizeSpace("&ncI{6~_");
      assertEquals("&ncI{6~_", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another", "`");
      assertNull(stringArray0);
      
      String string6 = StringUtils.left("Aborting to protect against StackOverflowError - output of one loop is the input of another", 1);
      assertEquals("A", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("<mO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      String string0 = StringUtils.left("", 3849);
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripEnd("`", "#5xjX\"Z`BL8{Q]_1yj");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[5] = "`";
      stringArray0[1] = "S";
      stringArray0[2] = null;
      stringArray0[4] = "IYszxDlYAR|UOtA[{Yb";
      stringArray0[5] = "S";
      stringArray0[6] = null;
      stringArray0[1] = null;
      String string1 = StringUtils.replaceOnceIgnoreCase("IYszxDlYAR|UOtA[{Yb", "IYszxDlYAR|UOtA[{Yb", "IYszxDlYAR|UOtA[{Yb");
      assertEquals("IYszxDlYAR|UOtA[{Yb", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("t|G&Xof@@+bNJJ;AuqJ", (-2416));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.defaultIfBlank("S", "P#2,W]C~|j:6f_");
      assertEquals("S", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.wrapIfMissing("/PhJRf-x{ \"R$abX*", "\r");
      assertEquals("\r/PhJRf-x{ \"R$abX*\r", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.left("\n", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      String string0 = StringUtils.join(doubleArray0, '_', 0, 0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.substring("", 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "maxWith cannot be negative";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.left("", '_');
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "4[,p%ChZ)", 4);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.getDigits("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, 0);
      assertEquals((-1), int0);
      
      try { 
        StringUtils.getBytes("9qz`})<Y@s_T+Bl`W", ")mdsj_FS=O");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      String string0 = StringUtils.substringBefore("s>ZP7I", "org.junitpioneer.jupiter.params.Range");
      assertEquals("s>ZP7I", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "s>ZP7I", (CharSequence) "s>ZP7I");
      assertEquals(0, int0);
      
      String string1 = StringUtils.unwrap("$E@>C(kpPX%y", '`');
      assertEquals("$E@>C(kpPX%y", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.params.Range", "cbsxmY.x&Pt2aP&NOpGUU'");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.remove("Search and Replace array lengths don't match: ", 'D');
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) '`';
      doubleArray0[2] = (double) '[';
      doubleArray0[3] = (double) 'D';
      doubleArray0[4] = (double) 2913;
      doubleArray0[5] = (-386.23901);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'D', 0, 101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      float[] floatArray0 = new float[5];
      String string0 = StringUtils.join(floatArray0, 'R');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals("0.0R0.0R0.0R0.0R0.0", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("0.0R0.0R0.0R0.0R0.0", "0.0R0.0R0.0R0.0R0.0", 4);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToNull("0.0R0.0R0.0R0.0R0.0");
      assertEquals("0.0R0.0R0.0R0.0R0.0", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("8wh9%", 4, (-3053));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.split("");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.upperCase("34)C&qVZV#z-gI</'vV");
      assertEquals("34)C&QVZV#Z-GI</'VV", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals((-1), int0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.swapCase("ftt;RN*9bv");
      assertEquals("FTT;rn*9BV", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.remove("", '!');
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(" ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      String string0 = StringUtils.abbreviate("} 6f]Bcj>_S;!_K o", "", 1765, 1765);
      assertEquals("} 6f]Bcj>_S;!_K o", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.range(locale_FilteringMode0, locale_FilteringMode0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "_GCw]ljHA2?`4=d");
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      assertEquals("REJECT_EXTENDED_RANGES", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      
      int[] intArray0 = StringUtils.toCodePoints(" vs ");
      assertArrayEquals(new int[] {32, 118, 115, 32}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.truncate("v;;~{A1,S5^Gxv", 127);
      assertEquals("v;;~{A1,S5^Gxv", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("v;;~{A1,S5^Gxv", (String) null, "W??H41xa.,C/a");
      assertEquals("v;;~{A1,S5^Gxv", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull((String) null);
      assertNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("\r5,q1", supplier0);
      assertEquals("\r5,q1", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.split("W??H41xa.,C/a", "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.defaultString("\r5,q1");
      assertEquals("\r5,q1", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("W??H41xa.,C/a", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("\r", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'V');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("M", "", 55);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad(":0>M,?", 55, ":0>M,?");
      assertEquals(":0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Object[]) stringArray0, "Va:UZ16qL`p");
      assertEquals(1, stringArray0.length);
      assertEquals("M", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(":0>M,?", "wGeg57;:`_SE^+x4");
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.remove("M", '!');
      assertEquals("M", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      String string4 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {']'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("]", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.leftPad(":0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:", (int) 'V', ']');
      assertEquals("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:0>M,?:", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) " does not have data element at ");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 1548);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.StdIoExtension", "", (-1043));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("", 201, "");
      assertEquals("                                                                                                                                                                                                         ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.trimToEmpty("`.caeG[^CSy!v");
      assertEquals("`.caeG[^CSy!v", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.uncapitalize("Minimum abbreviation width is %d");
      assertEquals("minimum abbreviation width is %d", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.center("`.caeG[^CSy!v", 55);
      assertEquals("                     `.caeG[^CSy!v                     ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      try { 
        StringUtils.getBytes("org.junitpioneer.jupiter.StdIoExtension", "Threshold must not be negative");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = ')';
      charArray0[2] = 'K';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {'p', ')', 'K'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.toRootLowerCase(" ");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase((String) null, "Supplied value must be a valid byte literal between -128 and 127: [");
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "\n", (-1));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.strip("", "Ohc5yfA");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Ohc5yfA";
      stringArray0[1] = " ";
      stringArray0[2] = "Ohc5yfA";
      stringArray0[3] = " ";
      stringArray0[4] = "Supplied value must be a valid byte literal between -128 and 127: [";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(5, stringArray1.length);
      assertEquals(5, stringArray0.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("HR", "HR");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", 'x', 'x');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 3753);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string1 = StringUtils.replaceAll("Strings must not be null", "", "");
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("d;|9QifZ}5,Za/gd");
      assertEquals("d;|9QifZ}5,Za/gd", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Cannot get the toString of a null object", "", 8);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'z';
      charArray0[2] = 'q';
      charArray0[3] = 'z';
      charArray0[4] = 'q';
      String string3 = StringUtils.removeIgnoreCase("J", "");
      assertEquals("J", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("kMEw,");
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("|hf)F\"KuJ");
      assertFalse(boolean0);
      
      String string4 = StringUtils.removeEndIgnoreCase((String) null, "{#LyDIl8$>)^<J");
      assertNull(string4);
      
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, stringArray2);
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      String string0 = StringUtils.truncate(" hh", 51, 1);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "w)BvAysU#fDg*2*|8)");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("", "\n", "<mO");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.trimToNull("j2R0^]-HL]tT-Zy[5");
      assertEquals("j2R0^]-HL]tT-Zy[5", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.compare("", "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)0;
      String string4 = StringUtils.truncate("j2R0^]-HL]tT-Zy[5", (int) (byte)42, (int) (byte)50);
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      String string0 = StringUtils.right("da&/q9llT`1H", (-869));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "da&/q9llT`1H");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string1 = StringUtils.removeStart("gM;sgRZ", "");
      assertEquals("gM;sgRZ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "gM;sgRZ";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "da&/q9llT`1H";
      charSequenceArray0[3] = (CharSequence) "da&/q9llT`1H";
      String string2 = StringUtils.prependIfMissingIgnoreCase("da&/q9llT`1H", "da&/q9llT`1H", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("da&/q9llT`1H", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "gM;sgRZ", 0);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("da&/q9llT`1H", "gM;sgRZ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.defaultString("da&/q9llT`1H");
      assertEquals("da&/q9llT`1H", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.compare("maxWith cannot be negative", "Invalid exceptionStatus");
      assertEquals(36, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1), 36);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      String string0 = StringUtils.right(" annotation, but there were ", 2);
      assertEquals("e ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "e ", "1");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("hdu<mO.>+");
      assertEquals("hdu<mO.>+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "hdu<mO.>+";
      String string1 = StringUtils.replaceOnce("hdu<mO.>+", "!", "z.GY6!>$O)j]]&*q)x");
      assertEquals("hdu<mO.>+", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains("hdu<mO.>+"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Spliterator<String> spliterator0 = arrayDeque0.spliterator();
      assertFalse(arrayDeque0.contains("hdu<mO.>+"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(spliterator0);
      
      String string2 = StringUtils.toRootUpperCase("DN0Uh4`Pq<@z;Kk&");
      assertEquals("DN0UH4`PQ<@Z;KK&", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.toRootUpperCase("!");
      assertEquals("!", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.mid("?:\";4r-w", 57, 1070);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.substringAfterLast("hdu<mO.>+", 700);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.abbreviate("-PV=:iGQ~&", "DN0UH4`PQ<@Z;KK&", 57, 57);
      assertEquals("-PV=:iGQ~&", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.remove("xmY.x&Pt2aP&NOpGUU'cbs", '-');
      assertEquals("xmY.x&Pt2aP&NOpGUU'cbs", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = StringUtils.right("r]y;`KN1KF*Uyx", 13);
      assertEquals("]y;`KN1KF*Uyx", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("Locale must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("hdu");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("}0=5\"u>f");
      assertEquals("}0=5\"u>f", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("q9hAQoQ@n-Q<h1L-G'%5v $.1_\r", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 512.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-2789.719F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2105.9473F);
      String string0 = StringUtils.join(floatArray0, '}');
      assertArrayEquals(new float[] {512.0F, 1.0F, (-2789.719F), 0.0F, (-2105.9473F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals("512.0}1.0}-2789.719}0.0}-2105.9473", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("K8P34x@Mm^hZa2", 0, '}');
      assertEquals("K8P34x@Mm^hZa2", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace("K8P34x@Mm^hZa2");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '}';
      charArray0[6] = '}';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "K8P34x@Mm^hZa2", charArray0);
      assertArrayEquals(new char[] {'}', '}', '}', '}', '}', '}', '}'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.abbreviateMiddle(" ", ";Om{4>D~Q|", 3492);
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      String string0 = StringUtils.substring("", (-2131), (-2131));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("", ")r]BGx", "6_|7H5MR20EhW-E");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split(")r]BGx");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.upperCase("The `date` %s is after the current date %s");
      assertEquals("THE `DATE` %S IS AFTER THE CURRENT DATE %S", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastOrdinalIndexOf("THE `DATE` %S IS AFTER THE CURRENT DATE %S", "", 3531);
      assertEquals(42, int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 42;
      String string3 = StringUtils.join(floatArray0, 'X', 1192, 11);
      assertArrayEquals(new float[] {42.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains(""));
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      assertFalse(set1.contains(""));
      assertSame(set1, set0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertNotNull(set1);
      
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertFalse(boolean0);
      
      int int1 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.leftPad("6_|7H5MR20EhW-E", 3531, "O@;sz");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("  ", "  ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripEnd("`", "#5xjX\"Z`BL8{Q]_1yj");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "  ";
      stringArray0[2] = "$";
      stringArray0[3] = "S";
      stringArray0[4] = "S";
      stringArray0[5] = "S";
      stringArray0[6] = "  ";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("$", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isBlank("  ");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsWhitespace("#5xjX\"Z`BL8{Q]_1yj");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.join((int[]) null, 's', (-238), (-2754));
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("+r!?Vo36D");
      assertEquals("+r!?Vo36D", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.appendIfMissing("+r!?Vo36D", "+r!?Vo36D", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("+r!?Vo36D", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "+r!?Vo36D", (CharSequence) "+r!?Vo36D");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+r!?Vo36D";
      stringArray0[4] = "+r!?Vo36D";
      stringArray0[2] = "+r!?Vo36D";
      stringArray0[3] = "+r!?Vo36D";
      stringArray0[4] = "+r!?Vo36D";
      stringArray0[5] = "+r!?Vo36D";
      stringArray0[6] = "+r!?Vo36D";
      stringArray0[7] = "+r!?Vo36D";
      stringArray0[8] = "+r!?Vo36D";
      String string2 = StringUtils.replaceIgnoreCase("+r!?Vo36D", "+r!?Vo36D", "+r!?Vo36D");
      assertEquals("+r!?Vo36D", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.remove("+r!?Vo36D", "+r!?Vo36D");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "8wh9%", 322);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      String string0 = StringUtils.lowerCase("ZdX");
      assertEquals("zdx", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-2789.719F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-2127.534F);
      String string0 = StringUtils.join(floatArray0, '}');
      assertArrayEquals(new float[] {0.0F, 1.0F, (-2789.719F), 1.0F, (-2127.534F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals("0.0}1.0}-2789.719}1.0}-2127.534", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("0.0}1.0}-2789.719}1.0}-2127.534", "0.0}1.0}-2789.719}1.0}-2127.534", 0);
      assertEquals(32, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToNull("0.0}1.0}-2789.719}1.0}-2127.534");
      assertEquals("0.0}1.0}-2789.719}1.0}-2127.534", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("", 0, (-938));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.lowerCase("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.split("");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.upperCase("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertEquals(32, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertTrue(boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "The `date` %s is after the current date %s", (CharSequence[]) stringArray0);
      assertEquals(32, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, int0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(">CuB_k>873", "The `date` %s is after the current date %s", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 43
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      String string0 = StringUtils.capitalize("6_(8");
      assertEquals("6_(8", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = StringUtils.stripEnd("*!=qZ8TF/5R+vS", "");
      assertEquals("*!=qZ8TF/5R+vS", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceIgnoreCase("#5xjX\"Z`BL8{Q]_1yj", "*!=qZ8TF/5R+vS", "#5xjX\"Z`BL8{Q]_1yj");
      assertEquals("#5xjX\"Z`BL8{Q]_1yj", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.remove("#5xjX\"Z`BL8{Q]_1yj", "<mO");
      assertEquals("#5xjX\"Z`BL8{Q]_1yj", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.join((Iterable<?>) null, "Yu06}6C_.5 FA,ghOn");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      String string0 = StringUtils.center("yZ'7uOPP%I20vlY=nx", 1, 'W');
      assertEquals("yZ'7uOPP%I20vlY=nx", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("yZ'7uOPP%I20vlY=nx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      String string0 = StringUtils.substring("^`|", Integer.MAX_VALUE);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      String string0 = StringUtils.difference("(?V9kmrjyQ<34", "cbs");
      assertEquals("cbs", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("cbs", "xmY.x&Pt2aP&NOpGUU'");
      assertEquals("xmY.x&Pt2aP&NOpGUU'cbsxmY.x&Pt2aP&NOpGUU'", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrap("", "cbs");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "cbs";
      CharSequence[] charSequenceArray1 = new CharSequence[1];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray1);
      assertEquals(1, charSequenceArray1.length);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertNull(charSequence0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-2757));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringBetween("org.junitpioneer.jupiter.params.DisableIfArgumentExtension", "ym9~Qd", "");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      String string0 = StringUtils.difference("waybDg;jVQ<", "cbs");
      assertEquals("cbs", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("8HWC2", "<mO");
      assertEquals("<mO8HWC2<mO", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrap("ucPFf]M.B", "<mO8HWC2<mO");
      assertEquals("<mO8HWC2<mOucPFf]M.B<mO8HWC2<mO", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "p36B";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("p36B", charSequence0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-2757));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.getIfBlank("", (Supplier<String>) null);
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) "\r");
      assertEquals(0, int0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.rightPad(" ", 0, 'N');
      assertEquals(" ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      String string0 = StringUtils.rotate("l,`UR1J6R^<.sg1=O_", (-1405));
      assertEquals(",`UR1J6R^<.sg1=O_l", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string1 = StringUtils.getDigits("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray0[2] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray0[3] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray0[4] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray0[4] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray0[6] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray0[7] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[8];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray1[1] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray1[2] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray1[3] = (CharSequence) "";
      charSequenceArray1[4] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray1[5] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray1[6] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      String string2 = StringUtils.remove("?<b ", 'W');
      assertEquals("?<b ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = new char[0];
      String string3 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string4 = StringUtils.getIfBlank("  ", supplier0);
      assertNull(string4);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "?<b ", charSequenceArray0[4]);
      assertEquals(8, charSequenceArray0.length);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals((-1), int1);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray1);
      assertEquals(8, charSequenceArray1.length);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertTrue(boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      String string0 = StringUtils.wrap("Minimum abbreviation width with offset is %d", '\u000B');
      assertEquals("\u000BMinimum abbreviation width with offset is %d\u000B", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "D3|&lPYR{");
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) null, '[');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", supplier0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequence0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      String string1 = StringUtils.substringBefore("'4", "wd :H:t");
      assertEquals("'4", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      
      int int1 = StringUtils.indexOf((CharSequence) "'4", (-1), 6);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.join((List<?>) null, 'k', 322, 24);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.substring("Aborting to protect against StackOverflowError - output of one loop is the input of another", 48, 37);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.rightPad("1PIKMBxt:1:fsam", (-2973));
      assertEquals("1PIKMBxt:1:fsam", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      String[] stringArray0 = new String[11];
      boolean boolean0 = StringUtils.isAsciiPrintable(stringArray0[0]);
      assertEquals(11, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(" ", " ", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      String string0 = StringUtils.leftPad("n", 2, '1');
      assertEquals("1n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "1n", 2);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrap("1n", '');
      assertEquals("1n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("ZIy\"vf_a^*1-Xs3f", "", "`t*;*+VAIA'0L", 2);
      assertEquals("ZIy\"vf_a^*1-Xs3f", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "n", (CharSequence) "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Object[] objectArray0 = new Object[0];
      String string3 = StringUtils.join(objectArray0, 'k', (-1), (-1));
      assertEquals(0, objectArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int2 = StringUtils.lastOrdinalIndexOf("", "ZIy\"vf_a^*1-Xs3f", 33);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 33;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) '';
      floatArray0[5] = (float) '';
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1);
      floatArray0[8] = (float) '&';
      String string4 = StringUtils.join(floatArray0, 'k', 160, 2);
      assertArrayEquals(new float[] {(-1.0F), 33.0F, 2.0F, (-1.0F), 127.0F, 127.0F, (-1.0F), (-1.0F), 38.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("M", "M");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      String string0 = StringUtils.replace("CmRj=6Fn9'r0QeQS", ": ", "CmRj=6Fn9'r0QeQS");
      assertEquals("CmRj=6Fn9'r0QeQS", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "CmRj=6Fn9'r0QeQS", ": ");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CANADA;
      assertNotSame(locale1, locale0);
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      String string1 = locale1.getDisplayVariant();
      assertNotSame(locale1, locale0);
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      
      Locale locale2 = (Locale)locale1.clone();
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale2.getLanguage());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("en_CA", locale2.toString());
      assertEquals("CA", locale2.getCountry());
      assertNotNull(locale2);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      
      Locale locale3 = (Locale)locale1.clone();
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale3);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_CA", locale3.toString());
      assertEquals("CA", locale3.getCountry());
      assertEquals("en", locale3.getLanguage());
      assertEquals("CAN", locale3.getISO3Country());
      assertEquals("eng", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertNotNull(locale3);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertTrue(locale3.equals((Object)locale2));
      assertTrue(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      
      String string2 = StringUtils.prependIfMissing("#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw", "CmRj=6Fn9'r0QeQS", (CharSequence[]) null);
      assertEquals("CmRj=6Fn9'r0QeQS#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "CmRj=6Fn9'r0QeQS#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) ": ", (CharSequence) "CmRj=6Fn9'r0QeQS");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Minimum abbreviation width with offset is %d", "offset cannot be negative", 35);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) "");
      assertEquals(0, int0);
      
      String string0 = StringUtils.rotate("`MskvLR1$0n/FU3iRh", 0);
      assertEquals("`MskvLR1$0n/FU3iRh", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      String string0 = StringUtils.leftPad("n", 2, '1');
      assertEquals("1n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "1n", 2);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrap("1n", '');
      assertEquals("1n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("ZIy\"vf_a^*1-Xs3f", "", "`t*;*+VAIA'0L", 2);
      assertEquals("ZIy\"vf_a^*1-Xs3f", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "n", (CharSequence) "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "n", (CharSequence) "1n");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "`t*;*+VAIA'0L";
      charSequenceArray0[1] = (CharSequence) "n";
      charSequenceArray0[2] = (CharSequence) "ZIy\"vf_a^*1-Xs3f";
      charSequenceArray0[3] = (CharSequence) "n";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "ZIy\"vf_a^*1-Xs3f", supplier0);
      assertEquals("ZIy\"vf_a^*1-Xs3f", charSequence0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      
      int int3 = StringUtils.indexOf((CharSequence) "ZIy\"vf_a^*1-Xs3f", 0, (-1));
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      String string3 = StringUtils.join((List<?>) null, '1', (-2973), (-1));
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.substring("ZIy\"vf_a^*1-Xs3f", 148, 0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.rotate("`t*;*+VAIA'0L", 0);
      assertEquals("`t*;*+VAIA'0L", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.removeIgnoreCase("\r", " ");
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.removeIgnoreCase(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (-1336L);
      longArray0[6] = (-1336L);
      String string1 = StringUtils.join(longArray0, '2');
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1336L), (-1336L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals("-12-12-12-12-12-13362-1336", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      String string2 = StringUtils.reverseDelimited("iV#0NN 5", '2');
      assertEquals("iV#0NN 5", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.compare("", "GMT");
      assertEquals((-3), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.removeAll("iV#0NN 5", "org.apache.commons.lang3.StringUtils");
      assertEquals("iV#0NN 5", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2479L;
      Locale locale0 = Locale.FRANCE;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayScript();
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 2479L;
      objectArray0[1] = (Object) locale0;
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertFalse(priorityQueue0.contains(2479L));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean0 = priorityQueue0.add(objectArray0[0]);
      assertTrue(priorityQueue0.contains(2479L));
      assertEquals(3, objectArray0.length);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, "Qgu.#eO$K");
      assertFalse(priorityQueue0.contains("Qgu.#eO$K"));
      assertTrue(priorityQueue0.contains(2479L));
      assertEquals(1, priorityQueue0.size());
      assertEquals("2479", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNumericSpace("2479");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.leftPad("\n", (-1));
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "<mO";
      String string1 = StringUtils.substring("<mO", 3, 3);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.lowerCase("s>ZP7I<MO.>+");
      assertEquals("s>zp7i<mo.>+", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.upperCase("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("XDrN", "<mO", 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      String string0 = "MKlH2KD\\ufe@s{m.Py^";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string0, (CharSequence[]) stringArray0);
      assertEquals(14, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", " ", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-2789.719F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2127.534F);
      String string0 = StringUtils.join(floatArray0, '}');
      assertArrayEquals(new float[] {0.0F, 1.0F, (-2789.719F), 0.0F, (-2127.534F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals("0.0}1.0}-2789.719}0.0}-2127.534", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("0.0}1.0}-2789.719}0.0}-2127.534", "0.0}1.0}-2789.719}0.0}-2127.534", 0);
      assertEquals(32, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToNull("0.0}1.0}-2789.719}0.0}-2127.534");
      assertEquals("0.0}1.0}-2789.719}0.0}-2127.534", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("", 0, (-938));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceOnceIgnoreCase("0.0}1.0}-2789.719}0.0}-2127.534", "The `date` %s is after the current date %s", "");
      assertEquals("0.0}1.0}-2789.719}0.0}-2127.534", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.split("");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.upperCase("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertEquals(32, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertTrue(boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "The `date` %s is after the current date %s", (CharSequence[]) stringArray0);
      assertEquals(32, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, int0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(">CuB_k>873", "The `date` %s is after the current date %s", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 43
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("r}Jm!6<!&[R[(autO", "r}Jm!6<!&[R[(autO", 14);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 37);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      String string1 = StringUtils.join(floatArray0, '&', 37, 37);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int1 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastOrdinalIndexOf(" ", "\r", 76);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringAfterLast("&ucdm", "Gj7");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, '\"');
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.truncate((String) null, 0, 24);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "Minimum abbreviation width is %d");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Minimum abbreviation width is %d");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string2);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string3 = StringUtils.replaceFirst((String) null, (String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, (-1));
      assertNull(string4);
      
      String string5 = StringUtils.truncate((String) null, 0);
      assertNull(string5);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      
      int int4 = StringUtils.compare((String) null, (String) null, false);
      assertEquals(0, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      String string0 = StringUtils.leftPad("n", 2, '1');
      assertEquals("1n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "1n", 2);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrap("1n", '');
      assertEquals("1n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("ZIy\"vf_a^*1-Xs3f", "", "`t*;*+VAIA'0L", 2);
      assertEquals("ZIy\"vf_a^*1-Xs3f", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "n", (CharSequence) "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "n", (CharSequence) "1n");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "`t*;*+VAIA'0L";
      charSequenceArray0[1] = (CharSequence) "n";
      charSequenceArray0[2] = (CharSequence) "ZIy\"vf_a^*1-Xs3f";
      charSequenceArray0[3] = (CharSequence) "n";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "ZIy\"vf_a^*1-Xs3f", supplier0);
      assertEquals("ZIy\"vf_a^*1-Xs3f", charSequence0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      
      int int3 = StringUtils.indexOf((CharSequence) "ZIy\"vf_a^*1-Xs3f", 0, (-1));
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      
      String string3 = StringUtils.join((List<?>) null, '1', (-2973), (-1));
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.substring("ZIy\"vf_a^*1-Xs3f", 148, 0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.rightPad("XAF7YmWY", 0);
      assertEquals("XAF7YmWY", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isWhitespace(" ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.overlay(" ", "\n", 8198, (-1));
      assertEquals("\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      String string0 = StringUtils.overlay("Fw#", (String) null, 1506, 1506);
      assertEquals("Fw#", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("Fw#");
      assertEquals("Fw", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isMixedCase("Fw#");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-2076), (-2076));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, " ", (-1), 999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("hdu", 54, "\" should have a parent context.");
      assertEquals("\" should have a parent cohdu\" should have a parent con", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("\" should have a parent cohdu\" should have a parent con", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.join((int[]) null, 'z');
      assertNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("", "\" should have a parent cohdu\" should have a parent con");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.EMPTY;
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.replaceEachRepeatedly("...", (String[]) null, (String[]) null);
      assertEquals("...", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.unwrap("&]bzCR&A~", '-');
      assertEquals("&]bzCR&A~", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains('-'));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, "", 54, 2513);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2513
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      String string0 = StringUtils.center("\" should have a parent context.", 67, "\" should have a parent context.");
      assertEquals("\" should have a pa\" should have a parent context.\" should have a pa", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("\" should have a parent context.");
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      String string0 = StringUtils.replace("", "Object varargs must not be null", "Object varargs must not be null", 99);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("", 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultIfEmpty("x1-q.y%>CmSUK~BQ}t", "F>FL=p8r%p0vjdoQ+,_");
      assertEquals("x1-q.y%>CmSUK~BQ}t", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "x1-q.y%>CmSUK~BQ}t";
      charSequenceArray0[1] = (CharSequence) "x1-q.y%>CmSUK~BQ}t";
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.abbreviate("", 0, 0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "F>FL=p8r%p0vjdoQ+,_";
      String string4 = StringUtils.appendIfMissingIgnoreCase("7C_Qb", "", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals("7C_Qb", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.split("@", "Gb%VJH-&2;", 35);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.stripAccents("");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("7C_Qb");
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string6 = StringUtils.capitalize("Gb%VJH-&2;");
      assertEquals("Gb%VJH-&2;", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      String string0 = StringUtils.substringBefore("s>ZP7I", "org.junitpioneer.jupiter.params.Range");
      assertEquals("s>ZP7I", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("s>ZP7I", '[');
      assertEquals("s>ZP7I", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("s>ZP7I", "s>ZP7I");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.remove("tf/j0t-K", 'D');
      assertEquals("tf/j0t-K", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'D';
      doubleArray0[2] = (-386.23901);
      doubleArray0[4] = (double) 2913;
      doubleArray0[5] = (-1650.76644113);
      doubleArray0[6] = (double) '[';
      doubleArray0[7] = (double) 2913;
      String string3 = StringUtils.capitalize("s>ZP7I");
      assertEquals("S>ZP7I", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripEnd("M` ", (String) null);
      assertEquals("M`", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("#5xjX\"Z`BL8{Q]_1yj", "GP&VMh\"}49keg", " ");
      assertEquals("#5xjX\"Z`BL8{Q]_1yj", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("S", (-1492), "9Np=h");
      assertEquals("S", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isBlank("C=a&soyG");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsWhitespace(" ");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String string3 = StringUtils.repeat("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-1492));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.toRootLowerCase(" ");
      assertEquals(" ", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("", "", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.join((int[]) null, 'n', 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("C^jez*1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("+r!?Vo36D");
      assertEquals("+r!?Vo36D", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.appendIfMissing("+r!?Vo36D", "+r!?Vo36D", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("+r!?Vo36D", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "+r!?Vo36D", (CharSequence) "+r!?Vo36D");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+r!?Vo36D";
      stringArray0[4] = "+r!?Vo36D";
      stringArray0[2] = "+r!?Vo36D";
      stringArray0[3] = "+r!?Vo36D";
      stringArray0[4] = "+r!?Vo36D";
      stringArray0[5] = "+r!?Vo36D";
      stringArray0[6] = "+r!?Vo36D";
      stringArray0[7] = "+r!?Vo36D";
      stringArray0[8] = "+r!?Vo36D";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("+r!?Vo36D", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("+r!?Vo36D");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.join((int[]) null, 's', (-238), 0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width is %d", (String) null, (-92), (-92));
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width is %d", (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width is %d", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Minimum abbreviation width is %d");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string2);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "Minimum abbreviation width is %d");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("Minimum abbreviation width is %d"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add((Object) "Minimum abbreviation width is %d");
      assertTrue(linkedList0.contains("Minimum abbreviation width is %d"));
      assertFalse(linkedList0.contains((-1)));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertTrue(linkedList0.contains("Minimum abbreviation width is %d"));
      assertFalse(linkedList0.contains((-1)));
      assertEquals(1, linkedList0.size());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, ' ');
      assertTrue(linkedList0.contains("Minimum abbreviation width is %d"));
      assertFalse(linkedList0.contains((-1)));
      assertEquals(1, linkedList0.size());
      assertEquals("Minimum abbreviation width is %d", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      
      int int3 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width is %d", (-1), 177);
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      String string4 = StringUtils.removeAll((String) null, (String) null);
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean2 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.wrap(" ", " ");
      assertEquals("   ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("87!Wvsx+ !~x");
      assertEquals("87!Wvsx+ !~x", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "87!Wvsx+ !~x", (CharSequence) "\n");
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.strip("\r", "\n");
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      String string0 = StringUtils.swapCase("Vx89O A:!xQ9`s[[^");
      assertEquals("vX89o a:!Xq9`S[[^", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("vX89o a:!Xq9`S[[^", (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.swapCase("StopwatchExtension");
      assertEquals("sTOPWATCHeXTENSION", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("vX89o a:!Xq9`S[[^", (-170), 127);
      assertEquals("vX89o a:!Xq9`S[[^", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.toRootLowerCase("sTOPWATCHeXTENSION");
      assertEquals("stopwatchextension", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = 'z';
      charArray0[2] = 'B';
      charArray0[3] = ']';
      charArray0[4] = '?';
      charArray0[5] = '9';
      charArray0[6] = 'V';
      charArray0[7] = 'v';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'v', (-1523), (-1141));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      String string0 = StringUtils.substringBetween("CartesianProductTest can not have a non-empty display name.Minimum abbreviation width with offset is %d", "CartesianProductTest can not have a non-empty display name.Minimum abbreviation width with offset is %d", "sarX4ZAC$h0DP{ux+0<");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfterLast("CartesianProductTest can not have a non-empty display name.Minimum abbreviation width with offset is %d", "Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "S\"f");
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "S\"f", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.remove("", 'X');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string1 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "0Q=3DMUK{,", (CharSequence) "");
      assertEquals(0, int0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.removeStart("0Q=3DMUK{,", "5sykqv.");
      assertEquals("0Q=3DMUK{,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("Value must not be empty");
      assertEquals("vALUE MUST NOT BE EMPTY", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("", '\"');
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2479L;
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 2479L;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) 2479L;
      String string0 = StringUtils.join(objectArray0, 'o');
      assertEquals(3, objectArray0.length);
      assertEquals("2479ofr_FRo2479", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("2479ofr_FRo2479", "2479ofr_FRo2479");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripEnd("2479ofr_FRo2479", "%s requires that either `contains` or `matches` is set.");
      assertEquals("2479ofr_FRo2479", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceIgnoreCase("2479ofr_FRo2479", "S", (String) null);
      assertEquals("2479ofr_FRo2479", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.remove("S", "2479ofr_FRo2479");
      assertEquals("S", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.stripEnd(" ", "");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      String string0 = StringUtils.replacePattern("", "p36B", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "p36B";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "p36B";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "p36B", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-1);
      String string1 = StringUtils.abbreviateMiddle("#W9'ON^-", "p36B", 1599);
      assertEquals("#W9'ON^-", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripEnd("#W9'ON^-", "");
      assertEquals("#W9'ON^-", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.leftPad("#W9'ON^-", 0);
      assertEquals("#W9'ON^-", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.wrapIfMissing("83e^FQ\"ir,", 'g');
      assertEquals("g83e^FQ\"ir,g", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.remove("N", "Minimum abbreviation width is %d");
      assertEquals("N", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = StringUtils.mid("Exactly one type of input must be provided in th @", (-749), 3);
      assertEquals("Exa", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Exa", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase("?@V>Md>", "", false);
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compare((String) null, "");
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray1);
      
      String string1 = StringUtils.removeEnd("@og-B}Xz_r, ", "bA0]f0KlLmU");
      assertEquals("@og-B}Xz_r, ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("", (-1), "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((List<?>) null, ':', 7, 7);
      assertNull(string3);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains(""));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Spliterator<String> spliterator0 = arrayDeque0.spliterator();
      assertFalse(arrayDeque0.contains(""));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(spliterator0);
      
      String string4 = StringUtils.toRootUpperCase("@og-B}Xz_r, ");
      assertEquals("@OG-B}XZ_R, ", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.toRootUpperCase("!");
      assertEquals("!", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.mid("StopwatchExtension", 7, 7);
      assertEquals("chExten", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.substringAfterLast("chExten", (-1));
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("&7S", ">CuB_k>873", (-1480), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      String string0 = StringUtils.center("", 108, '!');
      assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
      String string1 = StringUtils.replaceOnceIgnoreCase((String) null, "", "");
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
      charSequenceArray0[3] = (CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
      charSequenceArray0[4] = (CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBeforeLast("Invalid exceptionStatus", "");
      assertEquals("Invalid exceptionStatus", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "0+5O<sgDr$", 108);
      assertNull(stringArray1);
      
      String string4 = StringUtils.wrap("", '!');
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean2 = StringUtils.isNotEmpty(charSequenceArray0[3]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 11;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '@', 11, 116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, "r]y;`KN1KF*Uyx");
      assertNull(string0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2453.2698F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, ':', (-26), 1458);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -26
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("\r", 8239, "\r");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.junitpioneer.jupiter.json.AbstractJsonSourceBasedArgumentsProvider", "org.junitpioneer.jupiter.json.AbstractJsonSourceBasedArgumentsProvider");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      String string0 = StringUtils.center("U%W", 1047, "@DefaultLocale can onl be used with language tag if language, country, and variant ar not set");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("", 2);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceEach("t-@N$[Ds<", (String[]) null, (String[]) null);
      assertEquals("t-@N$[Ds<", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isNumeric("t-@N$[Ds<");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("t-@N$[Ds<");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.center(" ", (-1), "@:%Rj,\u0007-&vvNu%ti ");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.abbreviateMiddle("", "", 32);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("\r");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      String string0 = StringUtils.leftPad("N", 1820, "N");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      String string0 = StringUtils.rightPad("&N((Sc8om&@TgayMP", 688, "&N((Sc8om&@TgayMP");
      assertEquals("&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8om&@TgayMP&N((Sc8o", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Exactly one type of input must be provided in th @", "Exactly one type of input must be provided in th @");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("Exactly one type of input must be provided in th @", (-2591));
      assertEquals("Exactly one type of input must be provided in th @", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "Exactly one type of input must be provided in th @");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceEachRepeatedly("Exactly one type of input must be provided in th @", (String[]) null, (String[]) null);
      assertEquals("Exactly one type of input must be provided in th @", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      try { 
        StringUtils.getBytes("Exactly one type of input must be provided in th @", "org.apache.commons.lang3.StringUtils");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      String string0 = StringUtils.leftPad("The String must not be empty", 3846, "The String must not be empty");
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("The String must not be empty");
      assertEquals("tHE sTRING MUST NOT BE EMPTY", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("/'PN,e'-1(`+J", "/'PN,e'-1(`+J", "/'PN,e'-1(`+J");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 13
         // /'PN,e'-1(`+J
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.removeEndIgnoreCase("\n", " ");
      assertEquals("\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 512.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-2789.719F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2105.9473F);
      String string0 = StringUtils.join(floatArray0, '}');
      assertArrayEquals(new float[] {512.0F, 1.0F, (-2789.719F), 0.0F, (-2105.9473F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals("512.0}1.0}-2789.719}0.0}-2105.9473", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("512.0}1.0}-2789.719}0.0}-2105.9473", "512.0}1.0}-2789.719}0.0}-2105.9473", 0);
      assertEquals(35, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToNull("512.0}1.0}-2789.719}0.0}-2105.9473");
      assertEquals("512.0}1.0}-2789.719}0.0}-2105.9473", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("", 0, (-938));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replaceOnceIgnoreCase("512.0}1.0}-2789.719}0.0}-2105.9473", "The `date` %s is after the current date %s", "");
      assertEquals("512.0}1.0}-2789.719}0.0}-2105.9473", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.split("512.0}1.0}-2789.719}0.0}-2105.9473");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.upperCase("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      int int0 = StringUtils.lastOrdinalIndexOf("The `date` %s is after the current date %s", "", 0);
      assertEquals((-1), int0);
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[2] = (-2789.719F);
      floatArray1[3] = 1.0F;
      floatArray1[4] = (float) (-938);
      floatArray1[5] = (float) (-1);
      String string5 = StringUtils.join(floatArray1, '}', 4, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2789.719F), 1.0F, (-938.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int1 = StringUtils.getFuzzyDistance("", "512.0}1.0}-2789.719}0.0}-2105.9473", locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.normalizeSpace("_tCw]vljHA?O2F4d");
      assertEquals("_tCw]vljHA?O2F4d", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.startsWith(charSequenceArray0[5], "");
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.capitalize("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are");
      assertEquals("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.containsWhitespace("_tCw]vljHA?O2F4d");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.join((int[]) null, 's', (-2754), (-2754));
      assertNull(string3);
      
      String string4 = StringUtils.repeat((String) null, 3816);
      assertNull(string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, "_tCw]vljHA?O2F4d");
      assertEquals(6, charSequenceArray0.length);
      assertEquals("_tCw]vljHA?O2F4d_tCw]vljHA?O2F4d_tCw]vljHA?O2F4d_tCw]vljHA?O2F4d_tCw]vljHA?O2F4d", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("0-O%3<", "_tCw]vljHA?O2F4d");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean3 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string6 = StringUtils.join((long[]) null, 's');
      assertNull(string6);
      
      int int0 = StringUtils.countMatches((CharSequence) "_tCw]vljHA?O2F4d", 't');
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        Charset.isSupported("/PhJRf-x{ \"R$abX*P#2,W]C~|j:6f_");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /PhJRf-x{ \"R$abX*P#2,W]C~|j:6f_
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "Exactly one type of input must be provided in th @", 'r');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String[] stringArray0 = new String[7];
      stringArray0[0] = "6ACApwsFsis(";
      stringArray0[1] = "6ACApwsFsis(";
      stringArray0[2] = "6ACApwsFsis(";
      stringArray0[3] = "6ACApwsFsis(";
      stringArray0[5] = "6ACApwsFsis(";
      stringArray0[6] = "6ACApwsFsis(";
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "6ACApwsFsis(";
      stringArray1[1] = "6ACApwsFsis(";
      stringArray1[2] = "6ACApwsFsis(";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("6ACApwsFsis(", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 7 vs 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2471L;
      longArray0[1] = 1338L;
      String string0 = StringUtils.join(longArray0, '1');
      assertArrayEquals(new long[] {2471L, 1338L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals("247111338", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("GMT", '1');
      assertEquals("GMT", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "tM;";
      stringArray0[1] = "247111338";
      stringArray0[2] = "GMT";
      stringArray0[3] = "og-B}Xz_r, ";
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "247111338";
      stringArray1[1] = "247111338";
      stringArray1[2] = "tM;";
      stringArray1[3] = "";
      stringArray1[4] = "og-B}Xz_r, ";
      stringArray1[5] = "GMT";
      stringArray1[6] = "247111338";
      stringArray1[7] = "GMT";
      stringArray1[8] = "247111338";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("og-B}Xz_r, ", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 4 vs 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, 'r');
      assertNull(string0);
      
      String string1 = StringUtils.trim((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.compare("", (String) null, false);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringUtils0;
      objectArray0[1] = (Object) stringUtils0;
      objectArray0[2] = (Object) stringUtils0;
      String string0 = StringUtils.join(objectArray0, 't', 127, (-1));
      assertEquals(3, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.compare("za}vNUEHTkW", "j2cm30M#b*", false);
      assertEquals(16, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.removeEnd((String) null, " ");
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("\r", (String) null);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "Minimum abbreviation width is %d");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Minimum abbreviation width is %d");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string2);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string3 = StringUtils.replaceFirst((String) null, (String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, (-1));
      assertNull(string4);
      
      String string5 = StringUtils.overlay("}p", (String) null, 0, 0);
      assertEquals("}p", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replacePattern("A\"~yU%*B", (String) null, "H/mN4Y3--t-{pt");
      assertEquals("A\"~yU%*B", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("J7,Q}0xd'F");
      assertFalse(boolean0);
      
      String string0 = StringUtils.overlay("J7,Q}0xd'F", "J7,Q}0xd'F", 31, 31);
      assertEquals("J7,Q}0xd'FJ7,Q}0xd'F", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isEmpty("J7,Q}0xd'FJ7,Q}0xd'F");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      String string0 = StringUtils.wrap(".\"G4l@]JauJ", '7');
      assertEquals("7.\"G4l@]JauJ7", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "7.\"G4l@]JauJ7", (CharSequence) ".\"G4l@]JauJ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      String string0 = StringUtils.difference("(?V9kmrjyQ<34", "cbs");
      assertEquals("cbs", string0);
      assertNotNull(string0);
      
      String string1 = null;
      String string2 = StringUtils.difference("I-y97YHi$bIUH,CC]8", "f*T2:`");
      assertEquals("f*T2:`", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeEndIgnoreCase("CX>t&{x+l>=ar!7XS", "w)BvAysU#fDg*2*|8)");
      assertEquals("CX>t&{x+l>=ar!7XS", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = "\n";
      String string5 = "CWA1{o{Mn";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("cbs", "CWA1{o{Mn", "\n");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3
         // CWA1{o{Mn
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.overlay(" ", "\r", (-1), (-1));
      assertEquals("\r ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("maxWith cannot be negative");
      assertEquals("maxWithcannotbenegative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("Locale must not be null");
      assertEquals("Locale must not be null", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.overlay("Locale must not be null", "Locale must not be null", 0, (-2281));
      assertEquals("Locale must not be nullLocale must not be null", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", (String) null, (-1));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Object varargs must not be null", (String) null);
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"YZ,(";
      stringArray0[1] = "\"YZ,(";
      String string0 = StringUtils.replaceEach("\"YZ,(", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("\"YZ,(", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("1nBDP!9VV1nBDP!9VV", "Failed to read file ");
      assertEquals((-21), int0);
      
      String string1 = StringUtils.joinWith(":O}!Te_^A=/", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("\"YZ,(:O}!Te_^A=/\"YZ,(", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("hdu<mB.>+", (String) null);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.removeFirst("line.separator", "W4$M9]QP>~NN~~g3p");
      assertEquals("line.separator", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.wrap("StopwatchExtension", "The `untilDate` string '");
      assertEquals("The `untilDate` string 'StopwatchExtensionThe `untilDate` string '", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("The `untilDate` string 'StopwatchExtensionThe `untilDate` string '", "\"YZ,(");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-21);
      String string4 = StringUtils.join(intArray0, 'I');
      assertArrayEquals(new int[] {(-21)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("-21", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.removeEndIgnoreCase("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", "");
      assertEquals("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "line.separator", (CharSequence) "line.separator");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.abbreviateMiddle("\"YZ,(", "e+Y.(.:", 695);
      assertEquals("\"YZ,(", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.prependIfMissing("StdIoExtension is active but no %s annotation was found.", "", stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("StdIoExtension is active but no %s annotation was found.", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "\"YZ,(", (CharSequence) "line.separator");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string8 = "S1$KfK&beYiZU']b\\u0";
      String string9 = StringUtils.overlay("WAd16G*J>", string8, (-1), 50);
      assertEquals("S1$KfK&beYiZU']b\\u0", string9);
      assertNotNull(string9);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      
      String string10 = StringUtils.replacePattern("org.junitpioneer.jupiter.ReportEntryExtension", "A\"~yU%*B", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("org.junitpioneer.jupiter.ReportEntryExtension", string10);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Exactly one type of input must be provided in th @", (CharSequence) "Exactly one type of input must be provided in th @");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("hdu", 67, "\" should have a parent context.");
      assertEquals("\" should have a parent context.\"hdu\" should have a parent context.\"", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("\" should have a parent context.\"hdu\" should have a parent context.\"", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.join((int[]) null, 'z');
      assertNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("", "\" should have a parent context.\"hdu\" should have a parent context.\"");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.abbreviateMiddle("hdu", (String) null, 67);
      assertEquals("hdu", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.toRootLowerCase("\" should have a parent context.");
      assertEquals("\" should have a parent context.", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "\r", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "G_", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = StringUtils.stripStart("", "0Q=3DMUK{,");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBeforeLast("1Jh)O9+EX", " vs ");
      assertEquals("1Jh)O9+EX", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "StopwatchExtension";
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2471L;
      String string0 = StringUtils.leftPad("<mO", (-2366), 'o');
      assertEquals("<mO", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("<mO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) '1';
      longArray0[1] = (long) '1';
      longArray0[2] = (long) 1192;
      longArray0[3] = (long) 1192;
      longArray0[4] = (long) 1192;
      longArray0[5] = (long) '1';
      longArray0[6] = (long) '1';
      longArray0[7] = (long) '1';
      String string0 = StringUtils.join(longArray0, '\\');
      assertArrayEquals(new long[] {49L, 49L, 1192L, 1192L, 1192L, 49L, 49L, 49L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals("49\\49\\1192\\1192\\1192\\49\\49\\49", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("GMT", ')');
      assertEquals("GMT", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.compare("vjzTE\"?3", "GMT");
      assertEquals(47, int0);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("maxWith cannot be negative");
      assertEquals("maxWithcannotbenegative", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "maxWithcannotbenegative";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[2] = (CharSequence) "maxWith cannot be negative";
      boolean boolean0 = StringUtils.endsWithAny("maxWith cannot be negative", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.remove("maxWithcannotbenegative", '\"');
      assertEquals("maxWithcannotbenegative", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", 1732);
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.endsWithAny(charSequenceArray0[1], stringArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.reverse("h8S@o");
      assertEquals("o@S8h", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      String string0 = StringUtils.reverse("_GCw]ljHA2?`4d");
      assertEquals("d4`?2AHjl]wCG_", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 512.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-2789.719F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2127.534F);
      String string0 = StringUtils.join(floatArray0, '}');
      assertArrayEquals(new float[] {512.0F, 1.0F, (-2789.719F), 0.0F, (-2127.534F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals("512.0}1.0}-2789.719}0.0}-2127.534", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("512.0}1.0}-2789.719}0.0}-2127.534", "512.0}1.0}-2789.719}0.0}-2127.534", 0);
      assertEquals(34, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToNull("512.0}1.0}-2789.719}0.0}-2127.534");
      assertEquals("512.0}1.0}-2789.719}0.0}-2127.534", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("", 0, (-938));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceOnceIgnoreCase("512.0}1.0}-2789.719}0.0}-2127.534", "The `date` %s is after the current date %s", "");
      assertEquals("512.0}1.0}-2789.719}0.0}-2127.534", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.split("");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.upperCase("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertEquals(34, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertTrue(boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      int int0 = StringUtils.lastOrdinalIndexOf("The `date` %s is after the current date %s", "", 0);
      assertEquals((-1), int0);
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-2789.719F);
      floatArray1[2] = (-2789.719F);
      floatArray1[3] = 3752.172F;
      floatArray1[4] = (float) (-938);
      floatArray1[5] = (float) (-1);
      String string5 = StringUtils.join(floatArray1, '}', 4, 0);
      assertArrayEquals(new float[] {0.0F, (-2789.719F), (-2789.719F), 3752.172F, (-938.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int1 = StringUtils.getFuzzyDistance("", "512.0}1.0}-2789.719}0.0}-2127.534", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.ordinalIndexOf("The `date` %s is after the current date %s", "", 2885);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      String string0 = StringUtils.getDigits("_GCw]ljHA2?`4d");
      assertEquals("24", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("Object varargs must not be null", 'O');
      assertEquals("bject varargs must not be null", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "bject varargs must not be null");
      assertEquals(30, int0);
      
      String[] stringArray0 = StringUtils.split("xmY.x&Pt2aP&NOpGUU'", "\r", 884);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("xmY.x&Pt2aP&NOpGUU'", "Object varargs must not be null");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.replaceIgnoreCase((String) null, "xmY.x&Pt2aP&NOpGUU'", "bject varargs must not be null");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank((String) null, (String) null);
      assertNull(string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      assertNotNull(predicate0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) predicate0;
      String string1 = StringUtils.join(objectArray0, '<');
      assertEquals(3, objectArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      String string0 = StringUtils.upperCase("r");
      assertEquals("R", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverse("R");
      assertEquals("R", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "5x,9+c4R>{`e");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string2 = StringUtils.chomp("\r\r");
      assertEquals("\r", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      String string0 = StringUtils.chomp("Exactly one type of input must be provided in th @");
      assertEquals("Exactly one type of input must be provided in th @", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.chomp("\n");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "(^MoF_&*GQF>mhkM+");
      assertEquals("(^MoF_&*GQF>mhkM+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("(^MoF_&*GQF>mhkM+", "(^MoF_&*GQF>mhkM+");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'w';
      intArray0[1] = (int) ':';
      intArray0[2] = 983;
      intArray0[3] = (int) 'w';
      intArray0[4] = (int) 'w';
      intArray0[5] = (int) 'w';
      intArray0[6] = (int) ':';
      String string1 = StringUtils.join(intArray0, ':', 1355, (-2275));
      assertArrayEquals(new int[] {119, 58, 983, 119, 119, 119, 58}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("<mO");
      assertEquals("<mO", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) "", 983);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      String string0 = StringUtils.upperCase("<mO.>+");
      assertEquals("<MO.>+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("<mO.>+");
      assertEquals("<mO.>+", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllUpperCase("<MO.>+");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "<MO.>+", (CharSequence) "<mO.>+");
      assertEquals(0, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string2 = StringUtils.replaceChars("m?", 'x', 'K');
      assertEquals("m?", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.rightPad(" vs ", 3835, 'R');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.wrap(" ", "");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      String string0 = "";
      char char0 = 'x';
      String string1 = StringUtils.replaceChars("", 'x', 'x');
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 3753);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "m*#";
      stringArray0[3] = null;
      stringArray0[4] = "";
      stringArray0[6] = "";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("m*#", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.compare("", "z", false);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = 3524;
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, '4', 0, 3524);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.join((Object[]) charSequenceArray0, '.');
      assertEquals(5, charSequenceArray0.length);
      assertEquals("....", string0);
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) "....";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" ", " ", (-1), (-1591));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      String string0 = StringUtils.center("\" should have a parent context.", 67, "\" should have a parent context.");
      assertEquals("\" should have a pa\" should have a parent context.\" should have a pa", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("\" should have a pa\" should have a parent context.\" should have a pa", 67, 67);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.mid(" ", (-1), (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("+r!?Vo36D");
      assertEquals("+r!?Vo36D", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.appendIfMissing("+r!?Vo36D", "+r!?Vo36D", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("+r!?Vo36D", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "+r!?Vo36D", (CharSequence) "+r!?Vo36D");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+r!?Vo36D";
      String string2 = StringUtils.center("+r!?Vo36D", 0, 'H');
      assertEquals("+r!?Vo36D", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains("+r!?Vo36D"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Iterator<String> iterator0 = arrayDeque0.descendingIterator();
      assertFalse(arrayDeque0.contains("+r!?Vo36D"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, (String) null);
      assertFalse(arrayDeque0.contains("+r!?Vo36D"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.replaceOnce("z.GY6!>$O)j]]&*q)x", "+r!?Vo36D", "!");
      assertEquals("z.GY6!>$O)j]]&*q)x", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      Spliterator<String> spliterator0 = arrayDeque0.spliterator();
      assertFalse(arrayDeque0.contains("+r!?Vo36D"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(spliterator0);
      
      String string5 = StringUtils.toRootUpperCase("z.GY6!>$O)j]]&*q)x");
      assertEquals("Z.GY6!>$O)J]]&*Q)X", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.toRootUpperCase("Z.GY6!>$O)J]]&*Q)X");
      assertEquals("Z.GY6!>$O)J]]&*Q)X", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.mid("!", 0, 57);
      assertEquals("!", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      
      String string8 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", 57);
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("+r!?Vo36D", "!", 40, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      String string0 = StringUtils.mid("_GCw]ljHA2?`4=d", 75, 75);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("MX");
      assertArrayEquals(new int[] {77, 88}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.normalizeSpace("MX");
      assertEquals("MX", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '.', 25, 122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("r]y;`KN1KF*Uyx", "r]y;`KN1KF*Uyx", 1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("|;MtaR''", "r]y;`KN1KF*Uyx", 1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isMixedCase("|;MtaR''");
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      String string0 = StringUtils.join(intArray0, 'G');
      assertArrayEquals(new int[] {1, (-1), (-1)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("1G-1G-1", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "1G-1G-1", "H&+<Z<1q,CP");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)57;
      String string1 = StringUtils.join(byteArray0, 'G', 0, 0);
      assertArrayEquals(new byte[] {(byte)56, (byte)0, (byte)57}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceEachRepeatedly("H&+<Z<1q,CP", stringArray1, stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("H&+<Z<1q,CP", string2);
      assertNotNull(string2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray2 = StringUtils.substringsBetween("1G-1G-1", "", "|;MtaR''");
      assertNull(stringArray2);
      
      int int0 = StringUtils.compare("H&+<Z<1q,CP", "\"H8", false);
      assertEquals(93, int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (byte)57;
      floatArray0[2] = (float) 'G';
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      String string3 = StringUtils.join(floatArray0, 'G', (-1), (-1));
      assertArrayEquals(new float[] {0.0F, 57.0F, 71.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'M', (int) (byte)56, (int) (byte)57);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      String string0 = StringUtils.substringBetween("q9hAQoQ@n-Q<h1L-G'%5v $.1_\r", "<\"|DY{5rARGB?wy*'", "<\"|DY{5rARGB?wy*'");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      String string0 = StringUtils.substringBetween("//-X6'((vj6", "//-X6'((vj6");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      String string0 = StringUtils.substringBetween("_GCw]ljHA2?`4d", "_GCw]ljHA2?`4d", "_GCw]ljHA2?`4d");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      String string0 = StringUtils.chomp("1nBDP!9VV", "1nBDP!9VV");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat('Z', 3071);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.substringBetween("", "2*'Z+h7<'Q(t|wzk");
      assertNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string3 = StringUtils.replaceFirst("+bt\">)[n.$b$", string1, string1);
      assertEquals("+bt\">)[n.$b$", string3);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.getDigits((String) null);
      assertNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-2757));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, '\"');
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      assertEquals("MAP_EXTENDED_RANGES", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertEquals(5, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertEquals(5, enumSet0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, 'Y');
      assertEquals(5, enumSet0.size());
      assertEquals("AUTOSELECT_FILTERINGYEXTENDED_FILTERINGYIGNORE_EXTENDED_RANGESYMAP_EXTENDED_RANGESYREJECT_EXTENDED_RANGES", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.params.DisableIfArgumentExtension");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string0 = StringUtils.join((List<?>) vector0, "", (-1), (-1));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "{[0-9]+}", (CharSequence) "{[0-9]+}", 1447);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      String string0 = StringUtils.right("da&/q9llT`1H", (-869));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "da&/q9llT`1H");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string1 = StringUtils.removeStart("gM;sgRZ", "");
      assertEquals("gM;sgRZ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "gM;sgRZ";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "da&/q9llT`1H";
      charSequenceArray0[3] = (CharSequence) "da&/q9llT`1H";
      String string2 = StringUtils.prependIfMissingIgnoreCase("da&/q9llT`1H", "da&/q9llT`1H", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("da&/q9llT`1H", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "gM;sgRZ", 0);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("da&/q9llT`1H", "gM;sgRZ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.defaultString("da&/q9llT`1H");
      assertEquals("da&/q9llT`1H", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("N,w<\"U!Mn+jQ=d}+@bx", "9qz`})<Y@s_T+Bl`W", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = 'z';
      charArray0[2] = 'S';
      charArray0[3] = 'U';
      charArray0[4] = '\"';
      charArray0[5] = '=';
      charArray0[6] = 'q';
      String string4 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'7', 'z', 'S', 'U', '\"', '=', 'q'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("7zSU\"=q", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank("pGv,f", supplier0);
      assertEquals("pGv,f", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "da&/q9llT`1H");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\r", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "\r", (CharSequence) "\r");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'v', (-908), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -908
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, ')');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "\r");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 's');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing(" must be static.", 'c');
      assertEquals("c must be static.c", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) " must be static.", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("_GCw]ljHA2?`4d", ':');
      assertEquals(":_GCw]ljHA2?`4d:", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) ":_GCw]ljHA2?`4d:", (CharSequence) "_GCw]ljHA2?`4d");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "\n");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-1));
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      String string0 = StringUtils.truncate("j+,+bl=6$umUW;", 13);
      assertEquals("j+,+bl=6$umUW", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("cOM`e-H(U%p5[=Foffset cannot be negative");
      assertEquals("cOM`e-H(U%p5[=Foffset cannot be negative", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, (-2872));
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      short[] shortArray0 = new short[6];
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object0));
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertNotNull(object7);
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object5));
      
      objectArray0[7] = object7;
      Object object8 = new Object();
      assertNotNull(object8);
      assertFalse(object8.equals((Object)object7));
      assertFalse(object8.equals((Object)object3));
      assertFalse(object8.equals((Object)object2));
      assertFalse(object8.equals((Object)object5));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object4));
      assertFalse(object8.equals((Object)object1));
      assertFalse(object8.equals((Object)object6));
      
      objectArray0[8] = object8;
      String string0 = StringUtils.join(objectArray0, '2', 98, 76);
      assertEquals(9, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" \rSFWf_7U9?A");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "", (-1));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(31, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Locale locale0 = new Locale(" ");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(" ", locale0.toString());
      assertEquals(" ", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase("", locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(" ", locale0.toString());
      assertEquals(" ", locale0.getLanguage());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace(" ", "\r", "\n", (-1));
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("0Q=3DMUK{,", "", (-775));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase("", locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-88);
      try { 
        StringUtils.toString(byteArray0, "Minimum abbreviation width is %d");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((Comparator<? super Object>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string0 = StringUtils.wrap("Threshold must not be negative", 'y');
      assertEquals("yThreshold must not be negativey", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Threshold must not be negative", "Threshold must not be negative");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[1] = (CharSequence) "yThreshold must not be negativey";
      charSequenceArray0[2] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[3] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[4] = (CharSequence) "yThreshold must not be negativey";
      charSequenceArray0[5] = (CharSequence) null;
      String string2 = StringUtils.stripToNull("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[6] = (CharSequence) "Threshold must not be negative";
      String string3 = StringUtils.reverse("Threshold must not be negative");
      assertEquals("evitagen eb ton tsum dlohserhT", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      charSequenceArray0[7] = (CharSequence) "evitagen eb ton tsum dlohserhT";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.joinWith((String) null, charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("Threshold must not be negativeyThreshold must not be negativeyThreshold must not be negativeThreshold must not be negativeyThreshold must not be negativeyThreshold must not be negativeevitagen eb ton tsum dlohserhT", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{}";
      stringArray0[1] = "$O*6N8'\"ETF'T2";
      stringArray0[2] = null;
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("{}");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlpha(charSequenceArray0[4]);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      boolean boolean1 = arrayDeque0.offerFirst("\"_<_&I|R*:Mud`bN8Nw");
      assertTrue(arrayDeque0.contains("\"_<_&I|R*:Mud`bN8Nw"));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.toRootUpperCase("daR7l:M\"j%A#F~");
      assertEquals("DAR7L:M\"J%A#F~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("!");
      assertEquals("!", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid("?:\";4r-w", 1070, 57);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.defaultString("?:\";4r-w", "Threshold must not be negative");
      assertEquals("?:\";4r-w", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\"_<_&I|R*:Mud`bN8Nw", "?:\";4r-w");
      assertEquals(0.28, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", " ");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((Comparator<? super Object>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) priorityQueue0;
      Stream<Object> stream0 = priorityQueue0.parallelStream();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(stream0);
      
      boolean boolean0 = priorityQueue0.add("a/g{zxa|Txp]cP+h(");
      assertTrue(priorityQueue0.contains("a/g{zxa|Txp]cP+h("));
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      
      objectArray0[1] = (Object) null;
      char[] charArray0 = new char[0];
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getIfBlank("", (Supplier<String>) null);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast("-h<NQz&_b%+\t", 32);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.chomp("Strings must nt be null");
      assertEquals("Strings must nt be null", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Strings must nt be null", "@og-B}Xz_r, bA0]f0KlLmU", 39);
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("@og-B}Xz_r, bA0]f0KlLmU", 'q');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, stringArray0);
      assertEquals(11, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      String string0 = StringUtils.wrap("5sykqv.", 'c');
      assertEquals("c5sykqv.c", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("c5sykqv.c", "5sykqv.");
      assertEquals(0.93, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "c5sykqv.c";
      charSequenceArray0[1] = (CharSequence) "5sykqv.";
      charSequenceArray0[2] = (CharSequence) "c5sykqv.c";
      charSequenceArray0[3] = (CharSequence) "5sykqv.";
      charSequenceArray0[4] = (CharSequence) "5sykqv.";
      charSequenceArray0[5] = (CharSequence) "c5sykqv.c";
      String string1 = StringUtils.substringBefore("c5sykqv.c", "5sykqv.");
      assertEquals("c", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[6] = (CharSequence) "c";
      charSequenceArray0[7] = (CharSequence) "c5sykqv.c";
      charSequenceArray0[8] = (CharSequence) "c5sykqv.c";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.joinWith("c5sykqv.c", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("c5sykqv.cc5sykqv.c5sykqv.c5sykqv.cc5sykqv.cc5sykqv.c5sykqv.c5sykqv.c5sykqv.c5sykqv.cc5sykqv.cc5sykqv.ccc5sykqv.cc5sykqv.cc5sykqv.cc5sykqv.c", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "c5sykqv.cc5sykqv.c5sykqv.c5sykqv.cc5sykqv.cc5sykqv.c5sykqv.c5sykqv.c5sykqv.c5sykqv.cc5sykqv.cc5sykqv.ccc5sykqv.cc5sykqv.cc5sykqv.cc5sykqv.c";
      stringArray0[1] = "c";
      stringArray0[2] = "5sykqv.";
      stringArray0[3] = "c";
      stringArray0[4] = "c5sykqv.c";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.wrapIfMissing("\n", "\r");
      assertEquals("\r\n\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getIfBlank("+[m?Ad", (Supplier<String>) null);
      assertEquals("+[m?Ad", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 37);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.capitalize("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.upperCase("WC2");
      assertEquals("WC2", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "WC2");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", 37, '4');
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.swapCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("aBORTING TO PROTECT AGAINST sTACKoVERFLOWeRROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.substring("<mO", 256);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.replaceOnceIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "%s: Could not resolve parameter by name (%s).", (String) null);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertNotNull(treeSet0);
      
      NavigableSet<Object> navigableSet0 = treeSet0.tailSet((Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another", true);
      assertFalse(treeSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertFalse(navigableSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
      assertNotNull(navigableSet0);
      
      String string7 = StringUtils.join((Iterable<?>) navigableSet0, "&J0kt'p");
      assertFalse(treeSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertFalse(navigableSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      int int2 = StringUtils.indexOf((CharSequence) "&J0kt'p", 3842, 37);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      String string0 = StringUtils.rotate("l,`UR1J6R^<.sg1=O_", (-1394));
      assertEquals("R^<.sg1=O_l,`UR1J6", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("l,`UR1J6R^<.sg1=O_", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.trimToEmpty("M");
      assertEquals("M", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.uncapitalize("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.center("", 0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean2 = StringUtils.equals((CharSequence) "", (CharSequence) "M");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "%1)'+mIK>0S6", 0);
      assertNull(stringArray1);
      
      String string5 = StringUtils.wrap("offset cannot be negative", 'y');
      assertEquals("yoffset cannot be negativey", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.substring("M", (-1394));
      assertEquals("M", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.mid("0XxkR;R'plxrrHcW#", 0, (-1335));
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "R ", 179, 179);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", " ");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      String string0 = StringUtils.join(doubleArray0, '_', 0, 0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.substring("", 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("maxWith cannot be negative", supplier0);
      assertEquals("maxWith cannot be negative", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "4[,p%ChZ)", 4);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.getDigits("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "maxWith cannot be negative", 0, 0);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.replaceAll(")mdsj_FS=O", "", "ZfTfm");
      assertEquals("ZfTfm)ZfTfmmZfTfmdZfTfmsZfTfmjZfTfm_ZfTfmFZfTfmSZfTfm=ZfTfmOZfTfm", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean1 = StringUtils.startsWith("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.split("", "");
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray2.length);
      assertSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)16;
      String string5 = StringUtils.join(byteArray0, '_', 14, 0);
      assertArrayEquals(new byte[] {(byte)55, (byte) (-80), (byte)0, (byte)16}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringBeforeLast(" ", "\n");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, 'C');
      assertFalse(treeSet0.contains('C'));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank((String) null, (String) null);
      assertNull(string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      assertNotNull(predicate0);
      
      boolean boolean0 = linkedList0.removeIf(predicate0);
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      
      String string1 = StringUtils.join(iterator0, 'C');
      assertFalse(linkedList0.contains('C'));
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removePattern("X|.d[M-iS-S'an", "X|.d[M-iS-S'an");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 13
         // X|.d[M-iS-S'an
         //              ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      String string0 = StringUtils.removePattern("Aborting to protect agagnst StackOverflowError - output of Yne lopp is the input of another", "Aborting to protect agagnst StackOverflowError - output of Yne lopp is the input of another");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      String string0 = "[3Z";
      // Undeclared exception!
      try { 
        StringUtils.removePattern("[3Z", "[3Z");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 2
         // [3Z
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'V');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.unwrap("", ']');
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Object[]) stringArray0, "Va:UZ16qL`p");
      assertEquals(0, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(":0>M,?", "wGeg57;:`_SE^+x4");
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertTrue(boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 55;
      longArray0[1] = (long) 'V';
      longArray0[2] = (long) '!';
      String string3 = StringUtils.join(longArray0, 'E');
      assertArrayEquals(new long[] {55L, 86L, 33L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("55E86E33", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'V');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'V');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("", "", 55);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.rotate("", (-1));
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("'x`i", 55);
      assertEquals("'x`i", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "(^MoF_&*GQF>mhkM+");
      assertEquals("(^MoF_&*GQF>mhkM+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("(^MoF_&*GQF>mhkM+", "(^MoF_&*GQF>mhkM+");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.getDigits("Search and Replace array lengths don't match: ");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("(^MoF_&*GQF>mhkM+", 0, 'w');
      assertEquals("(^MoF_&*GQF>mhkM+", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.replaceAll("", "", "Object varargs must not be null");
      assertEquals("Object varargs must not be null", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ", ".~2Qy]g<r`$");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      String string0 = StringUtils.rotate("l,`UR1J6R^<.sg1=O_", (-1405));
      assertEquals(",`UR1J6R^<.sg1=O_l", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string1 = StringUtils.getDigits("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray0[2] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray0[3] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray0[4] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray0[5] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray0[6] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray0[7] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[8];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray1[1] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray1[2] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray1[3] = (CharSequence) "";
      charSequenceArray1[4] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray1[5] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray1[6] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray1[7] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray1);
      assertEquals(8, charSequenceArray1.length);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      String string0 = StringUtils.leftPad("org.apache.commons.lang3.CharUtils", 0);
      assertEquals("org.apache.commons.lang3.CharUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("", "org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      String string0 = "CmRj=6Fn9\\'r0QeQS";
      String string1 = ": ";
      String string2 = StringUtils.replace("CmRj=6Fn9'r0QeQS", ": ", "CmRj=6Fn9'r0QeQS");
      assertEquals("CmRj=6Fn9'r0QeQS", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "CmRj=6Fn9'r0QeQS", ": ");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CANADA;
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_CA", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      Locale locale2 = (Locale)locale1.clone();
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_CA", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("CA", locale2.getCountry());
      assertEquals("en_CA", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.getLanguage());
      assertNotNull(locale2);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      
      String string3 = locale0.getDisplayName();
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("Chinese (China)", string3);
      assertNotNull(string3);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = locale0.getDisplayScript(locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_CA", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = locale1.getScript();
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_CA", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      int int0 = StringUtils.getFuzzyDistance("CmRj=6Fn9'r0QeQS", ": ", locale0);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, int0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      
      boolean boolean1 = StringUtils.isWhitespace(": ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Collection<String> collection0 = null;
      Stream<Locale.LanguageRange> stream0 = stack0.stream();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stream0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) null);
      assertFalse(list0.contains(": "));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string6 = Locale.lookupTag(stack0, list0);
      assertFalse(list0.contains(": "));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(string6);
      
      String string7 = "";
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("CmRj=6Fn9'r0QeQS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: CmRj=6Fn9'r0QeQS
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("+{0+=#`WBlgdFb&a3Y7TtI}R4", "+{0+=#`WBlgdFb&a3Y7TtI}R4");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("iIvKO", 54);
      assertEquals("iIvKO", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.defaultString("<mO8HWC2", "ExceptionWasThrown");
      assertEquals("<mO8HWC2", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "V;jjO7", (CharSequence) "ExceptionWasThrown");
      assertEquals(18, int0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceIgnoreCase(",'.hw", "o", ";bQI*#O*Oy5=~obK");
      assertEquals(",'.hw", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      String string4 = locale0.getExtension('S');
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertNull(string4);
      
      String string5 = locale0.getExtension('S');
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertNull(string5);
      
      String string6 = StringUtils.lowerCase("Hs-7Ddh%0Z2!tHD_q1", locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("hs-7ddh%0z2!thd_q1", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.reverse("<mO.>+");
      assertEquals("+>.Om<", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      
      String string8 = StringUtils.EMPTY;
      assertEquals("", string8);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) ",'.hw", (CharSequence) "+{0+=#`WBlgdFb&a3Y7TtI}R4");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase("", "", (CharSequence[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToEmpty("W]}D=");
      assertEquals("W]}D=", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithAny("W]}D=", stringArray0);
      assertEquals(188, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("Don't lear/set the same entry more than once.", "Fw#", (CharSequence[]) null);
      assertEquals("Fw#Don't lear/set the same entry more than once.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(" ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlphaSpace(" ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "i:w[";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("i:w[", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "QD'J6;.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rotate("QD'J6;.0", (-15));
      assertEquals("0QD'J6;.", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte) (-82);
      byteArray0[8] = (byte) (-82);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'K', (int) (byte) (-82), 75);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -82
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      String string0 = StringUtils.difference("(?V9kmrjyQ<34", "cbs");
      assertEquals("cbs", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "xmY.x&Pt2aP&NOpGUU'");
      assertNull(string1);
      
      String string2 = StringUtils.wrap("", "cbs");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-2757));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string0 = StringUtils.remove((String) null, '^');
      assertNull(string0);
      
      String string1 = StringUtils.wrap("", '^');
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Locale must not be null");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (-1336L);
      longArray0[6] = 0L;
      String string1 = StringUtils.join(longArray0, '2');
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1336L), 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals("-12-12-12-12-12-133620", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "-12-12-12-12-12-133620";
      stringArray1[2] = "";
      stringArray1[3] = "-12-12-12-12-12-133620";
      stringArray1[4] = "";
      stringArray1[5] = "-12-12-12-12-12-133620";
      stringArray1[6] = "-12-12-12-12-12-133620";
      stringArray1[7] = "";
      stringArray1[8] = "";
      String string2 = StringUtils.firstNonBlank(stringArray1);
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("-12-12-12-12-12-133620", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "Minimum abbreviation width is %d");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Minimum abbreviation width is %d");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string2);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string3 = StringUtils.replaceFirst((String) null, (String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, (-1));
      assertNull(string4);
      
      String string5 = StringUtils.truncate("FW", 0);
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "", 0);
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      
      int int4 = StringUtils.compare("", (String) null, false);
      assertEquals((-1), int4);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("+r!?Vo36D");
      assertEquals("+r!?Vo36D", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.appendIfMissing("+r!?Vo36D", "+r!?Vo36D", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("+r!?Vo36D", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "+r!?Vo36D", (CharSequence) "+r!?Vo36D");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+r!?Vo36D";
      stringArray0[1] = "+r!?Vo36D";
      stringArray0[2] = "+r!?Vo36D";
      stringArray0[3] = "+r!?Vo36D";
      stringArray0[4] = "+r!?Vo36D";
      stringArray0[5] = "+r!?Vo36D";
      stringArray0[6] = "+r!?Vo36D";
      stringArray0[7] = "+r!?Vo36D";
      stringArray0[8] = "+r!?Vo36D";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("+r!?Vo36D", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int1 = StringUtils.compare("", "?Ud!PgO)o-sN", false);
      assertEquals((-12), int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = StringUtils.toCodePoints("+r!?Vo36D");
      assertArrayEquals(new int[] {43, 114, 33, 63, 86, 111, 51, 54, 68}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray0);
      
      String string3 = StringUtils.wrap("^I!9O4-L6", " `_|hf12g");
      assertEquals(" `_|hf12g^I!9O4-L6 `_|hf12g", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.join(intArray0, 'h', (-12), (-12));
      assertArrayEquals(new int[] {43, 114, 33, 63, 86, 111, 51, 54, 68}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "+r!?Vo36D", supplier0);
      assertEquals("+r!?Vo36D", charSequence0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string4));
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string3));
      assertTrue(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isAlphanumeric("+r!?Vo36D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.appendIfMissing("ULzqP~r[46e|[$@fP", "ULzqP~r[46e|[$@fP", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("ULzqP~r[46e|[$@fP", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "ULzqP~r[46e|[$@fP";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("J37A0xd'F", "Cannot get the toString of a null object");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "} 6f]Bcj>_S;!_K o", "} 6f]Bcj>_S;!_K o");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" \rSFWf_7U9?A", " \rSFWf_7U9?A");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.normalizeSpace(" \rSFWf_7U9?A");
      assertEquals("SFWf_7U9?A", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("SFWf_7U9?A", stringArray0);
      assertEquals(13, stringArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.normalizeSpace((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'W');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEach("#", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("#", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("0[+NT1'un:&<c", "0[+NT1'un:&<c");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "} 6f]Bcj>_S;!_K o";
      stringArray0[1] = "} 6f]Bcj>_S;!_K o";
      stringArray0[2] = "'";
      stringArray0[3] = "'";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("'", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\r", (CharSequence) "\r");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase(" ", " ", " ", 0);
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[5];
      charArray0[1] = 's';
      charArray0[1] = 's';
      boolean boolean0 = StringUtils.containsNone((CharSequence) " ", " ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase(" ", " ", (String) null);
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "7&F<{dP";
      stringArray0[1] = "7&F<{dP";
      stringArray0[2] = "7&F<{dP";
      stringArray0[3] = "7&F<{dP";
      stringArray0[4] = "7&F<{dP";
      stringArray0[5] = "7&F<{dP";
      String string0 = StringUtils.replaceEach("7&F<{dP", stringArray0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("7&F<{dP", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "7&F<{dP", (CharSequence) "7&F<{dP");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEnd(" ", "\r");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad(" ", 0, " ");
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsIgnoreCase(" ", "\r");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) " ", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.substring("#[*xmRU", (-282), (-282));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.removeStart("", " ");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.join((Object[]) stringArray0, 'a', 0, 0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.join((double[]) null, 'a', 0, (-1));
      assertNull(string6);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsNone((CharSequence) " ", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase("#[*xmRU", " ", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("#[*xmRU", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, '\'', 13, (-2832));
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'R');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviate((String) null, "%s was not annotated with @ArgumentsSource but should have been.", 0, 13);
      assertNull(string2);
      
      String string3 = StringUtils.center("", 676, 'u');
      assertEquals("uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.EMPTY;
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = StringUtils.prependIfMissingIgnoreCase((String) null, "", (CharSequence[]) null);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isEmpty("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 37);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithAny("Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("pA0V.Vm0z:Qq");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.strip("The `date` %s is after the current date %s", ">CuB_k>873");
      assertEquals("The `date` %s is after the current date %s", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)65;
      String string2 = StringUtils.join(byteArray0, '9', 27, (int) (byte) (-57));
      assertArrayEquals(new byte[] {(byte)5, (byte)79, (byte)5, (byte) (-57), (byte) (-128), (byte)31, (byte)65}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(locale0);
      
      int int1 = StringUtils.getFuzzyDistance("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals(271, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      String string0 = "(8-Mx#!3JxGUl $";
      String string1 = StringUtils.leftPad("(8-Mx#!3JxGUl $", 110);
      assertEquals("                                                                                               (8-Mx#!3JxGUl $", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("                                                                                               (8-Mx#!3JxGUl $", "                                                                                               (8-Mx#!3JxGUl $");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("                                                                                               (8-Mx#!3JxGUl $");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.removeEndIgnoreCase("org.junitpioneer.jupiter.DisableIfTestFailsExtension", "i ");
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "WC2";
      String string4 = StringUtils.replaceAll("WC2", "org.apache.commons.lang3.StringUtils", "@vfO0W*tG=U");
      assertEquals("WC2", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.trimToNull("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("i ", "1;m", 98);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      charArray0[1] = 'z';
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Locale locale0 = Locale.lookup(arrayList0, priorityQueue0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, priorityQueue0.size());
      assertNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("org.junitpioneer.jupiter.DisableIfTestFailsExtension", "i ", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(";*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZ;*iABK%)3bt8yLfC>mtPZC>mtPZ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("7?=|88Q|ZOnI,=");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("7?=|88Q|ZOnI,=", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.split("", "\n");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\r";
      boolean boolean0 = StringUtils.equalsAny("\n", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("\r", "\n", locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string0 = ": ";
      String string1 = "=%sQA0dp5y@7dMALT,A";
      String string2 = StringUtils.replace("y\"q;YpD", "=%sQA0dp5y@7dMALT,A", "=%sQA0dp5y@7dMALT,A");
      assertEquals("y\"q;YpD", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "y\"q;YpD", "y\"q;YpD");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CANADA;
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      Locale locale2 = (Locale)locale0.clone();
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("CN", locale2.getCountry());
      assertNotNull(locale2);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      String string3 = locale0.getDisplayName();
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("Chinese (China)", string3);
      assertNotNull(string3);
      assertTrue(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = locale1.getDisplayScript(locale0);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = locale0.getScript();
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      int int0 = StringUtils.getFuzzyDistance(": ", "y\"q;YpD", locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals(0, int0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("]ub<U!jF(rCLrt0 )");
      assertEquals("]ub<U!jF(rCLrt0)", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("]ub<U!jF(rCLrt0)");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "]ub<U!jF(rCLrt0 )";
      charSequenceArray0[1] = (CharSequence) "]ub<U!jF(rCLrt0 )";
      charSequenceArray0[2] = (CharSequence) "]ub<U!jF(rCLrt0 )";
      charSequenceArray0[3] = (CharSequence) "]ub<U!jF(rCLrt0 )";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumeric("]ub<U!jF(rCLrt0)");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("DC.OCrvC|_/\"TWNuM", "_Aap", (-88));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[2], (CharSequence) "DC.OCrvC|_/\"TWNuM");
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("DC.OCrvC|_/\"TWNuM", "DC.OCrvC|_/\"TWNuM", "]ub<U!jF(rCLrt0 )", (-37));
      assertEquals("]ub<U!jF(rCLrt0 )", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("_Aap", "_Aap");
      assertEquals("_Aap", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.defaultIfEmpty("DC.OCrvC|_/\"TWNuM", "_Aap");
      assertEquals("DC.OCrvC|_/\"TWNuM", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.leftPad("empty", 0);
      assertEquals("empty", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean3 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = StringUtils.isMixedCase("empty");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      
      String string5 = StringUtils.joinWith("jD-`^U4>JH*=z", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("DC.OCrvC|_/\"TWNuM", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.abbreviate("DC.OCrvC|_/\"TWNuM", (-922), 197);
      assertEquals("DC.OCrvC|_/\"TWNuM", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.chomp("FccD-$(ck ");
      assertEquals("FccD-$(ck ", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("vsW?cfy?-l>H\"c", '#');
      assertEquals("#vsW?cfy?-l>H\"c#", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "#vsW?cfy?-l>H\"c#", charArray0);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, int0);
      
      String string1 = StringUtils.removeEnd("vsW?cfy?-l>H\"c", "vsW?cfy?-l>H\"c");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("lA", 1, '#');
      assertEquals("lA", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("NM0Z", "NM0Z", 2682);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((int[]) null, 'd');
      assertNull(string0);
      
      String string1 = StringUtils.chop("NM0Z");
      assertEquals("NM0", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "NM0", (CharSequence) "NM0");
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringAfterLast("0[+NT1}un:&<c", "0[+NT1}un:&<c");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceIgnoreCase("<mO", "StopatchExenion", "~#MsKeGDJ kE", 25);
      assertEquals("<mO", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripEnd("", "StopwatchExtension");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      
      String string5 = StringUtils.normalizeSpace("0[+NT1}un:&<c");
      assertEquals("0[+NT1}un:&<c", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.substringsBetween("T*K3V6+;|,", "org.junitpioneer.jupiter.DisableIfTestFailsExtension", (String) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"YZ,(";
      stringArray0[1] = "\"YZ,(";
      String string0 = StringUtils.replaceEach("\"YZ,(", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("\"YZ,(", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\"YZ,(", (CharSequence) "\"YZ,(");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfterLast("0[+NT1}un:&<c", "\"YZ,(");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceIgnoreCase("\"YZ,(", "~#MsKeGDJ kE", "Search and Replace array lengths don't match: ", 0);
      assertEquals("\"YZ,(", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripEnd("", "\"YZ,(");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.normalizeSpace("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.substringsBetween("", "T*K3V6+;|,", "~#MsKeGDJ kE");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.substringsBetween(" ", "", " ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      String string0 = StringUtils.leftPad("<mO", 4305, '3');
      assertNotNull(string0);
      
      Locale locale0 = new Locale("C!", "");
      assertEquals("", locale0.getCountry());
      assertEquals("c!", locale0.toString());
      assertEquals("c!", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = StringUtils.lowerCase("", locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("c!", locale0.toString());
      assertEquals("c!", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("<mO", (-1863));
      assertEquals("<mO", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "<mO", (CharSequence) string0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "<mO";
      String string3 = StringUtils.upperCase("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "C!";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "<mO";
      stringArray0[2] = "<mO";
      stringArray0[3] = "C!";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "0Q=3DMUK{,";
      stringArray0[8] = "<mO";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("<mO", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", 'x', 'x');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 3753);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[0] = "!m*#";
      stringArray0[3] = null;
      stringArray0[4] = "";
      stringArray0[6] = "";
      String[] stringArray1 = StringUtils.splitByCharacterType("9S8");
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.join((byte[]) null, '}', (-952), (-2511));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, '^');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[2] = 'K';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {'p', '\u0000', 'K'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.toRootLowerCase(" ");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) " ";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isMixedCase(charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("Exactly one type of input must be provided in th @");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("\n ", "\n ", "\n ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("whceO", "whceO", "Strings must not be null");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "whceO";
      charSequenceArray0[1] = (CharSequence) "whceO";
      charSequenceArray0[2] = (CharSequence) "Strings must not be null";
      String string1 = StringUtils.appendIfMissing("whceO", "Strings must not be null", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("whceO", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase("whceO");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "whceO";
      stringArray0[1] = "Strings must not be null";
      stringArray0[2] = "Strings must not be null";
      stringArray0[3] = "whceO";
      stringArray0[4] = "whceO";
      stringArray0[5] = "Strings must not be null";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.reverseDelimited("whceO", '!');
      assertEquals("whceO", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[0], 448);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray2 = StringUtils.split("Strings must not be null");
      assertEquals(5, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("whceO", "whceO", stringArray2);
      assertEquals(5, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals("whceO", string3);
      assertNotNull(string3);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String[] stringArray3 = StringUtils.split("Strings must not be null", "Strings must not be null", 98);
      assertEquals(0, stringArray3.length);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotNull(stringArray3);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '!', (-17), 98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -17
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "4lP~;&>+8Ew-Ncp.", "4lP~;&>+8Ew-Ncp.");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("4lP~;&>+8Ew-Ncp.");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, '~');
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("0Q=3DMUK{,", "", (-775));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
      
      String string0 = StringUtils.strip("0Q=3DMUK{,", "`");
      assertEquals("0Q=3DMUK{,", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.startsWith("0Q=3DMUK{,", "`");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.defaultString("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad(" ", 5, "");
      assertEquals("     ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("     ");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.substringsBetween("6([,EC", "6([,EC", "PX'");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) ':';
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) ':';
      floatArray0[0] = (float) ':';
      floatArray0[2] = (float) ':';
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.RetryingTestExtension", "([.[.5h WGC\"S([.[.5h WGC\"S", 3);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("([.[.5h WGC\"S([.[.5h WGC\"S", "org.junitpioneer.jupiter.RetryingTestExtension");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.substringAfterLast("org.junitpioneer.jupiter.RetryingTestExtension", "([.[.5h WGC\"S([.[.5h WGC\"S");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("([.[.5h WGC\"S([.[.5h WGC\"S");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("r]y;`KN1KF*Uyx", "r]y;`KN1KF*Uyx", 1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("|;MtaR''", "r]y;`KN1KF*Uyx", 1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isMixedCase("|;MtaR''");
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      intArray0[2] = 1;
      String string0 = StringUtils.join(intArray0, 'G');
      assertArrayEquals(new int[] {1, (-1), 1}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("1G-1G1", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "1G-1G1", "H&+<Z<1q,CP");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)57;
      String string1 = StringUtils.join(byteArray0, 'G', 0, 0);
      assertArrayEquals(new byte[] {(byte)56, (byte)0, (byte)57}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceEachRepeatedly("H&+<Z<1q,CP", stringArray1, stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("H&+<Z<1q,CP", string2);
      assertNotNull(string2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray2 = StringUtils.substringsBetween("1G-1G1", "", "|;MtaR''");
      assertNull(stringArray2);
      
      int int0 = StringUtils.compare("H&+<Z<1q,CP", "\"H8", false);
      assertEquals(93, int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (byte)57;
      floatArray0[2] = (float) 'G';
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      String string3 = StringUtils.join(floatArray0, 'G', (-1), (-1));
      assertArrayEquals(new float[] {0.0F, 57.0F, 71.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      String string0 = StringUtils.capitalize("6_(8");
      assertEquals("6_(8", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("6_(8", "6_(8", 12);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isEmpty("6_(8");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("K$=c>58p", "6_(8", "TN<Lsd(x");
      assertNull(stringArray0);
      
      String string1 = StringUtils.center("=jK--hnsg8j>v", (-1), 'Q');
      assertEquals("=jK--hnsg8j>v", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("6_(8", "6_(8", "6_(8", 12);
      assertEquals("6_(8", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int1 = StringUtils.length("TN<Lsd(x");
      assertEquals(8, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compare((String) null, "M70rQ2S+w\" q*d]b3%=", false);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.replace((String) null, (String) null, "Extension context \"");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CANADA;
      assertNotSame(locale1, locale0);
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      Locale locale2 = (Locale)locale0.clone();
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale2.getCountry());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("zho", locale2.getISO3Language());
      assertNotNull(locale2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale0));
      
      int int1 = StringUtils.countMatches((CharSequence) "Extension context \"", (CharSequence) null);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString((String) null, "Timeout for vintage @Test must be positive.");
      assertEquals("Timeout for vintage @Test must be positive.", string2);
      assertNotNull(string2);
      
      String string3 = "\\FccD-$(ck";
      String string4 = "_Aap_Aap";
      try { 
        StringUtils.getBytes("", "Timeout for vintage @Test must be positive.");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "Minimum abbreviation width is %d");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Minimum abbreviation width is %d");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.upperCase("lgdFb&a3Y7TtI}R4");
      assertEquals("LGDFB&A3Y7TTI}R4", string2);
      assertNotNull(string2);
      
      int int3 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "LGDFB&A3Y7TTI}R4", 4);
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      String string3 = StringUtils.join((float[]) null, 'k', 3531, (-1));
      assertNull(string3);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains(string2));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      assertFalse(set1.contains(string2));
      assertSame(set1, set0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertNotNull(set1);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isMixedCase("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[3];
      String string0 = StringUtils.join(intArray0, 'd');
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("0d0d0", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("0d0d0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", 'x', 'x');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 3753);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[0] = "!m*#";
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains(""));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Iterator<String> iterator0 = linkedHashSet0.iterator();
      assertFalse(linkedHashSet0.contains(""));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, '7');
      assertFalse(linkedHashSet0.contains(""));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOfAny("!m*#", stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(5, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("r}Jm!6<!&[R[(autO", "r}Jm!6<!&[R[(autO", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width is %d", (String) null, (-92), (-92));
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width is %d", (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width is %d", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Minimum abbreviation width is %d");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string2);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "Minimum abbreviation width is %d");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string3 = StringUtils.replaceFirst((String) null, "Minimum abbreviation width is %d", (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, (-1));
      assertNull(string4);
      
      String string5 = StringUtils.truncate("FW", 0);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "", 0);
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      
      String string6 = StringUtils.removeFirst((String) null, "Minimum abbreviation width is %d");
      assertNull(string6);
      
      String string7 = StringUtils.toRootUpperCase((String) null);
      assertNull(string7);
      
      String string8 = StringUtils.defaultIfEmpty("nP+4zdxrsQ+CP^Gf", "\n");
      assertEquals("nP+4zdxrsQ+CP^Gf", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastOrdinalIndexOf(" ", " ", (-1));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.chomp("\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 190, '@');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.mid((String) null, 4, 4);
      assertNull(string2);
      
      String string3 = StringUtils.substringAfterLast("Threshold must not be negative", 0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      String string0 = StringUtils.substringBetween("l", "l");
      assertNull(string0);
      
      String string1 = StringUtils.replace("l", "l", (String) null, 12);
      assertEquals("l", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Strings must not be null", (-137));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      String string0 = StringUtils.abbreviate("@:%Rj,\u0007-&RvNu%ti ", "\n\r", 9, 9);
      assertEquals("\n\rRvNu%\n\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.ordinalIndexOf("\r", "", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[3] = object3;
      String string0 = StringUtils.join(objectArray0, 'X');
      assertEquals(4, objectArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", '\"');
      assertEquals(" for Greenwich Mean Time.\"GMT\"@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      String string0 = StringUtils.abbreviate("@:%Rj,\u0007-&RvNu%ti ", "@:%Rj,\u0007-&RvNu%ti ", 2533, 2533);
      assertEquals("@:%Rj,\u0007-&RvNu%ti ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      String string0 = StringUtils.upperCase("<mO.>+");
      assertEquals("<MO.>+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("<mO.>+");
      assertEquals("<mO.>+", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("<r\u0005Kmn", "\"F1#lyT*^l>7!te3~S)");
      assertEquals("<r\u0005Kmn", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("<mO.>+", "<mO.>+");
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringBeforeLast("<r\u0005Kmn", "<r\u0005Kmn");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        Charset.forName("\"F1#lyT*^l>7!te3~S)");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \"F1#lyT*^l>7!te3~S)
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.prependIfMissing("_.~.e]6_6c6aw", " ", (CharSequence[]) null);
      assertEquals(" _.~.e]6_6c6aw", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd("\n", (String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceIgnoreCase("Q*~R3q1I^|W", "_.~.e]6_6c6aw", "\n");
      assertEquals("Q*~R3q1I^|W", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.upperCase("Minimum abbreviation width with offset is %d");
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "wJwB", (CharSequence) "_.~.e]6_6c6aw");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.abbreviate("<3BAx0}y*5", "h8qSzKw}", (-1), 9);
      assertEquals("<h8qSzKw}", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.substringBefore((String) null, "");
      assertNull(string5);
      
      int int2 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) "_.~.e]6_6c6aw");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      String string0 = StringUtils.stripEnd("#oq)Ax`h,7y(z", "#oq)Ax`h,7y(z");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("1TX5.'%:g8dg");
      assertEquals("1TX5.'%:g8dg", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      try { 
        StringUtils.getBytes("#X{", "#X{");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      String string0 = StringUtils.stripStart("wJwB", "wJwB");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.toRootLowerCase("\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeStartIgnoreCase(" ", "\n");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceOnce(" ", "\r", " ");
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("\n", " ");
      assertEquals("\n", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " ";
      String string4 = StringUtils.removeIgnoreCase("O0", "Yd;.%OFmaSe8^>B>;S&");
      assertEquals("O0", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      charSequenceArray0[1] = (CharSequence) "O0";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string5 = StringUtils.abbreviateMiddle("\r", "Yd;.%OFmaSe8^>B>;S&", 97);
      assertEquals("\r", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.upperCase("Yd;.%OFmaSe8^>B>;S&");
      assertEquals("YD;.%OFMASE8^>B>;S&", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string7 = StringUtils.abbreviate(" ", "\r", 9, 160);
      assertEquals(" ", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.center("", 1535);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) string0, 'r');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      StringUtils.unwrap((String) null, (String) null);
      StringUtils.substringBetween("ZOD03[:af", (String) null, "");
      String string1 = StringUtils.center("", 0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'd';
      charArray0[2] = 'l';
      charArray0[3] = 'R';
      charArray0[4] = 'E';
      charArray0[5] = 'P';
      charArray0[6] = 'X';
      charArray0[7] = 'b';
      String string2 = StringUtils.valueOf(charArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap((String) null, "");
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("", (String) null);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "nu38b", (CharSequence) "nu38b");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, ',', 20, 20);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      String string0 = StringUtils.upperCase("<mO.>+");
      assertEquals("<MO.>+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("<mO.>+");
      assertEquals("<mO.>+", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllUpperCase("<MO.>+");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "<MO.>+", (CharSequence) "<mO.>+");
      assertEquals(0, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string2 = StringUtils.join(intArray0, 'D', 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.appendIfMissingIgnoreCase(" ~=N&Q4h{f[", "ZnYB+p;%%m?XN3#", stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(" ~=N&Q4h{f[ZnYB+p;%%m?XN3#", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap(" ~=N&Q4h{f[ZnYB+p;%%m?XN3#", " ~=N&Q4h{f[");
      assertEquals(" ~=N&Q4h{f[ZnYB+p;%%m?XN3#", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfterLast(" ~=N&Q4h{f[ZnYB+p;%%m?XN3#", " ~=N&Q4h{f[");
      assertEquals("ZnYB+p;%%m?XN3#", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      String[] stringArray0 = new String[21];
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals(21, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      String string0 = StringUtils.substringAfter("BpW(", 22);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "Search and Replace array lengths don't match: ", 29);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.getIfBlank("Search and Replace array lengths don't match: ", (Supplier<String>) null);
      assertEquals("Search and Replace array lengths don't match: ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfterLast((String) null, (-1743));
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "Search and Replace array lengths don't match: ");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.strip("kG3Zc0 qq!");
      assertEquals("kG3Zc0 qq!", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "BpW(", (CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.rightPad("", (-1743));
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean2 = StringUtils.startsWithAny("Search and Replace array lengths don't match: ", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string5 = StringUtils.prependIfMissing((String) null, "kG3Zc0 qq!", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string5);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "kG3Zc0 qq!");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      String string0 = StringUtils.join(doubleArray0, '}');
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals("0.0}0.0}0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.unwrap("nbsGy=GBJ^` \",_>", "nbsGy=GBJ^` \",_>");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "1+i(1|-^ Jpf[ED");
      assertEquals("1+i(1|-^ Jpf[ED", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2227.8046757379557;
      doubleArray0[3] = (-1770.67384092);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3041.475339695;
      doubleArray0[6] = 251.721175;
      doubleArray0[7] = 0.0;
      String string1 = StringUtils.join(doubleArray0, 'l');
      assertArrayEquals(new double[] {(-1.0), 0.0, 2227.8046757379557, (-1770.67384092), 0.0, 3041.475339695, 251.721175, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals("-1.0l0.0l2227.8046757379557l-1770.67384092l0.0l3041.475339695l251.721175l0.0", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.unwrap("1+i(1|-^ Jpf[ED", "1+i(1|-^ Jpf[ED");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      StringUtils.chomp("1nBDP!9VV", "1nBDP!9VV");
      StringUtils.isAllUpperCase("");
      String string0 = StringUtils.repeat('Z', 3071);
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.isAllBlank(charSequenceArray0);
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) "1nBDP!9VV", string0);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.leftPad("\n", (-1));
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[3] = " vs ";
      stringArray0[4] = "";
      stringArray0[5] = "Exactly one type of input must be provided in the @";
      stringArray0[6] = "\n";
      String string1 = StringUtils.replaceEach(" vs ", stringArray0, stringArray0);
      assertEquals(" vs ", string1);
      
      String string2 = StringUtils.deleteWhitespace("");
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      boolean boolean1 = StringUtils.isNumeric("");
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.removeEnd("\n", (String) null);
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      StringUtils.defaultString("", "");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String[] stringArray0 = StringUtils.split("M", "", (-1));
      StringUtils.uncapitalize("Va:`516YL`p");
      StringUtils.equals((CharSequence) "va:`516YL`p", (CharSequence) "va:`516YL`p");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(":0>M,?", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.removeStartIgnoreCase(" ", "\n");
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\n", "\r", (-932));
      String string1 = StringUtils.replaceEachRepeatedly("Node ", stringArray0, stringArray0);
      assertEquals("Node ", string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Node ");
      boolean boolean1 = StringUtils.endsWithAny("\n", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      StringUtils.upperCase("Strings must not be null");
      StringUtils.uncapitalize("Strings must not be null");
      StringUtils.isAllUpperCase("STRINGS MUST NOT BE NULL");
      StringUtils.countMatches((CharSequence) "STRINGS MUST NOT BE NULL", (CharSequence) "Strings must not be null");
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      StringUtils.replaceChars("m?", 'x', 'K');
      StringUtils.substringAfterLast("strings must not be null", 122);
      String string0 = StringUtils.abbreviate("w4,-WS<BInL", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 6, 507);
      assertEquals("w4,-WS<BInL", string0);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width is %d";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      StringUtils.indexOfDifference((CharSequence[]) null);
      StringUtils.uncapitalize("");
      StringUtils.isAllUpperCase("");
      StringUtils.toRootUpperCase("");
      StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      StringUtils.containsIgnoreCase("", "");
      StringUtils.removeStart("", "hdu");
      StringUtils.swapCase("hdu");
      StringUtils.remove("No @DisabledUntil annotation found on element", 'Q');
      StringUtils.wrapIfMissing("\"YZ,(", '1');
      int int0 = StringUtils.indexOf((CharSequence) "", (-77), (-1194));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("d{Fg}u?xw2s&6");
      assertEquals("d{Fg}u?xw2s&6", string0);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((Comparator<? super Object>) null);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      priorityQueue0.add(locale_Category0);
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, "@og-B}Xz_r, bA0]f0KlLmU");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("FORMAT");
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("2.}W?`A@y6]oK");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((Comparator<? super Object>) null);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) priorityQueue0;
      priorityQueue0.parallelStream();
      priorityQueue0.add("a/g{zxa|Txp]cP+h(");
      objectArray0[2] = (Object) null;
      String string0 = StringUtils.join(objectArray0, 'd');
      assertEquals("d[a/g{zxa|Txp]cP+h(]d", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("@og-B}Xz_r, bA0]f0KlLmU", "d[a/g{zxa|Txp]cP+h(]d");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("@og-B}Xz_r, bA0]f0KlLmU", "d[a/g{zxa|Txp]cP+h(]d");
      StringUtils.trimToEmpty((String) null);
      String string2 = StringUtils.remove("@og-B}Xz_r, bA0]f0KlLmU", "maxWith cannot be negative");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Jt?h/Ncw:", "-^'x9|R3-Z3");
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      StringUtils.reverseDelimited("", 'V');
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      String[] stringArray0 = StringUtils.split("M", "", 55);
      StringUtils.rightPad(":0>M,?", 55, ":0>M,?");
      StringUtils.isAllEmpty(stringArray0);
      StringUtils.isAnyBlank(stringArray0);
      StringUtils.trimToEmpty(":0>M,?");
      StringUtils.uncapitalize("Va:UZ16qL`p");
      StringUtils.center("", (-166));
      StringUtils.equals((CharSequence) "", (CharSequence) "");
      StringUtils.isAnyEmpty(stringArray0);
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(":0>M,?", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      String string0 = StringUtils.upperCase("r");
      assertEquals("R", string0);
      
      String string1 = StringUtils.uncapitalize("R");
      assertEquals("r", string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("R");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceOnce("{", "QW+2&M-b?<*w", "R");
      StringUtils.countMatches((CharSequence) "{", (CharSequence) "r");
      String string3 = StringUtils.replaceIgnoreCase("k-lB>fie-", ", Length: 0", "QW+2&M-b?<*w");
      assertEquals("k-lB>fie-", string3);
      
      String string4 = StringUtils.remove("{", "r");
      assertTrue(string4.equals((Object)string2));
      
      int int0 = StringUtils.compare(", Length: 0", "D_u~Fv", true);
      assertEquals((-24), int0);
      
      boolean boolean1 = StringUtils.isEmpty("r");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("YyL$^%@d &bO :");
      assertEquals("yyL$^%@d &bO :", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      charSequenceArray0[0] = (CharSequence) "yyL$^%@d &bO :";
      int int0 = StringUtils.lastIndexOfAny("YyL$^%@d &bO :", charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("lU");
      assertEquals("lU", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("lU");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      StringUtils.leftPad("(8-Mx#!3JxGUl $", 100);
      StringUtils.containsIgnoreCase("                                                                                     (8-Mx#!3JxGUl $", "                                                                                     (8-Mx#!3JxGUl $");
      StringUtils.isAllUpperCase("                                                                                     (8-Mx#!3JxGUl $");
      StringUtils.isNotBlank("                                                                                     (8-Mx#!3JxGUl $");
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "(8-Mx#!3JxGUl $";
      charSequenceArray0[1] = (CharSequence) "                                                                                     (8-Mx#!3JxGUl $";
      charSequenceArray0[3] = (CharSequence) "(8-Mx#!3JxGUl $";
      charSequenceArray0[4] = (CharSequence) "(8-Mx#!3JxGUl $";
      StringUtils.isAllEmpty(charSequenceArray0);
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.trimToEmpty("                                                                                     (8-Mx#!3JxGUl $");
      StringUtils.uncapitalize("(8-Mx#!3JxGUl $");
      StringUtils.equals(charSequenceArray0[2], charSequenceArray0[3]);
      StringUtils.isAnyEmpty(charSequenceArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(8-Mx#!3JxGUl $";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("                                                                                     (8-Mx#!3JxGUl $", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("^Sl)z");
      assertEquals("^Sl)z", string0);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      String[] stringArray0 = new String[4];
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      StringUtils.stripEnd("`", "#5xjX\"Z`BL8{Q]_1yj");
      String[] stringArray0 = new String[8];
      stringArray0[5] = "`";
      stringArray0[1] = "S";
      stringArray0[2] = null;
      stringArray0[3] = "#5xjX\"Z`BL8{Q]_1yj";
      stringArray0[4] = "IYszxDlYAR|UOtA[{Yb";
      stringArray0[5] = "S";
      stringArray0[6] = null;
      stringArray0[7] = null;
      StringUtils.replaceOnceIgnoreCase("IYszxDlYAR|UOtA[{Yb", "IYszxDlYAR|UOtA[{Yb", "IYszxDlYAR|UOtA[{Yb");
      StringUtils.rightPad("C=a&soyG", 49, "S");
      StringUtils.isBlank("C=a&soyGSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS");
      StringUtils.containsWhitespace("IYszxDlYAR|UOtA[{Yb");
      StringUtils.isAllEmpty(stringArray0);
      String string0 = StringUtils.repeat(stringArray0[7], 49);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Search and Replace array lengths don't match: ";
      stringArray0[1] = "AvdFL&@&]&g>";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("AvdFL&@&]&g>", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean0 = StringUtils.equals((CharSequence) " ", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array", 50);
      String string0 = StringUtils.replaceEachRepeatedly("', is neither of type Map.Entry nor an Array", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("org.junitpioneer.jupiter.params.ShortRange");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 1192, 'o');
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("I4hKLrDPOxX5K!*D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      Stack<Object> stack0 = new Stack<Object>();
      String string0 = StringUtils.join((Iterable<?>) stack0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Iterator<String> iterator0 = arrayDeque0.descendingIterator();
      arrayDeque0.parallelStream();
      StringUtils.join(iterator0, "X,qz.n9kuR+o<:;D<*a");
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, "hS");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      StringUtils.join((byte[]) null, 's');
      String string0 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", 's');
      assertEquals("sorg.apache.commons.lang3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.replaceOnce(" ", "\r", "\r");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      String string0 = StringUtils.remove("2.}W?`A@y6]oK", "2.}W?`A@y6]oK");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle(".", "%s must return a `%s` object", 389);
      assertEquals(".", string0);
      
      int int0 = StringUtils.ordinalIndexOf(".", ".", (-67));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      HashSet<String> hashSet1 = new HashSet<String>(hashSet0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(hashSet1);
      priorityQueue0.parallelStream();
      priorityQueue0.add("a/g{zxa|Txp]cP+h(");
      StringUtils.join((Object[]) null, 't');
      boolean boolean0 = StringUtils.equalsIgnoreCase("a/g{zxa|Txp]cP+h(", "Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripEnd("a/g{zxa|Txp]cP+h(", (String) null);
      assertEquals("a/g{zxa|Txp]cP+h(", string0);
      
      StringUtils.trimToEmpty((String) null);
      String string1 = StringUtils.remove("r]y;`KN1KF*Uyx", (String) null);
      assertNotNull(string1);
      assertEquals("r]y;`KN1KF*Uyx", string1);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      boolean boolean0 = StringUtils.equalsIgnoreCase("  ", "  ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripEnd("`", "#5xjX\"Z`BL8{Q]_1yj");
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("0Q=3DMUK{,", "`", "0Q=3DMUK{,");
      String string2 = StringUtils.remove("0Q=3DMUK{,", "  ");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      String string0 = StringUtils.chomp("aJ/@z=e]Z6dvk[+", "aJ/@z=e]Z6dvk[+");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      
      String string1 = StringUtils.center("hdu", 67, "\" should have a parent context.");
      assertEquals("\" should have a parent context.\"hdu\" should have a parent context.\"", string1);
      
      StringUtils.endsWithIgnoreCase("\" should have a parent context.\"hdu\" should have a parent context.\"", "");
      StringUtils.join((int[]) null, 'z');
      StringUtils.removeEndIgnoreCase("", "\" should have a parent context.\"hdu\" should have a parent context.\"");
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      StringUtils.abbreviateMiddle("hdu", (String) null, 67);
      StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      String string2 = StringUtils.replaceEachRepeatedly("...", (String[]) null, (String[]) null);
      assertEquals("...", string2);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.stripToNull("\r");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("a9FbX(6_k,Wya1", 'O');
      assertEquals("Oa9FbX(6_k,Wya1O", string0);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "#a!*Q\"CO47?>smbw";
      objectArray0[1] = (Object) "#a!*Q\"CO47?>smbw";
      objectArray0[2] = (Object) "#a!*Q\"CO47?>smbw";
      objectArray0[3] = (Object) "#a!*Q\"CO47?>smbw";
      objectArray0[4] = (Object) "#a!*Q\"CO47?>smbw";
      objectArray0[5] = (Object) "#a!*Q\"CO47?>smbw";
      objectArray0[6] = (Object) "#a!*Q\"CO47?>smbw";
      StringUtils.joinWith("#a!*Q\"CO47?>smbw", objectArray0);
      String string0 = StringUtils.chomp("#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw", "#a!*Q\"CO47?>smbw");
      assertEquals("#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw", string0);
      
      String string1 = StringUtils.joinWith("#a!*Q\"CO47?>smbw", objectArray0);
      assertEquals("#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw#a!*Q\"CO47?>smbw", string1);
      
      String string2 = StringUtils.abbreviateMiddle("C`}l/eDL(j4g", "C`}l/eDL(j4g", 256);
      assertEquals("C`}l/eDL(j4g", string2);
      
      String string3 = StringUtils.stripEnd("", "");
      assertEquals("", string3);
      
      String string4 = StringUtils.leftPad("N", 0);
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("C`}l/eDL(j4g", 'g');
      assertEquals("gC`}l/eDL(j4g", string5);
      
      String string6 = StringUtils.remove("N", "9");
      assertTrue(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      try { 
        StringUtils.toString(byteArray0, ".");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      StringUtils.reverseDelimited("", 'V');
      Locale locale0 = Locale.FRANCE;
      Locale.setDefault(locale0);
      StringUtils.lowerCase("", locale0);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-88);
      StringUtils.toString(byteArray0, (String) null);
      String string0 = StringUtils.substringAfterLast((String) null, (int) (byte) (-88));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      StringUtils.upperCase("<mO.>+");
      StringUtils.difference("<MO.>+", "org.junitpioneer.jupiter.cartesian.CartesianValueArgumentsProvider");
      StringUtils.removeEndIgnoreCase("88:df3T", "88:df3T");
      StringUtils.replaceAll("hdu<mO.>+", "rlwvW=Bc=?=E", "88:df3T");
      StringUtils.trimToNull("");
      StringUtils.compare("\n", "~B@!w+0@#~T=");
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      String string0 = StringUtils.replaceAll("&4m 9=x@0/*!", "&4m 9=x@0/*!", "&4m 9=x@0/*!");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase((String) null, "#&_DZ||JoF6oh/$");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "%5v $.1_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'V');
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.rightPad("", 0);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.truncate("gU;Z[lZA)@gz", 0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBefore("OkEBYU4LVo0WvdM,", " or any enclosing class.");
      assertEquals("OkEBYU4LVo0WvdM,", string3);
      
      StringUtils.lastIndexOf((CharSequence) "OkEBYU4LVo0WvdM,", 21);
      int int2 = StringUtils.compare("5sykqv.", "\"YZ,(", true);
      assertEquals(19, int2);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      String string0 = StringUtils.trimToNull("+B-6r{vLbl");
      assertNotNull(string0);
      assertEquals("+B-6r{vLbl", string0);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.appendIfMissingIgnoreCase("@3K", "", charSequenceArray0);
      assertEquals("@3K", string0);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      String string0 = StringUtils.replace("", "Object varargs must not be null", "Object varargs must not be null", 99);
      String string1 = StringUtils.right("", 0);
      StringUtils.defaultIfEmpty("", "F>FL=p8r%p0vjdoQ+,_");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "F>FL=p8r%p0vjdoQ+,_";
      String string2 = StringUtils.abbreviate("", 2147483645, 2147483645);
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertTrue(string3.equals((Object)string0));
      
      StringUtils.split("", "", 2770);
      StringUtils.stripAccents("F>FL=p8r%p0vjdoQ+,_");
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Gb%VJH-&2;");
      assertEquals(7, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "F>FL=p8r%p0vjdoQ+,_", (CharSequence) "", 2770);
      assertEquals(19, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "F>FL=p8r%p0vjdoQ+,_", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      String string0 = StringUtils.stripAccents("HdtZy!wh>u");
      assertEquals("HdtZy!wh>u", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.appendIfMissingIgnoreCase("Locale must not be null", "Locale must not be null", stringArray0);
      assertEquals("Locale must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      StringUtils.countMatches((CharSequence) "0[+NT1'un:&<c", (CharSequence) "0[+NT1'un:&<c");
      String string0 = StringUtils.defaultIfEmpty("0[+NT1'un:&<c", "0[+NT1'un:&<c");
      assertEquals("0[+NT1'un:&<c", string0);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.replaceIgnoreCase("\";D25dQ--dKnf3FyG", "<mO.>+", "\";D25dQ--dKnf3FyG", 10);
      assertEquals("\";D25dQ--dKnf3FyG", string0);
      
      charSequenceArray0[0] = (CharSequence) "\";D25dQ--dKnf3FyG";
      charSequenceArray0[1] = (CharSequence) "<mO.>+";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("Search and Replace array lengths don't match: ", (String) null, false);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars("\";D25dQ--dKnf3FyG", "i:V\"/%IaM1^>!?:q3", ";");
      assertEquals(";D25dQ--dKnfFyG", string1);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      String string0 = StringUtils.substringBefore("s>ZP7I", "org.junitpioneer.jupiter.params.Range");
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "s>ZP7I", (CharSequence) "s>ZP7I");
      assertEquals(0, int0);
      
      String string1 = StringUtils.unwrap("s>ZP7I", '[');
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.params.Range", "M");
      assertEquals(1, stringArray0.length);
      
      StringUtils.remove("tf/j0t-K", 'D');
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'D';
      doubleArray0[2] = (-386.23901);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2913;
      doubleArray0[5] = (-1650.76644113);
      doubleArray0[6] = (double) 2913;
      doubleArray0[7] = (double) 2913;
      StringUtils.join(doubleArray0, 'D', 0, 0);
      StringUtils.isAlphanumeric("M");
      String string2 = StringUtils.mid("s>ZP7I", (-26), (-26));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      String string1 = StringUtils.substringBeforeLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", " vs ");
      assertTrue(string1.equals((Object)string0));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string2 = StringUtils.join((List<?>) linkedList0, "Aborting to protect against StackOverflowError - output of one loop is the input of another", 442, 101);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.substringAfterLast("", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("wZ");
      assertEquals("wZ", string0);
      
      int int0 = StringUtils.compareIgnoreCase("wZ", ".-NJU[Jg1&. #:e");
      assertEquals(73, int0);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("C^jez*1", "C^jez*1");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      StringUtils.splitByCharacterTypeCamelCase((String) null);
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      String string0 = StringUtils.stripToNull("\"p7koj7P^*>d-sXzEq");
      assertEquals("\"p7koj7P^*>d-sXzEq", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      String string0 = StringUtils.leftPad("C3vL", (-2677), "=)E");
      assertNotNull(string0);
      assertEquals("C3vL", string0);
      
      StringUtils.indexOf((CharSequence) "C3vL", (-2677));
      int int0 = StringUtils.compare((String) null, "C3vL", true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, "DefaultLocale", 322, 322);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      StringUtils.splitByCharacterTypeCamelCase((String) null);
      StringUtils.isBlank((CharSequence) null);
      StringUtils.isAlphanumeric((CharSequence) null);
      StringUtils.compareIgnoreCase("", "");
      StringUtils.compareIgnoreCase("?@V>Md>", "", false);
      StringUtils.compare((String) null, "");
      StringUtils.stripToNull("");
      StringUtils.splitByCharacterType((String) null);
      String string0 = StringUtils.removeEnd("@og-B}Xz_r, ", "bA0]f0KlLmU");
      StringUtils.leftPad("", (-1), "");
      StringUtils.join((List<?>) null, ':', 7, 7);
      StringUtils.join((List<?>) null, "<pa0y(hg;fV8ac", (-1), (-1));
      StringUtils.substringAfterLast((String) null, 32);
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("QU\"&`[Rk`sMb?7qX", 2147483645, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      StringUtils.substringBetween("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange", (String) null);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      String string0 = StringUtils.wrap("org.junitpioneer.jupiter.params.ShortRange", (String) null);
      assertEquals("org.junitpioneer.jupiter.params.ShortRange", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      String string1 = StringUtils.wrapIfMissing(" thu", " ");
      assertEquals(" thu ", string1);
      
      boolean boolean0 = StringUtils.isWhitespace(" thu ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      String string0 = StringUtils.difference("9", "9");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Y9", "Y9", "Y9");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Y9", (CharSequence) null, 2671);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.replaceAll("Strings must not be null", stringArray0[0], stringArray0[0]);
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      String string1 = StringUtils.trimToNull("d;|9QifZ}5,Za/gd");
      assertNotNull(string1);
      assertEquals("d;|9QifZ}5,Za/gd", string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Cannot get the toString of a null object", stringArray0[1], 8);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'z';
      charArray0[2] = 'q';
      charArray0[3] = 'z';
      charArray0[4] = 'q';
      String string2 = StringUtils.removeIgnoreCase("J", stringArray0[0]);
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("kMEw,");
      assertEquals(1, stringArray2.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("|hf)F\"KuJ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.difference("J", (String) null);
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.abbreviate("", (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      long[] longArray0 = new long[2];
      String string0 = StringUtils.join(longArray0, '1');
      assertNotNull(string0);
      assertEquals("010", string0);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2471L;
      longArray0[1] = 1338L;
      String string0 = StringUtils.join(longArray0, '1');
      assertEquals("247111338", string0);
      
      String string1 = StringUtils.reverseDelimited("GMT", '1');
      assertNotNull(string1);
      assertEquals("GMT", string1);
      
      int int0 = StringUtils.compare("GMT", "GMT");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("sueExtension", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("hdu<mO.>+");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "hdu<mO.>+";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("Parameter has to be annotated with ");
      assertNotNull(string2);
      assertEquals("Parameter has to be annotated with", string2);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(" ", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.substringBeforeLast("mama", "");
      assertEquals("mama", string0);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      StringUtils.substringBetween((String) null, "Minimum abbreviation width is %d");
      StringUtils.isNumericSpace((CharSequence) null);
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      int int1 = StringUtils.indexOf((CharSequence) null, (-1));
      assertTrue(int1 == int0);
      
      StringUtils.countMatches((CharSequence) null, (CharSequence) "Minimum abbreviation width is %d");
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string1);
      
      StringUtils.getBytes((String) null, (String) null);
      String string2 = StringUtils.replaceFirst((String) null, (String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.rightPad((String) null, (-1));
      assertNull(string3);
      
      String string4 = StringUtils.remove((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNull(string4);
      
      StringUtils.containsNone((CharSequence) null, "Object varargs must not be null");
      boolean boolean0 = StringUtils.isAlpha("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      StringUtils.isAllUpperCase((CharSequence) null);
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      String string0 = "1nBDP!9VV";
      StringUtils.chomp("1nBDP!9VV", "1nBDP!9VV");
      StringUtils.isAllUpperCase("");
      char char0 = 'Z';
      int int0 = 3071;
      String string1 = StringUtils.repeat('Z', 3071);
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.isAllBlank(charSequenceArray0);
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) "1nBDP!9VV", string1);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 37);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      StringUtils.getCommonPrefix((String[]) null);
      String string1 = StringUtils.substringBeforeLast("5sykqv.", "!tA0D");
      assertEquals("5sykqv.", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "Locale must not be null", 37);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.wrap("5$XJM?)N$|~=po ", 'Z');
      assertEquals("Z5$XJM?)N$|~=po Z", string2);
      
      boolean boolean1 = StringUtils.isNotEmpty("0+5O<sgDr$");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String[] stringArray0 = new String[9];
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      arrayDeque0.descendingIterator();
      String string0 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("", (String) null);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("ti`+\"ThvS}9>S2_", "ti`+\"ThvS}9>S2_");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      boolean boolean0 = StringUtils.equalsIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBeforeLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", " vs ");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("G?-h;<eUGpo OMjM");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.rightPad(" ", (-1));
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "(^MoF_&*GQF>mhkM+");
      StringUtils.startsWithIgnoreCase("(^MoF_&*GQF>mhkM+", "(^MoF_&*GQF>mhkM+");
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.replaceChars("(^MoF_&*GQF>mhkM+", ':', 'w');
      assertNotNull(string1);
      assertEquals("(^MoF_&*GQF>mhkM+", string1);
      
      String string2 = StringUtils.rightPad("(^MoF_&*GQF>mhkM+", 0, 'w');
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      String string0 = "2)[~gl(#";
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("2)[~gl(#", "2)[~gl(#");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 0
         // 2)[~gl(#
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      int int0 = StringUtils.compare(" ", " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      String[] stringArray0 = new String[12];
      String string0 = StringUtils.joinWith("lt", stringArray0);
      assertEquals("ltltltltltltltltltltlt", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("ltltltltltltltltltltlt");
      assertEquals(22, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      String string0 = StringUtils.chop("lBs.l,yv TlJNA:LE");
      assertEquals("lBs.l,yv TlJNA:L", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n");
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.compare(" ", "\n");
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("%M was not annotated qith @CartesianArgumentsSource or @ArgumentsSource but should have been.", "%M was not annotated qith @CartesianArgumentsSource or @ArgumentsSource but should have been.");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      StringUtils.join((int[]) null, 'I');
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Y ", "Y ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      String string1 = StringUtils.join((Object[]) stringArray0, " ");
      assertEquals("  ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'D4740MV0ZoF:t2", "M");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      StringUtils.substringBefore("", "");
      StringUtils.equalsIgnoreCase("", "");
      StringUtils.substringBeforeLast("1Jh)O9+EX", " vs ");
      String string0 = "StopwatchExtension";
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      String string0 = StringUtils.stripStart("cbs", "cbs");
      assertEquals("", string0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      priorityQueue0.add("Xd8E|ygE");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "a/g{zxa|Txp]cP+h(";
      String string1 = StringUtils.join(objectArray0, 'd');
      assertEquals("a/g{zxa|Txp]cP+h(", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("Xd8E|ygE", "");
      String string2 = StringUtils.stripEnd("a/g{zxa|Txp]cP+h(", "No test failed with one of the specified exceptions (yet).");
      assertEquals("a/g{zxa|Txp]cP+", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Xd8E|ygE";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "a/g{zxa|Txp]cP+h(";
      boolean boolean1 = StringUtils.endsWithAny("cbs", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.remove("a/g{zxa|Txp]cP+h(", 'c');
      assertEquals("a/g{zxa|Txp]P+h(", string3);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      String string0 = StringUtils.unwrap("StdIoExtension is active but neither System.ou or System.in are getting redirected.", 'j');
      assertEquals("StdIoExtension is active but neither System.ou or System.in are getting redirected.", string0);
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.substringBefore("\r", " ");
      assertEquals("\r", string0);
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      String string0 = StringUtils.remove("H", 'G');
      assertEquals("H", string0);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = '\u0000';
      String string0 = StringUtils.unwrap("%s was not annotated with @ArgumentsSource but should have been.", '\u0000');
      assertEquals("%s was not annotated with @ArgumentsSource but should have been.", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "%s was not annotated with @ArgumentsSource but should have been.", 's');
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      String string0 = StringUtils.substringBefore("s>ZP7I", "org.junitpioneer.jupiter.params.Range");
      assertEquals("s>ZP7I", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "s>ZP7I", (CharSequence) "s>ZP7I");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("tf/j0t-K", "M", 2913);
      String string1 = StringUtils.unwrap(":0>M,?", '[');
      assertEquals(":0>M,?", string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "");
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(":0>M,?", "M");
      assertEquals(2, stringArray1.length);
      
      String string3 = StringUtils.remove("tf/j0t-K", 'D');
      assertTrue(string3.equals((Object)string2));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'D';
      doubleArray0[1] = (double) 'D';
      doubleArray0[2] = (-386.23901);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2913;
      doubleArray0[5] = (-1650.76644113);
      doubleArray0[6] = (double) 2913;
      doubleArray0[7] = (double) 2913;
      String string4 = StringUtils.join(doubleArray0, 'D', 0, 0);
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Exactly one type of input must be provided in th @", (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = StringUtils.join((List<?>) linkedList0, 'g', 804, 804);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("hdu");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", 'x', 'x');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 3753);
      assertEquals(0, int0);
      
      String string1 = StringUtils.center((String) null, 0, 'H');
      assertNull(string1);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Iterator<String> iterator0 = arrayDeque0.descendingIterator();
      String string2 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnce("File does not exist: ", "File does not exist: ", (String) null);
      assertEquals("File does not exist: ", string3);
      assertNotNull(string3);
      
      arrayDeque0.spliterator();
      StringUtils.toRootUpperCase("");
      String string4 = StringUtils.toRootUpperCase("");
      assertNotNull(string4);
      
      StringUtils.mid((String) null, 57, 3753);
      String string5 = StringUtils.substringAfterLast("File does not exist: ", 3753);
      String string6 = StringUtils.abbreviate("", "File does not exist: ", 0, 40);
      assertTrue(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.center("hould have been.", (-1), '/');
      assertEquals("hould have been.", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "hould have been.", '/');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      String string0 = StringUtils.removeEnd("<mw", "<mw");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("G_", "G_", "G_");
      assertEquals("G_", string0);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, '^');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      float[] floatArray0 = new float[13];
      String string0 = StringUtils.join(floatArray0, '3');
      assertEquals("0.030.030.030.030.030.030.030.030.030.030.030.030.0", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("0.030.030.030.030.030.030.030.030.030.030.030.030.0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      String string0 = StringUtils.center("Cannot clone Cloneable type ", 307, '/');
      assertNotNull(string0);
      assertEquals("///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cannot clone Cloneable type ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////", string0);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean0 = StringUtils.isAlpha("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      Stack<String> stack0 = new Stack<String>();
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r", "r", (-1));
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      
      StringUtils.toRootUpperCase((String) null);
      StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      StringUtils.isAllEmpty((CharSequence[]) null);
      String string1 = StringUtils.removeStart("+F(}|8:~l`!KdFa1HB4", "");
      assertEquals("+F(}|8:~l`!KdFa1HB4", string1);
      
      StringUtils.join((Object[]) null, 'z');
      boolean boolean0 = StringUtils.equalsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.trimToEmpty("PXO");
      assertEquals("PXO", string2);
      
      String string3 = StringUtils.remove("]", (String) null);
      assertEquals("]", string3);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "+F(}|8:~l`!KdFa1HB4", "8T}p%t?e.ABKb(");
      StringUtils.isAlpha((CharSequence) null);
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "C^jez*1";
      int int0 = StringUtils.lastIndexOfAny("C^jez*1", charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      String[] stringArray0 = new String[10];
      int int0 = StringUtils.lastIndexOfAny(" h-BaO$x", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("s4apugl3wwFm^<eU%@");
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("s", string0);
      assertEquals(11, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      String string0 = "0k#";
      StringUtils.capitalize((String) null);
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string1 = "CZi@v8Rd";
      StringUtils.substringAfterLast("og-B}Xz_r, ", "CZi@v8Rd");
      charSequenceArray0[1] = (CharSequence) "";
      StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      StringUtils.splitByCharacterTypeCamelCase("");
      String string2 = null;
      StringUtils.defaultString((String) null, "m='<y~1DIg");
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "og-B}Xz_r, ", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      StringUtils.startsWithAny("", charSequenceArray0);
      StringUtils.splitByCharacterTypeCamelCase("");
      StringUtils.defaultString((String) null, "At@3#Z@");
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "At@3#Z@", charSequenceArray0[0]);
      StringUtils.isWhitespace("<mO8HWC2");
      StringUtils.replaceIgnoreCase("]qMnF{QL*5|MufC[", "2<JlX", "At@3#Z@");
      StringUtils.repeat("Threshold must not be negative", 7);
      StringUtils.lastIndexOf((CharSequence) "At@3#Z@", 2272, 2272);
      StringUtils.countMatches((CharSequence) "At@3#Z@", charSequenceArray0[0]);
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny(" ", charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, (-994));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      String string0 = StringUtils.stripEnd("org.junitpioneer.jupiter.DefaultLocaleExtension", "org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      StringUtils.leftPad("(8-Mx#!3JxGUl $", 100);
      StringUtils.containsIgnoreCase("                                                                                     (8-Mx#!3JxGUl $", "                                                                                     (8-Mx#!3JxGUl $");
      StringUtils.isAllUpperCase("                                                                                     (8-Mx#!3JxGUl $");
      String string0 = StringUtils.removeEndIgnoreCase("org.junitpioneer.jupiter.DisableIfTestFailsExtension", "i ");
      StringUtils.unwrap("Illegal range. Equal from and to will produce an empty range.", 'O');
      StringUtils.join((long[]) null, 'P');
      StringUtils.countMatches((CharSequence) "Illegal range. Equal from and to will produce an empty range.", '*');
      StringUtils.rightPad("aM1^>!?:q3", 0, '*');
      StringUtils.contains((CharSequence) "aM1^>!?:q3", 20);
      StringUtils.isAlpha("Illegal range. Equal from and to will produce an empty range.");
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "i ";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "");
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      StringUtils.substringBefore("s>ZP7I", "org.junitpioneer.jupiter.params.Range");
      StringUtils.splitByCharacterTypeCamelCase("s>ZP7I");
      StringUtils.defaultString(" \r", "ku*!@EH.IUD");
      StringUtils.getLevenshteinDistance((CharSequence) " \r", (CharSequence) "org.junitpioneer.jupiter.params.Range");
      StringUtils.isWhitespace(" \r");
      String string0 = StringUtils.replaceIgnoreCase("org.junitpioneer.jupiter.params.Range", "<mO8HWC2", "org.junitpioneer.jupiter.json.AbstractJsonSourceBasedArgumentsProvider");
      String string1 = StringUtils.repeat("<mO8HWC2", 511);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      String string0 = StringUtils.replacePattern("", "p36B", "");
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "p36B";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "p36B";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      StringUtils.indexOf((CharSequence) "p36B", 0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) (-1);
      StringUtils.join(doubleArray0, 'G', 90, (-1));
      StringUtils.indexOf((CharSequence) "", charSequenceArray0[2], 3689);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "p36B";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string1);
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[1], (CharSequence) "p36B");
      assertTrue(int1 == int0);
      
      StringUtils.isWhitespace(charSequenceArray0[0]);
      String string2 = StringUtils.replaceIgnoreCase("", "p36B", "]qMnF{QL*5|MufC[");
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.endsWithAny("]qMnF{QL*5|MufC[", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "w$97e[rCo9#Has", (CharSequence) "w$97e[rCo9#Has");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '9');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("K`upbw8dxU]K!! lGb;A1'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      char char0 = '!';
      StringUtils.reverseDelimited("", 'V');
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      String[] stringArray0 = StringUtils.split("M", "", 55);
      StringUtils.unwrap("", ']');
      StringUtils.join((Object[]) stringArray0, "Va:UZ16qL`p");
      StringUtils.splitPreserveAllTokens(":0>M,?", "wGeg57;:`_SE^+x4");
      StringUtils.remove("M", '!');
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'G', 0, 1665);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      String string0 = StringUtils.replacePattern("", "", "Db");
      assertEquals("Db", string0);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2479L;
      String string0 = StringUtils.leftPad("<mO", (-2366), 'o');
      assertNotNull(string0);
      assertEquals("<mO", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "<mO";
      Locale locale0 = new Locale("<mO", "Cannot get the toString of a null object");
      String string1 = StringUtils.lowerCase("The `date` %s is after the current date %s", locale0);
      assertEquals("the `date` %s is after the current date %s", string1);
      assertNotNull(string1);
      
      locale0.getDisplayLanguage();
      charSequenceArray0[1] = (CharSequence) "the `date` %s is after the current date %s";
      charSequenceArray0[2] = (CharSequence) "The `date` %s is after the current date %s";
      charSequenceArray0[3] = (CharSequence) "<mO";
      charSequenceArray0[4] = (CharSequence) "Cannot get the toString of a null object";
      charSequenceArray0[5] = (CharSequence) "<mO";
      charSequenceArray0[6] = (CharSequence) "<mO";
      charSequenceArray0[7] = (CharSequence) "<mO";
      charSequenceArray0[8] = (CharSequence) "<mO";
      String string2 = StringUtils.reverse("\n");
      assertNotNull(string2);
      assertEquals("\n", string2);
      
      String string3 = StringUtils.EMPTY;
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "\n");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, '\'');
      assertNotNull(string0);
      
      String string1 = StringUtils.center((String) null, 67, "9qz`})<Y@s_T+Bl`W");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, "hdu");
      assertFalse(boolean0);
      
      StringUtils.join((int[]) null, '/');
      String string2 = StringUtils.removeEndIgnoreCase((String) null, "9qz`})<Y@s_T+Bl`W");
      assertNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\" should have a parent context.", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, "", 67);
      assertNull(string3);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "hdu", (CharSequence) "hdu");
      assertFalse(int1 == int0);
      
      StringUtils.lastIndexOf((CharSequence) "", 0);
      String string4 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string4);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      String string5 = StringUtils.join((Iterable<?>) linkedList1, '\'');
      assertNotNull(string5);
      
      String string6 = StringUtils.uncapitalize("FccD-$(ck ");
      assertEquals("fccD-$(ck ", string6);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(31, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.difference("", " ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean0 = StringUtils.endsWithIgnoreCase("\n", "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      String string0 = StringUtils.rotate("l,`UR1J6R^<.sg1=O_", (-1405));
      assertEquals(",`UR1J6R^<.sg1=O_l", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string1 = StringUtils.getDigits("");
      assertEquals("", string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray0[2] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray0[3] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray0[4] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray0[4] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray0[6] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray0[7] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      CharSequence[] charSequenceArray1 = new CharSequence[8];
      charSequenceArray1[0] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray1[1] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray1[2] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray1[3] = (CharSequence) "";
      charSequenceArray1[4] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray1[5] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray1[6] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      charSequenceArray1[7] = (CharSequence) "l,`UR1J6R^<.sg1=O_";
      StringUtils.isNoneEmpty(charSequenceArray1);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-1405);
      longArray0[4] = (long) 0;
      String string2 = StringUtils.join(longArray0, 'L');
      assertEquals("0L0L0L-1405L0", string2);
      
      int int1 = StringUtils.countMatches((CharSequence) "l,`UR1J6R^<.sg1=O_", '\'');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      StringUtils.substringBetween("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange", (String) null);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      String string0 = StringUtils.join((List<?>) arrayList0, 'D', (-1681), (-1681));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width is %d", (String) null, (-92), (-92));
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("Minimum abbreviation width is %d");
      int int0 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width is %d", (CharSequence) null);
      assertEquals((-1), int0);
      
      StringUtils.indexOf((CharSequence) "Minimum abbreviation width is %d", (-1));
      StringUtils.countMatches((CharSequence) null, (CharSequence) "Minimum abbreviation width is %d");
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string2);
      
      StringUtils.getBytes((String) null, "Minimum abbreviation width is %d");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "Minimum abbreviation width is %d");
      Iterator<Object> iterator0 = linkedList0.iterator();
      String string3 = StringUtils.join(iterator0, ' ');
      assertEquals("Minimum abbreviation width is %d", string3);
      assertNotNull(string3);
      
      StringUtils.indexOf((CharSequence) "Minimum abbreviation width is %d", (-1), 177);
      String string4 = StringUtils.removeAll((String) null, (String) null);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.replacePattern("Minimum abbreviation width is %d", (String) null, (String) null);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" ");
      boolean boolean0 = StringUtils.containsAny((CharSequence) " ", (CharSequence[]) stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.toRootLowerCase("\r");
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase(" ", "\n");
      String string2 = StringUtils.repeat("\n", 198);
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("", " ");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)83;
      boolean boolean0 = StringUtils.isAsciiPrintable("\r");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "offset cannot be negative", (int) (byte) (-41));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      String string0 = StringUtils.wrap("Minimum abbreviation width is %d", ']');
      assertEquals("]Minimum abbreviation width is %d]", string0);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      StringUtils.substring("lx", 645, 645);
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", (-1017));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      String string0 = StringUtils.replacePattern("", "p36B", "");
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "p36B";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "p36B";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      StringUtils.indexOf((CharSequence) "p36B", 0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) (-1);
      StringUtils.join(doubleArray0, 'G', 90, (-1));
      int int1 = StringUtils.indexOf((CharSequence) "", charSequenceArray0[2], 3689);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "p36B";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string1);
      
      int int2 = StringUtils.getLevenshteinDistance(charSequenceArray0[1], (CharSequence) "p36B");
      assertTrue(int2 == int0);
      
      boolean boolean0 = StringUtils.isWhitespace(charSequenceArray0[0]);
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("", "p36B", "]qMnF{QL*5|MufC[");
      assertEquals("", string2);
      
      String string3 = StringUtils.replace("", "p36B", "", 127);
      assertTrue(string3.equals((Object)string0));
      
      int int3 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.indexOf((CharSequence) "\n", (-1), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      String string0 = StringUtils.rotate("', is neither of type Map.Entry nor an Array", (-2015));
      assertEquals(" an Array', is neither of type Map.Entry nor", string0);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.indexOf((CharSequence) "\r", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'V');
      assertNotNull(string0);
      
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("", 0);
      String string2 = StringUtils.truncate("gU;Z[lZA)@gz", 0);
      assertTrue(string2.equals((Object)string1));
      
      StringUtils.substringAfter((String) null, 0);
      String string3 = StringUtils.wrap((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.chomp("OkEBYU4LVo0WvdM,");
      assertEquals("OkEBYU4LVo0WvdM,", string4);
      
      String string5 = StringUtils.leftPad("h/E*Rm\"K/?xSSlrMR", 0);
      assertEquals("h/E*Rm\"K/?xSSlrMR", string5);
      
      String string6 = StringUtils.removeStartIgnoreCase("", "Cloneable type ");
      assertTrue(string6.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      String string0 = StringUtils.leftPad("K ", 50);
      assertNotNull(string0);
      assertEquals("                                                K ", string0);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      String[] stringArray0 = new String[19];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.replace("\r", "", "");
      assertEquals("\r", string0);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, 'r', (-574), (-574));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "2.}W?`A@y6]oK", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "");
      Iterator<Object> iterator0 = linkedList0.iterator();
      String string0 = StringUtils.join(iterator0, 'o');
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", Integer.MAX_VALUE, 1192);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeAll("", "Could not resolve parameter of type %s.");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("4lP~;&>+8Ew-Ncp.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      String string0 = StringUtils.replaceOnce(">hLE,Da'}wD@ 1Oowh", ">hLE,Da'}wD@ 1Oowh", ">hLE,Da'}wD@ 1Oowh");
      assertEquals(">hLE,Da'}wD@ 1Oowh", string0);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      String string0 = StringUtils.replace("2J]", "2J]", "2J]");
      assertEquals("2J]", string0);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.difference(" ", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.replaceIgnoreCase("", "\n", "\r");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, (String) null, "/HG^");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "/HG^");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.substring("", (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      String string0 = StringUtils.center("", 108, '!');
      assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", string0);
      assertNotNull(string0);
      
      StringUtils.containsNone((CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", "");
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
      String string1 = StringUtils.replaceOnceIgnoreCase((String) null, "", "");
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
      charSequenceArray0[3] = (CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
      charSequenceArray0[4] = (CharSequence) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.substringBeforeLast("Invalid exceptionStatus", "");
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "0+5O<sgDr$", 108);
      assertNull(stringArray1);
      
      String string2 = StringUtils.wrap("_o", '!');
      assertEquals("!_o!", string2);
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean0 = StringUtils.containsNone((CharSequence) " ", "\r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("NM0Z", "NM0Z", 2682);
      int[] intArray0 = null;
      char char0 = 'd';
      StringUtils.join((int[]) null, 'd');
      StringUtils.chop("NM0Z");
      StringUtils.compare("NM0", "line.separator");
      StringUtils.joinWith((String) null, stringArray0);
      String string0 = "";
      StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("The `untilDate` string '", "{");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition
         // {
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      String string0 = StringUtils.leftPad("651K7>oFY;", 972, "");
      assertEqualsoFY;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String[] stringArray0 = new String[9];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      String string0 = StringUtils.join(byteArray0, 's');
      assertEquals("14", string0);
      
      StringUtils.replaceChars(stringArray0[0], 'H', 'H');
      String string1 = StringUtils.repeat("aV%#,lm[g|V", "", (int) (byte)14);
      assertEquals("aV%#,lm[g|VaV%#,lm[g|VaV%#,lm[g|VaV%#,lm[g|VaV%#,lm[g|VaV%#,lm[g|VaV%#,lm[g|VaV%#,lm[g|VaV%#,lm[g|VaV%#,lm[g|VaV%#,lm[g|VaV%#,lm[g|VaV%#,lm[g|VaV%#,lm[g|V", string1);
      
      String string2 = StringUtils.abbreviateMiddle("", "aV%#,lm[g|V", (byte)14);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, '\'');
      assertNotNull(string0);
      
      String string1 = StringUtils.center((String) null, 67, "9qz`})<Y@s_T+Bl`W");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, "hdu");
      assertFalse(boolean0);
      
      StringUtils.join((int[]) null, '/');
      String string2 = StringUtils.removeEndIgnoreCase((String) null, "9qz`})<Y@s_T+Bl`W");
      assertNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\" should have a parent context.", (CharSequence) "");
      assertEquals(0, int0);
      
      StringUtils.substring((String) null, 67, 0);
      StringUtils.uncapitalize("N3@@_3n@fFuekb[`d");
      String string3 = StringUtils.reverse(" ");
      assertEquals(" ", string3);
      
      String string4 = StringUtils.EMPTY;
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      String string0 = StringUtils.removePattern("3Z", (String) null);
      StringUtils.indexOf((CharSequence) "3Z", (CharSequence) "3Z");
      String string1 = StringUtils.stripStart("~jDkf'UlaNC9U", "'S$\u0005H}|?");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)90;
      String string2 = StringUtils.join(byteArray0, 'h');
      boolean boolean0 = StringUtils.equals((CharSequence) "3Z", (CharSequence) "~jDkf'UlaNC9U");
      String string3 = StringUtils.deleteWhitespace("108h17h118h14h0h90");
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.truncate("", 32);
      assertEquals("", string4);
      
      String string5 = StringUtils.defaultIfBlank("3Z", "108h17h118h14h0h90");
      assertTrue(string5.equals((Object)string0));
      
      boolean boolean1 = StringUtils.startsWith("108h17h118h14h0h90", "");
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.removeIgnoreCase("~jDkf'UlaNC9U", "108h17h118h14h0h90");
      assertTrue(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      float[] floatArray0 = new float[1];
      StringUtils.join(floatArray0, '\"', 3, 3);
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join((double[]) null, '6', 5, 40);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      String string0 = StringUtils.capitalize(",Gpf6PO:,K~RxY");
      assertEquals(",Gpf6PO:,K~RxY", string0);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      String string0 = StringUtils.center("Minimum abbreviation width is %d", 0, 'K');
      assertEquals("Minimum abbreviation width is %d", string0);
      
      boolean boolean0 = StringUtils.isAlpha("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("4n!s$p", "Minimum abbreviation width is %d", 321);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.removeEnd(" ", " ");
      String string2 = StringUtils.wrap("", '?');
      assertTrue(string2.equals((Object)string1));
      
      StringUtils.replaceFirst((String) null, "/fY(){sCe,", " ");
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'K';
      floatArray0[1] = (float) '?';
      floatArray0[2] = (-2096.81F);
      floatArray0[3] = (float) 'K';
      floatArray0[4] = (float) '?';
      String string3 = StringUtils.join(floatArray0, '4');
      assertEquals("75.0463.04-2096.81475.0463.0", string3);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.joinWith("g }C7]g7V/", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "0[+NT1'un:&<c", (CharSequence) "0[+NT1'un:&<c");
      assertEquals(1, int0);
      
      String string0 = StringUtils.leftPad("0[+NT1'un:&<c", 1, "0[+NT1'un:&<c");
      assertNotNull(string0);
      assertEquals("0[+NT1'un:&<c", string0);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      String string0 = StringUtils.removeStart("(8-Mx#!3JxGUl $", "(8-Mx#!3JxGUl $");
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.repeat('O', 100);
      boolean boolean2 = StringUtils.isNotBlank("");
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "(8-Mx#!3JxGUl $";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO";
      String string2 = StringUtils.truncate("{B\"GNwl=X[", (int) (byte)0, 2101);
      assertNotNull(string2);
      assertEquals("{B\"GNwl=X[", string2);
      
      String string3 = StringUtils.removeStart("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", "");
      assertTrue(string3.equals((Object)string1));
      
      int int0 = StringUtils.compareIgnoreCase("Extension context \"", "+{0+=#`WBlgdFb&a3Y7TtI}R4");
      assertEquals(58, int0);
      
      StringUtils.startsWithIgnoreCase("DN0UH4`PQ<@Z;KK&", "\"YZ,(");
      boolean boolean3 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      StringUtils.join((Object[]) null, ';', 55, 55);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.chomp("", "\r");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      String string0 = StringUtils.rotate("D^4`m`\"s]B", 108);
      assertEquals("4`m`\"s]BD^", string0);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "C", "C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      StringUtils.length("");
      StringUtils.defaultIfBlank("", "");
      String string1 = StringUtils.rightPad("", 0, "");
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      float[] floatArray0 = new float[5];
      String string0 = StringUtils.join(floatArray0, 'R');
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("0.0R0.0R0.0R0.0R0.0", "0.0R0.0R0.0R0.0R0.0", 4);
      assertEquals(4, stringArray0.length);
      
      String string1 = StringUtils.stripToNull("0.0R0.0R0.0R0.0R0.0");
      assertNotNull(string1);
      assertEquals("0.0R0.0R0.0R0.0R0.0", string1);
      
      String string2 = StringUtils.substring("8wh9%", 4, (-3053));
      assertEquals("", string2);
      
      String string3 = StringUtils.lowerCase("34)C&qVZV#z-gI</'vV");
      assertEquals("34)c&qvzv#z-gi</'vv", string3);
      
      String[] stringArray1 = StringUtils.split("");
      String string4 = StringUtils.upperCase("34)C&qVZV#z-gI</'vV");
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray1);
      String string5 = StringUtils.abbreviate("FccD-$(ck", "", 2125);
      assertEquals("FccD-$(ck", string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "34)c&qvzv#z-gi</'vv");
      assertTrue(int1 == int0);
      
      String string6 = StringUtils.truncate("0.0R0.0R0.0R0.0R0.0", 866);
      assertTrue(string6.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String[] stringArray2 = StringUtils.split("0.0R0.0R0.0R0.0R0.0", "cbs");
      assertNotSame(stringArray2, stringArray0);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      float[] floatArray0 = new float[1];
      String string0 = StringUtils.join(floatArray0, '3');
      assertEquals("0.0", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("0.0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      StringUtils.capitalize("");
      StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", Integer.MAX_VALUE);
      StringUtils.removeEnd("", "");
      StringUtils.leftPad("", 26, "");
      StringUtils.containsIgnoreCase("", "\r");
      StringUtils.lastIndexOf((CharSequence) "", 3, 30);
      StringUtils.splitPreserveAllTokens((String) null);
      StringUtils.substring("=V`uH&CM/U\rBz-M", (-1), 30);
      StringUtils.removeStart("", (String) null);
      StringUtils.join((Object[]) null, 'a', (-1), 880);
      StringUtils.join((double[]) null, '&', 3, (-1));
      StringUtils.containsNone((CharSequence) "M", (char[]) null);
      StringUtils.appendIfMissingIgnoreCase("\r", "", (CharSequence[]) null);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("=V`uH&CM/U\rBz-M");
      Charset charset1 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 96, 96);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = null;
      String[] stringArray0 = new String[0];
      StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = "";
      StringUtils.prependIfMissing("", (CharSequence) null, charSequenceArray0);
      charSequenceArray0[1] = (CharSequence) "";
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.prependIfMissingIgnoreCase("?n", "?n", stringArray0);
      assertEquals("?n", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("?n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.toRootLowerCase("\r");
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("\r", "\n");
      boolean boolean1 = StringUtils.isAllUpperCase("\r");
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("#W&<o!j.VIT^3-;?,&", (String[]) null, (String[]) null);
      assertEquals("#W&<o!j.VIT^3-;?,&", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("#W&<o!j.VIT^3-;?,&");
      assertEquals(18, intArray0.length);
      
      StringUtils.lastIndexOf((CharSequence) "#W&<o!j.VIT^3-;?,&", (CharSequence) "#W&<o!j.VIT^3-;?,&");
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("#W&<o!j.VIT^3-;?,&", "#W&<o!j.VIT^3-;?,&");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.rotate(" ", (-15));
      assertEquals(" ", string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      String string2 = StringUtils.join(byteArray0, 'A', 0, 0);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.removeStart("\n", "");
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      StringUtils.leftPad("(8-Mx#!3JxGUl $", 100);
      StringUtils.containsIgnoreCase("                                                                                     (8-Mx#!3JxGUl $", "                                                                                     (8-Mx#!3JxGUl $");
      StringUtils.isAllUpperCase("                                                                                     (8-Mx#!3JxGUl $");
      StringUtils.repeat('O', 100);
      StringUtils.isNotBlank("                                                                                     (8-Mx#!3JxGUl $");
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "(8-Mx#!3JxGUl $";
      charSequenceArray0[1] = (CharSequence) "                                                                                     (8-Mx#!3JxGUl $";
      charSequenceArray0[2] = (CharSequence) "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO";
      charSequenceArray0[3] = (CharSequence) "(8-Mx#!3JxGUl $";
      charSequenceArray0[4] = (CharSequence) "(8-Mx#!3JxGUl $";
      StringUtils.isAllEmpty(charSequenceArray0);
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.trimToEmpty("                                                                                     (8-Mx#!3JxGUl $");
      StringUtils.uncapitalize("(8-Mx#!3JxGUl $");
      StringUtils.equals(charSequenceArray0[2], charSequenceArray0[3]);
      StringUtils.isAnyEmpty(charSequenceArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(8-Mx#!3JxGUl $";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("                                                                                     (8-Mx#!3JxGUl $", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.right("", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      String string0 = StringUtils.upperCase("<mO.>+");
      assertEquals("<MO.>+", string0);
      
      String string1 = StringUtils.uncapitalize("<mO.>+");
      boolean boolean0 = StringUtils.isAllUpperCase("<MO.>+");
      int int0 = StringUtils.countMatches((CharSequence) "<MO.>+", (CharSequence) "<mO.>+");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("<mO.>+", "<MO.>+");
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.removeStart("<mO.>+", "hdu");
      assertEquals("<mO.>+", string2);
      
      String string3 = StringUtils.swapCase("Locale must not be null");
      assertEquals("lOCALE MUST NOT BE NULL", string3);
      
      String string4 = StringUtils.remove("<mO.>+", 'H');
      assertTrue(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.prependIfMissingIgnoreCase("\r", "\n", charSequenceArray0);
      assertEquals("\n\r", string0);
      
      String string1 = StringUtils.chomp("\n");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.junitpioneer.jupiter.StdIoExtension", 629);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.removeStart("\n", "\r");
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      boolean boolean0 = StringUtils.containsIgnoreCase("QM$30v%Fe:K7G~Y7W", "QM$30v%Fe:K7G~Y7W");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      String string0 = StringUtils.right(" 7P", 615);
      assertEquals(" 7P", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      StringUtils.upperCase("<mO.>+");
      StringUtils.uncapitalize("<mO.>+");
      StringUtils.isAllUpperCase("<MO.>+");
      StringUtils.countMatches((CharSequence) "<MO.>+", (CharSequence) "<mO.>+");
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("DD", string0);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\n", "\n", (-1));
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.removeEndIgnoreCase("\r", "\r");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.substringAfterLast("", " ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      String string0 = StringUtils.removeAll((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '7', 15, 578);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.join((Object[]) stringArray0, " h-BaO$x");
      assertNotNull(string0);
      assertEquals(" h-BaO$x", string0);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("M%5v $.1_", "M");
      String string0 = StringUtils.normalizeSpace("Locale must not be null");
      assertEquals("Locale must not be null", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("M");
      assertFalse(boolean0);
      
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string1);
      assertEquals("%5v $.1_", string1);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Object varargs must not be null", "} 6f]Bcj>_S;!_K o");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String[] stringArray0 = StringUtils.split(" ", "\r", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(":2[}3];:", "\" should ae a parenM context.");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      String string0 = "Strings must not be null";
      StringUtils.stripToNull("Strings must not be null");
      StringUtils.startsWithIgnoreCase("Strings must not be null", "Strings must not be null");
      StringUtils.replaceOnceIgnoreCase("Strings must not be null", "Strings must not be null", "Strings must not be null");
      StringUtils.splitPreserveAllTokens("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", "Strings must not be null");
      String string1 = "Test method must declare at least one parameter: ";
      String string2 = ".n48Hlxq6*";
      try { 
        StringUtils.getBytes("Test method must declare at least one parameter: ", ".n48Hlxq6*");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("_GCw]ljHA2?`4d", "_GCw]ljHA2?`4d", "_GCw]ljHA2?`4d");
      assertEquals("_GCw]ljHA2?`4d", string0);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'V');
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.rightPad("", 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.truncate("gU;Z[lZA)@gz", 0);
      String string3 = StringUtils.substringBefore("OkEBYU4LVo0WvdM,", " or any enclosing class.");
      assertEquals("OkEBYU4LVo0WvdM,", string3);
      
      StringUtils.lastIndexOf((CharSequence) "OkEBYU4LVo0WvdM,", 21);
      boolean boolean0 = StringUtils.startsWithIgnoreCase("OkEBYU4LVo0WvdM,", charSequenceArray0[3]);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[4]);
      StringUtils.reverse(" or any enclosing class.");
      String string4 = StringUtils.EMPTY;
      int int2 = StringUtils.indexOfDifference((CharSequence) "fxZ'", (CharSequence) "OkEBYU4LVo0WvdM,");
      assertTrue(int2 == int0);
      
      boolean boolean2 = StringUtils.containsAny(charSequenceArray0[4], (CharSequence) null);
      assertFalse(boolean2 == boolean1);
      
      String string5 = StringUtils.replaceChars("", "eZc6D+>", "a");
      assertTrue(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("wauJwB", "wauJwB");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      StringUtils.split("NM0Z", "NM0Z", 2682);
      StringUtils.join((int[]) null, 'd');
      StringUtils.wrap((String) null, 'd');
      StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      StringUtils.substringAfterLast("0[+NT1}un:&<c", "0[+NT1}un:&<c");
      String string0 = StringUtils.replaceIgnoreCase("<mO", "StopatchExenion", "~#MsKeGDJ kE", 25);
      String string1 = StringUtils.truncate("1nBDP!9VV1nBDP!9VV", 2682, 939);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.replaceChars(" ", "", " ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      StringUtils.defaultIfBlank((String) null, (String) null);
      StringUtils.mid("\"rh3Mf[=XK", (-1168), (-1168));
      StringUtils.toCodePoints((CharSequence) null);
      String string0 = "xmY.x&Pt2aP&NOpGUU'cbs";
      String string1 = "{";
      // Undeclared exception!
      try { 
        StringUtils.truncate("{", (-1168));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      String string0 = StringUtils.truncate("d", 2824);
      assertNotNull(string0);
      assertEquals("d", string0);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      float[] floatArray0 = new float[0];
      StringUtils.join(floatArray0, '\'');
      StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      StringUtils.removeEnd("", "\r");
      StringUtils.leftPad("", 0, "");
      StringUtils.containsIgnoreCase("", "\r");
      int int0 = 0;
      StringUtils.lastIndexOf((CharSequence) "", 0, 0);
      StringUtils.splitPreserveAllTokens((String) null);
      String string0 = "#[*xmRU";
      StringUtils.substring("#[*xmRU", (-282), (-282));
      StringUtils.removeStart("", "");
      StringUtils.join((Object[]) null, 'a', 2486, 0);
      StringUtils.defaultIfBlank("", (String) null);
      StringUtils.join((double[]) null, 'a', 2486, (-1));
      char[] charArray0 = new char[0];
      StringUtils.containsNone((CharSequence) "", charArray0);
      // Undeclared exception!
      try { 
        StringUtils.joinWith("/Cf", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '?', 76, 2480);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.reverseDelimited("", 'D');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      String string0 = "";
      StringUtils.removePattern("", "");
      StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-720));
      String string1 = null;
      StringUtils.removeEnd("", (String) null);
      StringUtils.leftPad("", (-559), "");
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-720);
      floatArray0[4] = (float) (-720);
      floatArray0[5] = (float) (-720);
      floatArray0[6] = (float) (-559);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '0', (-720), (-559));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -720
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "\n", 0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      StringUtils.indexOfDifference((CharSequence[]) null);
      StringUtils.difference("", "");
      StringUtils.removeEndIgnoreCase("", "w)BvAysU#fDg*2*|8)");
      StringUtils.replaceAll("", "\n", "Hd['p");
      StringUtils.trimToNull("j2R0^]-HL]tT-Zy[5");
      StringUtils.compare("", "");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)82;
      try { 
        StringUtils.toString(byteArray0, "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      StringUtils.mid("*8Qx,P", (-1168), (-1168));
      StringUtils.toCodePoints(" vs ");
      StringUtils.truncate("xmY.x&Pt2aP&NOpGUU'cbs", 127);
      StringUtils.replaceChars("b", "xmY.x&Pt2aP&NOpGUU'cbs", "CmRj=6Fn9'r0QeQS");
      StringUtils.trimToNull("");
      StringUtils.getIfEmpty((String) null, (Supplier<String>) null);
      StringUtils.defaultString("xmY.x&Pt2aP&NOpGUU'cbs");
      Locale locale0 = Locale.ROOT;
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0);
      Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) list0);
      locale0.getDisplayName();
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "xmY.x&Pt2aP&NOpGUU'cbs", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      String string0 = StringUtils.replaceChars("<\"|DY{5rARGB?wy*'", "<\"|DY{5rARGB?wy*'", "<\"|DY{5rARGB?wy*'");
      assertEquals("<\"|DY{5rARGB?wy*'", string0);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      String string0 = "cbs";
      StringUtils.difference("(?V9kmrjyQ<34", "cbs");
      String string1 = null;
      String string2 = "xmY.x&Pt2aP&NOpGUU'";
      StringUtils.wrapIfMissing((String) null, "xmY.x&Pt2aP&NOpGUU'");
      int int0 = 0;
      StringUtils.indexOfIgnoreCase((CharSequence) "cbs", (CharSequence) null, 0);
      StringUtils.wrap("", "cbs");
      int int1 = 2;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("cbs", 0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("ZnYB+p;%%m?XN3#");
      assertEquals(15, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("%Yho]6Ekx", "%Yho]6Ekx");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      String string0 = StringUtils.swapCase("k.+l/c%<N1HM8:A_d<k");
      assertEquals("K.+L/C%<n1hm8:a_D<K", string0);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      StringUtils.firstNonEmpty((String[]) null);
      StringUtils.trimToNull((String) null);
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("!HY`5:>", "!HY`5:>", "!HY`5:>");
      assertEquals("!HY`5:>", string0);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      // Undeclared exception!
      try { 
        StringUtils.truncate(" ", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      String string0 = StringUtils.defaultString("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" \rSFWf_7U9?A", " \rSFWf_7U9?A");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      String string1 = StringUtils.SPACE;
      StringUtils.substringBefore((String) null, " ");
      StringUtils.replaceFirst(" ", " ", " ");
      StringUtils.replaceChars(" ", ";0EA", ";0EA");
      StringUtils.substringAfter("C=a&soyG", 23);
      StringUtils.endsWithIgnoreCase("C=a&soyG", "C=a&soyG");
      StringUtils.removeEndIgnoreCase("2x>KB(j\"fuVveqt(7(g", " ");
      StringUtils.join((int[]) null, '>', 26, 23);
      StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) "C=a&soyG");
      String string2 = StringUtils.EMPTY;
      StringUtils.abbreviate("G", 122, 122);
      StringUtils.indexOfAnyBut((CharSequence) " ", (CharSequence) "G");
      StringUtils.unwrap("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", '>');
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      String string3 = StringUtils.join((List<?>) arrayList0, 'z', 253, 20);
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "\n", (-1));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace(" ");
      boolean boolean1 = StringUtils.isMixedCase("\r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.SPACE;
      String string1 = StringUtils.trimToNull(" ");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      String[] stringArray0 = new String[4];
      StringUtils.isAllEmpty(stringArray0);
      String string0 = StringUtils.getIfEmpty("LZuJ", (Supplier<String>) null);
      assertEquals("LZuJ", string0);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      StringUtils.join(objectArray0, 'E', 127, 127);
      String string0 = " vs ";
      StringUtils.splitByWholeSeparator("", " vs ", 127);
      StringUtils.toCodePoints(" vs ");
      StringUtils.truncate("v;;~{A1,S5^Gxv", 127);
      StringUtils.replaceChars("v;;~{A1,S5^Gxv", (String) null, "W??H41xa.,C/a");
      StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "v;;~{A1,S5^Gxv", 0);
      StringUtils.trimToNull((String) null);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfEmpty("\r5,q1", supplier0);
      StringUtils.split("W??H41xa.,C/a", "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }");
      StringUtils.defaultString("\r5,q1");
      Locale locale0 = Locale.CANADA;
      locale0.clone();
      // Undeclared exception!
      try { 
        locale0.getDisplayCountry((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[14];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("QM$30v%Fe:K7G~Y7W", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
  }
}
