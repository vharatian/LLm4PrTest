/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:33:04 GMT 2025
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Set;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.IDKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HashCodeBuilder_ESTest extends HashCodeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), 5);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(5);
      int int0 = hashCodeBuilder1.toHashCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      int int0 = hashCodeBuilder0.toHashCode();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "eYFWYm", stringArray0);
      assertEquals((-808547382), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "The object to build a hash code for must not be null", (Collection<String>) linkedList0);
      //  // Unstable assertion: assertEquals((-275057404), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      //  // Unstable assertion: assertEquals(17, hashCodeBuilder0.toHashCode());
      
      int int0 = HashCodeBuilder.reflectionHashCode((-1), (-1), (Object) " must be static.", true);
      //  // Unstable assertion: assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      int int0 = HashCodeBuilder.reflectionHashCode(35, 2567, object0, false);
      assertEquals(35, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = HashCodeBuilder.reflectionHashCode(2567, (-869), (Object) intArray0[2], true);
      assertEquals((-2230719), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      
      Integer integer0 = new Integer((-1368));
      int int0 = HashCodeBuilder.reflectionHashCode((-1), (int) (short)5, (Object) integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(32);
      int int0 = HashCodeBuilder.reflectionHashCode(Integer.MAX_VALUE, Integer.MAX_VALUE, (Object) integer0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      int int0 = HashCodeBuilder.reflectionHashCode((-5043), (-5043), object0);
      assertEquals((-5043), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = HashCodeBuilder.isRegistered(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Set<IDKey> set0 = HashCodeBuilder.getRegistry();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(intArray0);
      Integer integer0 = hashCodeBuilder1.build();
      assertEquals(0, hashCodeBuilder0.toHashCode());
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-19299629), (-19299629));
      Integer integer0 = hashCodeBuilder0.build();
      assertEquals((-19299629), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-2013), 869);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((char[]) null);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      hashCodeBuilder1.append(booleanArray0);
      assertEquals((-1069718114), (int)hashCodeBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(1, 1);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      hashCodeBuilder0.append(shortArray0);
      assertEquals(0, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-381);
      shortArray0[1] = (short)35;
      shortArray0[2] = (short) (-418);
      shortArray0[3] = (short)8;
      hashCodeBuilder0.append(shortArray0);
      assertEquals((-1638518475), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      Object[] objectArray0 = new Object[2];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((short) (-1));
      hashCodeBuilder1.append(objectArray0);
      assertEquals(0, hashCodeBuilder0.toHashCode());
      assertEquals(0, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-2849), (-1035));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper((-2849));
      String[] stringArray0 = new String[4];
      hashCodeBuilder1.append((Object[]) stringArray0);
      assertEquals((-1759384790), (int)hashCodeBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), 127);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 127;
      hashCodeBuilder0.append(longArray0);
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((short) (-1));
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (short) (-1);
      hashCodeBuilder1.append(floatArray0);
      assertEquals(0, (int)hashCodeBuilder0.build());
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-2013), 869);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((char[]) null);
      boolean[] booleanArray0 = new boolean[8];
      hashCodeBuilder1.append(booleanArray0);
      float[] floatArray0 = new float[2];
      hashCodeBuilder0.append(floatArray0);
      assertEquals((-562012721), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      char[] charArray0 = new char[9];
      charArray0[1] = 'B';
      charArray0[2] = '-';
      hashCodeBuilder0.append(charArray0);
      hashCodeBuilder0.append((double[]) null);
      assertEquals((-893836780), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(intArray0);
      hashCodeBuilder1.append((char[]) null);
      assertEquals(0, (int)hashCodeBuilder0.build());
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)11;
      hashCodeBuilder0.append(byteArray0);
      assertEquals(0, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((byte) (-72));
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-72);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(intArray0);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(0.0);
      hashCodeBuilder3.append(false);
      assertEquals(0, hashCodeBuilder3.toHashCode());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1219));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append('3');
      hashCodeBuilder1.append(false);
      assertEquals((-1548129), hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      hashCodeBuilder0.append((short) (-1));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1);
      hashCodeBuilder0.append(doubleArray0);
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1219));
      hashCodeBuilder0.append((short) (-1967));
      assertEquals((-748), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-2849), (-1035));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((long) (short) (-3245));
      hashCodeBuilder1.append((short)32);
      hashCodeBuilder0.append(false);
      hashCodeBuilder1.append((Object) null);
      assertEquals((-41685376), hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(435.565F);
      hashCodeBuilder1.append((-2443L));
      assertEquals((-830842803), hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append(1);
      assertEquals(630, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((-1111));
      assertEquals((-482), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), 663);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(663);
      hashCodeBuilder1.append(0.0F);
      assertEquals(0, (int)hashCodeBuilder0.build());
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(1981, 1981);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((byte)7);
      hashCodeBuilder1.append(0.0F);
      assertEquals((-815761584), hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(booleanArray0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((byte) (-72));
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-72);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(intArray0);
      hashCodeBuilder3.append(0.0);
      assertEquals(0, (int)hashCodeBuilder0.build());
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), 43);
      hashCodeBuilder0.append('+');
      assertEquals(0, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(2567, 2567);
      int[] intArray0 = new int[4];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(intArray0);
      hashCodeBuilder1.append('@');
      assertEquals((-473894959), (int)hashCodeBuilder0.build());
      assertEquals((-473894959), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      hashCodeBuilder0.append((byte) (-1));
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, (Collection<String>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-808547382), (-808547382), (Integer) null, false, (Class<? super Integer>) class0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(1062, 1062, linkedHashSet0, true, (Class<? super LinkedHashSet<Integer>>) class0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-2542), (-2542), object0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(68, 68, (Object) ".5Arz6f+?I]HZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((Object) hashCodeBuilder0);
      assertEquals(630, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      char[] charArray0 = new char[9];
      hashCodeBuilder0.append(charArray0);
      assertEquals(1219584725, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = new Integer(39);
      Class<Integer> class0 = Integer.TYPE;
      int int0 = HashCodeBuilder.reflectionHashCode(39, 39, integer0, true, (Class<? super Integer>) class0, (String[]) null);
      //  // Unstable assertion: assertEquals(1526, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), 5);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(5);
      hashCodeBuilder1.append((Object) null);
      assertEquals(0, hashCodeBuilder0.toHashCode());
      assertEquals(0, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, 37);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((byte)0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)22;
      hashCodeBuilder1.append(byteArray0);
      assertEquals((-1445777317), (int)hashCodeBuilder0.build());
      assertEquals((-1445777317), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), 5);
      int int0 = hashCodeBuilder0.toHashCode();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((short[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object[] objectArray0 = new Object[1];
      hashCodeBuilder0.append(objectArray0);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((Object[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), 23);
      hashCodeBuilder0.append((long[]) null);
      assertEquals((-23), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      long[] longArray0 = new long[4];
      hashCodeBuilder0.append(longArray0);
      assertEquals(31860737, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((int[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      float[] floatArray0 = new float[1];
      hashCodeBuilder0.append(floatArray0);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((float[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      double[] doubleArray0 = new double[1];
      hashCodeBuilder0.append(doubleArray0);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((byte[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((boolean[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append(true);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder(1, 2340);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd multiplier
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder(40, 40);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[0];
      int int0 = HashCodeBuilder.reflectionHashCode((-1303), (-1303), "76Pbr eYGQ{Alu\u0003", false, (Class<? super String>) class0, stringArray0);
      //  // Unstable assertion: assertEquals(1698883629, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "s 6", true);
      assertEquals(32222022, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[3];
      String[] stringArray0 = new String[2];
      int int0 = HashCodeBuilder.reflectionHashCode((Object) charArray0[0], stringArray0);
      assertEquals(633, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append(2109.65990739);
      assertEquals((-1614683611), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-862), (-862), (Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "The object to build a hash code for must not be null", false);
      //  // Unstable assertion: assertEquals((-275057404), int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), 23);
      hashCodeBuilder0.append((long) 23);
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-973), (-973), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.hashCode();
      assertEquals(17, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      int int0 = HashCodeBuilder.reflectionHashCode((Object) linkedHashSet0, (Collection<String>) linkedHashSet0);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.appendSuper((-2469));
      assertEquals((-1840), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Integer integer0 = hashCodeBuilder0.build();
      assertEquals(17, (int)integer0);
  }
}
